
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bbc  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000899  00000000  00000000  00000e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000050d  00000000  00000000  00001711  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ac  00000000  00000000  00001c20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ee  00000000  00000000  00001dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000039  00000000  00000000  000022ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  000022f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	26 d0       	rcall	.+76     	; 0xe6 <main>
  9a:	2c c0       	rjmp	.+88     	; 0xf4 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <Led_init>:

#include "Led.h"

void Led_init(void) {
    // Set PORTB to outputs
    DDRB = 0xFF;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	84 b9       	out	0x04, r24	; 4
  a2:	08 95       	ret

000000a4 <Taster_init>:
 t2 - ioD6
 t3 - ioD5
 t4 - ioC2
 */
void Taster_init() {
    DDRC |= (1 << 2);
  a4:	3a 9a       	sbi	0x07, 2	; 7
    DDRD |= (1 << 7) | (1 << 6) | (1 << 5);
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	80 6e       	ori	r24, 0xE0	; 224
  aa:	8a b9       	out	0x0a, r24	; 10
  ac:	08 95       	ret

000000ae <Taster1_get>:

/**
 Taster1 - ioD7
 */
uint8_t Taster1_get(void) {
    int state = PIND;
  ae:	89 b1       	in	r24, 0x09	; 9
    if ( (PIND & (1<<7)) == 0 ) {
  b0:	89 b1       	in	r24, 0x09	; 9
  b2:	80 95       	com	r24
        return 1;
    } else {
        return 0;
    }
}
  b4:	88 1f       	adc	r24, r24
  b6:	88 27       	eor	r24, r24
  b8:	88 1f       	adc	r24, r24
  ba:	08 95       	ret

000000bc <Taster2_get>:

/**
Taster1 - ioD6
*/
uint8_t Taster2_get(void) {
    uint8_t state = PIND;
  bc:	89 b1       	in	r24, 0x09	; 9
  be:	86 fb       	bst	r24, 6
  c0:	88 27       	eor	r24, r24
  c2:	80 f9       	bld	r24, 0
    if ( (state & (1<<6)) == 0 ) {
        return RETURN_VALUE_LOW;
    } else {
        return RETURN_VALUE_HIGH;
    }
}
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	89 27       	eor	r24, r25
  c8:	08 95       	ret

000000ca <Taster3_get>:

/**
Taster1 - ioD5
*/
uint8_t Taster3_get(void) {
    uint8_t state = PIND;
  ca:	89 b1       	in	r24, 0x09	; 9
  cc:	85 fb       	bst	r24, 5
  ce:	88 27       	eor	r24, r24
  d0:	80 f9       	bld	r24, 0
    if ( (state & (1<<5)) == 0 ) {
        return RETURN_VALUE_LOW;
    } else {
        return RETURN_VALUE_HIGH;
    }
}
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	89 27       	eor	r24, r25
  d6:	08 95       	ret

000000d8 <Taster4_get>:

/**
Taster1 - ioC2
*/
uint8_t Taster4_get(void) {
    uint8_t state = PINC;
  d8:	86 b1       	in	r24, 0x06	; 6
  da:	82 fb       	bst	r24, 2
  dc:	88 27       	eor	r24, r24
  de:	80 f9       	bld	r24, 0
    if ( (state & (1<<2)) == 0 ) {
        return RETURN_VALUE_LOW;
    } else {
        return RETURN_VALUE_HIGH;
    }
}
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	89 27       	eor	r24, r25
  e4:	08 95       	ret

000000e6 <main>:
#include "gpio/Led.h"


int main(void) {
	
    Taster_init();
  e6:	de df       	rcall	.-68     	; 0xa4 <Taster_init>
    Led_init();
  e8:	da df       	rcall	.-76     	; 0x9e <Led_init>
	
    while (1) {
        if (Taster1_get() == 1) {
  ea:	e1 df       	rcall	.-62     	; 0xae <Taster1_get>
            int x = 0;
        }
        if (Taster2_get() == 0) {
  ec:	e7 df       	rcall	.-50     	; 0xbc <Taster2_get>
  ee:	ed df       	rcall	.-38     	; 0xca <Taster3_get>
            int x = 0;
        }
        if (Taster3_get()) {
  f0:	f3 df       	rcall	.-26     	; 0xd8 <Taster4_get>
  f2:	fb cf       	rjmp	.-10     	; 0xea <main+0x4>

000000f4 <_exit>:
            int x = 0;
        }
        if (Taster4_get()) {
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
