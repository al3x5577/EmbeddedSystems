
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000081a  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000077f  00000000  00000000  000009d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000270  00000000  00000000  00001151  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000013c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f4  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000017dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	1a c0       	rjmp	.+52     	; 0xd0 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <util/delay.h>


int main(void) {
	
	DDRB = 0xFF;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	84 b9       	out	0x04, r24	; 4
		
		// Bit 7 in Register PORTB invertieren
		PORTB ^= (1 << 7);
		
		// Bit 2 in Register PORTB invertieren
		PORTB ^= (1 << 2);
  a2:	34 e0       	ldi	r19, 0x04	; 4
	
	
    /* Replace with your application code */
    while (1) {
		
		PORTB = 0xAC;
  a4:	2c ea       	ldi	r18, 0xAC	; 172
		PORTB ^= (1 << 7);
		
		// Bit 2 in Register PORTB invertieren
		PORTB ^= (1 << 2);
		
		PORTB = 0xFF;
  a6:	9f ef       	ldi	r25, 0xFF	; 255
	
	
    /* Replace with your application code */
    while (1) {
		
		PORTB = 0xAC;
  a8:	25 b9       	out	0x05, r18	; 5
		//
		// Uebung
		//
		
		// Bit 1 in Register PORTB setzten
		PORTB |= (1 << 1);
  aa:	29 9a       	sbi	0x05, 1	; 5
		
		// Bit 3 in Register PORTB setzten
		PORTB |= (1 << 3);
  ac:	2b 9a       	sbi	0x05, 3	; 5
		
		// Bit 5 in Register PORTB setzten
		PORTB |= (1 << 5);
  ae:	2d 9a       	sbi	0x05, 5	; 5
		
		// Bit 2 in Register PORTB löschen
		PORTB &= ~(1 << 2);
  b0:	2a 98       	cbi	0x05, 2	; 5
		
		// Bit 4 in Register PORTB löschen
		PORTB &= ~(1 << 4);
  b2:	2c 98       	cbi	0x05, 4	; 5
		
		// Bit 6 in Register PORTB löschen
		PORTB &= ~(1 << 6);
  b4:	2e 98       	cbi	0x05, 6	; 5
		
		// Bit 7 in Register PORTB invertieren
		PORTB ^= (1 << 7);
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	80 58       	subi	r24, 0x80	; 128
  ba:	85 b9       	out	0x05, r24	; 5
		
		// Bit 2 in Register PORTB invertieren
		PORTB ^= (1 << 2);
  bc:	85 b1       	in	r24, 0x05	; 5
  be:	83 27       	eor	r24, r19
  c0:	85 b9       	out	0x05, r24	; 5
		
		PORTB = 0xFF;
  c2:	95 b9       	out	0x05, r25	; 5
		
		// Bit 4 in Register PINB abfragen, ob gesetzt
		if ( (PORTB & (1 << 4)) != 0) {
  c4:	2c 99       	sbic	0x05, 4	; 5
			// Bit ist gesetzt
			PORTB = 0x00;
  c6:	15 b8       	out	0x05, r1	; 5
		}
		
		// Bit 6 in Register PINB abfragen, ob clear
		if ( (PORTB & (1 << 6)) == 0) {
  c8:	2e 99       	sbic	0x05, 6	; 5
  ca:	ee cf       	rjmp	.-36     	; 0xa8 <main+0xa>
			// Bit ist clear
			PORTB = 0xFF;
  cc:	95 b9       	out	0x05, r25	; 5
  ce:	ec cf       	rjmp	.-40     	; 0xa8 <main+0xa>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
