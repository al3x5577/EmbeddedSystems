
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000622  000006b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000622  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800102  00800102  000006b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d1d  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000868  00000000  00000000  000015a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a0e  00000000  00000000  00001e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000418  00000000  00000000  0000281c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005cd  00000000  00000000  00002c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000074b  00000000  00000000  00003201  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0000394c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	d2 c2       	rjmp	.+1444   	; 0x5de <__vector_14>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e2       	ldi	r30, 0x22	; 34
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	c3 d0       	rcall	.+390    	; 0x222 <main>
  9c:	c0 c2       	rjmp	.+1408   	; 0x61e <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <Led_init>:

#include "Led.h"

void Led_init(void) {
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
    // Set PORTB to outputs
    DDRB = 0xFF;
  a8:	84 e2       	ldi	r24, 0x24	; 36
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	fc 01       	movw	r30, r24
  b0:	20 83       	st	Z, r18
    PORTB = 0x00;
  b2:	85 e2       	ldi	r24, 0x25	; 37
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	fc 01       	movw	r30, r24
  b8:	10 82       	st	Z, r1
    
    // Set PORTD 0..4 to outputs
    DDRD |= ( (1 << 4) | (1 << 3) | (1 << 2) | (1 << 1) | (1 << 0));
  ba:	8a e2       	ldi	r24, 0x2A	; 42
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	2a e2       	ldi	r18, 0x2A	; 42
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	f9 01       	movw	r30, r18
  c4:	20 81       	ld	r18, Z
  c6:	2f 61       	ori	r18, 0x1F	; 31
  c8:	fc 01       	movw	r30, r24
  ca:	20 83       	st	Z, r18
    PORTD &= ~( (1 << 4) | (1 << 3) | (1 << 2) | (1 << 1) | (1 << 0));
  cc:	8b e2       	ldi	r24, 0x2B	; 43
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	2b e2       	ldi	r18, 0x2B	; 43
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	f9 01       	movw	r30, r18
  d6:	20 81       	ld	r18, Z
  d8:	20 7e       	andi	r18, 0xE0	; 224
  da:	fc 01       	movw	r30, r24
  dc:	20 83       	st	Z, r18
}
  de:	00 00       	nop
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <turnOnD>:

void turnOnD(uint8_t bit) {
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	1f 92       	push	r1
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62
  f0:	89 83       	std	Y+1, r24	; 0x01
    PORTD |= (1 << bit);
  f2:	8b e2       	ldi	r24, 0x2B	; 43
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	2b e2       	ldi	r18, 0x2B	; 43
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	f9 01       	movw	r30, r18
  fc:	20 81       	ld	r18, Z
  fe:	62 2f       	mov	r22, r18
 100:	29 81       	ldd	r18, Y+1	; 0x01
 102:	42 2f       	mov	r20, r18
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <turnOnD+0x2a>
 10c:	22 0f       	add	r18, r18
 10e:	33 1f       	adc	r19, r19
 110:	4a 95       	dec	r20
 112:	e2 f7       	brpl	.-8      	; 0x10c <turnOnD+0x26>
 114:	26 2b       	or	r18, r22
 116:	fc 01       	movw	r30, r24
 118:	20 83       	st	Z, r18
}
 11a:	00 00       	nop
 11c:	0f 90       	pop	r0
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <turnOffD>:
void turnOffD(uint8_t bit) {
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	1f 92       	push	r1
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
 12e:	89 83       	std	Y+1, r24	; 0x01
    PORTD &= ~(1 << bit);
 130:	8b e2       	ldi	r24, 0x2B	; 43
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	2b e2       	ldi	r18, 0x2B	; 43
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	f9 01       	movw	r30, r18
 13a:	20 81       	ld	r18, Z
 13c:	62 2f       	mov	r22, r18
 13e:	29 81       	ldd	r18, Y+1	; 0x01
 140:	42 2f       	mov	r20, r18
 142:	50 e0       	ldi	r21, 0x00	; 0
 144:	21 e0       	ldi	r18, 0x01	; 1
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <turnOffD+0x2a>
 14a:	22 0f       	add	r18, r18
 14c:	33 1f       	adc	r19, r19
 14e:	4a 95       	dec	r20
 150:	e2 f7       	brpl	.-8      	; 0x14a <turnOffD+0x26>
 152:	20 95       	com	r18
 154:	26 23       	and	r18, r22
 156:	fc 01       	movw	r30, r24
 158:	20 83       	st	Z, r18
}
 15a:	00 00       	nop
 15c:	0f 90       	pop	r0
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <Taster_init>:
 ---------------------
 - DDR Reg has to be set to 0
 - PORT Reg has to be set to 1
 -> Pin is input with pull-up
 */
void Taster_init() {
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
    // set to inputs
    DDRC &= ~(1 << 2);
 16c:	87 e2       	ldi	r24, 0x27	; 39
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	27 e2       	ldi	r18, 0x27	; 39
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	f9 01       	movw	r30, r18
 176:	20 81       	ld	r18, Z
 178:	2b 7f       	andi	r18, 0xFB	; 251
 17a:	fc 01       	movw	r30, r24
 17c:	20 83       	st	Z, r18
    DDRD &= ~( (1 << 7) | (1 << 6) | (1 << 5) );
 17e:	8a e2       	ldi	r24, 0x2A	; 42
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	2a e2       	ldi	r18, 0x2A	; 42
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	f9 01       	movw	r30, r18
 188:	20 81       	ld	r18, Z
 18a:	2f 71       	andi	r18, 0x1F	; 31
 18c:	fc 01       	movw	r30, r24
 18e:	20 83       	st	Z, r18
    
    // enable pull-up
    PORTC |= (1 << 2);
 190:	88 e2       	ldi	r24, 0x28	; 40
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	28 e2       	ldi	r18, 0x28	; 40
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	f9 01       	movw	r30, r18
 19a:	20 81       	ld	r18, Z
 19c:	24 60       	ori	r18, 0x04	; 4
 19e:	fc 01       	movw	r30, r24
 1a0:	20 83       	st	Z, r18
    PORTD |= (1 << 7) | (1 << 6) | (1 << 5);
 1a2:	8b e2       	ldi	r24, 0x2B	; 43
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	2b e2       	ldi	r18, 0x2B	; 43
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	f9 01       	movw	r30, r18
 1ac:	20 81       	ld	r18, Z
 1ae:	20 6e       	ori	r18, 0xE0	; 224
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 83       	st	Z, r18
}
 1b4:	00 00       	nop
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	08 95       	ret

000001bc <Taster1_get>:

/**
 Taster1 - ioD7
 */
uint8_t Taster1_get(void) {
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	00 d0       	rcall	.+0      	; 0x1c2 <Taster1_get+0x6>
 1c2:	cd b7       	in	r28, 0x3d	; 61
 1c4:	de b7       	in	r29, 0x3e	; 62
    int state = PIND;
 1c6:	89 e2       	ldi	r24, 0x29	; 41
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	fc 01       	movw	r30, r24
 1cc:	80 81       	ld	r24, Z
 1ce:	88 2f       	mov	r24, r24
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	9a 83       	std	Y+2, r25	; 0x02
 1d4:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<7)) == 0 ) {
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
 1d8:	9a 81       	ldd	r25, Y+2	; 0x02
 1da:	80 78       	andi	r24, 0x80	; 128
 1dc:	99 27       	eor	r25, r25
 1de:	89 2b       	or	r24, r25
 1e0:	11 f4       	brne	.+4      	; 0x1e6 <Taster1_get+0x2a>
        return TASTER_RETURN_VALUE_LOW;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <Taster1_get+0x2c>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
 1e6:	80 e0       	ldi	r24, 0x00	; 0
    }
}
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <Taster2_get>:

/**
Taster2 - ioD6
*/
uint8_t Taster2_get(void) {
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	1f 92       	push	r1
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
    uint8_t state = PIND;
 1fc:	89 e2       	ldi	r24, 0x29	; 41
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	fc 01       	movw	r30, r24
 202:	80 81       	ld	r24, Z
 204:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<6)) == 0 ) {
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	88 2f       	mov	r24, r24
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	80 74       	andi	r24, 0x40	; 64
 20e:	99 27       	eor	r25, r25
 210:	89 2b       	or	r24, r25
 212:	11 f4       	brne	.+4      	; 0x218 <Taster2_get+0x26>
        return TASTER_RETURN_VALUE_LOW;
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	01 c0       	rjmp	.+2      	; 0x21a <Taster2_get+0x28>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
 218:	80 e0       	ldi	r24, 0x00	; 0
    }
}
 21a:	0f 90       	pop	r0
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <main>:





int main(void) {
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	00 d0       	rcall	.+0      	; 0x228 <main+0x6>
 228:	00 d0       	rcall	.+0      	; 0x22a <main+0x8>
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	de b7       	in	r29, 0x3e	; 62
	
    Led_init();
 22e:	38 df       	rcall	.-400    	; 0xa0 <Led_init>
	Taster_init();
 230:	99 df       	rcall	.-206    	; 0x164 <Taster_init>
    Timer_init();
 232:	63 d1       	rcall	.+710    	; 0x4fa <Timer_init>
 234:	78 94       	sei
	sei();
 236:	19 82       	std	Y+1, r1	; 0x01
	
    uint8_t state_testBoard = 0;
 238:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t last_time = 0;
 23a:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t  toggle_asdf = 1;
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	8c 83       	std	Y+4, r24	; 0x04
    Toggle PORTB every 500ms -> LEDs blink with 1 Hz, accuracy: +- 70 us
    (There could be a lag if timer_count was cleared, approximately every 65,5 seconds)
    */
    while (1) {
		
		if (Taster2_get()) {
 240:	d8 df       	rcall	.-80     	; 0x1f2 <Taster2_get>
 242:	88 23       	and	r24, r24
 244:	31 f0       	breq	.+12     	; 0x252 <main+0x30>
 246:	81 e0       	ldi	r24, 0x01	; 1
			toggle_asdf = !toggle_asdf;
 248:	9c 81       	ldd	r25, Y+4	; 0x04
 24a:	99 23       	and	r25, r25
 24c:	09 f0       	breq	.+2      	; 0x250 <main+0x2e>
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	8c 83       	std	Y+4, r24	; 0x04
		}
		
		if (toggle_asdf) {
 252:	8c 81       	ldd	r24, Y+4	; 0x04
 254:	88 23       	and	r24, r24
 256:	f9 f0       	breq	.+62     	; 0x296 <main+0x74>
			// Check if time difference is more than 500 ms
			if ( (Timer_getTick() - last_time) >= 500 ) {
 258:	ae d1       	rcall	.+860    	; 0x5b6 <Timer_getTick>
 25a:	9c 01       	movw	r18, r24
 25c:	8a 81       	ldd	r24, Y+2	; 0x02
 25e:	9b 81       	ldd	r25, Y+3	; 0x03
 260:	a9 01       	movw	r20, r18
 262:	48 1b       	sub	r20, r24
 264:	59 0b       	sbc	r21, r25
 266:	ca 01       	movw	r24, r20
 268:	84 3f       	cpi	r24, 0xF4	; 244
 26a:	91 40       	sbci	r25, 0x01	; 1
 26c:	c0 f0       	brcs	.+48     	; 0x29e <main+0x7c>
				last_time = Timer_getTick();
 26e:	a3 d1       	rcall	.+838    	; 0x5b6 <Timer_getTick>
 270:	9b 83       	std	Y+3, r25	; 0x03
 272:	8a 83       	std	Y+2, r24	; 0x02
 274:	89 81       	ldd	r24, Y+1	; 0x01
				
				// toggle leds
				if (state_testBoard) {
 276:	88 23       	and	r24, r24
 278:	31 f0       	breq	.+12     	; 0x286 <main+0x64>
 27a:	19 82       	std	Y+1, r1	; 0x01
					state_testBoard = 0;
 27c:	85 e2       	ldi	r24, 0x25	; 37
					PORTB = 0x00;
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	fc 01       	movw	r30, r24
 282:	10 82       	st	Z, r1
 284:	0c c0       	rjmp	.+24     	; 0x29e <main+0x7c>
 286:	81 e0       	ldi	r24, 0x01	; 1
					}else {
					state_testBoard = 1;
 288:	89 83       	std	Y+1, r24	; 0x01
 28a:	85 e2       	ldi	r24, 0x25	; 37
					PORTB = 0xFF;
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	2f ef       	ldi	r18, 0xFF	; 255
 290:	fc 01       	movw	r30, r24
 292:	20 83       	st	Z, r18
 294:	04 c0       	rjmp	.+8      	; 0x29e <main+0x7c>
				}
			}
		}else {
			PORTB = 0x00;
 296:	85 e2       	ldi	r24, 0x25	; 37
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	fc 01       	movw	r30, r24
 29c:	10 82       	st	Z, r1
		}
        
        
        trafficLight();
 29e:	01 d0       	rcall	.+2      	; 0x2a2 <trafficLight>
 2a0:	cf cf       	rjmp	.-98     	; 0x240 <main+0x1e>

000002a2 <trafficLight>:
        //playground();
    }
 2a2:	cf 93       	push	r28

uint16_t timeVar = 0;
uint8_t traffic_ready = 1;
uint8_t button_pressed = 0;

void trafficLight() {
 2a4:	df 93       	push	r29
 2a6:	cd b7       	in	r28, 0x3d	; 61
 2a8:	de b7       	in	r29, 0x3e	; 62
    switch (trafficLightWithPerson_state) {
 2aa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 2ae:	88 2f       	mov	r24, r24
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	82 30       	cpi	r24, 0x02	; 2
 2b4:	91 05       	cpc	r25, r1
 2b6:	09 f4       	brne	.+2      	; 0x2ba <trafficLight+0x18>
 2b8:	7c c0       	rjmp	.+248    	; 0x3b2 <trafficLight+0x110>
 2ba:	83 30       	cpi	r24, 0x03	; 3
 2bc:	91 05       	cpc	r25, r1
 2be:	34 f4       	brge	.+12     	; 0x2cc <trafficLight+0x2a>
 2c0:	00 97       	sbiw	r24, 0x00	; 0
 2c2:	81 f0       	breq	.+32     	; 0x2e4 <trafficLight+0x42>
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	09 f4       	brne	.+2      	; 0x2ca <trafficLight+0x28>
 2c8:	4e c0       	rjmp	.+156    	; 0x366 <trafficLight+0xc4>
                trafficLightWithPerson_state = AUTO_GREEN_PERSON_RED;
            }
            break;
            
        default:
            break;
 2ca:	13 c1       	rjmp	.+550    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
uint16_t timeVar = 0;
uint8_t traffic_ready = 1;
uint8_t button_pressed = 0;

void trafficLight() {
    switch (trafficLightWithPerson_state) {
 2cc:	85 30       	cpi	r24, 0x05	; 5
 2ce:	91 05       	cpc	r25, r1
 2d0:	09 f4       	brne	.+2      	; 0x2d4 <trafficLight+0x32>
 2d2:	bb c0       	rjmp	.+374    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 2d4:	86 30       	cpi	r24, 0x06	; 6
 2d6:	91 05       	cpc	r25, r1
 2d8:	09 f4       	brne	.+2      	; 0x2dc <trafficLight+0x3a>
 2da:	dc c0       	rjmp	.+440    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 2dc:	04 97       	sbiw	r24, 0x04	; 4
 2de:	09 f4       	brne	.+2      	; 0x2e2 <trafficLight+0x40>
 2e0:	8e c0       	rjmp	.+284    	; 0x3fe <trafficLight+0x15c>
                trafficLightWithPerson_state = AUTO_GREEN_PERSON_RED;
            }
            break;
            
        default:
            break;
 2e2:	07 c1       	rjmp	.+526    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>

void trafficLight() {
    switch (trafficLightWithPerson_state) {
        case AUTO_GREEN_PERSON_RED:
            // set leds
            turnOffD(0);
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	1d df       	rcall	.-454    	; 0x124 <turnOffD>
            turnOffD(1);
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	1a df       	rcall	.-460    	; 0x124 <turnOffD>
            turnOnD(2);
 2f0:	82 e0       	ldi	r24, 0x02	; 2
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	f8 de       	rcall	.-528    	; 0xe6 <turnOnD>
            
            turnOnD(3);
 2f6:	83 e0       	ldi	r24, 0x03	; 3
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	f5 de       	rcall	.-534    	; 0xe6 <turnOnD>
            turnOffD(4);
 2fc:	84 e0       	ldi	r24, 0x04	; 4
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	11 df       	rcall	.-478    	; 0x124 <turnOffD>
 302:	59 d1       	rcall	.+690    	; 0x5b6 <Timer_getTick>
            
            if((Timer_getTick() - timeVar) >= 30000){
 304:	9c 01       	movw	r18, r24
 306:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <timeVar>
 30a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <timeVar+0x1>
 30e:	a9 01       	movw	r20, r18
 310:	48 1b       	sub	r20, r24
 312:	59 0b       	sbc	r21, r25
 314:	ca 01       	movw	r24, r20
 316:	80 33       	cpi	r24, 0x30	; 48
 318:	95 47       	sbci	r25, 0x75	; 117
 31a:	40 f0       	brcs	.+16     	; 0x32c <trafficLight+0x8a>
 31c:	4c d1       	rcall	.+664    	; 0x5b6 <Timer_getTick>
                timeVar = Timer_getTick();
 31e:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <timeVar+0x1>
 322:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <timeVar>
 326:	81 e0       	ldi	r24, 0x01	; 1
                traffic_ready = 1;
 328:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 32c:	47 df       	rcall	.-370    	; 0x1bc <Taster1_get>
            }
            
            if (Taster1_get()) {
 32e:	89 2b       	or	r24, r25
 330:	19 f0       	breq	.+6      	; 0x338 <trafficLight+0x96>
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <button_pressed>
                button_pressed = 1;
 338:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
            }
            
            if(traffic_ready && button_pressed){
 33c:	88 23       	and	r24, r24
 33e:	09 f4       	brne	.+2      	; 0x342 <trafficLight+0xa0>
 340:	cd c0       	rjmp	.+410    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 342:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <button_pressed>
 346:	88 23       	and	r24, r24
 348:	09 f4       	brne	.+2      	; 0x34c <trafficLight+0xaa>
 34a:	c8 c0       	rjmp	.+400    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 34c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
                traffic_ready = 0;
 350:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <button_pressed>
                button_pressed = 0;
 354:	30 d1       	rcall	.+608    	; 0x5b6 <Timer_getTick>
                
                // goto step 1
                timeVar = Timer_getTick();
 356:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <timeVar+0x1>
 35a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <timeVar>
 35e:	81 e0       	ldi	r24, 0x01	; 1
                trafficLightWithPerson_state = AUTO_YELLOW_PERSON_RED;
 360:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
            
            break;
            
        case AUTO_YELLOW_PERSON_RED:
            // set leds
            turnOffD(0);
 364:	bb c0       	rjmp	.+374    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	90 e0       	ldi	r25, 0x00	; 0
            turnOnD(1);
 36a:	dc de       	rcall	.-584    	; 0x124 <turnOffD>
 36c:	81 e0       	ldi	r24, 0x01	; 1
            turnOffD(2);
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	ba de       	rcall	.-652    	; 0xe6 <turnOnD>
 372:	82 e0       	ldi	r24, 0x02	; 2
 374:	90 e0       	ldi	r25, 0x00	; 0
            
            turnOnD(3);
 376:	d6 de       	rcall	.-596    	; 0x124 <turnOffD>
 378:	83 e0       	ldi	r24, 0x03	; 3
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	b4 de       	rcall	.-664    	; 0xe6 <turnOnD>
            turnOffD(4);
 37e:	84 e0       	ldi	r24, 0x04	; 4
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	d0 de       	rcall	.-608    	; 0x124 <turnOffD>
 384:	18 d1       	rcall	.+560    	; 0x5b6 <Timer_getTick>
            
            if((Timer_getTick() - timeVar) >= 5000){
 386:	9c 01       	movw	r18, r24
 388:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <timeVar>
 38c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <timeVar+0x1>
 390:	a9 01       	movw	r20, r18
 392:	48 1b       	sub	r20, r24
 394:	59 0b       	sbc	r21, r25
 396:	ca 01       	movw	r24, r20
 398:	88 38       	cpi	r24, 0x88	; 136
 39a:	93 41       	sbci	r25, 0x13	; 19
 39c:	08 f4       	brcc	.+2      	; 0x3a0 <trafficLight+0xfe>
 39e:	a0 c0       	rjmp	.+320    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
                // goto step 2
                timeVar = Timer_getTick();
 3a0:	0a d1       	rcall	.+532    	; 0x5b6 <Timer_getTick>
 3a2:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <timeVar+0x1>
 3a6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <timeVar>
                trafficLightWithPerson_state = AUTO_RED_PERSON_RED;
 3aa:	82 e0       	ldi	r24, 0x02	; 2
 3ac:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
            }
            break;
            
        case AUTO_RED_PERSON_RED:
            // set leds
            turnOnD(0);
 3b0:	97 c0       	rjmp	.+302    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	90 e0       	ldi	r25, 0x00	; 0
            turnOffD(1);
 3b6:	97 de       	rcall	.-722    	; 0xe6 <turnOnD>
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	b3 de       	rcall	.-666    	; 0x124 <turnOffD>
            turnOffD(2);
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	b0 de       	rcall	.-672    	; 0x124 <turnOffD>
 3c4:	83 e0       	ldi	r24, 0x03	; 3
            
            turnOnD(3);
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	8e de       	rcall	.-740    	; 0xe6 <turnOnD>
 3ca:	84 e0       	ldi	r24, 0x04	; 4
            turnOffD(4);
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	aa de       	rcall	.-684    	; 0x124 <turnOffD>
 3d0:	f2 d0       	rcall	.+484    	; 0x5b6 <Timer_getTick>
 3d2:	9c 01       	movw	r18, r24
            
            if((Timer_getTick() - timeVar) >= 5000){
 3d4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <timeVar>
 3d8:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <timeVar+0x1>
 3dc:	a9 01       	movw	r20, r18
 3de:	48 1b       	sub	r20, r24
 3e0:	59 0b       	sbc	r21, r25
 3e2:	ca 01       	movw	r24, r20
 3e4:	88 38       	cpi	r24, 0x88	; 136
 3e6:	93 41       	sbci	r25, 0x13	; 19
 3e8:	08 f4       	brcc	.+2      	; 0x3ec <trafficLight+0x14a>
 3ea:	7c c0       	rjmp	.+248    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
                timeVar = Timer_getTick();
 3ec:	e4 d0       	rcall	.+456    	; 0x5b6 <Timer_getTick>
 3ee:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <timeVar+0x1>
 3f2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <timeVar>
                trafficLightWithPerson_state = AUTO_RED_PERSON_GREEN;
 3f6:	84 e0       	ldi	r24, 0x04	; 4
 3f8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
            }
            break;
            
        case AUTO_RED_PERSON_GREEN:
            // set leds
            turnOnD(0);
 3fc:	73 c0       	rjmp	.+230    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	71 de       	rcall	.-798    	; 0xe6 <turnOnD>
            turnOffD(1);
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	8d de       	rcall	.-742    	; 0x124 <turnOffD>
            turnOffD(2);
 40a:	82 e0       	ldi	r24, 0x02	; 2
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	8a de       	rcall	.-748    	; 0x124 <turnOffD>
 410:	83 e0       	ldi	r24, 0x03	; 3
            
            turnOffD(3);
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	87 de       	rcall	.-754    	; 0x124 <turnOffD>
 416:	84 e0       	ldi	r24, 0x04	; 4
 418:	90 e0       	ldi	r25, 0x00	; 0
            turnOnD(4);
 41a:	65 de       	rcall	.-822    	; 0xe6 <turnOnD>
 41c:	cc d0       	rcall	.+408    	; 0x5b6 <Timer_getTick>
 41e:	9c 01       	movw	r18, r24
            
            if((Timer_getTick() - timeVar) >= 30000){
 420:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <timeVar>
 424:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <timeVar+0x1>
 428:	a9 01       	movw	r20, r18
 42a:	48 1b       	sub	r20, r24
 42c:	59 0b       	sbc	r21, r25
 42e:	ca 01       	movw	r24, r20
 430:	80 33       	cpi	r24, 0x30	; 48
 432:	95 47       	sbci	r25, 0x75	; 117
                timeVar = Timer_getTick();
 434:	08 f4       	brcc	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 436:	58 c0       	rjmp	.+176    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 438:	be d0       	rcall	.+380    	; 0x5b6 <Timer_getTick>
 43a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <timeVar+0x1>
 43e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <timeVar>
                trafficLightWithPerson_state = AUTO_RED_PERSON_RED_2;
 442:	85 e0       	ldi	r24, 0x05	; 5
            }
            break;
 444:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
            
        case AUTO_RED_PERSON_RED_2:
            // set leds
            turnOnD(0);
 448:	4f c0       	rjmp	.+158    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	90 e0       	ldi	r25, 0x00	; 0
            turnOffD(1);
 44e:	4b de       	rcall	.-874    	; 0xe6 <turnOnD>
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	67 de       	rcall	.-818    	; 0x124 <turnOffD>
            turnOffD(2);
 456:	82 e0       	ldi	r24, 0x02	; 2
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	64 de       	rcall	.-824    	; 0x124 <turnOffD>
            
            turnOnD(3);
 45c:	83 e0       	ldi	r24, 0x03	; 3
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	42 de       	rcall	.-892    	; 0xe6 <turnOnD>
            turnOffD(4);
 462:	84 e0       	ldi	r24, 0x04	; 4
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	5e de       	rcall	.-836    	; 0x124 <turnOffD>
            
            if((Timer_getTick() - timeVar) >= 5000){
 468:	a6 d0       	rcall	.+332    	; 0x5b6 <Timer_getTick>
 46a:	9c 01       	movw	r18, r24
 46c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <timeVar>
 470:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <timeVar+0x1>
 474:	a9 01       	movw	r20, r18
 476:	48 1b       	sub	r20, r24
 478:	59 0b       	sbc	r21, r25
 47a:	ca 01       	movw	r24, r20
 47c:	88 38       	cpi	r24, 0x88	; 136
 47e:	93 41       	sbci	r25, 0x13	; 19
                timeVar = Timer_getTick();
 480:	a8 f1       	brcs	.+106    	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 482:	99 d0       	rcall	.+306    	; 0x5b6 <Timer_getTick>
 484:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <timeVar+0x1>
 488:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <timeVar>
                trafficLightWithPerson_state = AUTO_YELLOWRED_PERSON_RED;
 48c:	86 e0       	ldi	r24, 0x06	; 6
 48e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
            }
            break;
            
        case AUTO_YELLOWRED_PERSON_RED:
            // set leds
            turnOnD(0);
 492:	2c c0       	rjmp	.+88     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	26 de       	rcall	.-948    	; 0xe6 <turnOnD>
            turnOnD(1);
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	23 de       	rcall	.-954    	; 0xe6 <turnOnD>
 4a0:	82 e0       	ldi	r24, 0x02	; 2
            turnOffD(2);
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	3f de       	rcall	.-898    	; 0x124 <turnOffD>
 4a6:	83 e0       	ldi	r24, 0x03	; 3
 4a8:	90 e0       	ldi	r25, 0x00	; 0
            
            turnOnD(3);
 4aa:	1d de       	rcall	.-966    	; 0xe6 <turnOnD>
 4ac:	84 e0       	ldi	r24, 0x04	; 4
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	39 de       	rcall	.-910    	; 0x124 <turnOffD>
            turnOffD(4);
 4b2:	81 d0       	rcall	.+258    	; 0x5b6 <Timer_getTick>
 4b4:	9c 01       	movw	r18, r24
 4b6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <timeVar>
            
            if((Timer_getTick() - timeVar) >= 5000){
 4ba:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <timeVar+0x1>
 4be:	a9 01       	movw	r20, r18
 4c0:	48 1b       	sub	r20, r24
 4c2:	59 0b       	sbc	r21, r25
 4c4:	ca 01       	movw	r24, r20
 4c6:	88 38       	cpi	r24, 0x88	; 136
 4c8:	93 41       	sbci	r25, 0x13	; 19
 4ca:	90 f0       	brcs	.+36     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4cc:	74 d0       	rcall	.+232    	; 0x5b6 <Timer_getTick>
 4ce:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <timeVar+0x1>
 4d2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <timeVar>
                timeVar = Timer_getTick();
 4d6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 4da:	0a c0       	rjmp	.+20     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4dc:	00 00       	nop
 4de:	09 c0       	rjmp	.+18     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4e0:	00 00       	nop
                trafficLightWithPerson_state = AUTO_GREEN_PERSON_RED;
 4e2:	07 c0       	rjmp	.+14     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4e4:	00 00       	nop
            }
            break;
 4e6:	05 c0       	rjmp	.+10     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
                // goto step 1
                timeVar = Timer_getTick();
                trafficLightWithPerson_state = AUTO_YELLOW_PERSON_RED;
            }
            
            break;
 4e8:	00 00       	nop
 4ea:	03 c0       	rjmp	.+6      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
            if((Timer_getTick() - timeVar) >= 5000){
                // goto step 2
                timeVar = Timer_getTick();
                trafficLightWithPerson_state = AUTO_RED_PERSON_RED;
            }
            break;
 4ec:	00 00       	nop
 4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
            
            if((Timer_getTick() - timeVar) >= 5000){
                timeVar = Timer_getTick();
                trafficLightWithPerson_state = AUTO_RED_PERSON_GREEN;
            }
            break;
 4f0:	00 00       	nop
 4f2:	00 00       	nop
            
            if((Timer_getTick() - timeVar) >= 30000){
                timeVar = Timer_getTick();
                trafficLightWithPerson_state = AUTO_RED_PERSON_RED_2;
            }
            break;
 4f4:	df 91       	pop	r29
 4f6:	cf 91       	pop	r28
            
            if((Timer_getTick() - timeVar) >= 5000){
                timeVar = Timer_getTick();
                trafficLightWithPerson_state = AUTO_YELLOWRED_PERSON_RED;
            }
            break;
 4f8:	08 95       	ret

000004fa <Timer_init>:

#include "Timer.h"

volatile uint16_t timer_count = 0;

void Timer_init() { // datasheet page 97
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	cd b7       	in	r28, 0x3d	; 61
 500:	de b7       	in	r29, 0x3e	; 62
    // set mode to clear timer on compare (CTC)
    TCCR0B &= ~(1 << WGM02);
 502:	85 e4       	ldi	r24, 0x45	; 69
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	25 e4       	ldi	r18, 0x45	; 69
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	f9 01       	movw	r30, r18
 50c:	20 81       	ld	r18, Z
 50e:	27 7f       	andi	r18, 0xF7	; 247
 510:	fc 01       	movw	r30, r24
 512:	20 83       	st	Z, r18
    TCCR0A |= (1 << WGM01);
 514:	84 e4       	ldi	r24, 0x44	; 68
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	24 e4       	ldi	r18, 0x44	; 68
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	f9 01       	movw	r30, r18
 51e:	20 81       	ld	r18, Z
 520:	22 60       	ori	r18, 0x02	; 2
 522:	fc 01       	movw	r30, r24
 524:	20 83       	st	Z, r18
    TCCR0A &= ~(1 << WGM00);
 526:	84 e4       	ldi	r24, 0x44	; 68
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	24 e4       	ldi	r18, 0x44	; 68
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	f9 01       	movw	r30, r18
 530:	20 81       	ld	r18, Z
 532:	2e 7f       	andi	r18, 0xFE	; 254
 534:	fc 01       	movw	r30, r24
 536:	20 83       	st	Z, r18
    
    // set OCR0A-reg (top value of timer)
    OCR0A = 0x7C;   // dez 124; range 0 - 124 -> 125 cycles till interrupt
 538:	87 e4       	ldi	r24, 0x47	; 71
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	2c e7       	ldi	r18, 0x7C	; 124
 53e:	fc 01       	movw	r30, r24
 540:	20 83       	st	Z, r18
    
    // set prescaler to 1/8
    TCCR0B &= ~(1 << CS02);
 542:	85 e4       	ldi	r24, 0x45	; 69
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	25 e4       	ldi	r18, 0x45	; 69
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	f9 01       	movw	r30, r18
 54c:	20 81       	ld	r18, Z
 54e:	2b 7f       	andi	r18, 0xFB	; 251
 550:	fc 01       	movw	r30, r24
 552:	20 83       	st	Z, r18
    TCCR0B |= (1 << CS01);
 554:	85 e4       	ldi	r24, 0x45	; 69
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	25 e4       	ldi	r18, 0x45	; 69
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	f9 01       	movw	r30, r18
 55e:	20 81       	ld	r18, Z
 560:	22 60       	ori	r18, 0x02	; 2
 562:	fc 01       	movw	r30, r24
 564:	20 83       	st	Z, r18
    TCCR0B &= ~(1 << CS00);
 566:	85 e4       	ldi	r24, 0x45	; 69
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	25 e4       	ldi	r18, 0x45	; 69
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	f9 01       	movw	r30, r18
 570:	20 81       	ld	r18, Z
 572:	2e 7f       	andi	r18, 0xFE	; 254
 574:	fc 01       	movw	r30, r24
 576:	20 83       	st	Z, r18
	
	
	TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
 578:	8e e6       	ldi	r24, 0x6E	; 110
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	2e e6       	ldi	r18, 0x6E	; 110
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	f9 01       	movw	r30, r18
 582:	20 81       	ld	r18, Z
 584:	2b 7f       	andi	r18, 0xFB	; 251
 586:	fc 01       	movw	r30, r24
 588:	20 83       	st	Z, r18
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
 58a:	8e e6       	ldi	r24, 0x6E	; 110
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	2e e6       	ldi	r18, 0x6E	; 110
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	f9 01       	movw	r30, r18
 594:	20 81       	ld	r18, Z
 596:	22 60       	ori	r18, 0x02	; 2
 598:	fc 01       	movw	r30, r24
 59a:	20 83       	st	Z, r18
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
 59c:	8e e6       	ldi	r24, 0x6E	; 110
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	2e e6       	ldi	r18, 0x6E	; 110
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	f9 01       	movw	r30, r18
 5a6:	20 81       	ld	r18, Z
 5a8:	2e 7f       	andi	r18, 0xFE	; 254
 5aa:	fc 01       	movw	r30, r24
 5ac:	20 83       	st	Z, r18
}
 5ae:	00 00       	nop
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
 5b4:	08 95       	ret

000005b6 <Timer_getTick>:

uint16_t Timer_getTick() {
 5b6:	cf 93       	push	r28
 5b8:	df 93       	push	r29
 5ba:	00 d0       	rcall	.+0      	; 0x5bc <Timer_getTick+0x6>
 5bc:	cd b7       	in	r28, 0x3d	; 61
 5be:	de b7       	in	r29, 0x3e	; 62
    // disable global interrupt
    cli();
 5c0:	f8 94       	cli
    
    // store timer_count in a temp int that can't get changed by ISR
    uint16_t temp_timer_count = timer_count;
 5c2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <timer_count>
 5c6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <timer_count+0x1>
 5ca:	9a 83       	std	Y+2, r25	; 0x02
 5cc:	89 83       	std	Y+1, r24	; 0x01
    
    // enable global interrupt
    sei();
 5ce:	78 94       	sei

    return temp_timer_count;
 5d0:	89 81       	ldd	r24, Y+1	; 0x01
 5d2:	9a 81       	ldd	r25, Y+2	; 0x02
}
 5d4:	0f 90       	pop	r0
 5d6:	0f 90       	pop	r0
 5d8:	df 91       	pop	r29
 5da:	cf 91       	pop	r28
 5dc:	08 95       	ret

000005de <__vector_14>:
 ( not used atm)
 Timer compare A interrput:
 - increase timer_count
 - if timer_count is at max of uint16, set it to 0
 */
ISR(TIMER0_COMPA_vect){
 5de:	1f 92       	push	r1
 5e0:	0f 92       	push	r0
 5e2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 5e6:	0f 92       	push	r0
 5e8:	11 24       	eor	r1, r1
 5ea:	8f 93       	push	r24
 5ec:	9f 93       	push	r25
 5ee:	cf 93       	push	r28
 5f0:	df 93       	push	r29
 5f2:	cd b7       	in	r28, 0x3d	; 61
 5f4:	de b7       	in	r29, 0x3e	; 62
    timer_count++;
 5f6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <timer_count>
 5fa:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <timer_count+0x1>
 5fe:	01 96       	adiw	r24, 0x01	; 1
 600:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <timer_count+0x1>
 604:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <timer_count>
}
 608:	00 00       	nop
 60a:	df 91       	pop	r29
 60c:	cf 91       	pop	r28
 60e:	9f 91       	pop	r25
 610:	8f 91       	pop	r24
 612:	0f 90       	pop	r0
 614:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 618:	0f 90       	pop	r0
 61a:	1f 90       	pop	r1
 61c:	18 95       	reti

0000061e <_exit>:
 61e:	f8 94       	cli

00000620 <__stop_program>:
 620:	ff cf       	rjmp	.-2      	; 0x620 <__stop_program>
