
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000238  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b7d  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000088d  00000000  00000000  00000f79  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005c0  00000000  00000000  00001806  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000031c  00000000  00000000  00001dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ee  00000000  00000000  000020e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000058e  00000000  00000000  000025d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00002b60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	ae d0       	rcall	.+348    	; 0x1f6 <main>
  9a:	cc c0       	rjmp	.+408    	; 0x234 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <Led_init>:

#include "Led.h"

void Led_init(void) {
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
    // Set PORTB to outputs
    DDRB = 0xFF;
  a6:	84 e2       	ldi	r24, 0x24	; 36
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	fc 01       	movw	r30, r24
  ae:	20 83       	st	Z, r18
}
  b0:	00 00       	nop
  b2:	df 91       	pop	r29
  b4:	cf 91       	pop	r28
  b6:	08 95       	ret

000000b8 <Led1_On>:


/**
 led1 - ioB7
 */
void Led1_On(void) {
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 7);
  c0:	85 e2       	ldi	r24, 0x25	; 37
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	25 e2       	ldi	r18, 0x25	; 37
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	f9 01       	movw	r30, r18
  ca:	20 81       	ld	r18, Z
  cc:	20 68       	ori	r18, 0x80	; 128
  ce:	fc 01       	movw	r30, r24
  d0:	20 83       	st	Z, r18
}
  d2:	00 00       	nop
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <Led1_Off>:
void Led1_Off(void) {
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 7);
  e2:	85 e2       	ldi	r24, 0x25	; 37
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	25 e2       	ldi	r18, 0x25	; 37
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	f9 01       	movw	r30, r18
  ec:	20 81       	ld	r18, Z
  ee:	2f 77       	andi	r18, 0x7F	; 127
  f0:	fc 01       	movw	r30, r24
  f2:	20 83       	st	Z, r18
}
  f4:	00 00       	nop
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <Taster_init>:
 t1 - ioD7
 t2 - ioD6
 t3 - ioD5
 t4 - ioC2
 */
void Taster_init() {
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
    DDRC |= (1 << 2);
 104:	87 e2       	ldi	r24, 0x27	; 39
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	27 e2       	ldi	r18, 0x27	; 39
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	f9 01       	movw	r30, r18
 10e:	20 81       	ld	r18, Z
 110:	24 60       	ori	r18, 0x04	; 4
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
    DDRD |= (1 << 7) | (1 << 6) | (1 << 5);
 116:	8a e2       	ldi	r24, 0x2A	; 42
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	2a e2       	ldi	r18, 0x2A	; 42
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	f9 01       	movw	r30, r18
 120:	20 81       	ld	r18, Z
 122:	20 6e       	ori	r18, 0xE0	; 224
 124:	fc 01       	movw	r30, r24
 126:	20 83       	st	Z, r18
}
 128:	00 00       	nop
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <Taster1_get>:

/**
 Taster1 - ioD7
 */
uint8_t Taster1_get(void) {
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	00 d0       	rcall	.+0      	; 0x136 <Taster1_get+0x6>
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
    int state = PIND;
 13a:	89 e2       	ldi	r24, 0x29	; 41
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	fc 01       	movw	r30, r24
 140:	80 81       	ld	r24, Z
 142:	88 2f       	mov	r24, r24
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	9a 83       	std	Y+2, r25	; 0x02
 148:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<7)) == 0 ) {
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	9a 81       	ldd	r25, Y+2	; 0x02
 14e:	80 78       	andi	r24, 0x80	; 128
 150:	99 27       	eor	r25, r25
 152:	89 2b       	or	r24, r25
 154:	11 f4       	brne	.+4      	; 0x15a <Taster1_get+0x2a>
        return RETURN_VALUE_LOW;
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	01 c0       	rjmp	.+2      	; 0x15c <Taster1_get+0x2c>
    } else {
        return RETURN_VALUE_HIGH;
 15a:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 15c:	0f 90       	pop	r0
 15e:	0f 90       	pop	r0
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <Taster2_get>:

/**
Taster1 - ioD6
*/
uint8_t Taster2_get(void) {
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	1f 92       	push	r1
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
    uint8_t state = PIND;
 170:	89 e2       	ldi	r24, 0x29	; 41
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	fc 01       	movw	r30, r24
 176:	80 81       	ld	r24, Z
 178:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<6)) == 0 ) {
 17a:	89 81       	ldd	r24, Y+1	; 0x01
 17c:	88 2f       	mov	r24, r24
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	80 74       	andi	r24, 0x40	; 64
 182:	99 27       	eor	r25, r25
 184:	89 2b       	or	r24, r25
 186:	11 f4       	brne	.+4      	; 0x18c <Taster2_get+0x26>
        return RETURN_VALUE_LOW;
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	01 c0       	rjmp	.+2      	; 0x18e <Taster2_get+0x28>
    } else {
        return RETURN_VALUE_HIGH;
 18c:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 18e:	0f 90       	pop	r0
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <Taster3_get>:

/**
Taster1 - ioD5
*/
uint8_t Taster3_get(void) {
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	1f 92       	push	r1
 19c:	cd b7       	in	r28, 0x3d	; 61
 19e:	de b7       	in	r29, 0x3e	; 62
    uint8_t state = PIND;
 1a0:	89 e2       	ldi	r24, 0x29	; 41
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	fc 01       	movw	r30, r24
 1a6:	80 81       	ld	r24, Z
 1a8:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<5)) == 0 ) {
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	88 2f       	mov	r24, r24
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	80 72       	andi	r24, 0x20	; 32
 1b2:	99 27       	eor	r25, r25
 1b4:	89 2b       	or	r24, r25
 1b6:	11 f4       	brne	.+4      	; 0x1bc <Taster3_get+0x26>
        return RETURN_VALUE_LOW;
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <Taster3_get+0x28>
    } else {
        return RETURN_VALUE_HIGH;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 1be:	0f 90       	pop	r0
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <Taster4_get>:

/**
Taster1 - ioC2
*/
uint8_t Taster4_get(void) {
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	1f 92       	push	r1
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
    uint8_t state = PINC;
 1d0:	86 e2       	ldi	r24, 0x26	; 38
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	fc 01       	movw	r30, r24
 1d6:	80 81       	ld	r24, Z
 1d8:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<2)) == 0 ) {
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	88 2f       	mov	r24, r24
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	84 70       	andi	r24, 0x04	; 4
 1e2:	99 27       	eor	r25, r25
 1e4:	89 2b       	or	r24, r25
 1e6:	11 f4       	brne	.+4      	; 0x1ec <Taster4_get+0x26>
        return RETURN_VALUE_LOW;
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	01 c0       	rjmp	.+2      	; 0x1ee <Taster4_get+0x28>
    } else {
        return RETURN_VALUE_HIGH;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 1ee:	0f 90       	pop	r0
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <main>:

#include "gpio/Taster.h"
#include "gpio/Led.h"


int main(void) {
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	00 d0       	rcall	.+0      	; 0x1fc <main+0x6>
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <main+0x8>
 1fe:	00 d0       	rcall	.+0      	; 0x200 <main+0xa>
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
	
    Taster_init();
 204:	7b df       	rcall	.-266    	; 0xfc <Taster_init>
    Led_init();
 206:	4b df       	rcall	.-362    	; 0x9e <Led_init>
	
    while (1) {
        if (Taster1_get()) {
 208:	93 df       	rcall	.-218    	; 0x130 <Taster1_get>
 20a:	88 23       	and	r24, r24
 20c:	11 f0       	breq	.+4      	; 0x212 <main+0x1c>
            Led1_On();
 20e:	54 df       	rcall	.-344    	; 0xb8 <Led1_On>
 210:	01 c0       	rjmp	.+2      	; 0x214 <main+0x1e>
        }else {
			Led1_Off();
 212:	63 df       	rcall	.-314    	; 0xda <Led1_Off>
 214:	a8 df       	rcall	.-176    	; 0x166 <Taster2_get>
		}
        if (Taster2_get()) {
 216:	88 23       	and	r24, r24
 218:	11 f0       	breq	.+4      	; 0x21e <main+0x28>
 21a:	1a 82       	std	Y+2, r1	; 0x02
            int x = 0;
 21c:	19 82       	std	Y+1, r1	; 0x01
        }
        if (Taster3_get()) {
 21e:	bb df       	rcall	.-138    	; 0x196 <Taster3_get>
 220:	88 23       	and	r24, r24
 222:	11 f0       	breq	.+4      	; 0x228 <main+0x32>
 224:	1c 82       	std	Y+4, r1	; 0x04
            int x = 0;
 226:	1b 82       	std	Y+3, r1	; 0x03
 228:	ce df       	rcall	.-100    	; 0x1c6 <Taster4_get>
        }
        if (Taster4_get()) {
 22a:	88 23       	and	r24, r24
 22c:	69 f3       	breq	.-38     	; 0x208 <main+0x12>
 22e:	1e 82       	std	Y+6, r1	; 0x06
 230:	1d 82       	std	Y+5, r1	; 0x05
            int x = 0;
 232:	ea cf       	rjmp	.-44     	; 0x208 <main+0x12>

00000234 <_exit>:
 234:	f8 94       	cli

00000236 <__stop_program>:
        }
    }
 236:	ff cf       	rjmp	.-2      	; 0x236 <__stop_program>
