
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000930  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000930  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000960  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e17  00000000  00000000  00000ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084c  00000000  00000000  000018f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000090a  00000000  00000000  00002143  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d0  00000000  00000000  00002a50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000507  00000000  00000000  00002e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c1  00000000  00000000  00003327  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  000039e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	41 c0       	rjmp	.+130    	; 0x88 <__bad_interrupt>
   6:	00 00       	nop
   8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
   a:	00 00       	nop
   c:	3d c0       	rjmp	.+122    	; 0x88 <__bad_interrupt>
   e:	00 00       	nop
  10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
  12:	00 00       	nop
  14:	39 c0       	rjmp	.+114    	; 0x88 <__bad_interrupt>
  16:	00 00       	nop
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
  1e:	00 00       	nop
  20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c0       	rjmp	.+98     	; 0x88 <__bad_interrupt>
  26:	00 00       	nop
  28:	2f c0       	rjmp	.+94     	; 0x88 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2d c0       	rjmp	.+90     	; 0x88 <__bad_interrupt>
  2e:	00 00       	nop
  30:	2b c0       	rjmp	.+86     	; 0x88 <__bad_interrupt>
  32:	00 00       	nop
  34:	29 c0       	rjmp	.+82     	; 0x88 <__bad_interrupt>
  36:	00 00       	nop
  38:	27 c0       	rjmp	.+78     	; 0x88 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	25 c0       	rjmp	.+74     	; 0x88 <__bad_interrupt>
  3e:	00 00       	nop
  40:	23 c0       	rjmp	.+70     	; 0x88 <__bad_interrupt>
  42:	00 00       	nop
  44:	21 c0       	rjmp	.+66     	; 0x88 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c0       	rjmp	.+62     	; 0x88 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1d c0       	rjmp	.+58     	; 0x88 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1b c0       	rjmp	.+54     	; 0x88 <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c0       	rjmp	.+50     	; 0x88 <__bad_interrupt>
  56:	00 00       	nop
  58:	17 c0       	rjmp	.+46     	; 0x88 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c0       	rjmp	.+42     	; 0x88 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c0       	rjmp	.+38     	; 0x88 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c0       	rjmp	.+34     	; 0x88 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	26 d1       	rcall	.+588    	; 0x2d2 <main>
  86:	18 c4       	rjmp	.+2096   	; 0x8b8 <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <Led_init>:

#include "Led.h"

void Led_init(void) {
  8a:	cf 93       	push	r28
  8c:	df 93       	push	r29
  8e:	cd b7       	in	r28, 0x3d	; 61
  90:	de b7       	in	r29, 0x3e	; 62
    // Set PORTB to outputs
    DDRB = 0xFF;
  92:	84 e2       	ldi	r24, 0x24	; 36
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	fc 01       	movw	r30, r24
  9a:	20 83       	st	Z, r18
}
  9c:	00 00       	nop
  9e:	df 91       	pop	r29
  a0:	cf 91       	pop	r28
  a2:	08 95       	ret

000000a4 <Led1_On>:


/**
 led1 - ioB7
 */
void Led1_On(void) {
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 7);
  ac:	85 e2       	ldi	r24, 0x25	; 37
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	25 e2       	ldi	r18, 0x25	; 37
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	f9 01       	movw	r30, r18
  b6:	20 81       	ld	r18, Z
  b8:	20 68       	ori	r18, 0x80	; 128
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18
}
  be:	00 00       	nop
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <Led1_Off>:
void Led1_Off(void) {
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 7);
  ce:	85 e2       	ldi	r24, 0x25	; 37
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	25 e2       	ldi	r18, 0x25	; 37
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	f9 01       	movw	r30, r18
  d8:	20 81       	ld	r18, Z
  da:	2f 77       	andi	r18, 0x7F	; 127
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
}
  e0:	00 00       	nop
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <Led2_On>:

/**
led2 - ioB6
*/
void Led2_On(void) {
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 6);
  f0:	85 e2       	ldi	r24, 0x25	; 37
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	25 e2       	ldi	r18, 0x25	; 37
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	f9 01       	movw	r30, r18
  fa:	20 81       	ld	r18, Z
  fc:	20 64       	ori	r18, 0x40	; 64
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
}
 102:	00 00       	nop
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <Led2_Off>:
void Led2_Off(void) {
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 6);
 112:	85 e2       	ldi	r24, 0x25	; 37
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	25 e2       	ldi	r18, 0x25	; 37
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	f9 01       	movw	r30, r18
 11c:	20 81       	ld	r18, Z
 11e:	2f 7b       	andi	r18, 0xBF	; 191
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
}
 124:	00 00       	nop
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <Led3_On>:

/**
led3 - ioB5
*/
void Led3_On(void) {
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 5);
 134:	85 e2       	ldi	r24, 0x25	; 37
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	25 e2       	ldi	r18, 0x25	; 37
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	f9 01       	movw	r30, r18
 13e:	20 81       	ld	r18, Z
 140:	20 62       	ori	r18, 0x20	; 32
 142:	fc 01       	movw	r30, r24
 144:	20 83       	st	Z, r18
}
 146:	00 00       	nop
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <Led3_Off>:
void Led3_Off(void) {
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 5);
 156:	85 e2       	ldi	r24, 0x25	; 37
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	25 e2       	ldi	r18, 0x25	; 37
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	f9 01       	movw	r30, r18
 160:	20 81       	ld	r18, Z
 162:	2f 7d       	andi	r18, 0xDF	; 223
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18
}
 168:	00 00       	nop
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <Led4_On>:

/**
led4 - ioB4
*/
void Led4_On(void) {
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 4);
 178:	85 e2       	ldi	r24, 0x25	; 37
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	25 e2       	ldi	r18, 0x25	; 37
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	f9 01       	movw	r30, r18
 182:	20 81       	ld	r18, Z
 184:	20 61       	ori	r18, 0x10	; 16
 186:	fc 01       	movw	r30, r24
 188:	20 83       	st	Z, r18
}
 18a:	00 00       	nop
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <Led4_Off>:
void Led4_Off(void) {
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 4);
 19a:	85 e2       	ldi	r24, 0x25	; 37
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	25 e2       	ldi	r18, 0x25	; 37
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	f9 01       	movw	r30, r18
 1a4:	20 81       	ld	r18, Z
 1a6:	2f 7e       	andi	r18, 0xEF	; 239
 1a8:	fc 01       	movw	r30, r24
 1aa:	20 83       	st	Z, r18
}
 1ac:	00 00       	nop
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <Taster_init>:
 ---------------------
 - DDR Reg has to be set to 0
 - PORT Reg has to be set to 1
 -> Pin is input with pull-up
 */
void Taster_init() {
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62
    // set to inputs
    DDRC &= (1 << 2);
 1bc:	87 e2       	ldi	r24, 0x27	; 39
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	27 e2       	ldi	r18, 0x27	; 39
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	f9 01       	movw	r30, r18
 1c6:	20 81       	ld	r18, Z
 1c8:	24 70       	andi	r18, 0x04	; 4
 1ca:	fc 01       	movw	r30, r24
 1cc:	20 83       	st	Z, r18
    DDRD &= ~( (1 << 7) | (1 << 6) | (1 << 5) );
 1ce:	8a e2       	ldi	r24, 0x2A	; 42
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	2a e2       	ldi	r18, 0x2A	; 42
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	f9 01       	movw	r30, r18
 1d8:	20 81       	ld	r18, Z
 1da:	2f 71       	andi	r18, 0x1F	; 31
 1dc:	fc 01       	movw	r30, r24
 1de:	20 83       	st	Z, r18
    
    // enable pull-up
    PORTC |= (1 << 2);
 1e0:	88 e2       	ldi	r24, 0x28	; 40
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	28 e2       	ldi	r18, 0x28	; 40
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	f9 01       	movw	r30, r18
 1ea:	20 81       	ld	r18, Z
 1ec:	24 60       	ori	r18, 0x04	; 4
 1ee:	fc 01       	movw	r30, r24
 1f0:	20 83       	st	Z, r18
    PORTD |= (1 << 7) | (1 << 6) | (1 << 5);
 1f2:	8b e2       	ldi	r24, 0x2B	; 43
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	2b e2       	ldi	r18, 0x2B	; 43
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	f9 01       	movw	r30, r18
 1fc:	20 81       	ld	r18, Z
 1fe:	20 6e       	ori	r18, 0xE0	; 224
 200:	fc 01       	movw	r30, r24
 202:	20 83       	st	Z, r18
}
 204:	00 00       	nop
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <Taster1_get>:

/**
 Taster1 - ioD7
 */
uint8_t Taster1_get(void) {
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	00 d0       	rcall	.+0      	; 0x212 <Taster1_get+0x6>
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
    int state = PIND;
 216:	89 e2       	ldi	r24, 0x29	; 41
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	fc 01       	movw	r30, r24
 21c:	80 81       	ld	r24, Z
 21e:	88 2f       	mov	r24, r24
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	9a 83       	std	Y+2, r25	; 0x02
 224:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<7)) == 0 ) {
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	9a 81       	ldd	r25, Y+2	; 0x02
 22a:	80 78       	andi	r24, 0x80	; 128
 22c:	99 27       	eor	r25, r25
 22e:	89 2b       	or	r24, r25
 230:	11 f4       	brne	.+4      	; 0x236 <Taster1_get+0x2a>
        return TASTER_RETURN_VALUE_LOW;
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	01 c0       	rjmp	.+2      	; 0x238 <Taster1_get+0x2c>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
 236:	80 e0       	ldi	r24, 0x00	; 0
    }
}
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <Taster2_get>:

/**
Taster2 - ioD6
*/
uint8_t Taster2_get(void) {
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	1f 92       	push	r1
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
    uint8_t state = PIND;
 24c:	89 e2       	ldi	r24, 0x29	; 41
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	fc 01       	movw	r30, r24
 252:	80 81       	ld	r24, Z
 254:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<6)) == 0 ) {
 256:	89 81       	ldd	r24, Y+1	; 0x01
 258:	88 2f       	mov	r24, r24
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	80 74       	andi	r24, 0x40	; 64
 25e:	99 27       	eor	r25, r25
 260:	89 2b       	or	r24, r25
 262:	11 f4       	brne	.+4      	; 0x268 <Taster2_get+0x26>
        return TASTER_RETURN_VALUE_LOW;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	01 c0       	rjmp	.+2      	; 0x26a <Taster2_get+0x28>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
 268:	80 e0       	ldi	r24, 0x00	; 0
    }
}
 26a:	0f 90       	pop	r0
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <Taster3_get>:

/**
Taster3 - ioD5
*/
uint8_t Taster3_get(void) {
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	1f 92       	push	r1
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
    uint8_t state = PIND;
 27c:	89 e2       	ldi	r24, 0x29	; 41
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	fc 01       	movw	r30, r24
 282:	80 81       	ld	r24, Z
 284:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<5)) == 0 ) {
 286:	89 81       	ldd	r24, Y+1	; 0x01
 288:	88 2f       	mov	r24, r24
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	80 72       	andi	r24, 0x20	; 32
 28e:	99 27       	eor	r25, r25
 290:	89 2b       	or	r24, r25
 292:	11 f4       	brne	.+4      	; 0x298 <Taster3_get+0x26>
        return TASTER_RETURN_VALUE_LOW;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	01 c0       	rjmp	.+2      	; 0x29a <Taster3_get+0x28>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
 298:	80 e0       	ldi	r24, 0x00	; 0
    }
}
 29a:	0f 90       	pop	r0
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <Taster4_get>:

/**
Taster4 - ioC2
*/
uint8_t Taster4_get(void) {
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	1f 92       	push	r1
 2a8:	cd b7       	in	r28, 0x3d	; 61
 2aa:	de b7       	in	r29, 0x3e	; 62
    uint8_t state = PINC;
 2ac:	86 e2       	ldi	r24, 0x26	; 38
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	fc 01       	movw	r30, r24
 2b2:	80 81       	ld	r24, Z
 2b4:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<2)) == 0 ) {
 2b6:	89 81       	ldd	r24, Y+1	; 0x01
 2b8:	88 2f       	mov	r24, r24
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	84 70       	andi	r24, 0x04	; 4
 2be:	99 27       	eor	r25, r25
 2c0:	89 2b       	or	r24, r25
 2c2:	11 f4       	brne	.+4      	; 0x2c8 <Taster4_get+0x26>
        return TASTER_RETURN_VALUE_LOW;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	01 c0       	rjmp	.+2      	; 0x2ca <Taster4_get+0x28>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
 2c8:	80 e0       	ldi	r24, 0x00	; 0
    }
}
 2ca:	0f 90       	pop	r0
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	08 95       	ret

000002d2 <main>:
#include "gpio/Taster.h"
#include "gpio/Led.h"
#include "playground/Playground.h"


int main(void) {
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
	
    Led_init();
 2da:	d7 de       	rcall	.-594    	; 0x8a <Led_init>
	Taster_init();
 2dc:	6b df       	rcall	.-298    	; 0x1b4 <Taster_init>
	
    while (1) {
        playground();
 2de:	01 d0       	rcall	.+2      	; 0x2e2 <playground>
 2e0:	fe cf       	rjmp	.-4      	; 0x2de <main+0xc>

000002e2 <playground>:
    }
 2e2:	cf 93       	push	r28
- button1 pressed -> testTasterLed()
- button2 pressed -> testBoard()
- button3 pressed -> lauflicht()
- button4 pressed -> increment()
*/
void playground() {
 2e4:	df 93       	push	r29
 2e6:	cd b7       	in	r28, 0x3d	; 61
 2e8:	de b7       	in	r29, 0x3e	; 62
    static int mode = 0;
    
    if (mode == 0) {    // mode selection
 2ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2f2:	89 2b       	or	r24, r25
 2f4:	41 f5       	brne	.+80     	; 0x346 <playground+0x64>
        
        // test buttons
        if (Taster1_get()) {
 2f6:	8a df       	rcall	.-236    	; 0x20c <Taster1_get>
 2f8:	89 2b       	or	r24, r25
 2fa:	39 f0       	breq	.+14     	; 0x30a <playground+0x28>
            mode = 1;
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 304:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
        } else if (Taster2_get()) {
 308:	47 c0       	rjmp	.+142    	; 0x398 <playground+0xb6>
 30a:	9b df       	rcall	.-202    	; 0x242 <Taster2_get>
 30c:	89 2b       	or	r24, r25
 30e:	39 f0       	breq	.+14     	; 0x31e <playground+0x3c>
            mode = 2;
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 318:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
        } else if (Taster3_get()) {
 31c:	3d c0       	rjmp	.+122    	; 0x398 <playground+0xb6>
 31e:	a9 df       	rcall	.-174    	; 0x272 <Taster3_get>
 320:	89 2b       	or	r24, r25
 322:	39 f0       	breq	.+14     	; 0x332 <playground+0x50>
            mode = 3;
 324:	83 e0       	ldi	r24, 0x03	; 3
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 32c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
        } else if (Taster4_get()) {
 330:	33 c0       	rjmp	.+102    	; 0x398 <playground+0xb6>
 332:	b7 df       	rcall	.-146    	; 0x2a2 <Taster4_get>
 334:	89 2b       	or	r24, r25
 336:	81 f1       	breq	.+96     	; 0x398 <playground+0xb6>
            mode = 4;
 338:	84 e0       	ldi	r24, 0x04	; 4
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 340:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
        }
        
    } else {    // run
        
        // reset if button 1 and button 2 are pressed
        if (Taster1_get() && Taster2_get()) {
 344:	29 c0       	rjmp	.+82     	; 0x398 <playground+0xb6>
 346:	62 df       	rcall	.-316    	; 0x20c <Taster1_get>
 348:	89 2b       	or	r24, r25
 34a:	39 f0       	breq	.+14     	; 0x35a <playground+0x78>
 34c:	7a df       	rcall	.-268    	; 0x242 <Taster2_get>
 34e:	89 2b       	or	r24, r25
 350:	21 f0       	breq	.+8      	; 0x35a <playground+0x78>
            mode = 0;
 352:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 356:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
        }
        
        // execute
        switch (mode) {
 35a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 35e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 362:	82 30       	cpi	r24, 0x02	; 2
 364:	91 05       	cpc	r25, r1
 366:	71 f0       	breq	.+28     	; 0x384 <playground+0xa2>
 368:	83 30       	cpi	r24, 0x03	; 3
 36a:	91 05       	cpc	r25, r1
 36c:	1c f4       	brge	.+6      	; 0x374 <playground+0x92>
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	39 f0       	breq	.+14     	; 0x380 <playground+0x9e>
 372:	0d c0       	rjmp	.+26     	; 0x38e <playground+0xac>
 374:	83 30       	cpi	r24, 0x03	; 3
 376:	91 05       	cpc	r25, r1
 378:	39 f0       	breq	.+14     	; 0x388 <playground+0xa6>
 37a:	04 97       	sbiw	r24, 0x04	; 4
            case 1:
                testTasterLed();
 37c:	31 f0       	breq	.+12     	; 0x38a <playground+0xa8>
 37e:	07 c0       	rjmp	.+14     	; 0x38e <playground+0xac>
                break;
 380:	6f d1       	rcall	.+734    	; 0x660 <testTasterLed>
            case 2:
                testBoard();
 382:	0a c0       	rjmp	.+20     	; 0x398 <playground+0xb6>
 384:	66 d0       	rcall	.+204    	; 0x452 <testBoard>
                break;
 386:	08 c0       	rjmp	.+16     	; 0x398 <playground+0xb6>
            case 3:
                lauflicht();
 388:	0b d0       	rcall	.+22     	; 0x3a0 <lauflicht>
 38a:	12 d0       	rcall	.+36     	; 0x3b0 <increment>
            case 4:
                increment();
 38c:	05 c0       	rjmp	.+10     	; 0x398 <playground+0xb6>
 38e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
                break;
            default:
                mode = 0;
 392:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 396:	00 00       	nop
 398:	00 00       	nop
                break;
 39a:	df 91       	pop	r29
        }
    }
}
 39c:	cf 91       	pop	r28
 39e:	08 95       	ret

000003a0 <lauflicht>:
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29

void lauflicht() {
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
    // TODO
}
 3a8:	00 00       	nop
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <increment>:

/**
 Increment if button 1 is pressed, decrement if button 2 is pressed
 */
void increment() {
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	00 d0       	rcall	.+0      	; 0x3b6 <increment+0x6>
 3b6:	00 d0       	rcall	.+0      	; 0x3b8 <increment+0x8>
 3b8:	cd b7       	in	r28, 0x3d	; 61
 3ba:	de b7       	in	r29, 0x3e	; 62
    static int count = 0;
    if (Taster1_get()) {
 3bc:	27 df       	rcall	.-434    	; 0x20c <Taster1_get>
 3be:	89 2b       	or	r24, r25
 3c0:	51 f0       	breq	.+20     	; 0x3d6 <increment+0x26>
        count++;
 3c2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count.1760>
 3c6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count.1760+0x1>
 3ca:	01 96       	adiw	r24, 0x01	; 1
 3cc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <count.1760+0x1>
 3d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count.1760>
    }else if (Taster2_get()) {
 3d4:	13 c0       	rjmp	.+38     	; 0x3fc <increment+0x4c>
 3d6:	35 df       	rcall	.-406    	; 0x242 <Taster2_get>
 3d8:	89 2b       	or	r24, r25
 3da:	81 f0       	breq	.+32     	; 0x3fc <increment+0x4c>
        if (count > 0) {
 3dc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count.1760>
 3e0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count.1760+0x1>
 3e4:	18 16       	cp	r1, r24
 3e6:	19 06       	cpc	r1, r25
 3e8:	4c f4       	brge	.+18     	; 0x3fc <increment+0x4c>
            count--;
 3ea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count.1760>
 3ee:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count.1760+0x1>
 3f2:	01 97       	sbiw	r24, 0x01	; 1
 3f4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <count.1760+0x1>
 3f8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count.1760>
        }
    }
    
    int ledByte = 0;
 3fc:	1a 82       	std	Y+2, r1	; 0x02
 3fe:	19 82       	std	Y+1, r1	; 0x01
    for (int i = 0; i < count; i++) {
 400:	1c 82       	std	Y+4, r1	; 0x04
 402:	1b 82       	std	Y+3, r1	; 0x03
 404:	10 c0       	rjmp	.+32     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
        ledByte = ledByte << 1;
 406:	89 81       	ldd	r24, Y+1	; 0x01
 408:	9a 81       	ldd	r25, Y+2	; 0x02
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	9a 83       	std	Y+2, r25	; 0x02
 410:	89 83       	std	Y+1, r24	; 0x01
        ledByte++;
 412:	89 81       	ldd	r24, Y+1	; 0x01
 414:	9a 81       	ldd	r25, Y+2	; 0x02
 416:	01 96       	adiw	r24, 0x01	; 1
 418:	9a 83       	std	Y+2, r25	; 0x02
 41a:	89 83       	std	Y+1, r24	; 0x01
            count--;
        }
    }
    
    int ledByte = 0;
    for (int i = 0; i < count; i++) {
 41c:	8b 81       	ldd	r24, Y+3	; 0x03
 41e:	9c 81       	ldd	r25, Y+4	; 0x04
 420:	01 96       	adiw	r24, 0x01	; 1
 422:	9c 83       	std	Y+4, r25	; 0x04
 424:	8b 83       	std	Y+3, r24	; 0x03
 426:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count.1760>
 42a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count.1760+0x1>
 42e:	2b 81       	ldd	r18, Y+3	; 0x03
 430:	3c 81       	ldd	r19, Y+4	; 0x04
 432:	28 17       	cp	r18, r24
 434:	39 07       	cpc	r19, r25
 436:	3c f3       	brlt	.-50     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
        ledByte = ledByte << 1;
        ledByte++;
    }
    PORTB = ledByte;
 438:	85 e2       	ldi	r24, 0x25	; 37
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	29 81       	ldd	r18, Y+1	; 0x01
 43e:	fc 01       	movw	r30, r24
 440:	20 83       	st	Z, r18
}
 442:	00 00       	nop
 444:	0f 90       	pop	r0
 446:	0f 90       	pop	r0
 448:	0f 90       	pop	r0
 44a:	0f 90       	pop	r0
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	08 95       	ret

00000452 <testBoard>:

void testBoard() {
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	cd b7       	in	r28, 0x3d	; 61
 458:	de b7       	in	r29, 0x3e	; 62
 45a:	6c 97       	sbiw	r28, 0x1c	; 28
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	f8 94       	cli
 460:	de bf       	out	0x3e, r29	; 62
 462:	0f be       	out	0x3f, r0	; 63
 464:	cd bf       	out	0x3d, r28	; 61
    static int state_testBoard = 0;
    if (state_testBoard) {
 466:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <state_testBoard.1770>
 46a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <state_testBoard.1770+0x1>
 46e:	89 2b       	or	r24, r25
 470:	09 f4       	brne	.+2      	; 0x474 <testBoard+0x22>
 472:	75 c0       	rjmp	.+234    	; 0x55e <testBoard+0x10c>
		state_testBoard = 0;
 474:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <state_testBoard.1770+0x1>
 478:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <state_testBoard.1770>
        PORTB = 0x00;
 47c:	85 e2       	ldi	r24, 0x25	; 37
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	fc 01       	movw	r30, r24
 482:	10 82       	st	Z, r1
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	aa ef       	ldi	r26, 0xFA	; 250
 48a:	b3 e4       	ldi	r27, 0x43	; 67
 48c:	8d 83       	std	Y+5, r24	; 0x05
 48e:	9e 83       	std	Y+6, r25	; 0x06
 490:	af 83       	std	Y+7, r26	; 0x07
 492:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 494:	20 e0       	ldi	r18, 0x00	; 0
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	4a e7       	ldi	r20, 0x7A	; 122
 49a:	53 e4       	ldi	r21, 0x43	; 67
 49c:	6d 81       	ldd	r22, Y+5	; 0x05
 49e:	7e 81       	ldd	r23, Y+6	; 0x06
 4a0:	8f 81       	ldd	r24, Y+7	; 0x07
 4a2:	98 85       	ldd	r25, Y+8	; 0x08
 4a4:	7e d1       	rcall	.+764    	; 0x7a2 <__mulsf3>
 4a6:	dc 01       	movw	r26, r24
 4a8:	cb 01       	movw	r24, r22
 4aa:	89 87       	std	Y+9, r24	; 0x09
 4ac:	9a 87       	std	Y+10, r25	; 0x0a
 4ae:	ab 87       	std	Y+11, r26	; 0x0b
 4b0:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 4b2:	20 e0       	ldi	r18, 0x00	; 0
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	40 e8       	ldi	r20, 0x80	; 128
 4b8:	5f e3       	ldi	r21, 0x3F	; 63
 4ba:	69 85       	ldd	r22, Y+9	; 0x09
 4bc:	7a 85       	ldd	r23, Y+10	; 0x0a
 4be:	8b 85       	ldd	r24, Y+11	; 0x0b
 4c0:	9c 85       	ldd	r25, Y+12	; 0x0c
 4c2:	ee d0       	rcall	.+476    	; 0x6a0 <__cmpsf2>
 4c4:	88 23       	and	r24, r24
 4c6:	2c f4       	brge	.+10     	; 0x4d2 <testBoard+0x80>
		__ticks = 1;
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	9e 87       	std	Y+14, r25	; 0x0e
 4ce:	8d 87       	std	Y+13, r24	; 0x0d
 4d0:	3b c0       	rjmp	.+118    	; 0x548 <testBoard+0xf6>
	else if (__tmp > 65535)
 4d2:	20 e0       	ldi	r18, 0x00	; 0
 4d4:	3f ef       	ldi	r19, 0xFF	; 255
 4d6:	4f e7       	ldi	r20, 0x7F	; 127
 4d8:	57 e4       	ldi	r21, 0x47	; 71
 4da:	69 85       	ldd	r22, Y+9	; 0x09
 4dc:	7a 85       	ldd	r23, Y+10	; 0x0a
 4de:	8b 85       	ldd	r24, Y+11	; 0x0b
 4e0:	9c 85       	ldd	r25, Y+12	; 0x0c
 4e2:	5b d1       	rcall	.+694    	; 0x79a <__gesf2>
 4e4:	18 16       	cp	r1, r24
 4e6:	3c f5       	brge	.+78     	; 0x536 <testBoard+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4e8:	20 e0       	ldi	r18, 0x00	; 0
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	40 e2       	ldi	r20, 0x20	; 32
 4ee:	51 e4       	ldi	r21, 0x41	; 65
 4f0:	6d 81       	ldd	r22, Y+5	; 0x05
 4f2:	7e 81       	ldd	r23, Y+6	; 0x06
 4f4:	8f 81       	ldd	r24, Y+7	; 0x07
 4f6:	98 85       	ldd	r25, Y+8	; 0x08
 4f8:	54 d1       	rcall	.+680    	; 0x7a2 <__mulsf3>
 4fa:	dc 01       	movw	r26, r24
 4fc:	cb 01       	movw	r24, r22
 4fe:	bc 01       	movw	r22, r24
 500:	cd 01       	movw	r24, r26
 502:	d2 d0       	rcall	.+420    	; 0x6a8 <__fixunssfsi>
 504:	dc 01       	movw	r26, r24
 506:	cb 01       	movw	r24, r22
 508:	9e 87       	std	Y+14, r25	; 0x0e
 50a:	8d 87       	std	Y+13, r24	; 0x0d
 50c:	0f c0       	rjmp	.+30     	; 0x52c <testBoard+0xda>
 50e:	89 e1       	ldi	r24, 0x19	; 25
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	98 8b       	std	Y+16, r25	; 0x10
 514:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 516:	8f 85       	ldd	r24, Y+15	; 0x0f
 518:	98 89       	ldd	r25, Y+16	; 0x10
 51a:	01 97       	sbiw	r24, 0x01	; 1
 51c:	f1 f7       	brne	.-4      	; 0x51a <testBoard+0xc8>
 51e:	98 8b       	std	Y+16, r25	; 0x10
 520:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 522:	8d 85       	ldd	r24, Y+13	; 0x0d
 524:	9e 85       	ldd	r25, Y+14	; 0x0e
 526:	01 97       	sbiw	r24, 0x01	; 1
 528:	9e 87       	std	Y+14, r25	; 0x0e
 52a:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 52c:	8d 85       	ldd	r24, Y+13	; 0x0d
 52e:	9e 85       	ldd	r25, Y+14	; 0x0e
 530:	89 2b       	or	r24, r25
 532:	69 f7       	brne	.-38     	; 0x50e <testBoard+0xbc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 534:	8b c0       	rjmp	.+278    	; 0x64c <testBoard+0x1fa>
 536:	69 85       	ldd	r22, Y+9	; 0x09
 538:	7a 85       	ldd	r23, Y+10	; 0x0a
 53a:	8b 85       	ldd	r24, Y+11	; 0x0b
 53c:	9c 85       	ldd	r25, Y+12	; 0x0c
 53e:	b4 d0       	rcall	.+360    	; 0x6a8 <__fixunssfsi>
 540:	dc 01       	movw	r26, r24
 542:	cb 01       	movw	r24, r22
 544:	9e 87       	std	Y+14, r25	; 0x0e
 546:	8d 87       	std	Y+13, r24	; 0x0d
 548:	8d 85       	ldd	r24, Y+13	; 0x0d
 54a:	9e 85       	ldd	r25, Y+14	; 0x0e
 54c:	9a 8b       	std	Y+18, r25	; 0x12
 54e:	89 8b       	std	Y+17, r24	; 0x11
 550:	89 89       	ldd	r24, Y+17	; 0x11
 552:	9a 89       	ldd	r25, Y+18	; 0x12
 554:	01 97       	sbiw	r24, 0x01	; 1
 556:	f1 f7       	brne	.-4      	; 0x554 <testBoard+0x102>
 558:	9a 8b       	std	Y+18, r25	; 0x12
 55a:	89 8b       	std	Y+17, r24	; 0x11
    }else {
		state_testBoard = 1;
        PORTB = 0xFF;
        _delay_ms(500);
    }
}
 55c:	77 c0       	rjmp	.+238    	; 0x64c <testBoard+0x1fa>
    if (state_testBoard) {
		state_testBoard = 0;
        PORTB = 0x00;
        _delay_ms(500);
    }else {
		state_testBoard = 1;
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <state_testBoard.1770+0x1>
 566:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state_testBoard.1770>
        PORTB = 0xFF;
 56a:	85 e2       	ldi	r24, 0x25	; 37
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	2f ef       	ldi	r18, 0xFF	; 255
 570:	fc 01       	movw	r30, r24
 572:	20 83       	st	Z, r18
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	aa ef       	ldi	r26, 0xFA	; 250
 57a:	b3 e4       	ldi	r27, 0x43	; 67
 57c:	89 83       	std	Y+1, r24	; 0x01
 57e:	9a 83       	std	Y+2, r25	; 0x02
 580:	ab 83       	std	Y+3, r26	; 0x03
 582:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 584:	20 e0       	ldi	r18, 0x00	; 0
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	4a e7       	ldi	r20, 0x7A	; 122
 58a:	53 e4       	ldi	r21, 0x43	; 67
 58c:	69 81       	ldd	r22, Y+1	; 0x01
 58e:	7a 81       	ldd	r23, Y+2	; 0x02
 590:	8b 81       	ldd	r24, Y+3	; 0x03
 592:	9c 81       	ldd	r25, Y+4	; 0x04
 594:	06 d1       	rcall	.+524    	; 0x7a2 <__mulsf3>
 596:	dc 01       	movw	r26, r24
 598:	cb 01       	movw	r24, r22
 59a:	8b 8b       	std	Y+19, r24	; 0x13
 59c:	9c 8b       	std	Y+20, r25	; 0x14
 59e:	ad 8b       	std	Y+21, r26	; 0x15
 5a0:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 5a2:	20 e0       	ldi	r18, 0x00	; 0
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	40 e8       	ldi	r20, 0x80	; 128
 5a8:	5f e3       	ldi	r21, 0x3F	; 63
 5aa:	6b 89       	ldd	r22, Y+19	; 0x13
 5ac:	7c 89       	ldd	r23, Y+20	; 0x14
 5ae:	8d 89       	ldd	r24, Y+21	; 0x15
 5b0:	9e 89       	ldd	r25, Y+22	; 0x16
 5b2:	76 d0       	rcall	.+236    	; 0x6a0 <__cmpsf2>
 5b4:	88 23       	and	r24, r24
 5b6:	2c f4       	brge	.+10     	; 0x5c2 <testBoard+0x170>
		__ticks = 1;
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	98 8f       	std	Y+24, r25	; 0x18
 5be:	8f 8b       	std	Y+23, r24	; 0x17
 5c0:	3b c0       	rjmp	.+118    	; 0x638 <testBoard+0x1e6>
	else if (__tmp > 65535)
 5c2:	20 e0       	ldi	r18, 0x00	; 0
 5c4:	3f ef       	ldi	r19, 0xFF	; 255
 5c6:	4f e7       	ldi	r20, 0x7F	; 127
 5c8:	57 e4       	ldi	r21, 0x47	; 71
 5ca:	6b 89       	ldd	r22, Y+19	; 0x13
 5cc:	7c 89       	ldd	r23, Y+20	; 0x14
 5ce:	8d 89       	ldd	r24, Y+21	; 0x15
 5d0:	9e 89       	ldd	r25, Y+22	; 0x16
 5d2:	e3 d0       	rcall	.+454    	; 0x79a <__gesf2>
 5d4:	18 16       	cp	r1, r24
 5d6:	3c f5       	brge	.+78     	; 0x626 <testBoard+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 5d8:	20 e0       	ldi	r18, 0x00	; 0
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	40 e2       	ldi	r20, 0x20	; 32
 5de:	51 e4       	ldi	r21, 0x41	; 65
 5e0:	69 81       	ldd	r22, Y+1	; 0x01
 5e2:	7a 81       	ldd	r23, Y+2	; 0x02
 5e4:	8b 81       	ldd	r24, Y+3	; 0x03
 5e6:	9c 81       	ldd	r25, Y+4	; 0x04
 5e8:	dc d0       	rcall	.+440    	; 0x7a2 <__mulsf3>
 5ea:	dc 01       	movw	r26, r24
 5ec:	cb 01       	movw	r24, r22
 5ee:	bc 01       	movw	r22, r24
 5f0:	cd 01       	movw	r24, r26
 5f2:	5a d0       	rcall	.+180    	; 0x6a8 <__fixunssfsi>
 5f4:	dc 01       	movw	r26, r24
 5f6:	cb 01       	movw	r24, r22
 5f8:	98 8f       	std	Y+24, r25	; 0x18
 5fa:	8f 8b       	std	Y+23, r24	; 0x17
 5fc:	0f c0       	rjmp	.+30     	; 0x61c <testBoard+0x1ca>
 5fe:	89 e1       	ldi	r24, 0x19	; 25
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	9a 8f       	std	Y+26, r25	; 0x1a
 604:	89 8f       	std	Y+25, r24	; 0x19
 606:	89 8d       	ldd	r24, Y+25	; 0x19
 608:	9a 8d       	ldd	r25, Y+26	; 0x1a
 60a:	01 97       	sbiw	r24, 0x01	; 1
 60c:	f1 f7       	brne	.-4      	; 0x60a <testBoard+0x1b8>
 60e:	9a 8f       	std	Y+26, r25	; 0x1a
 610:	89 8f       	std	Y+25, r24	; 0x19
 612:	8f 89       	ldd	r24, Y+23	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 614:	98 8d       	ldd	r25, Y+24	; 0x18
 616:	01 97       	sbiw	r24, 0x01	; 1
 618:	98 8f       	std	Y+24, r25	; 0x18
 61a:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 61c:	8f 89       	ldd	r24, Y+23	; 0x17
 61e:	98 8d       	ldd	r25, Y+24	; 0x18
 620:	89 2b       	or	r24, r25
 622:	69 f7       	brne	.-38     	; 0x5fe <testBoard+0x1ac>
        _delay_ms(500);
    }
}
 624:	13 c0       	rjmp	.+38     	; 0x64c <testBoard+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 626:	6b 89       	ldd	r22, Y+19	; 0x13
 628:	7c 89       	ldd	r23, Y+20	; 0x14
 62a:	8d 89       	ldd	r24, Y+21	; 0x15
 62c:	9e 89       	ldd	r25, Y+22	; 0x16
 62e:	3c d0       	rcall	.+120    	; 0x6a8 <__fixunssfsi>
 630:	dc 01       	movw	r26, r24
 632:	cb 01       	movw	r24, r22
 634:	98 8f       	std	Y+24, r25	; 0x18
 636:	8f 8b       	std	Y+23, r24	; 0x17
 638:	8f 89       	ldd	r24, Y+23	; 0x17
 63a:	98 8d       	ldd	r25, Y+24	; 0x18
 63c:	9c 8f       	std	Y+28, r25	; 0x1c
 63e:	8b 8f       	std	Y+27, r24	; 0x1b
 640:	8b 8d       	ldd	r24, Y+27	; 0x1b
 642:	9c 8d       	ldd	r25, Y+28	; 0x1c
 644:	01 97       	sbiw	r24, 0x01	; 1
 646:	f1 f7       	brne	.-4      	; 0x644 <testBoard+0x1f2>
 648:	9c 8f       	std	Y+28, r25	; 0x1c
 64a:	8b 8f       	std	Y+27, r24	; 0x1b
 64c:	00 00       	nop
 64e:	6c 96       	adiw	r28, 0x1c	; 28
 650:	0f b6       	in	r0, 0x3f	; 63
 652:	f8 94       	cli
 654:	de bf       	out	0x3e, r29	; 62
 656:	0f be       	out	0x3f, r0	; 63
 658:	cd bf       	out	0x3d, r28	; 61
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	08 95       	ret

00000660 <testTasterLed>:
 660:	cf 93       	push	r28

void testTasterLed() {
 662:	df 93       	push	r29
 664:	cd b7       	in	r28, 0x3d	; 61
 666:	de b7       	in	r29, 0x3e	; 62
    if (Taster1_get()) {
 668:	d1 dd       	rcall	.-1118   	; 0x20c <Taster1_get>
 66a:	89 2b       	or	r24, r25
 66c:	11 f0       	breq	.+4      	; 0x672 <testTasterLed+0x12>
        Led1_On();
 66e:	1a dd       	rcall	.-1484   	; 0xa4 <Led1_On>
 670:	01 c0       	rjmp	.+2      	; 0x674 <testTasterLed+0x14>
    }else {
        Led1_Off();
 672:	29 dd       	rcall	.-1454   	; 0xc6 <Led1_Off>
 674:	e6 dd       	rcall	.-1076   	; 0x242 <Taster2_get>
    }
    if (Taster2_get()) {
 676:	89 2b       	or	r24, r25
 678:	11 f0       	breq	.+4      	; 0x67e <testTasterLed+0x1e>
        Led2_On();
 67a:	36 dd       	rcall	.-1428   	; 0xe8 <Led2_On>
 67c:	01 c0       	rjmp	.+2      	; 0x680 <testTasterLed+0x20>
    }else {
        Led2_Off();
 67e:	45 dd       	rcall	.-1398   	; 0x10a <Led2_Off>
    }
    if (Taster3_get()) {
 680:	f8 dd       	rcall	.-1040   	; 0x272 <Taster3_get>
 682:	89 2b       	or	r24, r25
 684:	11 f0       	breq	.+4      	; 0x68a <testTasterLed+0x2a>
        Led3_On();
 686:	52 dd       	rcall	.-1372   	; 0x12c <Led3_On>
 688:	01 c0       	rjmp	.+2      	; 0x68c <testTasterLed+0x2c>
        }else {
        Led3_Off();
 68a:	61 dd       	rcall	.-1342   	; 0x14e <Led3_Off>
 68c:	0a de       	rcall	.-1004   	; 0x2a2 <Taster4_get>
    }
    if (Taster4_get()) {
 68e:	89 2b       	or	r24, r25
 690:	11 f0       	breq	.+4      	; 0x696 <testTasterLed+0x36>
 692:	6e dd       	rcall	.-1316   	; 0x170 <Led4_On>
 694:	01 c0       	rjmp	.+2      	; 0x698 <testTasterLed+0x38>
        Led4_On();
 696:	7d dd       	rcall	.-1286   	; 0x192 <Led4_Off>
 698:	00 00       	nop
        }else {
        Led4_Off();
    }
}
 69a:	df 91       	pop	r29
        Led3_Off();
    }
    if (Taster4_get()) {
        Led4_On();
        }else {
        Led4_Off();
 69c:	cf 91       	pop	r28
 69e:	08 95       	ret

000006a0 <__cmpsf2>:
    }
}
 6a0:	2f d0       	rcall	.+94     	; 0x700 <__fp_cmp>
 6a2:	08 f4       	brcc	.+2      	; 0x6a6 <__cmpsf2+0x6>
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	08 95       	ret

000006a8 <__fixunssfsi>:
 6a8:	57 d0       	rcall	.+174    	; 0x758 <__fp_splitA>
 6aa:	88 f0       	brcs	.+34     	; 0x6ce <__fixunssfsi+0x26>
 6ac:	9f 57       	subi	r25, 0x7F	; 127
 6ae:	90 f0       	brcs	.+36     	; 0x6d4 <__fixunssfsi+0x2c>
 6b0:	b9 2f       	mov	r27, r25
 6b2:	99 27       	eor	r25, r25
 6b4:	b7 51       	subi	r27, 0x17	; 23
 6b6:	a0 f0       	brcs	.+40     	; 0x6e0 <__fixunssfsi+0x38>
 6b8:	d1 f0       	breq	.+52     	; 0x6ee <__fixunssfsi+0x46>
 6ba:	66 0f       	add	r22, r22
 6bc:	77 1f       	adc	r23, r23
 6be:	88 1f       	adc	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	1a f0       	brmi	.+6      	; 0x6ca <__fixunssfsi+0x22>
 6c4:	ba 95       	dec	r27
 6c6:	c9 f7       	brne	.-14     	; 0x6ba <__fixunssfsi+0x12>
 6c8:	12 c0       	rjmp	.+36     	; 0x6ee <__fixunssfsi+0x46>
 6ca:	b1 30       	cpi	r27, 0x01	; 1
 6cc:	81 f0       	breq	.+32     	; 0x6ee <__fixunssfsi+0x46>
 6ce:	5e d0       	rcall	.+188    	; 0x78c <__fp_zero>
 6d0:	b1 e0       	ldi	r27, 0x01	; 1
 6d2:	08 95       	ret
 6d4:	5b c0       	rjmp	.+182    	; 0x78c <__fp_zero>
 6d6:	67 2f       	mov	r22, r23
 6d8:	78 2f       	mov	r23, r24
 6da:	88 27       	eor	r24, r24
 6dc:	b8 5f       	subi	r27, 0xF8	; 248
 6de:	39 f0       	breq	.+14     	; 0x6ee <__fixunssfsi+0x46>
 6e0:	b9 3f       	cpi	r27, 0xF9	; 249
 6e2:	cc f3       	brlt	.-14     	; 0x6d6 <__fixunssfsi+0x2e>
 6e4:	86 95       	lsr	r24
 6e6:	77 95       	ror	r23
 6e8:	67 95       	ror	r22
 6ea:	b3 95       	inc	r27
 6ec:	d9 f7       	brne	.-10     	; 0x6e4 <__fixunssfsi+0x3c>
 6ee:	3e f4       	brtc	.+14     	; 0x6fe <__fixunssfsi+0x56>
 6f0:	90 95       	com	r25
 6f2:	80 95       	com	r24
 6f4:	70 95       	com	r23
 6f6:	61 95       	neg	r22
 6f8:	7f 4f       	sbci	r23, 0xFF	; 255
 6fa:	8f 4f       	sbci	r24, 0xFF	; 255
 6fc:	9f 4f       	sbci	r25, 0xFF	; 255
 6fe:	08 95       	ret

00000700 <__fp_cmp>:
 700:	99 0f       	add	r25, r25
 702:	00 08       	sbc	r0, r0
 704:	55 0f       	add	r21, r21
 706:	aa 0b       	sbc	r26, r26
 708:	e0 e8       	ldi	r30, 0x80	; 128
 70a:	fe ef       	ldi	r31, 0xFE	; 254
 70c:	16 16       	cp	r1, r22
 70e:	17 06       	cpc	r1, r23
 710:	e8 07       	cpc	r30, r24
 712:	f9 07       	cpc	r31, r25
 714:	c0 f0       	brcs	.+48     	; 0x746 <__fp_cmp+0x46>
 716:	12 16       	cp	r1, r18
 718:	13 06       	cpc	r1, r19
 71a:	e4 07       	cpc	r30, r20
 71c:	f5 07       	cpc	r31, r21
 71e:	98 f0       	brcs	.+38     	; 0x746 <__fp_cmp+0x46>
 720:	62 1b       	sub	r22, r18
 722:	73 0b       	sbc	r23, r19
 724:	84 0b       	sbc	r24, r20
 726:	95 0b       	sbc	r25, r21
 728:	39 f4       	brne	.+14     	; 0x738 <__fp_cmp+0x38>
 72a:	0a 26       	eor	r0, r26
 72c:	61 f0       	breq	.+24     	; 0x746 <__fp_cmp+0x46>
 72e:	23 2b       	or	r18, r19
 730:	24 2b       	or	r18, r20
 732:	25 2b       	or	r18, r21
 734:	21 f4       	brne	.+8      	; 0x73e <__fp_cmp+0x3e>
 736:	08 95       	ret
 738:	0a 26       	eor	r0, r26
 73a:	09 f4       	brne	.+2      	; 0x73e <__fp_cmp+0x3e>
 73c:	a1 40       	sbci	r26, 0x01	; 1
 73e:	a6 95       	lsr	r26
 740:	8f ef       	ldi	r24, 0xFF	; 255
 742:	81 1d       	adc	r24, r1
 744:	81 1d       	adc	r24, r1
 746:	08 95       	ret

00000748 <__fp_split3>:
 748:	57 fd       	sbrc	r21, 7
 74a:	90 58       	subi	r25, 0x80	; 128
 74c:	44 0f       	add	r20, r20
 74e:	55 1f       	adc	r21, r21
 750:	59 f0       	breq	.+22     	; 0x768 <__fp_splitA+0x10>
 752:	5f 3f       	cpi	r21, 0xFF	; 255
 754:	71 f0       	breq	.+28     	; 0x772 <__fp_splitA+0x1a>
 756:	47 95       	ror	r20

00000758 <__fp_splitA>:
 758:	88 0f       	add	r24, r24
 75a:	97 fb       	bst	r25, 7
 75c:	99 1f       	adc	r25, r25
 75e:	61 f0       	breq	.+24     	; 0x778 <__fp_splitA+0x20>
 760:	9f 3f       	cpi	r25, 0xFF	; 255
 762:	79 f0       	breq	.+30     	; 0x782 <__fp_splitA+0x2a>
 764:	87 95       	ror	r24
 766:	08 95       	ret
 768:	12 16       	cp	r1, r18
 76a:	13 06       	cpc	r1, r19
 76c:	14 06       	cpc	r1, r20
 76e:	55 1f       	adc	r21, r21
 770:	f2 cf       	rjmp	.-28     	; 0x756 <__fp_split3+0xe>
 772:	46 95       	lsr	r20
 774:	f1 df       	rcall	.-30     	; 0x758 <__fp_splitA>
 776:	08 c0       	rjmp	.+16     	; 0x788 <__fp_splitA+0x30>
 778:	16 16       	cp	r1, r22
 77a:	17 06       	cpc	r1, r23
 77c:	18 06       	cpc	r1, r24
 77e:	99 1f       	adc	r25, r25
 780:	f1 cf       	rjmp	.-30     	; 0x764 <__fp_splitA+0xc>
 782:	86 95       	lsr	r24
 784:	71 05       	cpc	r23, r1
 786:	61 05       	cpc	r22, r1
 788:	08 94       	sec
 78a:	08 95       	ret

0000078c <__fp_zero>:
 78c:	e8 94       	clt

0000078e <__fp_szero>:
 78e:	bb 27       	eor	r27, r27
 790:	66 27       	eor	r22, r22
 792:	77 27       	eor	r23, r23
 794:	cb 01       	movw	r24, r22
 796:	97 f9       	bld	r25, 7
 798:	08 95       	ret

0000079a <__gesf2>:
 79a:	b2 df       	rcall	.-156    	; 0x700 <__fp_cmp>
 79c:	08 f4       	brcc	.+2      	; 0x7a0 <__gesf2+0x6>
 79e:	8f ef       	ldi	r24, 0xFF	; 255
 7a0:	08 95       	ret

000007a2 <__mulsf3>:
 7a2:	0b d0       	rcall	.+22     	; 0x7ba <__mulsf3x>
 7a4:	78 c0       	rjmp	.+240    	; 0x896 <__fp_round>
 7a6:	69 d0       	rcall	.+210    	; 0x87a <__fp_pscA>
 7a8:	28 f0       	brcs	.+10     	; 0x7b4 <__mulsf3+0x12>
 7aa:	6e d0       	rcall	.+220    	; 0x888 <__fp_pscB>
 7ac:	18 f0       	brcs	.+6      	; 0x7b4 <__mulsf3+0x12>
 7ae:	95 23       	and	r25, r21
 7b0:	09 f0       	breq	.+2      	; 0x7b4 <__mulsf3+0x12>
 7b2:	5a c0       	rjmp	.+180    	; 0x868 <__fp_inf>
 7b4:	5f c0       	rjmp	.+190    	; 0x874 <__fp_nan>
 7b6:	11 24       	eor	r1, r1
 7b8:	ea cf       	rjmp	.-44     	; 0x78e <__fp_szero>

000007ba <__mulsf3x>:
 7ba:	c6 df       	rcall	.-116    	; 0x748 <__fp_split3>
 7bc:	a0 f3       	brcs	.-24     	; 0x7a6 <__mulsf3+0x4>

000007be <__mulsf3_pse>:
 7be:	95 9f       	mul	r25, r21
 7c0:	d1 f3       	breq	.-12     	; 0x7b6 <__mulsf3+0x14>
 7c2:	95 0f       	add	r25, r21
 7c4:	50 e0       	ldi	r21, 0x00	; 0
 7c6:	55 1f       	adc	r21, r21
 7c8:	62 9f       	mul	r22, r18
 7ca:	f0 01       	movw	r30, r0
 7cc:	72 9f       	mul	r23, r18
 7ce:	bb 27       	eor	r27, r27
 7d0:	f0 0d       	add	r31, r0
 7d2:	b1 1d       	adc	r27, r1
 7d4:	63 9f       	mul	r22, r19
 7d6:	aa 27       	eor	r26, r26
 7d8:	f0 0d       	add	r31, r0
 7da:	b1 1d       	adc	r27, r1
 7dc:	aa 1f       	adc	r26, r26
 7de:	64 9f       	mul	r22, r20
 7e0:	66 27       	eor	r22, r22
 7e2:	b0 0d       	add	r27, r0
 7e4:	a1 1d       	adc	r26, r1
 7e6:	66 1f       	adc	r22, r22
 7e8:	82 9f       	mul	r24, r18
 7ea:	22 27       	eor	r18, r18
 7ec:	b0 0d       	add	r27, r0
 7ee:	a1 1d       	adc	r26, r1
 7f0:	62 1f       	adc	r22, r18
 7f2:	73 9f       	mul	r23, r19
 7f4:	b0 0d       	add	r27, r0
 7f6:	a1 1d       	adc	r26, r1
 7f8:	62 1f       	adc	r22, r18
 7fa:	83 9f       	mul	r24, r19
 7fc:	a0 0d       	add	r26, r0
 7fe:	61 1d       	adc	r22, r1
 800:	22 1f       	adc	r18, r18
 802:	74 9f       	mul	r23, r20
 804:	33 27       	eor	r19, r19
 806:	a0 0d       	add	r26, r0
 808:	61 1d       	adc	r22, r1
 80a:	23 1f       	adc	r18, r19
 80c:	84 9f       	mul	r24, r20
 80e:	60 0d       	add	r22, r0
 810:	21 1d       	adc	r18, r1
 812:	82 2f       	mov	r24, r18
 814:	76 2f       	mov	r23, r22
 816:	6a 2f       	mov	r22, r26
 818:	11 24       	eor	r1, r1
 81a:	9f 57       	subi	r25, 0x7F	; 127
 81c:	50 40       	sbci	r21, 0x00	; 0
 81e:	8a f0       	brmi	.+34     	; 0x842 <__mulsf3_pse+0x84>
 820:	e1 f0       	breq	.+56     	; 0x85a <__mulsf3_pse+0x9c>
 822:	88 23       	and	r24, r24
 824:	4a f0       	brmi	.+18     	; 0x838 <__mulsf3_pse+0x7a>
 826:	ee 0f       	add	r30, r30
 828:	ff 1f       	adc	r31, r31
 82a:	bb 1f       	adc	r27, r27
 82c:	66 1f       	adc	r22, r22
 82e:	77 1f       	adc	r23, r23
 830:	88 1f       	adc	r24, r24
 832:	91 50       	subi	r25, 0x01	; 1
 834:	50 40       	sbci	r21, 0x00	; 0
 836:	a9 f7       	brne	.-22     	; 0x822 <__mulsf3_pse+0x64>
 838:	9e 3f       	cpi	r25, 0xFE	; 254
 83a:	51 05       	cpc	r21, r1
 83c:	70 f0       	brcs	.+28     	; 0x85a <__mulsf3_pse+0x9c>
 83e:	14 c0       	rjmp	.+40     	; 0x868 <__fp_inf>
 840:	a6 cf       	rjmp	.-180    	; 0x78e <__fp_szero>
 842:	5f 3f       	cpi	r21, 0xFF	; 255
 844:	ec f3       	brlt	.-6      	; 0x840 <__mulsf3_pse+0x82>
 846:	98 3e       	cpi	r25, 0xE8	; 232
 848:	dc f3       	brlt	.-10     	; 0x840 <__mulsf3_pse+0x82>
 84a:	86 95       	lsr	r24
 84c:	77 95       	ror	r23
 84e:	67 95       	ror	r22
 850:	b7 95       	ror	r27
 852:	f7 95       	ror	r31
 854:	e7 95       	ror	r30
 856:	9f 5f       	subi	r25, 0xFF	; 255
 858:	c1 f7       	brne	.-16     	; 0x84a <__mulsf3_pse+0x8c>
 85a:	fe 2b       	or	r31, r30
 85c:	88 0f       	add	r24, r24
 85e:	91 1d       	adc	r25, r1
 860:	96 95       	lsr	r25
 862:	87 95       	ror	r24
 864:	97 f9       	bld	r25, 7
 866:	08 95       	ret

00000868 <__fp_inf>:
 868:	97 f9       	bld	r25, 7
 86a:	9f 67       	ori	r25, 0x7F	; 127
 86c:	80 e8       	ldi	r24, 0x80	; 128
 86e:	70 e0       	ldi	r23, 0x00	; 0
 870:	60 e0       	ldi	r22, 0x00	; 0
 872:	08 95       	ret

00000874 <__fp_nan>:
 874:	9f ef       	ldi	r25, 0xFF	; 255
 876:	80 ec       	ldi	r24, 0xC0	; 192
 878:	08 95       	ret

0000087a <__fp_pscA>:
 87a:	00 24       	eor	r0, r0
 87c:	0a 94       	dec	r0
 87e:	16 16       	cp	r1, r22
 880:	17 06       	cpc	r1, r23
 882:	18 06       	cpc	r1, r24
 884:	09 06       	cpc	r0, r25
 886:	08 95       	ret

00000888 <__fp_pscB>:
 888:	00 24       	eor	r0, r0
 88a:	0a 94       	dec	r0
 88c:	12 16       	cp	r1, r18
 88e:	13 06       	cpc	r1, r19
 890:	14 06       	cpc	r1, r20
 892:	05 06       	cpc	r0, r21
 894:	08 95       	ret

00000896 <__fp_round>:
 896:	09 2e       	mov	r0, r25
 898:	03 94       	inc	r0
 89a:	00 0c       	add	r0, r0
 89c:	11 f4       	brne	.+4      	; 0x8a2 <__fp_round+0xc>
 89e:	88 23       	and	r24, r24
 8a0:	52 f0       	brmi	.+20     	; 0x8b6 <__fp_round+0x20>
 8a2:	bb 0f       	add	r27, r27
 8a4:	40 f4       	brcc	.+16     	; 0x8b6 <__fp_round+0x20>
 8a6:	bf 2b       	or	r27, r31
 8a8:	11 f4       	brne	.+4      	; 0x8ae <__fp_round+0x18>
 8aa:	60 ff       	sbrs	r22, 0
 8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__fp_round+0x20>
 8ae:	6f 5f       	subi	r22, 0xFF	; 255
 8b0:	7f 4f       	sbci	r23, 0xFF	; 255
 8b2:	8f 4f       	sbci	r24, 0xFF	; 255
 8b4:	9f 4f       	sbci	r25, 0xFF	; 255
 8b6:	08 95       	ret

000008b8 <_exit>:
 8b8:	f8 94       	cli

000008ba <__stop_program>:
 8ba:	ff cf       	rjmp	.-2      	; 0x8ba <__stop_program>
