
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000011be  00001252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000042d  0080011a  0080011a  0000126c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000126c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013b5  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cac  00000000  00000000  000028b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e5e  00000000  00000000  00003561  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000700  00000000  00000000  000043c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000772  00000000  00000000  00004ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ded  00000000  00000000  00005232  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  0000601f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	82 c3       	rjmp	.+1796   	; 0x746 <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	98 c5       	rjmp	.+2864   	; 0xb82 <__vector_20>
      52:	00 00       	nop
      54:	4d c5       	rjmp	.+2714   	; 0xaf0 <__vector_21>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c1       	rjmp	.+614    	; 0x2c8 <__vector_24>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee eb       	ldi	r30, 0xBE	; 190
      a0:	f1 e1       	ldi	r31, 0x11	; 17
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 31       	cpi	r26, 0x1A	; 26
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	25 e0       	ldi	r18, 0x05	; 5
      b4:	aa e1       	ldi	r26, 0x1A	; 26
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a7 34       	cpi	r26, 0x47	; 71
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	22 d2       	rcall	.+1092   	; 0x508 <main>
      c4:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <adc_init>:
uint16_t LM35_Array[8] = {0};
uint8_t index_LM35 = 0;
uint16_t Poti_Array[8] = {0};
uint8_t index_Poti = 0;

void adc_init() {
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	00 d0       	rcall	.+0      	; 0xd0 <adc_init+0x6>
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
    ADMUX = 0;  // AREF, Right Adjust, ADC0
      d4:	8c e7       	ldi	r24, 0x7C	; 124
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	fc 01       	movw	r30, r24
      da:	10 82       	st	Z, r1
    
    ADCSRB = 3; // Set trigger to Timer0 Compare Match
      dc:	8b e7       	ldi	r24, 0x7B	; 123
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	23 e0       	ldi	r18, 0x03	; 3
      e2:	fc 01       	movw	r30, r24
      e4:	20 83       	st	Z, r18
    
    ADCSRA = 7; // Set prescaler to 128
      e6:	8a e7       	ldi	r24, 0x7A	; 122
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	27 e0       	ldi	r18, 0x07	; 7
      ec:	fc 01       	movw	r30, r24
      ee:	20 83       	st	Z, r18
    ADCSRA |= (1 << ADEN) | (1 << ADSC); // Set ADC enable, no Auto trigger | (1 << ADATE)
      f0:	8a e7       	ldi	r24, 0x7A	; 122
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	2a e7       	ldi	r18, 0x7A	; 122
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	f9 01       	movw	r30, r18
      fa:	20 81       	ld	r18, Z
      fc:	20 6c       	ori	r18, 0xC0	; 192
      fe:	fc 01       	movw	r30, r24
     100:	20 83       	st	Z, r18
    
    while (ADCSRA & (1 << ADSC));   // wait till first conversion is finished
     102:	00 00       	nop
     104:	8a e7       	ldi	r24, 0x7A	; 122
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	fc 01       	movw	r30, r24
     10a:	80 81       	ld	r24, Z
     10c:	88 2f       	mov	r24, r24
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	80 74       	andi	r24, 0x40	; 64
     112:	99 27       	eor	r25, r25
     114:	89 2b       	or	r24, r25
     116:	b1 f7       	brne	.-20     	; 0x104 <adc_init+0x3a>
    uint16_t trash = ADC;
     118:	88 e7       	ldi	r24, 0x78	; 120
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	fc 01       	movw	r30, r24
     11e:	80 81       	ld	r24, Z
     120:	91 81       	ldd	r25, Z+1	; 0x01
     122:	9a 83       	std	Y+2, r25	; 0x02
     124:	89 83       	std	Y+1, r24	; 0x01
    
    ADCSRA |= (1 << ADIE) | (1 << ADSC); // ADC interrupt
     126:	8a e7       	ldi	r24, 0x7A	; 122
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	2a e7       	ldi	r18, 0x7A	; 122
     12c:	30 e0       	ldi	r19, 0x00	; 0
     12e:	f9 01       	movw	r30, r18
     130:	20 81       	ld	r18, Z
     132:	28 64       	ori	r18, 0x48	; 72
     134:	fc 01       	movw	r30, r24
     136:	20 83       	st	Z, r18
}
     138:	00 00       	nop
     13a:	0f 90       	pop	r0
     13c:	0f 90       	pop	r0
     13e:	df 91       	pop	r29
     140:	cf 91       	pop	r28
     142:	08 95       	ret

00000144 <adc_get_LM35>:

uint32_t adc_get_LM35() {
     144:	cf 93       	push	r28
     146:	df 93       	push	r29
     148:	00 d0       	rcall	.+0      	; 0x14a <adc_get_LM35+0x6>
     14a:	00 d0       	rcall	.+0      	; 0x14c <adc_get_LM35+0x8>
     14c:	00 d0       	rcall	.+0      	; 0x14e <adc_get_LM35+0xa>
     14e:	cd b7       	in	r28, 0x3d	; 61
     150:	de b7       	in	r29, 0x3e	; 62
    if (LM35_Array[7] == 0) {
     152:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <LM35_Array+0xe>
     156:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <LM35_Array+0xf>
     15a:	89 2b       	or	r24, r25
     15c:	21 f4       	brne	.+8      	; 0x166 <adc_get_LM35+0x22>
        return 0; // Not enoght data in Array
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	dc 01       	movw	r26, r24
     164:	3c c0       	rjmp	.+120    	; 0x1de <adc_get_LM35+0x9a>
    }
    
    uint32_t avg = 0;
     166:	19 82       	std	Y+1, r1	; 0x01
     168:	1a 82       	std	Y+2, r1	; 0x02
     16a:	1b 82       	std	Y+3, r1	; 0x03
     16c:	1c 82       	std	Y+4, r1	; 0x04
    
    for (int i = 0; i < 8; i++) {
     16e:	1e 82       	std	Y+6, r1	; 0x06
     170:	1d 82       	std	Y+5, r1	; 0x05
     172:	1d c0       	rjmp	.+58     	; 0x1ae <adc_get_LM35+0x6a>
        avg += LM35_Array[i];
     174:	8d 81       	ldd	r24, Y+5	; 0x05
     176:	9e 81       	ldd	r25, Y+6	; 0x06
     178:	88 0f       	add	r24, r24
     17a:	99 1f       	adc	r25, r25
     17c:	85 5e       	subi	r24, 0xE5	; 229
     17e:	9e 4f       	sbci	r25, 0xFE	; 254
     180:	fc 01       	movw	r30, r24
     182:	80 81       	ld	r24, Z
     184:	91 81       	ldd	r25, Z+1	; 0x01
     186:	cc 01       	movw	r24, r24
     188:	a0 e0       	ldi	r26, 0x00	; 0
     18a:	b0 e0       	ldi	r27, 0x00	; 0
     18c:	29 81       	ldd	r18, Y+1	; 0x01
     18e:	3a 81       	ldd	r19, Y+2	; 0x02
     190:	4b 81       	ldd	r20, Y+3	; 0x03
     192:	5c 81       	ldd	r21, Y+4	; 0x04
     194:	82 0f       	add	r24, r18
     196:	93 1f       	adc	r25, r19
     198:	a4 1f       	adc	r26, r20
     19a:	b5 1f       	adc	r27, r21
     19c:	89 83       	std	Y+1, r24	; 0x01
     19e:	9a 83       	std	Y+2, r25	; 0x02
     1a0:	ab 83       	std	Y+3, r26	; 0x03
     1a2:	bc 83       	std	Y+4, r27	; 0x04
        return 0; // Not enoght data in Array
    }
    
    uint32_t avg = 0;
    
    for (int i = 0; i < 8; i++) {
     1a4:	8d 81       	ldd	r24, Y+5	; 0x05
     1a6:	9e 81       	ldd	r25, Y+6	; 0x06
     1a8:	01 96       	adiw	r24, 0x01	; 1
     1aa:	9e 83       	std	Y+6, r25	; 0x06
     1ac:	8d 83       	std	Y+5, r24	; 0x05
     1ae:	8d 81       	ldd	r24, Y+5	; 0x05
     1b0:	9e 81       	ldd	r25, Y+6	; 0x06
     1b2:	08 97       	sbiw	r24, 0x08	; 8
     1b4:	fc f2       	brlt	.-66     	; 0x174 <adc_get_LM35+0x30>
        avg += LM35_Array[i];
    }
    avg = avg / 8;
     1b6:	89 81       	ldd	r24, Y+1	; 0x01
     1b8:	9a 81       	ldd	r25, Y+2	; 0x02
     1ba:	ab 81       	ldd	r26, Y+3	; 0x03
     1bc:	bc 81       	ldd	r27, Y+4	; 0x04
     1be:	68 94       	set
     1c0:	12 f8       	bld	r1, 2
     1c2:	b6 95       	lsr	r27
     1c4:	a7 95       	ror	r26
     1c6:	97 95       	ror	r25
     1c8:	87 95       	ror	r24
     1ca:	16 94       	lsr	r1
     1cc:	d1 f7       	brne	.-12     	; 0x1c2 <adc_get_LM35+0x7e>
     1ce:	89 83       	std	Y+1, r24	; 0x01
     1d0:	9a 83       	std	Y+2, r25	; 0x02
     1d2:	ab 83       	std	Y+3, r26	; 0x03
     1d4:	bc 83       	std	Y+4, r27	; 0x04
    
    return avg;
     1d6:	89 81       	ldd	r24, Y+1	; 0x01
     1d8:	9a 81       	ldd	r25, Y+2	; 0x02
     1da:	ab 81       	ldd	r26, Y+3	; 0x03
     1dc:	bc 81       	ldd	r27, Y+4	; 0x04
}
     1de:	bc 01       	movw	r22, r24
     1e0:	cd 01       	movw	r24, r26
     1e2:	26 96       	adiw	r28, 0x06	; 6
     1e4:	0f b6       	in	r0, 0x3f	; 63
     1e6:	f8 94       	cli
     1e8:	de bf       	out	0x3e, r29	; 62
     1ea:	0f be       	out	0x3f, r0	; 63
     1ec:	cd bf       	out	0x3d, r28	; 61
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	08 95       	ret

000001f4 <adc_get_Poti>:

uint32_t adc_get_Poti() {
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	00 d0       	rcall	.+0      	; 0x1fa <adc_get_Poti+0x6>
     1fa:	00 d0       	rcall	.+0      	; 0x1fc <adc_get_Poti+0x8>
     1fc:	00 d0       	rcall	.+0      	; 0x1fe <adc_get_Poti+0xa>
     1fe:	cd b7       	in	r28, 0x3d	; 61
     200:	de b7       	in	r29, 0x3e	; 62
    if (Poti_Array[7] == 0) {
     202:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <Poti_Array+0xe>
     206:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <Poti_Array+0xf>
     20a:	89 2b       	or	r24, r25
     20c:	21 f4       	brne	.+8      	; 0x216 <adc_get_Poti+0x22>
        return 0; // Not enoght data in Array
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	dc 01       	movw	r26, r24
     214:	4e c0       	rjmp	.+156    	; 0x2b2 <adc_get_Poti+0xbe>
    }
    
    uint32_t avg = 0;
     216:	19 82       	std	Y+1, r1	; 0x01
     218:	1a 82       	std	Y+2, r1	; 0x02
     21a:	1b 82       	std	Y+3, r1	; 0x03
     21c:	1c 82       	std	Y+4, r1	; 0x04
    
    for (int i = 0; i < 8; i++) {
     21e:	1e 82       	std	Y+6, r1	; 0x06
     220:	1d 82       	std	Y+5, r1	; 0x05
     222:	2f c0       	rjmp	.+94     	; 0x282 <adc_get_Poti+0x8e>
        ADCSRA &= (1 << ADIE);
     224:	8a e7       	ldi	r24, 0x7A	; 122
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	2a e7       	ldi	r18, 0x7A	; 122
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	f9 01       	movw	r30, r18
     22e:	20 81       	ld	r18, Z
     230:	28 70       	andi	r18, 0x08	; 8
     232:	fc 01       	movw	r30, r24
     234:	20 83       	st	Z, r18
        avg += Poti_Array[i];
     236:	8d 81       	ldd	r24, Y+5	; 0x05
     238:	9e 81       	ldd	r25, Y+6	; 0x06
     23a:	88 0f       	add	r24, r24
     23c:	99 1f       	adc	r25, r25
     23e:	84 5d       	subi	r24, 0xD4	; 212
     240:	9e 4f       	sbci	r25, 0xFE	; 254
     242:	fc 01       	movw	r30, r24
     244:	80 81       	ld	r24, Z
     246:	91 81       	ldd	r25, Z+1	; 0x01
     248:	cc 01       	movw	r24, r24
     24a:	a0 e0       	ldi	r26, 0x00	; 0
     24c:	b0 e0       	ldi	r27, 0x00	; 0
     24e:	29 81       	ldd	r18, Y+1	; 0x01
     250:	3a 81       	ldd	r19, Y+2	; 0x02
     252:	4b 81       	ldd	r20, Y+3	; 0x03
     254:	5c 81       	ldd	r21, Y+4	; 0x04
     256:	82 0f       	add	r24, r18
     258:	93 1f       	adc	r25, r19
     25a:	a4 1f       	adc	r26, r20
     25c:	b5 1f       	adc	r27, r21
     25e:	89 83       	std	Y+1, r24	; 0x01
     260:	9a 83       	std	Y+2, r25	; 0x02
     262:	ab 83       	std	Y+3, r26	; 0x03
     264:	bc 83       	std	Y+4, r27	; 0x04
        ADCSRA |= (1 << ADIE);
     266:	8a e7       	ldi	r24, 0x7A	; 122
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	2a e7       	ldi	r18, 0x7A	; 122
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	f9 01       	movw	r30, r18
     270:	20 81       	ld	r18, Z
     272:	28 60       	ori	r18, 0x08	; 8
     274:	fc 01       	movw	r30, r24
     276:	20 83       	st	Z, r18
        return 0; // Not enoght data in Array
    }
    
    uint32_t avg = 0;
    
    for (int i = 0; i < 8; i++) {
     278:	8d 81       	ldd	r24, Y+5	; 0x05
     27a:	9e 81       	ldd	r25, Y+6	; 0x06
     27c:	01 96       	adiw	r24, 0x01	; 1
     27e:	9e 83       	std	Y+6, r25	; 0x06
     280:	8d 83       	std	Y+5, r24	; 0x05
     282:	8d 81       	ldd	r24, Y+5	; 0x05
     284:	9e 81       	ldd	r25, Y+6	; 0x06
     286:	08 97       	sbiw	r24, 0x08	; 8
     288:	6c f2       	brlt	.-102    	; 0x224 <adc_get_Poti+0x30>
        ADCSRA &= (1 << ADIE);
        avg += Poti_Array[i];
        ADCSRA |= (1 << ADIE);
    }
    avg = avg / 8;
     28a:	89 81       	ldd	r24, Y+1	; 0x01
     28c:	9a 81       	ldd	r25, Y+2	; 0x02
     28e:	ab 81       	ldd	r26, Y+3	; 0x03
     290:	bc 81       	ldd	r27, Y+4	; 0x04
     292:	68 94       	set
     294:	12 f8       	bld	r1, 2
     296:	b6 95       	lsr	r27
     298:	a7 95       	ror	r26
     29a:	97 95       	ror	r25
     29c:	87 95       	ror	r24
     29e:	16 94       	lsr	r1
     2a0:	d1 f7       	brne	.-12     	; 0x296 <adc_get_Poti+0xa2>
     2a2:	89 83       	std	Y+1, r24	; 0x01
     2a4:	9a 83       	std	Y+2, r25	; 0x02
     2a6:	ab 83       	std	Y+3, r26	; 0x03
     2a8:	bc 83       	std	Y+4, r27	; 0x04
    
    return avg;
     2aa:	89 81       	ldd	r24, Y+1	; 0x01
     2ac:	9a 81       	ldd	r25, Y+2	; 0x02
     2ae:	ab 81       	ldd	r26, Y+3	; 0x03
     2b0:	bc 81       	ldd	r27, Y+4	; 0x04
}
     2b2:	bc 01       	movw	r22, r24
     2b4:	cd 01       	movw	r24, r26
     2b6:	26 96       	adiw	r28, 0x06	; 6
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	f8 94       	cli
     2bc:	de bf       	out	0x3e, r29	; 62
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	cd bf       	out	0x3d, r28	; 61
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	08 95       	ret

000002c8 <__vector_24>:

ISR(ADC_vect){
     2c8:	1f 92       	push	r1
     2ca:	0f 92       	push	r0
     2cc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     2d0:	0f 92       	push	r0
     2d2:	11 24       	eor	r1, r1
     2d4:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     2d8:	0f 92       	push	r0
     2da:	2f 93       	push	r18
     2dc:	3f 93       	push	r19
     2de:	4f 93       	push	r20
     2e0:	5f 93       	push	r21
     2e2:	6f 93       	push	r22
     2e4:	7f 93       	push	r23
     2e6:	8f 93       	push	r24
     2e8:	9f 93       	push	r25
     2ea:	af 93       	push	r26
     2ec:	bf 93       	push	r27
     2ee:	ef 93       	push	r30
     2f0:	ff 93       	push	r31
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	00 d0       	rcall	.+0      	; 0x2f8 <__vector_24+0x30>
     2f8:	cd b7       	in	r28, 0x3d	; 61
     2fa:	de b7       	in	r29, 0x3e	; 62
    volatile uint16_t res = ADC;
     2fc:	88 e7       	ldi	r24, 0x78	; 120
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	fc 01       	movw	r30, r24
     302:	80 81       	ld	r24, Z
     304:	91 81       	ldd	r25, Z+1	; 0x01
     306:	9a 83       	std	Y+2, r25	; 0x02
     308:	89 83       	std	Y+1, r24	; 0x01
    switch (ADMUX) {
     30a:	8c e7       	ldi	r24, 0x7C	; 124
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	fc 01       	movw	r30, r24
     310:	80 81       	ld	r24, Z
     312:	88 2f       	mov	r24, r24
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	00 97       	sbiw	r24, 0x00	; 0
     318:	19 f0       	breq	.+6      	; 0x320 <__vector_24+0x58>
     31a:	01 97       	sbiw	r24, 0x01	; 1
     31c:	79 f1       	breq	.+94     	; 0x37c <__vector_24+0xb4>
            pin = Temperatur;
            ADMUX = 0;
            break;
            
        default:
            break;
     31e:	5a c0       	rjmp	.+180    	; 0x3d4 <__vector_24+0x10c>

ISR(ADC_vect){
    volatile uint16_t res = ADC;
    switch (ADMUX) {
        case 0:
			Led7_On();
     320:	a5 d0       	rcall	.+330    	; 0x46c <Led7_On>
            if (index_LM35 >= 8 || index_LM35 == 0) {
     322:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <index_LM35>
     326:	88 30       	cpi	r24, 0x08	; 8
     328:	20 f4       	brcc	.+8      	; 0x332 <__vector_24+0x6a>
     32a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <index_LM35>
     32e:	88 23       	and	r24, r24
     330:	51 f4       	brne	.+20     	; 0x346 <__vector_24+0x7e>
                LM35_Array[0] = res;
     332:	89 81       	ldd	r24, Y+1	; 0x01
     334:	9a 81       	ldd	r25, Y+2	; 0x02
     336:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <LM35_Array+0x1>
     33a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <LM35_Array>
                index_LM35 = 1;
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <index_LM35>
     344:	12 c0       	rjmp	.+36     	; 0x36a <__vector_24+0xa2>
            }else {
                LM35_Array[index_LM35] = res;
     346:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <index_LM35>
     34a:	88 2f       	mov	r24, r24
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	29 81       	ldd	r18, Y+1	; 0x01
     350:	3a 81       	ldd	r19, Y+2	; 0x02
     352:	88 0f       	add	r24, r24
     354:	99 1f       	adc	r25, r25
     356:	85 5e       	subi	r24, 0xE5	; 229
     358:	9e 4f       	sbci	r25, 0xFE	; 254
     35a:	fc 01       	movw	r30, r24
     35c:	31 83       	std	Z+1, r19	; 0x01
     35e:	20 83       	st	Z, r18
                index_LM35++;
     360:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <index_LM35>
     364:	8f 5f       	subi	r24, 0xFF	; 255
     366:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <index_LM35>
            }
            pin = Poti;
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
            ADMUX = 1;
     370:	8c e7       	ldi	r24, 0x7C	; 124
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	21 e0       	ldi	r18, 0x01	; 1
     376:	fc 01       	movw	r30, r24
     378:	20 83       	st	Z, r18
            break;
            
        case 1:
			Led8_On();
     37a:	2c c0       	rjmp	.+88     	; 0x3d4 <__vector_24+0x10c>
     37c:	88 d0       	rcall	.+272    	; 0x48e <Led8_On>
            if (index_Poti >= 8 || index_Poti == 0) {
     37e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <index_Poti>
     382:	88 30       	cpi	r24, 0x08	; 8
     384:	20 f4       	brcc	.+8      	; 0x38e <__vector_24+0xc6>
     386:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <index_Poti>
     38a:	88 23       	and	r24, r24
     38c:	51 f4       	brne	.+20     	; 0x3a2 <__vector_24+0xda>
                Poti_Array[0] = res;
     38e:	89 81       	ldd	r24, Y+1	; 0x01
     390:	9a 81       	ldd	r25, Y+2	; 0x02
     392:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <Poti_Array+0x1>
     396:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <Poti_Array>
                index_Poti = 1;
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <index_Poti>
     3a0:	12 c0       	rjmp	.+36     	; 0x3c6 <__vector_24+0xfe>
            }else {
                Poti_Array[index_Poti] = res;
     3a2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <index_Poti>
     3a6:	88 2f       	mov	r24, r24
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	29 81       	ldd	r18, Y+1	; 0x01
     3ac:	3a 81       	ldd	r19, Y+2	; 0x02
     3ae:	88 0f       	add	r24, r24
     3b0:	99 1f       	adc	r25, r25
     3b2:	84 5d       	subi	r24, 0xD4	; 212
     3b4:	9e 4f       	sbci	r25, 0xFE	; 254
     3b6:	fc 01       	movw	r30, r24
     3b8:	31 83       	std	Z+1, r19	; 0x01
     3ba:	20 83       	st	Z, r18
                index_Poti++;
     3bc:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <index_Poti>
     3c0:	8f 5f       	subi	r24, 0xFF	; 255
     3c2:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <index_Poti>
            }
            pin = Temperatur;
     3c6:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
            ADMUX = 0;
     3ca:	8c e7       	ldi	r24, 0x7C	; 124
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	fc 01       	movw	r30, r24
     3d0:	10 82       	st	Z, r1
            break;
     3d2:	00 00       	nop
            
        default:
            break;
    }
    
    ADCSRA |= (1 << ADSC);
     3d4:	8a e7       	ldi	r24, 0x7A	; 122
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	2a e7       	ldi	r18, 0x7A	; 122
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	f9 01       	movw	r30, r18
     3de:	20 81       	ld	r18, Z
     3e0:	20 64       	ori	r18, 0x40	; 64
     3e2:	fc 01       	movw	r30, r24
     3e4:	20 83       	st	Z, r18
}
     3e6:	00 00       	nop
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	ff 91       	pop	r31
     3f2:	ef 91       	pop	r30
     3f4:	bf 91       	pop	r27
     3f6:	af 91       	pop	r26
     3f8:	9f 91       	pop	r25
     3fa:	8f 91       	pop	r24
     3fc:	7f 91       	pop	r23
     3fe:	6f 91       	pop	r22
     400:	5f 91       	pop	r21
     402:	4f 91       	pop	r20
     404:	3f 91       	pop	r19
     406:	2f 91       	pop	r18
     408:	0f 90       	pop	r0
     40a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     40e:	0f 90       	pop	r0
     410:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     414:	0f 90       	pop	r0
     416:	1f 90       	pop	r1
     418:	18 95       	reti

0000041a <Led_init>:
void Led7_On(void) {
    PORTB |= (1 << 1);
}
void Led7_Off(void) {
    PORTB &= ~(1 << 1);
}
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	1f 92       	push	r1
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
     424:	89 83       	std	Y+1, r24	; 0x01
     426:	84 e2       	ldi	r24, 0x24	; 36
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	2f ef       	ldi	r18, 0xFF	; 255
     42c:	fc 01       	movw	r30, r24
     42e:	20 83       	st	Z, r18
     430:	85 e2       	ldi	r24, 0x25	; 37
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	fc 01       	movw	r30, r24
     436:	10 82       	st	Z, r1
     438:	89 81       	ldd	r24, Y+1	; 0x01
     43a:	88 23       	and	r24, r24
     43c:	91 f0       	breq	.+36     	; 0x462 <Led_init+0x48>
     43e:	8a e2       	ldi	r24, 0x2A	; 42
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	2a e2       	ldi	r18, 0x2A	; 42
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	f9 01       	movw	r30, r18
     448:	20 81       	ld	r18, Z
     44a:	2f 61       	ori	r18, 0x1F	; 31
     44c:	fc 01       	movw	r30, r24
     44e:	20 83       	st	Z, r18
     450:	8b e2       	ldi	r24, 0x2B	; 43
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	2b e2       	ldi	r18, 0x2B	; 43
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	f9 01       	movw	r30, r18
     45a:	20 81       	ld	r18, Z
     45c:	20 7e       	andi	r18, 0xE0	; 224
     45e:	fc 01       	movw	r30, r24
     460:	20 83       	st	Z, r18
     462:	00 00       	nop
     464:	0f 90       	pop	r0
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	08 95       	ret

0000046c <Led7_On>:
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	cd b7       	in	r28, 0x3d	; 61
     472:	de b7       	in	r29, 0x3e	; 62
     474:	85 e2       	ldi	r24, 0x25	; 37
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	25 e2       	ldi	r18, 0x25	; 37
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	f9 01       	movw	r30, r18
     47e:	20 81       	ld	r18, Z
     480:	22 60       	ori	r18, 0x02	; 2
     482:	fc 01       	movw	r30, r24
     484:	20 83       	st	Z, r18
     486:	00 00       	nop
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	08 95       	ret

0000048e <Led8_On>:

/**
led8 - ioB0
*/
void Led8_On(void) {
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
     492:	cd b7       	in	r28, 0x3d	; 61
     494:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 0);
     496:	85 e2       	ldi	r24, 0x25	; 37
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	25 e2       	ldi	r18, 0x25	; 37
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	f9 01       	movw	r30, r18
     4a0:	20 81       	ld	r18, Z
     4a2:	21 60       	ori	r18, 0x01	; 1
     4a4:	fc 01       	movw	r30, r24
     4a6:	20 83       	st	Z, r18
}
     4a8:	00 00       	nop
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	08 95       	ret

000004b0 <Taster_init>:
 ---------------------
 - DDR Reg has to be set to 0
 - PORT Reg has to be set to 1
 -> Pin is input with pull-up
 */
void Taster_init() {
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
    
    // set to inputs
    DDRC &= ~(1 << 2);
     4b8:	87 e2       	ldi	r24, 0x27	; 39
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	27 e2       	ldi	r18, 0x27	; 39
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	f9 01       	movw	r30, r18
     4c2:	20 81       	ld	r18, Z
     4c4:	2b 7f       	andi	r18, 0xFB	; 251
     4c6:	fc 01       	movw	r30, r24
     4c8:	20 83       	st	Z, r18
    DDRD &= ~( (1 << 7) | (1 << 6) | (1 << 5) );
     4ca:	8a e2       	ldi	r24, 0x2A	; 42
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	2a e2       	ldi	r18, 0x2A	; 42
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	f9 01       	movw	r30, r18
     4d4:	20 81       	ld	r18, Z
     4d6:	2f 71       	andi	r18, 0x1F	; 31
     4d8:	fc 01       	movw	r30, r24
     4da:	20 83       	st	Z, r18
    
    // enable pull-up
    PORTC |= (1 << 2);
     4dc:	88 e2       	ldi	r24, 0x28	; 40
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	28 e2       	ldi	r18, 0x28	; 40
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	f9 01       	movw	r30, r18
     4e6:	20 81       	ld	r18, Z
     4e8:	24 60       	ori	r18, 0x04	; 4
     4ea:	fc 01       	movw	r30, r24
     4ec:	20 83       	st	Z, r18
    PORTD |= (1 << 7) | (1 << 6) | (1 << 5);
     4ee:	8b e2       	ldi	r24, 0x2B	; 43
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	2b e2       	ldi	r18, 0x2B	; 43
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	f9 01       	movw	r30, r18
     4f8:	20 81       	ld	r18, Z
     4fa:	20 6e       	ori	r18, 0xE0	; 224
     4fc:	fc 01       	movw	r30, r24
     4fe:	20 83       	st	Z, r18
}
     500:	00 00       	nop
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	08 95       	ret

00000508 <main>:
#include <avr/interrupt.h>
#include "adc/adc.h"

#define CLK_F_MHZ 16

int main(void) {
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
     510:	c7 57       	subi	r28, 0x77	; 119
     512:	d1 09       	sbc	r29, r1
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	f8 94       	cli
     518:	de bf       	out	0x3e, r29	; 62
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	cd bf       	out	0x3d, r28	; 61
	
    cli();
     51e:	f8 94       	cli
    Led_init(0);	// Don't set LEDs at PORTD
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	7b df       	rcall	.-266    	; 0x41a <Led_init>
	Taster_init();
     524:	c5 df       	rcall	.-118    	; 0x4b0 <Taster_init>
    Timer_init(CLK_F_MHZ); // Init timer with 16MHZ clock
     526:	80 e1       	ldi	r24, 0x10	; 16
	uart_init_isr();
     528:	63 d0       	rcall	.+198    	; 0x5f0 <Timer_init>
    adc_init();
     52a:	78 d2       	rcall	.+1264   	; 0xa1c <uart_init_isr>
     52c:	ce dd       	rcall	.-1124   	; 0xca <adc_init>
	sei();
     52e:	78 94       	sei
    
    uint16_t timeVarMain = Timer_getTick();
     530:	f6 d0       	rcall	.+492    	; 0x71e <Timer_getTick>
     532:	9a 83       	std	Y+2, r25	; 0x02
     534:	89 83       	std	Y+1, r24	; 0x01
     536:	22 e3       	ldi	r18, 0x32	; 50
    char data_s;
    char data[50] = {0};
     538:	ce 01       	movw	r24, r28
     53a:	05 96       	adiw	r24, 0x05	; 5
     53c:	fc 01       	movw	r30, r24
     53e:	32 2f       	mov	r19, r18
     540:	11 92       	st	Z+, r1
     542:	3a 95       	dec	r19
     544:	e9 f7       	brne	.-6      	; 0x540 <main+0x38>
    int i = 0;
     546:	1c 82       	std	Y+4, r1	; 0x04
     548:	1b 82       	std	Y+3, r1	; 0x03
	char str[65];
	
    while (1) {
        
        if((Timer_getTick() - timeVarMain) >= 5000){
     54a:	e9 d0       	rcall	.+466    	; 0x71e <Timer_getTick>
     54c:	9c 01       	movw	r18, r24
     54e:	89 81       	ldd	r24, Y+1	; 0x01
     550:	9a 81       	ldd	r25, Y+2	; 0x02
     552:	a9 01       	movw	r20, r18
     554:	48 1b       	sub	r20, r24
     556:	59 0b       	sbc	r21, r25
     558:	ca 01       	movw	r24, r20
     55a:	88 38       	cpi	r24, 0x88	; 136
     55c:	93 41       	sbci	r25, 0x13	; 19
            timeVarMain = Timer_getTick();
     55e:	a8 f3       	brcs	.-22     	; 0x54a <main+0x42>
     560:	de d0       	rcall	.+444    	; 0x71e <Timer_getTick>
     562:	9a 83       	std	Y+2, r25	; 0x02
     564:	89 83       	std	Y+1, r24	; 0x01
            
            
            sprintf(str, "Temperatur: %d\n", adc_get_LM35());
     566:	ee dd       	rcall	.-1060   	; 0x144 <adc_get_LM35>
     568:	dc 01       	movw	r26, r24
     56a:	cb 01       	movw	r24, r22
     56c:	2b 2f       	mov	r18, r27
     56e:	2f 93       	push	r18
     570:	2a 2f       	mov	r18, r26
     572:	2f 93       	push	r18
     574:	29 2f       	mov	r18, r25
     576:	2f 93       	push	r18
     578:	8f 93       	push	r24
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	89 2f       	mov	r24, r25
     580:	8f 93       	push	r24
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	91 e0       	ldi	r25, 0x01	; 1
     586:	8f 93       	push	r24
     588:	ce 01       	movw	r24, r28
     58a:	c7 96       	adiw	r24, 0x37	; 55
     58c:	29 2f       	mov	r18, r25
     58e:	2f 93       	push	r18
     590:	8f 93       	push	r24
     592:	38 d3       	rcall	.+1648   	; 0xc04 <sprintf>
     594:	8d b7       	in	r24, 0x3d	; 61
     596:	9e b7       	in	r25, 0x3e	; 62
     598:	08 96       	adiw	r24, 0x08	; 8
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
            uart_send_isr(str);
     5a2:	cd bf       	out	0x3d, r28	; 61
     5a4:	ce 01       	movw	r24, r28
     5a6:	c7 96       	adiw	r24, 0x37	; 55
     5a8:	54 d2       	rcall	.+1192   	; 0xa52 <uart_send_isr>
            
            sprintf(str, "Poti: %d\n", adc_get_Poti());
     5aa:	24 de       	rcall	.-952    	; 0x1f4 <adc_get_Poti>
     5ac:	dc 01       	movw	r26, r24
     5ae:	cb 01       	movw	r24, r22
     5b0:	2b 2f       	mov	r18, r27
     5b2:	2f 93       	push	r18
     5b4:	2a 2f       	mov	r18, r26
     5b6:	2f 93       	push	r18
     5b8:	29 2f       	mov	r18, r25
     5ba:	2f 93       	push	r18
     5bc:	8f 93       	push	r24
     5be:	80 e1       	ldi	r24, 0x10	; 16
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	89 2f       	mov	r24, r25
     5c4:	8f 93       	push	r24
     5c6:	80 e1       	ldi	r24, 0x10	; 16
     5c8:	91 e0       	ldi	r25, 0x01	; 1
     5ca:	8f 93       	push	r24
     5cc:	ce 01       	movw	r24, r28
     5ce:	c7 96       	adiw	r24, 0x37	; 55
     5d0:	29 2f       	mov	r18, r25
     5d2:	2f 93       	push	r18
     5d4:	8f 93       	push	r24
     5d6:	16 d3       	rcall	.+1580   	; 0xc04 <sprintf>
     5d8:	ed b7       	in	r30, 0x3d	; 61
     5da:	fe b7       	in	r31, 0x3e	; 62
     5dc:	38 96       	adiw	r30, 0x08	; 8
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	f8 94       	cli
     5e2:	de bf       	out	0x3e, r29	; 62
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	cd bf       	out	0x3d, r28	; 61
            uart_send_isr(str);
     5e8:	ce 01       	movw	r24, r28
     5ea:	c7 96       	adiw	r24, 0x37	; 55
     5ec:	32 d2       	rcall	.+1124   	; 0xa52 <uart_send_isr>
     5ee:	ad cf       	rjmp	.-166    	; 0x54a <main+0x42>

000005f0 <Timer_init>:
            }
        }*/
        
        //trafficLight(0);
        //playground();
    }
     5f0:	cf 93       	push	r28
    }
    
    TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
}
     5f2:	df 93       	push	r29
     5f4:	1f 92       	push	r1
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
     5fa:	89 83       	std	Y+1, r24	; 0x01
     5fc:	89 81       	ldd	r24, Y+1	; 0x01
     5fe:	88 2f       	mov	r24, r24
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	05 d0       	rcall	.+10     	; 0x60e <Timer_init_withoutStruct>
     604:	00 00       	nop
     606:	0f 90       	pop	r0
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	08 95       	ret

0000060e <Timer_init_withoutStruct>:

void Timer_init_withoutStruct(uint8_t clockFreqMhz) {
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	1f 92       	push	r1
     614:	cd b7       	in	r28, 0x3d	; 61
     616:	de b7       	in	r29, 0x3e	; 62
     618:	89 83       	std	Y+1, r24	; 0x01
    // datasheet page 97
    // set mode to clear timer on compare (CTC)
    TCCR0B &= ~(1 << WGM02);
     61a:	85 e4       	ldi	r24, 0x45	; 69
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	25 e4       	ldi	r18, 0x45	; 69
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	f9 01       	movw	r30, r18
     624:	20 81       	ld	r18, Z
     626:	27 7f       	andi	r18, 0xF7	; 247
     628:	fc 01       	movw	r30, r24
     62a:	20 83       	st	Z, r18
    TCCR0A |= (1 << WGM01);
     62c:	84 e4       	ldi	r24, 0x44	; 68
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	24 e4       	ldi	r18, 0x44	; 68
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	f9 01       	movw	r30, r18
     636:	20 81       	ld	r18, Z
     638:	22 60       	ori	r18, 0x02	; 2
     63a:	fc 01       	movw	r30, r24
     63c:	20 83       	st	Z, r18
    TCCR0A &= ~(1 << WGM00);
     63e:	84 e4       	ldi	r24, 0x44	; 68
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	24 e4       	ldi	r18, 0x44	; 68
     644:	30 e0       	ldi	r19, 0x00	; 0
     646:	f9 01       	movw	r30, r18
     648:	20 81       	ld	r18, Z
     64a:	2e 7f       	andi	r18, 0xFE	; 254
     64c:	fc 01       	movw	r30, r24
     64e:	20 83       	st	Z, r18
    
    
    switch (clockFreqMhz) {
     650:	89 81       	ldd	r24, Y+1	; 0x01
     652:	88 2f       	mov	r24, r24
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	40 97       	sbiw	r24, 0x10	; 16
     658:	09 f5       	brne	.+66     	; 0x69c <Timer_init_withoutStruct+0x8e>
        case 16:
            // extern osc (16 MHZ)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = 249;   // dez 249; range 0 - 249 -> 250 cycles till interrupt
     65a:	87 e4       	ldi	r24, 0x47	; 71
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	29 ef       	ldi	r18, 0xF9	; 249
     660:	fc 01       	movw	r30, r24
     662:	20 83       	st	Z, r18
            
            // set prescaler to 1/64
            TCCR0B &= ~(1 << CS02);
     664:	85 e4       	ldi	r24, 0x45	; 69
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	25 e4       	ldi	r18, 0x45	; 69
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	f9 01       	movw	r30, r18
     66e:	20 81       	ld	r18, Z
     670:	2b 7f       	andi	r18, 0xFB	; 251
     672:	fc 01       	movw	r30, r24
     674:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
     676:	85 e4       	ldi	r24, 0x45	; 69
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	25 e4       	ldi	r18, 0x45	; 69
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	f9 01       	movw	r30, r18
     680:	20 81       	ld	r18, Z
     682:	22 60       	ori	r18, 0x02	; 2
     684:	fc 01       	movw	r30, r24
     686:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS00);
     688:	85 e4       	ldi	r24, 0x45	; 69
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	25 e4       	ldi	r18, 0x45	; 69
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	f9 01       	movw	r30, r18
     692:	20 81       	ld	r18, Z
     694:	21 60       	ori	r18, 0x01	; 1
     696:	fc 01       	movw	r30, r24
     698:	20 83       	st	Z, r18
            break;
     69a:	21 c0       	rjmp	.+66     	; 0x6de <Timer_init_withoutStruct+0xd0>
            
        default:
            // inter osc (8 MHZ divided by 8 -> 1 MHZ clock)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = 0x7C;   // dez 124; range 0 - 124 -> 125 cycles till interrupt
     69c:	87 e4       	ldi	r24, 0x47	; 71
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	2c e7       	ldi	r18, 0x7C	; 124
     6a2:	fc 01       	movw	r30, r24
     6a4:	20 83       	st	Z, r18
            
            // set prescaler to 1/8
            TCCR0B &= ~(1 << CS02);
     6a6:	85 e4       	ldi	r24, 0x45	; 69
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	25 e4       	ldi	r18, 0x45	; 69
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	f9 01       	movw	r30, r18
     6b0:	20 81       	ld	r18, Z
     6b2:	2b 7f       	andi	r18, 0xFB	; 251
     6b4:	fc 01       	movw	r30, r24
     6b6:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
     6b8:	85 e4       	ldi	r24, 0x45	; 69
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	25 e4       	ldi	r18, 0x45	; 69
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	f9 01       	movw	r30, r18
     6c2:	20 81       	ld	r18, Z
     6c4:	22 60       	ori	r18, 0x02	; 2
     6c6:	fc 01       	movw	r30, r24
     6c8:	20 83       	st	Z, r18
            TCCR0B &= ~(1 << CS00);
     6ca:	85 e4       	ldi	r24, 0x45	; 69
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	25 e4       	ldi	r18, 0x45	; 69
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	f9 01       	movw	r30, r18
     6d4:	20 81       	ld	r18, Z
     6d6:	2e 7f       	andi	r18, 0xFE	; 254
     6d8:	fc 01       	movw	r30, r24
     6da:	20 83       	st	Z, r18
            break;
     6dc:	00 00       	nop
    }
    
    TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
     6de:	8e e6       	ldi	r24, 0x6E	; 110
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	2e e6       	ldi	r18, 0x6E	; 110
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	f9 01       	movw	r30, r18
     6e8:	20 81       	ld	r18, Z
     6ea:	2b 7f       	andi	r18, 0xFB	; 251
     6ec:	fc 01       	movw	r30, r24
     6ee:	20 83       	st	Z, r18
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
     6f0:	8e e6       	ldi	r24, 0x6E	; 110
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	2e e6       	ldi	r18, 0x6E	; 110
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	f9 01       	movw	r30, r18
     6fa:	20 81       	ld	r18, Z
     6fc:	22 60       	ori	r18, 0x02	; 2
     6fe:	fc 01       	movw	r30, r24
     700:	20 83       	st	Z, r18
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
     702:	8e e6       	ldi	r24, 0x6E	; 110
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	2e e6       	ldi	r18, 0x6E	; 110
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	f9 01       	movw	r30, r18
     70c:	20 81       	ld	r18, Z
     70e:	2e 7f       	andi	r18, 0xFE	; 254
     710:	fc 01       	movw	r30, r24
     712:	20 83       	st	Z, r18
}
     714:	00 00       	nop
     716:	0f 90       	pop	r0
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	08 95       	ret

0000071e <Timer_getTick>:

uint16_t Timer_getTick() {
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
     722:	00 d0       	rcall	.+0      	; 0x724 <Timer_getTick+0x6>
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
    // disable global interrupt
    cli();
     728:	f8 94       	cli
    
    // store timer_count in a temp int that can't get changed by ISR
    uint16_t temp_timer_count = timer_count;
     72a:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <timer_count>
     72e:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <timer_count+0x1>
     732:	9a 83       	std	Y+2, r25	; 0x02
     734:	89 83       	std	Y+1, r24	; 0x01
    
    // enable global interrupt
    sei();
     736:	78 94       	sei

    return temp_timer_count;
     738:	89 81       	ldd	r24, Y+1	; 0x01
     73a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	08 95       	ret

00000746 <__vector_16>:
 ( not used atm)
 Timer compare A interrput:
 - increase timer_count
 - if timer_count is at max of uint16, set it to 0
 */
ISR(TIMER0_COMPA_vect){
     746:	1f 92       	push	r1
     748:	0f 92       	push	r0
     74a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     74e:	0f 92       	push	r0
     750:	11 24       	eor	r1, r1
     752:	8f 93       	push	r24
     754:	9f 93       	push	r25
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62
    timer_count++;
     75e:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <timer_count>
     762:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <timer_count+0x1>
     766:	01 96       	adiw	r24, 0x01	; 1
     768:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <timer_count+0x1>
     76c:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <timer_count>
}
     770:	00 00       	nop
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	9f 91       	pop	r25
     778:	8f 91       	pop	r24
     77a:	0f 90       	pop	r0
     77c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     780:	0f 90       	pop	r0
     782:	1f 90       	pop	r1
     784:	18 95       	reti

00000786 <buff_put>:
        // Return byte
        return pByte;
    }else {
        return 0;
    }
}
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	00 d0       	rcall	.+0      	; 0x78c <buff_put+0x6>
     78c:	1f 92       	push	r1
     78e:	cd b7       	in	r28, 0x3d	; 61
     790:	de b7       	in	r29, 0x3e	; 62
     792:	89 83       	std	Y+1, r24	; 0x01
     794:	7b 83       	std	Y+3, r23	; 0x03
     796:	6a 83       	std	Y+2, r22	; 0x02
     798:	81 ec       	ldi	r24, 0xC1	; 193
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	21 ec       	ldi	r18, 0xC1	; 193
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	f9 01       	movw	r30, r18
     7a2:	20 81       	ld	r18, Z
     7a4:	2f 7d       	andi	r18, 0xDF	; 223
     7a6:	fc 01       	movw	r30, r24
     7a8:	20 83       	st	Z, r18
     7aa:	81 ec       	ldi	r24, 0xC1	; 193
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	21 ec       	ldi	r18, 0xC1	; 193
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	f9 01       	movw	r30, r18
     7b4:	20 81       	ld	r18, Z
     7b6:	2f 77       	andi	r18, 0x7F	; 127
     7b8:	fc 01       	movw	r30, r24
     7ba:	20 83       	st	Z, r18
     7bc:	8a 81       	ldd	r24, Y+2	; 0x02
     7be:	9b 81       	ldd	r25, Y+3	; 0x03
     7c0:	8e 5f       	subi	r24, 0xFE	; 254
     7c2:	9d 4f       	sbci	r25, 0xFD	; 253
     7c4:	fc 01       	movw	r30, r24
     7c6:	80 81       	ld	r24, Z
     7c8:	91 81       	ldd	r25, Z+1	; 0x01
     7ca:	9c 01       	movw	r18, r24
     7cc:	2f 5f       	subi	r18, 0xFF	; 255
     7ce:	3f 4f       	sbci	r19, 0xFF	; 255
     7d0:	8a 81       	ldd	r24, Y+2	; 0x02
     7d2:	9b 81       	ldd	r25, Y+3	; 0x03
     7d4:	9e 5f       	subi	r25, 0xFE	; 254
     7d6:	fc 01       	movw	r30, r24
     7d8:	80 81       	ld	r24, Z
     7da:	91 81       	ldd	r25, Z+1	; 0x01
     7dc:	28 17       	cp	r18, r24
     7de:	39 07       	cpc	r19, r25
     7e0:	91 f0       	breq	.+36     	; 0x806 <buff_put+0x80>
     7e2:	8a 81       	ldd	r24, Y+2	; 0x02
     7e4:	9b 81       	ldd	r25, Y+3	; 0x03
     7e6:	9e 5f       	subi	r25, 0xFE	; 254
     7e8:	fc 01       	movw	r30, r24
     7ea:	80 81       	ld	r24, Z
     7ec:	91 81       	ldd	r25, Z+1	; 0x01
     7ee:	89 2b       	or	r24, r25
     7f0:	f1 f4       	brne	.+60     	; 0x82e <buff_put+0xa8>
     7f2:	8a 81       	ldd	r24, Y+2	; 0x02
     7f4:	9b 81       	ldd	r25, Y+3	; 0x03
     7f6:	8e 5f       	subi	r24, 0xFE	; 254
     7f8:	9d 4f       	sbci	r25, 0xFD	; 253
     7fa:	fc 01       	movw	r30, r24
     7fc:	80 81       	ld	r24, Z
     7fe:	91 81       	ldd	r25, Z+1	; 0x01
     800:	8f 3f       	cpi	r24, 0xFF	; 255
     802:	91 40       	sbci	r25, 0x01	; 1
     804:	a1 f4       	brne	.+40     	; 0x82e <buff_put+0xa8>
     806:	81 ec       	ldi	r24, 0xC1	; 193
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	21 ec       	ldi	r18, 0xC1	; 193
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	f9 01       	movw	r30, r18
     810:	20 81       	ld	r18, Z
     812:	20 62       	ori	r18, 0x20	; 32
     814:	fc 01       	movw	r30, r24
     816:	20 83       	st	Z, r18
     818:	81 ec       	ldi	r24, 0xC1	; 193
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	21 ec       	ldi	r18, 0xC1	; 193
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	f9 01       	movw	r30, r18
     822:	20 81       	ld	r18, Z
     824:	20 68       	ori	r18, 0x80	; 128
     826:	fc 01       	movw	r30, r24
     828:	20 83       	st	Z, r18
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	43 c0       	rjmp	.+134    	; 0x8b4 <buff_put+0x12e>
     82e:	8a 81       	ldd	r24, Y+2	; 0x02
     830:	9b 81       	ldd	r25, Y+3	; 0x03
     832:	8e 5f       	subi	r24, 0xFE	; 254
     834:	9d 4f       	sbci	r25, 0xFD	; 253
     836:	fc 01       	movw	r30, r24
     838:	80 81       	ld	r24, Z
     83a:	91 81       	ldd	r25, Z+1	; 0x01
     83c:	2a 81       	ldd	r18, Y+2	; 0x02
     83e:	3b 81       	ldd	r19, Y+3	; 0x03
     840:	82 0f       	add	r24, r18
     842:	93 1f       	adc	r25, r19
     844:	29 81       	ldd	r18, Y+1	; 0x01
     846:	fc 01       	movw	r30, r24
     848:	20 83       	st	Z, r18
     84a:	8a 81       	ldd	r24, Y+2	; 0x02
     84c:	9b 81       	ldd	r25, Y+3	; 0x03
     84e:	8e 5f       	subi	r24, 0xFE	; 254
     850:	9d 4f       	sbci	r25, 0xFD	; 253
     852:	fc 01       	movw	r30, r24
     854:	80 81       	ld	r24, Z
     856:	91 81       	ldd	r25, Z+1	; 0x01
     858:	9c 01       	movw	r18, r24
     85a:	2f 5f       	subi	r18, 0xFF	; 255
     85c:	3f 4f       	sbci	r19, 0xFF	; 255
     85e:	8a 81       	ldd	r24, Y+2	; 0x02
     860:	9b 81       	ldd	r25, Y+3	; 0x03
     862:	8e 5f       	subi	r24, 0xFE	; 254
     864:	9d 4f       	sbci	r25, 0xFD	; 253
     866:	fc 01       	movw	r30, r24
     868:	31 83       	std	Z+1, r19	; 0x01
     86a:	20 83       	st	Z, r18
     86c:	8a 81       	ldd	r24, Y+2	; 0x02
     86e:	9b 81       	ldd	r25, Y+3	; 0x03
     870:	8e 5f       	subi	r24, 0xFE	; 254
     872:	9d 4f       	sbci	r25, 0xFD	; 253
     874:	fc 01       	movw	r30, r24
     876:	80 81       	ld	r24, Z
     878:	91 81       	ldd	r25, Z+1	; 0x01
     87a:	81 15       	cp	r24, r1
     87c:	92 40       	sbci	r25, 0x02	; 2
     87e:	38 f0       	brcs	.+14     	; 0x88e <buff_put+0x108>
     880:	8a 81       	ldd	r24, Y+2	; 0x02
     882:	9b 81       	ldd	r25, Y+3	; 0x03
     884:	8e 5f       	subi	r24, 0xFE	; 254
     886:	9d 4f       	sbci	r25, 0xFD	; 253
     888:	fc 01       	movw	r30, r24
     88a:	11 82       	std	Z+1, r1	; 0x01
     88c:	10 82       	st	Z, r1
     88e:	81 ec       	ldi	r24, 0xC1	; 193
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	21 ec       	ldi	r18, 0xC1	; 193
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	f9 01       	movw	r30, r18
     898:	20 81       	ld	r18, Z
     89a:	20 62       	ori	r18, 0x20	; 32
     89c:	fc 01       	movw	r30, r24
     89e:	20 83       	st	Z, r18
     8a0:	81 ec       	ldi	r24, 0xC1	; 193
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	21 ec       	ldi	r18, 0xC1	; 193
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	f9 01       	movw	r30, r18
     8aa:	20 81       	ld	r18, Z
     8ac:	20 68       	ori	r18, 0x80	; 128
     8ae:	fc 01       	movw	r30, r24
     8b0:	20 83       	st	Z, r18
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	08 95       	ret

000008c0 <buff_get>:
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	00 d0       	rcall	.+0      	; 0x8c6 <buff_get+0x6>
     8c6:	00 d0       	rcall	.+0      	; 0x8c8 <buff_get+0x8>
     8c8:	cd b7       	in	r28, 0x3d	; 61
     8ca:	de b7       	in	r29, 0x3e	; 62
     8cc:	9a 83       	std	Y+2, r25	; 0x02
     8ce:	89 83       	std	Y+1, r24	; 0x01
     8d0:	7c 83       	std	Y+4, r23	; 0x04
     8d2:	6b 83       	std	Y+3, r22	; 0x03
     8d4:	81 ec       	ldi	r24, 0xC1	; 193
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	21 ec       	ldi	r18, 0xC1	; 193
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	f9 01       	movw	r30, r18
     8de:	20 81       	ld	r18, Z
     8e0:	2f 7d       	andi	r18, 0xDF	; 223
     8e2:	fc 01       	movw	r30, r24
     8e4:	20 83       	st	Z, r18
     8e6:	81 ec       	ldi	r24, 0xC1	; 193
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	21 ec       	ldi	r18, 0xC1	; 193
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	f9 01       	movw	r30, r18
     8f0:	20 81       	ld	r18, Z
     8f2:	2f 77       	andi	r18, 0x7F	; 127
     8f4:	fc 01       	movw	r30, r24
     8f6:	20 83       	st	Z, r18
     8f8:	8b 81       	ldd	r24, Y+3	; 0x03
     8fa:	9c 81       	ldd	r25, Y+4	; 0x04
     8fc:	9e 5f       	subi	r25, 0xFE	; 254
     8fe:	fc 01       	movw	r30, r24
     900:	20 81       	ld	r18, Z
     902:	31 81       	ldd	r19, Z+1	; 0x01
     904:	8b 81       	ldd	r24, Y+3	; 0x03
     906:	9c 81       	ldd	r25, Y+4	; 0x04
     908:	8e 5f       	subi	r24, 0xFE	; 254
     90a:	9d 4f       	sbci	r25, 0xFD	; 253
     90c:	fc 01       	movw	r30, r24
     90e:	80 81       	ld	r24, Z
     910:	91 81       	ldd	r25, Z+1	; 0x01
     912:	28 17       	cp	r18, r24
     914:	39 07       	cpc	r19, r25
     916:	a1 f4       	brne	.+40     	; 0x940 <buff_get+0x80>
     918:	81 ec       	ldi	r24, 0xC1	; 193
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	21 ec       	ldi	r18, 0xC1	; 193
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	f9 01       	movw	r30, r18
     922:	20 81       	ld	r18, Z
     924:	20 62       	ori	r18, 0x20	; 32
     926:	fc 01       	movw	r30, r24
     928:	20 83       	st	Z, r18
     92a:	81 ec       	ldi	r24, 0xC1	; 193
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	21 ec       	ldi	r18, 0xC1	; 193
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	f9 01       	movw	r30, r18
     934:	20 81       	ld	r18, Z
     936:	20 68       	ori	r18, 0x80	; 128
     938:	fc 01       	movw	r30, r24
     93a:	20 83       	st	Z, r18
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	41 c0       	rjmp	.+130    	; 0x9c2 <buff_get+0x102>
     940:	8b 81       	ldd	r24, Y+3	; 0x03
     942:	9c 81       	ldd	r25, Y+4	; 0x04
     944:	9e 5f       	subi	r25, 0xFE	; 254
     946:	fc 01       	movw	r30, r24
     948:	80 81       	ld	r24, Z
     94a:	91 81       	ldd	r25, Z+1	; 0x01
     94c:	2b 81       	ldd	r18, Y+3	; 0x03
     94e:	3c 81       	ldd	r19, Y+4	; 0x04
     950:	82 0f       	add	r24, r18
     952:	93 1f       	adc	r25, r19
     954:	fc 01       	movw	r30, r24
     956:	20 81       	ld	r18, Z
     958:	89 81       	ldd	r24, Y+1	; 0x01
     95a:	9a 81       	ldd	r25, Y+2	; 0x02
     95c:	fc 01       	movw	r30, r24
     95e:	20 83       	st	Z, r18
     960:	8b 81       	ldd	r24, Y+3	; 0x03
     962:	9c 81       	ldd	r25, Y+4	; 0x04
     964:	9e 5f       	subi	r25, 0xFE	; 254
     966:	fc 01       	movw	r30, r24
     968:	80 81       	ld	r24, Z
     96a:	91 81       	ldd	r25, Z+1	; 0x01
     96c:	9c 01       	movw	r18, r24
     96e:	2f 5f       	subi	r18, 0xFF	; 255
     970:	3f 4f       	sbci	r19, 0xFF	; 255
     972:	8b 81       	ldd	r24, Y+3	; 0x03
     974:	9c 81       	ldd	r25, Y+4	; 0x04
     976:	9e 5f       	subi	r25, 0xFE	; 254
     978:	fc 01       	movw	r30, r24
     97a:	31 83       	std	Z+1, r19	; 0x01
     97c:	20 83       	st	Z, r18
     97e:	8b 81       	ldd	r24, Y+3	; 0x03
     980:	9c 81       	ldd	r25, Y+4	; 0x04
     982:	9e 5f       	subi	r25, 0xFE	; 254
     984:	fc 01       	movw	r30, r24
     986:	80 81       	ld	r24, Z
     988:	91 81       	ldd	r25, Z+1	; 0x01
     98a:	81 15       	cp	r24, r1
     98c:	92 40       	sbci	r25, 0x02	; 2
     98e:	30 f0       	brcs	.+12     	; 0x99c <buff_get+0xdc>
     990:	8b 81       	ldd	r24, Y+3	; 0x03
     992:	9c 81       	ldd	r25, Y+4	; 0x04
     994:	9e 5f       	subi	r25, 0xFE	; 254
     996:	fc 01       	movw	r30, r24
     998:	11 82       	std	Z+1, r1	; 0x01
     99a:	10 82       	st	Z, r1
     99c:	81 ec       	ldi	r24, 0xC1	; 193
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	21 ec       	ldi	r18, 0xC1	; 193
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	f9 01       	movw	r30, r18
     9a6:	20 81       	ld	r18, Z
     9a8:	20 62       	ori	r18, 0x20	; 32
     9aa:	fc 01       	movw	r30, r24
     9ac:	20 83       	st	Z, r18
     9ae:	81 ec       	ldi	r24, 0xC1	; 193
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	21 ec       	ldi	r18, 0xC1	; 193
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	f9 01       	movw	r30, r18
     9b8:	20 81       	ld	r18, Z
     9ba:	20 68       	ori	r18, 0x80	; 128
     9bc:	fc 01       	movw	r30, r24
     9be:	20 83       	st	Z, r18
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	08 95       	ret

000009d0 <uart_init>:
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	00 d0       	rcall	.+0      	; 0x9d6 <uart_init+0x6>
     9d6:	cd b7       	in	r28, 0x3d	; 61
     9d8:	de b7       	in	r29, 0x3e	; 62
     9da:	87 e6       	ldi	r24, 0x67	; 103
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	9a 83       	std	Y+2, r25	; 0x02
     9e0:	89 83       	std	Y+1, r24	; 0x01
     9e2:	85 ec       	ldi	r24, 0xC5	; 197
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	29 81       	ldd	r18, Y+1	; 0x01
     9e8:	3a 81       	ldd	r19, Y+2	; 0x02
     9ea:	23 2f       	mov	r18, r19
     9ec:	33 27       	eor	r19, r19
     9ee:	fc 01       	movw	r30, r24
     9f0:	20 83       	st	Z, r18
     9f2:	84 ec       	ldi	r24, 0xC4	; 196
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	29 81       	ldd	r18, Y+1	; 0x01
     9f8:	fc 01       	movw	r30, r24
     9fa:	20 83       	st	Z, r18
     9fc:	81 ec       	ldi	r24, 0xC1	; 193
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	28 e1       	ldi	r18, 0x18	; 24
     a02:	fc 01       	movw	r30, r24
     a04:	20 83       	st	Z, r18
     a06:	82 ec       	ldi	r24, 0xC2	; 194
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	26 e0       	ldi	r18, 0x06	; 6
     a0c:	fc 01       	movw	r30, r24
     a0e:	20 83       	st	Z, r18
     a10:	00 00       	nop
     a12:	0f 90       	pop	r0
     a14:	0f 90       	pop	r0
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	08 95       	ret

00000a1c <uart_init_isr>:
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	cd b7       	in	r28, 0x3d	; 61
     a22:	de b7       	in	r29, 0x3e	; 62
     a24:	d5 df       	rcall	.-86     	; 0x9d0 <uart_init>
     a26:	81 ec       	ldi	r24, 0xC1	; 193
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	21 ec       	ldi	r18, 0xC1	; 193
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	f9 01       	movw	r30, r18
     a30:	20 81       	ld	r18, Z
     a32:	20 62       	ori	r18, 0x20	; 32
     a34:	fc 01       	movw	r30, r24
     a36:	20 83       	st	Z, r18
     a38:	81 ec       	ldi	r24, 0xC1	; 193
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	21 ec       	ldi	r18, 0xC1	; 193
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	f9 01       	movw	r30, r18
     a42:	20 81       	ld	r18, Z
     a44:	20 68       	ori	r18, 0x80	; 128
     a46:	fc 01       	movw	r30, r24
     a48:	20 83       	st	Z, r18
     a4a:	00 00       	nop
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	08 95       	ret

00000a52 <uart_send_isr>:
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
     a56:	00 d0       	rcall	.+0      	; 0xa58 <uart_send_isr+0x6>
     a58:	00 d0       	rcall	.+0      	; 0xa5a <uart_send_isr+0x8>
     a5a:	00 d0       	rcall	.+0      	; 0xa5c <uart_send_isr+0xa>
     a5c:	cd b7       	in	r28, 0x3d	; 61
     a5e:	de b7       	in	r29, 0x3e	; 62
     a60:	9e 83       	std	Y+6, r25	; 0x06
     a62:	8d 83       	std	Y+5, r24	; 0x05
     a64:	8d 81       	ldd	r24, Y+5	; 0x05
     a66:	9e 81       	ldd	r25, Y+6	; 0x06
     a68:	c4 d0       	rcall	.+392    	; 0xbf2 <strlen>
     a6a:	9c 83       	std	Y+4, r25	; 0x04
     a6c:	8b 83       	std	Y+3, r24	; 0x03
     a6e:	1a 82       	std	Y+2, r1	; 0x02
     a70:	19 82       	std	Y+1, r1	; 0x01
     a72:	23 c0       	rjmp	.+70     	; 0xaba <uart_send_isr+0x68>
     a74:	89 81       	ldd	r24, Y+1	; 0x01
     a76:	9a 81       	ldd	r25, Y+2	; 0x02
     a78:	2d 81       	ldd	r18, Y+5	; 0x05
     a7a:	3e 81       	ldd	r19, Y+6	; 0x06
     a7c:	82 0f       	add	r24, r18
     a7e:	93 1f       	adc	r25, r19
     a80:	fc 01       	movw	r30, r24
     a82:	80 81       	ld	r24, Z
     a84:	6f e3       	ldi	r22, 0x3F	; 63
     a86:	71 e0       	ldi	r23, 0x01	; 1
     a88:	7e de       	rcall	.-772    	; 0x786 <buff_put>
     a8a:	81 30       	cpi	r24, 0x01	; 1
     a8c:	89 f4       	brne	.+34     	; 0xab0 <uart_send_isr+0x5e>
     a8e:	80 ec       	ldi	r24, 0xC0	; 192
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	20 ec       	ldi	r18, 0xC0	; 192
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	f9 01       	movw	r30, r18
     a98:	20 81       	ld	r18, Z
     a9a:	20 62       	ori	r18, 0x20	; 32
     a9c:	fc 01       	movw	r30, r24
     a9e:	20 83       	st	Z, r18
     aa0:	89 81       	ldd	r24, Y+1	; 0x01
     aa2:	9a 81       	ldd	r25, Y+2	; 0x02
     aa4:	9c 01       	movw	r18, r24
     aa6:	2f 5f       	subi	r18, 0xFF	; 255
     aa8:	3f 4f       	sbci	r19, 0xFF	; 255
     aaa:	3a 83       	std	Y+2, r19	; 0x02
     aac:	29 83       	std	Y+1, r18	; 0x01
     aae:	17 c0       	rjmp	.+46     	; 0xade <uart_send_isr+0x8c>
     ab0:	89 81       	ldd	r24, Y+1	; 0x01
     ab2:	9a 81       	ldd	r25, Y+2	; 0x02
     ab4:	01 96       	adiw	r24, 0x01	; 1
     ab6:	9a 83       	std	Y+2, r25	; 0x02
     ab8:	89 83       	std	Y+1, r24	; 0x01
     aba:	29 81       	ldd	r18, Y+1	; 0x01
     abc:	3a 81       	ldd	r19, Y+2	; 0x02
     abe:	8b 81       	ldd	r24, Y+3	; 0x03
     ac0:	9c 81       	ldd	r25, Y+4	; 0x04
     ac2:	28 17       	cp	r18, r24
     ac4:	39 07       	cpc	r19, r25
     ac6:	b4 f2       	brlt	.-84     	; 0xa74 <uart_send_isr+0x22>
     ac8:	80 ec       	ldi	r24, 0xC0	; 192
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	20 ec       	ldi	r18, 0xC0	; 192
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	f9 01       	movw	r30, r18
     ad2:	20 81       	ld	r18, Z
     ad4:	20 62       	ori	r18, 0x20	; 32
     ad6:	fc 01       	movw	r30, r24
     ad8:	20 83       	st	Z, r18
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	26 96       	adiw	r28, 0x06	; 6
     ae0:	0f b6       	in	r0, 0x3f	; 63
     ae2:	f8 94       	cli
     ae4:	de bf       	out	0x3e, r29	; 62
     ae6:	0f be       	out	0x3f, r0	; 63
     ae8:	cd bf       	out	0x3d, r28	; 61
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	08 95       	ret

00000af0 <__vector_21>:

/**
 ISR for USART Data Register Empty flag
 */
ISR(USART0_UDRE_vect){
     af0:	1f 92       	push	r1
     af2:	0f 92       	push	r0
     af4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     af8:	0f 92       	push	r0
     afa:	11 24       	eor	r1, r1
     afc:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     b00:	0f 92       	push	r0
     b02:	2f 93       	push	r18
     b04:	3f 93       	push	r19
     b06:	4f 93       	push	r20
     b08:	5f 93       	push	r21
     b0a:	6f 93       	push	r22
     b0c:	7f 93       	push	r23
     b0e:	8f 93       	push	r24
     b10:	9f 93       	push	r25
     b12:	af 93       	push	r26
     b14:	bf 93       	push	r27
     b16:	ef 93       	push	r30
     b18:	ff 93       	push	r31
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	1f 92       	push	r1
     b20:	cd b7       	in	r28, 0x3d	; 61
     b22:	de b7       	in	r29, 0x3e	; 62
    unsigned char pByte;
    // Pull one byte from buffer and store it in pByte
    if (buff_get(&pByte, &bufferSend) == 0) {
     b24:	6f e3       	ldi	r22, 0x3F	; 63
     b26:	71 e0       	ldi	r23, 0x01	; 1
     b28:	ce 01       	movw	r24, r28
     b2a:	01 96       	adiw	r24, 0x01	; 1
     b2c:	c9 de       	rcall	.-622    	; 0x8c0 <buff_get>
     b2e:	88 23       	and	r24, r24
     b30:	31 f4       	brne	.+12     	; 0xb3e <__vector_21+0x4e>
        // Send byte
        UDR0 = pByte;
     b32:	86 ec       	ldi	r24, 0xC6	; 198
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	29 81       	ldd	r18, Y+1	; 0x01
     b38:	fc 01       	movw	r30, r24
     b3a:	20 83       	st	Z, r18
    }else {
        // Buffer empty: disable interrupt
        UCSR0A &= ~(1 << UDRE0);
    }
}
     b3c:	09 c0       	rjmp	.+18     	; 0xb50 <__vector_21+0x60>
    if (buff_get(&pByte, &bufferSend) == 0) {
        // Send byte
        UDR0 = pByte;
    }else {
        // Buffer empty: disable interrupt
        UCSR0A &= ~(1 << UDRE0);
     b3e:	80 ec       	ldi	r24, 0xC0	; 192
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	20 ec       	ldi	r18, 0xC0	; 192
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	f9 01       	movw	r30, r18
     b48:	20 81       	ld	r18, Z
     b4a:	2f 7d       	andi	r18, 0xDF	; 223
     b4c:	fc 01       	movw	r30, r24
     b4e:	20 83       	st	Z, r18
    }
}
     b50:	00 00       	nop
     b52:	0f 90       	pop	r0
     b54:	df 91       	pop	r29
     b56:	cf 91       	pop	r28
     b58:	ff 91       	pop	r31
     b5a:	ef 91       	pop	r30
     b5c:	bf 91       	pop	r27
     b5e:	af 91       	pop	r26
     b60:	9f 91       	pop	r25
     b62:	8f 91       	pop	r24
     b64:	7f 91       	pop	r23
     b66:	6f 91       	pop	r22
     b68:	5f 91       	pop	r21
     b6a:	4f 91       	pop	r20
     b6c:	3f 91       	pop	r19
     b6e:	2f 91       	pop	r18
     b70:	0f 90       	pop	r0
     b72:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     b76:	0f 90       	pop	r0
     b78:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b7c:	0f 90       	pop	r0
     b7e:	1f 90       	pop	r1
     b80:	18 95       	reti

00000b82 <__vector_20>:

ISR(USART0_RX_vect){
     b82:	1f 92       	push	r1
     b84:	0f 92       	push	r0
     b86:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b8a:	0f 92       	push	r0
     b8c:	11 24       	eor	r1, r1
     b8e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     b92:	0f 92       	push	r0
     b94:	2f 93       	push	r18
     b96:	3f 93       	push	r19
     b98:	4f 93       	push	r20
     b9a:	5f 93       	push	r21
     b9c:	6f 93       	push	r22
     b9e:	7f 93       	push	r23
     ba0:	8f 93       	push	r24
     ba2:	9f 93       	push	r25
     ba4:	af 93       	push	r26
     ba6:	bf 93       	push	r27
     ba8:	ef 93       	push	r30
     baa:	ff 93       	push	r31
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
    // Put received byte to bufferRecv (will read but don't save the value if buffer overflows)
    buff_put(UDR0, &bufferRecv);
     bb4:	86 ec       	ldi	r24, 0xC6	; 198
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	fc 01       	movw	r30, r24
     bba:	80 81       	ld	r24, Z
     bbc:	63 e4       	ldi	r22, 0x43	; 67
     bbe:	73 e0       	ldi	r23, 0x03	; 3
     bc0:	e2 dd       	rcall	.-1084   	; 0x786 <buff_put>
}
     bc2:	00 00       	nop
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	ff 91       	pop	r31
     bca:	ef 91       	pop	r30
     bcc:	bf 91       	pop	r27
     bce:	af 91       	pop	r26
     bd0:	9f 91       	pop	r25
     bd2:	8f 91       	pop	r24
     bd4:	7f 91       	pop	r23
     bd6:	6f 91       	pop	r22
     bd8:	5f 91       	pop	r21
     bda:	4f 91       	pop	r20
     bdc:	3f 91       	pop	r19
     bde:	2f 91       	pop	r18
     be0:	0f 90       	pop	r0
     be2:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     be6:	0f 90       	pop	r0
     be8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     bec:	0f 90       	pop	r0
     bee:	1f 90       	pop	r1
     bf0:	18 95       	reti

00000bf2 <strlen>:
     bf2:	fc 01       	movw	r30, r24
     bf4:	01 90       	ld	r0, Z+
     bf6:	00 20       	and	r0, r0
     bf8:	e9 f7       	brne	.-6      	; 0xbf4 <strlen+0x2>
     bfa:	80 95       	com	r24
     bfc:	90 95       	com	r25
     bfe:	8e 0f       	add	r24, r30
     c00:	9f 1f       	adc	r25, r31
     c02:	08 95       	ret

00000c04 <sprintf>:
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
     c10:	2e 97       	sbiw	r28, 0x0e	; 14
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	cd bf       	out	0x3d, r28	; 61
     c1c:	0d 89       	ldd	r16, Y+21	; 0x15
     c1e:	1e 89       	ldd	r17, Y+22	; 0x16
     c20:	86 e0       	ldi	r24, 0x06	; 6
     c22:	8c 83       	std	Y+4, r24	; 0x04
     c24:	1a 83       	std	Y+2, r17	; 0x02
     c26:	09 83       	std	Y+1, r16	; 0x01
     c28:	8f ef       	ldi	r24, 0xFF	; 255
     c2a:	9f e7       	ldi	r25, 0x7F	; 127
     c2c:	9e 83       	std	Y+6, r25	; 0x06
     c2e:	8d 83       	std	Y+5, r24	; 0x05
     c30:	ae 01       	movw	r20, r28
     c32:	47 5e       	subi	r20, 0xE7	; 231
     c34:	5f 4f       	sbci	r21, 0xFF	; 255
     c36:	6f 89       	ldd	r22, Y+23	; 0x17
     c38:	78 8d       	ldd	r23, Y+24	; 0x18
     c3a:	ce 01       	movw	r24, r28
     c3c:	01 96       	adiw	r24, 0x01	; 1
     c3e:	10 d0       	rcall	.+32     	; 0xc60 <vfprintf>
     c40:	ef 81       	ldd	r30, Y+7	; 0x07
     c42:	f8 85       	ldd	r31, Y+8	; 0x08
     c44:	e0 0f       	add	r30, r16
     c46:	f1 1f       	adc	r31, r17
     c48:	10 82       	st	Z, r1
     c4a:	2e 96       	adiw	r28, 0x0e	; 14
     c4c:	0f b6       	in	r0, 0x3f	; 63
     c4e:	f8 94       	cli
     c50:	de bf       	out	0x3e, r29	; 62
     c52:	0f be       	out	0x3f, r0	; 63
     c54:	cd bf       	out	0x3d, r28	; 61
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	1f 91       	pop	r17
     c5c:	0f 91       	pop	r16
     c5e:	08 95       	ret

00000c60 <vfprintf>:
     c60:	2f 92       	push	r2
     c62:	3f 92       	push	r3
     c64:	4f 92       	push	r4
     c66:	5f 92       	push	r5
     c68:	6f 92       	push	r6
     c6a:	7f 92       	push	r7
     c6c:	8f 92       	push	r8
     c6e:	9f 92       	push	r9
     c70:	af 92       	push	r10
     c72:	bf 92       	push	r11
     c74:	cf 92       	push	r12
     c76:	df 92       	push	r13
     c78:	ef 92       	push	r14
     c7a:	ff 92       	push	r15
     c7c:	0f 93       	push	r16
     c7e:	1f 93       	push	r17
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
     c88:	2b 97       	sbiw	r28, 0x0b	; 11
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	cd bf       	out	0x3d, r28	; 61
     c94:	6c 01       	movw	r12, r24
     c96:	7b 01       	movw	r14, r22
     c98:	8a 01       	movw	r16, r20
     c9a:	fc 01       	movw	r30, r24
     c9c:	17 82       	std	Z+7, r1	; 0x07
     c9e:	16 82       	std	Z+6, r1	; 0x06
     ca0:	83 81       	ldd	r24, Z+3	; 0x03
     ca2:	81 ff       	sbrs	r24, 1
     ca4:	bf c1       	rjmp	.+894    	; 0x1024 <vfprintf+0x3c4>
     ca6:	ce 01       	movw	r24, r28
     ca8:	01 96       	adiw	r24, 0x01	; 1
     caa:	3c 01       	movw	r6, r24
     cac:	f6 01       	movw	r30, r12
     cae:	93 81       	ldd	r25, Z+3	; 0x03
     cb0:	f7 01       	movw	r30, r14
     cb2:	93 fd       	sbrc	r25, 3
     cb4:	85 91       	lpm	r24, Z+
     cb6:	93 ff       	sbrs	r25, 3
     cb8:	81 91       	ld	r24, Z+
     cba:	7f 01       	movw	r14, r30
     cbc:	88 23       	and	r24, r24
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <vfprintf+0x62>
     cc0:	ad c1       	rjmp	.+858    	; 0x101c <vfprintf+0x3bc>
     cc2:	85 32       	cpi	r24, 0x25	; 37
     cc4:	39 f4       	brne	.+14     	; 0xcd4 <vfprintf+0x74>
     cc6:	93 fd       	sbrc	r25, 3
     cc8:	85 91       	lpm	r24, Z+
     cca:	93 ff       	sbrs	r25, 3
     ccc:	81 91       	ld	r24, Z+
     cce:	7f 01       	movw	r14, r30
     cd0:	85 32       	cpi	r24, 0x25	; 37
     cd2:	21 f4       	brne	.+8      	; 0xcdc <vfprintf+0x7c>
     cd4:	b6 01       	movw	r22, r12
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	d6 d1       	rcall	.+940    	; 0x1086 <fputc>
     cda:	e8 cf       	rjmp	.-48     	; 0xcac <vfprintf+0x4c>
     cdc:	91 2c       	mov	r9, r1
     cde:	21 2c       	mov	r2, r1
     ce0:	31 2c       	mov	r3, r1
     ce2:	ff e1       	ldi	r31, 0x1F	; 31
     ce4:	f3 15       	cp	r31, r3
     ce6:	d8 f0       	brcs	.+54     	; 0xd1e <vfprintf+0xbe>
     ce8:	8b 32       	cpi	r24, 0x2B	; 43
     cea:	79 f0       	breq	.+30     	; 0xd0a <vfprintf+0xaa>
     cec:	38 f4       	brcc	.+14     	; 0xcfc <vfprintf+0x9c>
     cee:	80 32       	cpi	r24, 0x20	; 32
     cf0:	79 f0       	breq	.+30     	; 0xd10 <vfprintf+0xb0>
     cf2:	83 32       	cpi	r24, 0x23	; 35
     cf4:	a1 f4       	brne	.+40     	; 0xd1e <vfprintf+0xbe>
     cf6:	23 2d       	mov	r18, r3
     cf8:	20 61       	ori	r18, 0x10	; 16
     cfa:	1d c0       	rjmp	.+58     	; 0xd36 <vfprintf+0xd6>
     cfc:	8d 32       	cpi	r24, 0x2D	; 45
     cfe:	61 f0       	breq	.+24     	; 0xd18 <vfprintf+0xb8>
     d00:	80 33       	cpi	r24, 0x30	; 48
     d02:	69 f4       	brne	.+26     	; 0xd1e <vfprintf+0xbe>
     d04:	23 2d       	mov	r18, r3
     d06:	21 60       	ori	r18, 0x01	; 1
     d08:	16 c0       	rjmp	.+44     	; 0xd36 <vfprintf+0xd6>
     d0a:	83 2d       	mov	r24, r3
     d0c:	82 60       	ori	r24, 0x02	; 2
     d0e:	38 2e       	mov	r3, r24
     d10:	e3 2d       	mov	r30, r3
     d12:	e4 60       	ori	r30, 0x04	; 4
     d14:	3e 2e       	mov	r3, r30
     d16:	2a c0       	rjmp	.+84     	; 0xd6c <vfprintf+0x10c>
     d18:	f3 2d       	mov	r31, r3
     d1a:	f8 60       	ori	r31, 0x08	; 8
     d1c:	1d c0       	rjmp	.+58     	; 0xd58 <vfprintf+0xf8>
     d1e:	37 fc       	sbrc	r3, 7
     d20:	2d c0       	rjmp	.+90     	; 0xd7c <vfprintf+0x11c>
     d22:	20 ed       	ldi	r18, 0xD0	; 208
     d24:	28 0f       	add	r18, r24
     d26:	2a 30       	cpi	r18, 0x0A	; 10
     d28:	40 f0       	brcs	.+16     	; 0xd3a <vfprintf+0xda>
     d2a:	8e 32       	cpi	r24, 0x2E	; 46
     d2c:	b9 f4       	brne	.+46     	; 0xd5c <vfprintf+0xfc>
     d2e:	36 fc       	sbrc	r3, 6
     d30:	75 c1       	rjmp	.+746    	; 0x101c <vfprintf+0x3bc>
     d32:	23 2d       	mov	r18, r3
     d34:	20 64       	ori	r18, 0x40	; 64
     d36:	32 2e       	mov	r3, r18
     d38:	19 c0       	rjmp	.+50     	; 0xd6c <vfprintf+0x10c>
     d3a:	36 fe       	sbrs	r3, 6
     d3c:	06 c0       	rjmp	.+12     	; 0xd4a <vfprintf+0xea>
     d3e:	8a e0       	ldi	r24, 0x0A	; 10
     d40:	98 9e       	mul	r9, r24
     d42:	20 0d       	add	r18, r0
     d44:	11 24       	eor	r1, r1
     d46:	92 2e       	mov	r9, r18
     d48:	11 c0       	rjmp	.+34     	; 0xd6c <vfprintf+0x10c>
     d4a:	ea e0       	ldi	r30, 0x0A	; 10
     d4c:	2e 9e       	mul	r2, r30
     d4e:	20 0d       	add	r18, r0
     d50:	11 24       	eor	r1, r1
     d52:	22 2e       	mov	r2, r18
     d54:	f3 2d       	mov	r31, r3
     d56:	f0 62       	ori	r31, 0x20	; 32
     d58:	3f 2e       	mov	r3, r31
     d5a:	08 c0       	rjmp	.+16     	; 0xd6c <vfprintf+0x10c>
     d5c:	8c 36       	cpi	r24, 0x6C	; 108
     d5e:	21 f4       	brne	.+8      	; 0xd68 <vfprintf+0x108>
     d60:	83 2d       	mov	r24, r3
     d62:	80 68       	ori	r24, 0x80	; 128
     d64:	38 2e       	mov	r3, r24
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <vfprintf+0x10c>
     d68:	88 36       	cpi	r24, 0x68	; 104
     d6a:	41 f4       	brne	.+16     	; 0xd7c <vfprintf+0x11c>
     d6c:	f7 01       	movw	r30, r14
     d6e:	93 fd       	sbrc	r25, 3
     d70:	85 91       	lpm	r24, Z+
     d72:	93 ff       	sbrs	r25, 3
     d74:	81 91       	ld	r24, Z+
     d76:	7f 01       	movw	r14, r30
     d78:	81 11       	cpse	r24, r1
     d7a:	b3 cf       	rjmp	.-154    	; 0xce2 <vfprintf+0x82>
     d7c:	98 2f       	mov	r25, r24
     d7e:	9f 7d       	andi	r25, 0xDF	; 223
     d80:	95 54       	subi	r25, 0x45	; 69
     d82:	93 30       	cpi	r25, 0x03	; 3
     d84:	28 f4       	brcc	.+10     	; 0xd90 <vfprintf+0x130>
     d86:	0c 5f       	subi	r16, 0xFC	; 252
     d88:	1f 4f       	sbci	r17, 0xFF	; 255
     d8a:	9f e3       	ldi	r25, 0x3F	; 63
     d8c:	99 83       	std	Y+1, r25	; 0x01
     d8e:	0d c0       	rjmp	.+26     	; 0xdaa <vfprintf+0x14a>
     d90:	83 36       	cpi	r24, 0x63	; 99
     d92:	31 f0       	breq	.+12     	; 0xda0 <vfprintf+0x140>
     d94:	83 37       	cpi	r24, 0x73	; 115
     d96:	71 f0       	breq	.+28     	; 0xdb4 <vfprintf+0x154>
     d98:	83 35       	cpi	r24, 0x53	; 83
     d9a:	09 f0       	breq	.+2      	; 0xd9e <vfprintf+0x13e>
     d9c:	55 c0       	rjmp	.+170    	; 0xe48 <vfprintf+0x1e8>
     d9e:	20 c0       	rjmp	.+64     	; 0xde0 <vfprintf+0x180>
     da0:	f8 01       	movw	r30, r16
     da2:	80 81       	ld	r24, Z
     da4:	89 83       	std	Y+1, r24	; 0x01
     da6:	0e 5f       	subi	r16, 0xFE	; 254
     da8:	1f 4f       	sbci	r17, 0xFF	; 255
     daa:	88 24       	eor	r8, r8
     dac:	83 94       	inc	r8
     dae:	91 2c       	mov	r9, r1
     db0:	53 01       	movw	r10, r6
     db2:	12 c0       	rjmp	.+36     	; 0xdd8 <vfprintf+0x178>
     db4:	28 01       	movw	r4, r16
     db6:	f2 e0       	ldi	r31, 0x02	; 2
     db8:	4f 0e       	add	r4, r31
     dba:	51 1c       	adc	r5, r1
     dbc:	f8 01       	movw	r30, r16
     dbe:	a0 80       	ld	r10, Z
     dc0:	b1 80       	ldd	r11, Z+1	; 0x01
     dc2:	36 fe       	sbrs	r3, 6
     dc4:	03 c0       	rjmp	.+6      	; 0xdcc <vfprintf+0x16c>
     dc6:	69 2d       	mov	r22, r9
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <vfprintf+0x170>
     dcc:	6f ef       	ldi	r22, 0xFF	; 255
     dce:	7f ef       	ldi	r23, 0xFF	; 255
     dd0:	c5 01       	movw	r24, r10
     dd2:	4e d1       	rcall	.+668    	; 0x1070 <strnlen>
     dd4:	4c 01       	movw	r8, r24
     dd6:	82 01       	movw	r16, r4
     dd8:	f3 2d       	mov	r31, r3
     dda:	ff 77       	andi	r31, 0x7F	; 127
     ddc:	3f 2e       	mov	r3, r31
     dde:	15 c0       	rjmp	.+42     	; 0xe0a <vfprintf+0x1aa>
     de0:	28 01       	movw	r4, r16
     de2:	22 e0       	ldi	r18, 0x02	; 2
     de4:	42 0e       	add	r4, r18
     de6:	51 1c       	adc	r5, r1
     de8:	f8 01       	movw	r30, r16
     dea:	a0 80       	ld	r10, Z
     dec:	b1 80       	ldd	r11, Z+1	; 0x01
     dee:	36 fe       	sbrs	r3, 6
     df0:	03 c0       	rjmp	.+6      	; 0xdf8 <vfprintf+0x198>
     df2:	69 2d       	mov	r22, r9
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <vfprintf+0x19c>
     df8:	6f ef       	ldi	r22, 0xFF	; 255
     dfa:	7f ef       	ldi	r23, 0xFF	; 255
     dfc:	c5 01       	movw	r24, r10
     dfe:	2d d1       	rcall	.+602    	; 0x105a <strnlen_P>
     e00:	4c 01       	movw	r8, r24
     e02:	f3 2d       	mov	r31, r3
     e04:	f0 68       	ori	r31, 0x80	; 128
     e06:	3f 2e       	mov	r3, r31
     e08:	82 01       	movw	r16, r4
     e0a:	33 fc       	sbrc	r3, 3
     e0c:	19 c0       	rjmp	.+50     	; 0xe40 <vfprintf+0x1e0>
     e0e:	82 2d       	mov	r24, r2
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	88 16       	cp	r8, r24
     e14:	99 06       	cpc	r9, r25
     e16:	a0 f4       	brcc	.+40     	; 0xe40 <vfprintf+0x1e0>
     e18:	b6 01       	movw	r22, r12
     e1a:	80 e2       	ldi	r24, 0x20	; 32
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	33 d1       	rcall	.+614    	; 0x1086 <fputc>
     e20:	2a 94       	dec	r2
     e22:	f5 cf       	rjmp	.-22     	; 0xe0e <vfprintf+0x1ae>
     e24:	f5 01       	movw	r30, r10
     e26:	37 fc       	sbrc	r3, 7
     e28:	85 91       	lpm	r24, Z+
     e2a:	37 fe       	sbrs	r3, 7
     e2c:	81 91       	ld	r24, Z+
     e2e:	5f 01       	movw	r10, r30
     e30:	b6 01       	movw	r22, r12
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	28 d1       	rcall	.+592    	; 0x1086 <fputc>
     e36:	21 10       	cpse	r2, r1
     e38:	2a 94       	dec	r2
     e3a:	21 e0       	ldi	r18, 0x01	; 1
     e3c:	82 1a       	sub	r8, r18
     e3e:	91 08       	sbc	r9, r1
     e40:	81 14       	cp	r8, r1
     e42:	91 04       	cpc	r9, r1
     e44:	79 f7       	brne	.-34     	; 0xe24 <vfprintf+0x1c4>
     e46:	e1 c0       	rjmp	.+450    	; 0x100a <vfprintf+0x3aa>
     e48:	84 36       	cpi	r24, 0x64	; 100
     e4a:	11 f0       	breq	.+4      	; 0xe50 <vfprintf+0x1f0>
     e4c:	89 36       	cpi	r24, 0x69	; 105
     e4e:	39 f5       	brne	.+78     	; 0xe9e <vfprintf+0x23e>
     e50:	f8 01       	movw	r30, r16
     e52:	37 fe       	sbrs	r3, 7
     e54:	07 c0       	rjmp	.+14     	; 0xe64 <vfprintf+0x204>
     e56:	60 81       	ld	r22, Z
     e58:	71 81       	ldd	r23, Z+1	; 0x01
     e5a:	82 81       	ldd	r24, Z+2	; 0x02
     e5c:	93 81       	ldd	r25, Z+3	; 0x03
     e5e:	0c 5f       	subi	r16, 0xFC	; 252
     e60:	1f 4f       	sbci	r17, 0xFF	; 255
     e62:	08 c0       	rjmp	.+16     	; 0xe74 <vfprintf+0x214>
     e64:	60 81       	ld	r22, Z
     e66:	71 81       	ldd	r23, Z+1	; 0x01
     e68:	07 2e       	mov	r0, r23
     e6a:	00 0c       	add	r0, r0
     e6c:	88 0b       	sbc	r24, r24
     e6e:	99 0b       	sbc	r25, r25
     e70:	0e 5f       	subi	r16, 0xFE	; 254
     e72:	1f 4f       	sbci	r17, 0xFF	; 255
     e74:	f3 2d       	mov	r31, r3
     e76:	ff 76       	andi	r31, 0x6F	; 111
     e78:	3f 2e       	mov	r3, r31
     e7a:	97 ff       	sbrs	r25, 7
     e7c:	09 c0       	rjmp	.+18     	; 0xe90 <vfprintf+0x230>
     e7e:	90 95       	com	r25
     e80:	80 95       	com	r24
     e82:	70 95       	com	r23
     e84:	61 95       	neg	r22
     e86:	7f 4f       	sbci	r23, 0xFF	; 255
     e88:	8f 4f       	sbci	r24, 0xFF	; 255
     e8a:	9f 4f       	sbci	r25, 0xFF	; 255
     e8c:	f0 68       	ori	r31, 0x80	; 128
     e8e:	3f 2e       	mov	r3, r31
     e90:	2a e0       	ldi	r18, 0x0A	; 10
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	a3 01       	movw	r20, r6
     e96:	33 d1       	rcall	.+614    	; 0x10fe <__ultoa_invert>
     e98:	88 2e       	mov	r8, r24
     e9a:	86 18       	sub	r8, r6
     e9c:	44 c0       	rjmp	.+136    	; 0xf26 <vfprintf+0x2c6>
     e9e:	85 37       	cpi	r24, 0x75	; 117
     ea0:	31 f4       	brne	.+12     	; 0xeae <vfprintf+0x24e>
     ea2:	23 2d       	mov	r18, r3
     ea4:	2f 7e       	andi	r18, 0xEF	; 239
     ea6:	b2 2e       	mov	r11, r18
     ea8:	2a e0       	ldi	r18, 0x0A	; 10
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	25 c0       	rjmp	.+74     	; 0xef8 <vfprintf+0x298>
     eae:	93 2d       	mov	r25, r3
     eb0:	99 7f       	andi	r25, 0xF9	; 249
     eb2:	b9 2e       	mov	r11, r25
     eb4:	8f 36       	cpi	r24, 0x6F	; 111
     eb6:	c1 f0       	breq	.+48     	; 0xee8 <vfprintf+0x288>
     eb8:	18 f4       	brcc	.+6      	; 0xec0 <vfprintf+0x260>
     eba:	88 35       	cpi	r24, 0x58	; 88
     ebc:	79 f0       	breq	.+30     	; 0xedc <vfprintf+0x27c>
     ebe:	ae c0       	rjmp	.+348    	; 0x101c <vfprintf+0x3bc>
     ec0:	80 37       	cpi	r24, 0x70	; 112
     ec2:	19 f0       	breq	.+6      	; 0xeca <vfprintf+0x26a>
     ec4:	88 37       	cpi	r24, 0x78	; 120
     ec6:	21 f0       	breq	.+8      	; 0xed0 <vfprintf+0x270>
     ec8:	a9 c0       	rjmp	.+338    	; 0x101c <vfprintf+0x3bc>
     eca:	e9 2f       	mov	r30, r25
     ecc:	e0 61       	ori	r30, 0x10	; 16
     ece:	be 2e       	mov	r11, r30
     ed0:	b4 fe       	sbrs	r11, 4
     ed2:	0d c0       	rjmp	.+26     	; 0xeee <vfprintf+0x28e>
     ed4:	fb 2d       	mov	r31, r11
     ed6:	f4 60       	ori	r31, 0x04	; 4
     ed8:	bf 2e       	mov	r11, r31
     eda:	09 c0       	rjmp	.+18     	; 0xeee <vfprintf+0x28e>
     edc:	34 fe       	sbrs	r3, 4
     ede:	0a c0       	rjmp	.+20     	; 0xef4 <vfprintf+0x294>
     ee0:	29 2f       	mov	r18, r25
     ee2:	26 60       	ori	r18, 0x06	; 6
     ee4:	b2 2e       	mov	r11, r18
     ee6:	06 c0       	rjmp	.+12     	; 0xef4 <vfprintf+0x294>
     ee8:	28 e0       	ldi	r18, 0x08	; 8
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	05 c0       	rjmp	.+10     	; 0xef8 <vfprintf+0x298>
     eee:	20 e1       	ldi	r18, 0x10	; 16
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <vfprintf+0x298>
     ef4:	20 e1       	ldi	r18, 0x10	; 16
     ef6:	32 e0       	ldi	r19, 0x02	; 2
     ef8:	f8 01       	movw	r30, r16
     efa:	b7 fe       	sbrs	r11, 7
     efc:	07 c0       	rjmp	.+14     	; 0xf0c <vfprintf+0x2ac>
     efe:	60 81       	ld	r22, Z
     f00:	71 81       	ldd	r23, Z+1	; 0x01
     f02:	82 81       	ldd	r24, Z+2	; 0x02
     f04:	93 81       	ldd	r25, Z+3	; 0x03
     f06:	0c 5f       	subi	r16, 0xFC	; 252
     f08:	1f 4f       	sbci	r17, 0xFF	; 255
     f0a:	06 c0       	rjmp	.+12     	; 0xf18 <vfprintf+0x2b8>
     f0c:	60 81       	ld	r22, Z
     f0e:	71 81       	ldd	r23, Z+1	; 0x01
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0e 5f       	subi	r16, 0xFE	; 254
     f16:	1f 4f       	sbci	r17, 0xFF	; 255
     f18:	a3 01       	movw	r20, r6
     f1a:	f1 d0       	rcall	.+482    	; 0x10fe <__ultoa_invert>
     f1c:	88 2e       	mov	r8, r24
     f1e:	86 18       	sub	r8, r6
     f20:	fb 2d       	mov	r31, r11
     f22:	ff 77       	andi	r31, 0x7F	; 127
     f24:	3f 2e       	mov	r3, r31
     f26:	36 fe       	sbrs	r3, 6
     f28:	0d c0       	rjmp	.+26     	; 0xf44 <vfprintf+0x2e4>
     f2a:	23 2d       	mov	r18, r3
     f2c:	2e 7f       	andi	r18, 0xFE	; 254
     f2e:	a2 2e       	mov	r10, r18
     f30:	89 14       	cp	r8, r9
     f32:	58 f4       	brcc	.+22     	; 0xf4a <vfprintf+0x2ea>
     f34:	34 fe       	sbrs	r3, 4
     f36:	0b c0       	rjmp	.+22     	; 0xf4e <vfprintf+0x2ee>
     f38:	32 fc       	sbrc	r3, 2
     f3a:	09 c0       	rjmp	.+18     	; 0xf4e <vfprintf+0x2ee>
     f3c:	83 2d       	mov	r24, r3
     f3e:	8e 7e       	andi	r24, 0xEE	; 238
     f40:	a8 2e       	mov	r10, r24
     f42:	05 c0       	rjmp	.+10     	; 0xf4e <vfprintf+0x2ee>
     f44:	b8 2c       	mov	r11, r8
     f46:	a3 2c       	mov	r10, r3
     f48:	03 c0       	rjmp	.+6      	; 0xf50 <vfprintf+0x2f0>
     f4a:	b8 2c       	mov	r11, r8
     f4c:	01 c0       	rjmp	.+2      	; 0xf50 <vfprintf+0x2f0>
     f4e:	b9 2c       	mov	r11, r9
     f50:	a4 fe       	sbrs	r10, 4
     f52:	0f c0       	rjmp	.+30     	; 0xf72 <vfprintf+0x312>
     f54:	fe 01       	movw	r30, r28
     f56:	e8 0d       	add	r30, r8
     f58:	f1 1d       	adc	r31, r1
     f5a:	80 81       	ld	r24, Z
     f5c:	80 33       	cpi	r24, 0x30	; 48
     f5e:	21 f4       	brne	.+8      	; 0xf68 <vfprintf+0x308>
     f60:	9a 2d       	mov	r25, r10
     f62:	99 7e       	andi	r25, 0xE9	; 233
     f64:	a9 2e       	mov	r10, r25
     f66:	09 c0       	rjmp	.+18     	; 0xf7a <vfprintf+0x31a>
     f68:	a2 fe       	sbrs	r10, 2
     f6a:	06 c0       	rjmp	.+12     	; 0xf78 <vfprintf+0x318>
     f6c:	b3 94       	inc	r11
     f6e:	b3 94       	inc	r11
     f70:	04 c0       	rjmp	.+8      	; 0xf7a <vfprintf+0x31a>
     f72:	8a 2d       	mov	r24, r10
     f74:	86 78       	andi	r24, 0x86	; 134
     f76:	09 f0       	breq	.+2      	; 0xf7a <vfprintf+0x31a>
     f78:	b3 94       	inc	r11
     f7a:	a3 fc       	sbrc	r10, 3
     f7c:	10 c0       	rjmp	.+32     	; 0xf9e <vfprintf+0x33e>
     f7e:	a0 fe       	sbrs	r10, 0
     f80:	06 c0       	rjmp	.+12     	; 0xf8e <vfprintf+0x32e>
     f82:	b2 14       	cp	r11, r2
     f84:	80 f4       	brcc	.+32     	; 0xfa6 <vfprintf+0x346>
     f86:	28 0c       	add	r2, r8
     f88:	92 2c       	mov	r9, r2
     f8a:	9b 18       	sub	r9, r11
     f8c:	0d c0       	rjmp	.+26     	; 0xfa8 <vfprintf+0x348>
     f8e:	b2 14       	cp	r11, r2
     f90:	58 f4       	brcc	.+22     	; 0xfa8 <vfprintf+0x348>
     f92:	b6 01       	movw	r22, r12
     f94:	80 e2       	ldi	r24, 0x20	; 32
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	76 d0       	rcall	.+236    	; 0x1086 <fputc>
     f9a:	b3 94       	inc	r11
     f9c:	f8 cf       	rjmp	.-16     	; 0xf8e <vfprintf+0x32e>
     f9e:	b2 14       	cp	r11, r2
     fa0:	18 f4       	brcc	.+6      	; 0xfa8 <vfprintf+0x348>
     fa2:	2b 18       	sub	r2, r11
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <vfprintf+0x34a>
     fa6:	98 2c       	mov	r9, r8
     fa8:	21 2c       	mov	r2, r1
     faa:	a4 fe       	sbrs	r10, 4
     fac:	0f c0       	rjmp	.+30     	; 0xfcc <vfprintf+0x36c>
     fae:	b6 01       	movw	r22, r12
     fb0:	80 e3       	ldi	r24, 0x30	; 48
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	68 d0       	rcall	.+208    	; 0x1086 <fputc>
     fb6:	a2 fe       	sbrs	r10, 2
     fb8:	16 c0       	rjmp	.+44     	; 0xfe6 <vfprintf+0x386>
     fba:	a1 fc       	sbrc	r10, 1
     fbc:	03 c0       	rjmp	.+6      	; 0xfc4 <vfprintf+0x364>
     fbe:	88 e7       	ldi	r24, 0x78	; 120
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <vfprintf+0x368>
     fc4:	88 e5       	ldi	r24, 0x58	; 88
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	b6 01       	movw	r22, r12
     fca:	0c c0       	rjmp	.+24     	; 0xfe4 <vfprintf+0x384>
     fcc:	8a 2d       	mov	r24, r10
     fce:	86 78       	andi	r24, 0x86	; 134
     fd0:	51 f0       	breq	.+20     	; 0xfe6 <vfprintf+0x386>
     fd2:	a1 fe       	sbrs	r10, 1
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <vfprintf+0x37a>
     fd6:	8b e2       	ldi	r24, 0x2B	; 43
     fd8:	01 c0       	rjmp	.+2      	; 0xfdc <vfprintf+0x37c>
     fda:	80 e2       	ldi	r24, 0x20	; 32
     fdc:	a7 fc       	sbrc	r10, 7
     fde:	8d e2       	ldi	r24, 0x2D	; 45
     fe0:	b6 01       	movw	r22, r12
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	50 d0       	rcall	.+160    	; 0x1086 <fputc>
     fe6:	89 14       	cp	r8, r9
     fe8:	30 f4       	brcc	.+12     	; 0xff6 <vfprintf+0x396>
     fea:	b6 01       	movw	r22, r12
     fec:	80 e3       	ldi	r24, 0x30	; 48
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	4a d0       	rcall	.+148    	; 0x1086 <fputc>
     ff2:	9a 94       	dec	r9
     ff4:	f8 cf       	rjmp	.-16     	; 0xfe6 <vfprintf+0x386>
     ff6:	8a 94       	dec	r8
     ff8:	f3 01       	movw	r30, r6
     ffa:	e8 0d       	add	r30, r8
     ffc:	f1 1d       	adc	r31, r1
     ffe:	80 81       	ld	r24, Z
    1000:	b6 01       	movw	r22, r12
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	40 d0       	rcall	.+128    	; 0x1086 <fputc>
    1006:	81 10       	cpse	r8, r1
    1008:	f6 cf       	rjmp	.-20     	; 0xff6 <vfprintf+0x396>
    100a:	22 20       	and	r2, r2
    100c:	09 f4       	brne	.+2      	; 0x1010 <vfprintf+0x3b0>
    100e:	4e ce       	rjmp	.-868    	; 0xcac <vfprintf+0x4c>
    1010:	b6 01       	movw	r22, r12
    1012:	80 e2       	ldi	r24, 0x20	; 32
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	37 d0       	rcall	.+110    	; 0x1086 <fputc>
    1018:	2a 94       	dec	r2
    101a:	f7 cf       	rjmp	.-18     	; 0x100a <vfprintf+0x3aa>
    101c:	f6 01       	movw	r30, r12
    101e:	86 81       	ldd	r24, Z+6	; 0x06
    1020:	97 81       	ldd	r25, Z+7	; 0x07
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <vfprintf+0x3c8>
    1024:	8f ef       	ldi	r24, 0xFF	; 255
    1026:	9f ef       	ldi	r25, 0xFF	; 255
    1028:	2b 96       	adiw	r28, 0x0b	; 11
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	1f 91       	pop	r17
    103a:	0f 91       	pop	r16
    103c:	ff 90       	pop	r15
    103e:	ef 90       	pop	r14
    1040:	df 90       	pop	r13
    1042:	cf 90       	pop	r12
    1044:	bf 90       	pop	r11
    1046:	af 90       	pop	r10
    1048:	9f 90       	pop	r9
    104a:	8f 90       	pop	r8
    104c:	7f 90       	pop	r7
    104e:	6f 90       	pop	r6
    1050:	5f 90       	pop	r5
    1052:	4f 90       	pop	r4
    1054:	3f 90       	pop	r3
    1056:	2f 90       	pop	r2
    1058:	08 95       	ret

0000105a <strnlen_P>:
    105a:	fc 01       	movw	r30, r24
    105c:	05 90       	lpm	r0, Z+
    105e:	61 50       	subi	r22, 0x01	; 1
    1060:	70 40       	sbci	r23, 0x00	; 0
    1062:	01 10       	cpse	r0, r1
    1064:	d8 f7       	brcc	.-10     	; 0x105c <strnlen_P+0x2>
    1066:	80 95       	com	r24
    1068:	90 95       	com	r25
    106a:	8e 0f       	add	r24, r30
    106c:	9f 1f       	adc	r25, r31
    106e:	08 95       	ret

00001070 <strnlen>:
    1070:	fc 01       	movw	r30, r24
    1072:	61 50       	subi	r22, 0x01	; 1
    1074:	70 40       	sbci	r23, 0x00	; 0
    1076:	01 90       	ld	r0, Z+
    1078:	01 10       	cpse	r0, r1
    107a:	d8 f7       	brcc	.-10     	; 0x1072 <strnlen+0x2>
    107c:	80 95       	com	r24
    107e:	90 95       	com	r25
    1080:	8e 0f       	add	r24, r30
    1082:	9f 1f       	adc	r25, r31
    1084:	08 95       	ret

00001086 <fputc>:
    1086:	0f 93       	push	r16
    1088:	1f 93       	push	r17
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	fb 01       	movw	r30, r22
    1090:	23 81       	ldd	r18, Z+3	; 0x03
    1092:	21 fd       	sbrc	r18, 1
    1094:	03 c0       	rjmp	.+6      	; 0x109c <fputc+0x16>
    1096:	8f ef       	ldi	r24, 0xFF	; 255
    1098:	9f ef       	ldi	r25, 0xFF	; 255
    109a:	2c c0       	rjmp	.+88     	; 0x10f4 <fputc+0x6e>
    109c:	22 ff       	sbrs	r18, 2
    109e:	16 c0       	rjmp	.+44     	; 0x10cc <fputc+0x46>
    10a0:	46 81       	ldd	r20, Z+6	; 0x06
    10a2:	57 81       	ldd	r21, Z+7	; 0x07
    10a4:	24 81       	ldd	r18, Z+4	; 0x04
    10a6:	35 81       	ldd	r19, Z+5	; 0x05
    10a8:	42 17       	cp	r20, r18
    10aa:	53 07       	cpc	r21, r19
    10ac:	44 f4       	brge	.+16     	; 0x10be <fputc+0x38>
    10ae:	a0 81       	ld	r26, Z
    10b0:	b1 81       	ldd	r27, Z+1	; 0x01
    10b2:	9d 01       	movw	r18, r26
    10b4:	2f 5f       	subi	r18, 0xFF	; 255
    10b6:	3f 4f       	sbci	r19, 0xFF	; 255
    10b8:	31 83       	std	Z+1, r19	; 0x01
    10ba:	20 83       	st	Z, r18
    10bc:	8c 93       	st	X, r24
    10be:	26 81       	ldd	r18, Z+6	; 0x06
    10c0:	37 81       	ldd	r19, Z+7	; 0x07
    10c2:	2f 5f       	subi	r18, 0xFF	; 255
    10c4:	3f 4f       	sbci	r19, 0xFF	; 255
    10c6:	37 83       	std	Z+7, r19	; 0x07
    10c8:	26 83       	std	Z+6, r18	; 0x06
    10ca:	14 c0       	rjmp	.+40     	; 0x10f4 <fputc+0x6e>
    10cc:	8b 01       	movw	r16, r22
    10ce:	ec 01       	movw	r28, r24
    10d0:	fb 01       	movw	r30, r22
    10d2:	00 84       	ldd	r0, Z+8	; 0x08
    10d4:	f1 85       	ldd	r31, Z+9	; 0x09
    10d6:	e0 2d       	mov	r30, r0
    10d8:	09 95       	icall
    10da:	89 2b       	or	r24, r25
    10dc:	e1 f6       	brne	.-72     	; 0x1096 <fputc+0x10>
    10de:	d8 01       	movw	r26, r16
    10e0:	16 96       	adiw	r26, 0x06	; 6
    10e2:	8d 91       	ld	r24, X+
    10e4:	9c 91       	ld	r25, X
    10e6:	17 97       	sbiw	r26, 0x07	; 7
    10e8:	01 96       	adiw	r24, 0x01	; 1
    10ea:	17 96       	adiw	r26, 0x07	; 7
    10ec:	9c 93       	st	X, r25
    10ee:	8e 93       	st	-X, r24
    10f0:	16 97       	sbiw	r26, 0x06	; 6
    10f2:	ce 01       	movw	r24, r28
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	1f 91       	pop	r17
    10fa:	0f 91       	pop	r16
    10fc:	08 95       	ret

000010fe <__ultoa_invert>:
    10fe:	fa 01       	movw	r30, r20
    1100:	aa 27       	eor	r26, r26
    1102:	28 30       	cpi	r18, 0x08	; 8
    1104:	51 f1       	breq	.+84     	; 0x115a <__ultoa_invert+0x5c>
    1106:	20 31       	cpi	r18, 0x10	; 16
    1108:	81 f1       	breq	.+96     	; 0x116a <__ultoa_invert+0x6c>
    110a:	e8 94       	clt
    110c:	6f 93       	push	r22
    110e:	6e 7f       	andi	r22, 0xFE	; 254
    1110:	6e 5f       	subi	r22, 0xFE	; 254
    1112:	7f 4f       	sbci	r23, 0xFF	; 255
    1114:	8f 4f       	sbci	r24, 0xFF	; 255
    1116:	9f 4f       	sbci	r25, 0xFF	; 255
    1118:	af 4f       	sbci	r26, 0xFF	; 255
    111a:	b1 e0       	ldi	r27, 0x01	; 1
    111c:	3e d0       	rcall	.+124    	; 0x119a <__ultoa_invert+0x9c>
    111e:	b4 e0       	ldi	r27, 0x04	; 4
    1120:	3c d0       	rcall	.+120    	; 0x119a <__ultoa_invert+0x9c>
    1122:	67 0f       	add	r22, r23
    1124:	78 1f       	adc	r23, r24
    1126:	89 1f       	adc	r24, r25
    1128:	9a 1f       	adc	r25, r26
    112a:	a1 1d       	adc	r26, r1
    112c:	68 0f       	add	r22, r24
    112e:	79 1f       	adc	r23, r25
    1130:	8a 1f       	adc	r24, r26
    1132:	91 1d       	adc	r25, r1
    1134:	a1 1d       	adc	r26, r1
    1136:	6a 0f       	add	r22, r26
    1138:	71 1d       	adc	r23, r1
    113a:	81 1d       	adc	r24, r1
    113c:	91 1d       	adc	r25, r1
    113e:	a1 1d       	adc	r26, r1
    1140:	20 d0       	rcall	.+64     	; 0x1182 <__ultoa_invert+0x84>
    1142:	09 f4       	brne	.+2      	; 0x1146 <__ultoa_invert+0x48>
    1144:	68 94       	set
    1146:	3f 91       	pop	r19
    1148:	2a e0       	ldi	r18, 0x0A	; 10
    114a:	26 9f       	mul	r18, r22
    114c:	11 24       	eor	r1, r1
    114e:	30 19       	sub	r19, r0
    1150:	30 5d       	subi	r19, 0xD0	; 208
    1152:	31 93       	st	Z+, r19
    1154:	de f6       	brtc	.-74     	; 0x110c <__ultoa_invert+0xe>
    1156:	cf 01       	movw	r24, r30
    1158:	08 95       	ret
    115a:	46 2f       	mov	r20, r22
    115c:	47 70       	andi	r20, 0x07	; 7
    115e:	40 5d       	subi	r20, 0xD0	; 208
    1160:	41 93       	st	Z+, r20
    1162:	b3 e0       	ldi	r27, 0x03	; 3
    1164:	0f d0       	rcall	.+30     	; 0x1184 <__ultoa_invert+0x86>
    1166:	c9 f7       	brne	.-14     	; 0x115a <__ultoa_invert+0x5c>
    1168:	f6 cf       	rjmp	.-20     	; 0x1156 <__ultoa_invert+0x58>
    116a:	46 2f       	mov	r20, r22
    116c:	4f 70       	andi	r20, 0x0F	; 15
    116e:	40 5d       	subi	r20, 0xD0	; 208
    1170:	4a 33       	cpi	r20, 0x3A	; 58
    1172:	18 f0       	brcs	.+6      	; 0x117a <__ultoa_invert+0x7c>
    1174:	49 5d       	subi	r20, 0xD9	; 217
    1176:	31 fd       	sbrc	r19, 1
    1178:	40 52       	subi	r20, 0x20	; 32
    117a:	41 93       	st	Z+, r20
    117c:	02 d0       	rcall	.+4      	; 0x1182 <__ultoa_invert+0x84>
    117e:	a9 f7       	brne	.-22     	; 0x116a <__ultoa_invert+0x6c>
    1180:	ea cf       	rjmp	.-44     	; 0x1156 <__ultoa_invert+0x58>
    1182:	b4 e0       	ldi	r27, 0x04	; 4
    1184:	a6 95       	lsr	r26
    1186:	97 95       	ror	r25
    1188:	87 95       	ror	r24
    118a:	77 95       	ror	r23
    118c:	67 95       	ror	r22
    118e:	ba 95       	dec	r27
    1190:	c9 f7       	brne	.-14     	; 0x1184 <__ultoa_invert+0x86>
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	61 05       	cpc	r22, r1
    1196:	71 05       	cpc	r23, r1
    1198:	08 95       	ret
    119a:	9b 01       	movw	r18, r22
    119c:	ac 01       	movw	r20, r24
    119e:	0a 2e       	mov	r0, r26
    11a0:	06 94       	lsr	r0
    11a2:	57 95       	ror	r21
    11a4:	47 95       	ror	r20
    11a6:	37 95       	ror	r19
    11a8:	27 95       	ror	r18
    11aa:	ba 95       	dec	r27
    11ac:	c9 f7       	brne	.-14     	; 0x11a0 <__ultoa_invert+0xa2>
    11ae:	62 0f       	add	r22, r18
    11b0:	73 1f       	adc	r23, r19
    11b2:	84 1f       	adc	r24, r20
    11b4:	95 1f       	adc	r25, r21
    11b6:	a0 1d       	adc	r26, r0
    11b8:	08 95       	ret

000011ba <_exit>:
    11ba:	f8 94       	cli

000011bc <__stop_program>:
    11bc:	ff cf       	rjmp	.-2      	; 0x11bc <__stop_program>
