
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  00001428  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001458  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00001498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016f6  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b2c  00000000  00000000  00002d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000efa  00000000  00000000  0000384a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e4  00000000  00000000  00004744  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c6  00000000  00000000  00004c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000092d  00000000  00000000  000052ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  00005c1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 ac 08 	jmp	0x1158	; 0x1158 <__vector_16>
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 eb       	ldi	r30, 0xB4	; 180
      a0:	f3 e1       	ldi	r31, 0x13	; 19
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 30       	cpi	r26, 0x00	; 0
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a0 e0       	ldi	r26, 0x00	; 0
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 31       	cpi	r26, 0x10	; 16
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	65 d1       	rcall	.+714    	; 0x38e <main>
      c4:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <Led_init>:
void Led7_On(void) {
    PORTB |= (1 << 1);
}
void Led7_Off(void) {
    PORTB &= ~(1 << 1);
}
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	1f 92       	push	r1
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
      d4:	89 83       	std	Y+1, r24	; 0x01
      d6:	84 e2       	ldi	r24, 0x24	; 36
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	2f ef       	ldi	r18, 0xFF	; 255
      dc:	fc 01       	movw	r30, r24
      de:	20 83       	st	Z, r18
      e0:	85 e2       	ldi	r24, 0x25	; 37
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	fc 01       	movw	r30, r24
      e6:	10 82       	st	Z, r1
      e8:	89 81       	ldd	r24, Y+1	; 0x01
      ea:	88 23       	and	r24, r24
      ec:	91 f0       	breq	.+36     	; 0x112 <Led_init+0x48>
      ee:	8a e2       	ldi	r24, 0x2A	; 42
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	2a e2       	ldi	r18, 0x2A	; 42
      f4:	30 e0       	ldi	r19, 0x00	; 0
      f6:	f9 01       	movw	r30, r18
      f8:	20 81       	ld	r18, Z
      fa:	2f 61       	ori	r18, 0x1F	; 31
      fc:	fc 01       	movw	r30, r24
      fe:	20 83       	st	Z, r18
     100:	8b e2       	ldi	r24, 0x2B	; 43
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	2b e2       	ldi	r18, 0x2B	; 43
     106:	30 e0       	ldi	r19, 0x00	; 0
     108:	f9 01       	movw	r30, r18
     10a:	20 81       	ld	r18, Z
     10c:	20 7e       	andi	r18, 0xE0	; 224
     10e:	fc 01       	movw	r30, r24
     110:	20 83       	st	Z, r18
     112:	00 00       	nop
     114:	0f 90       	pop	r0
     116:	df 91       	pop	r29
     118:	cf 91       	pop	r28
     11a:	08 95       	ret

0000011c <Led1_On>:
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
     120:	cd b7       	in	r28, 0x3d	; 61
     122:	de b7       	in	r29, 0x3e	; 62
     124:	85 e2       	ldi	r24, 0x25	; 37
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	25 e2       	ldi	r18, 0x25	; 37
     12a:	30 e0       	ldi	r19, 0x00	; 0
     12c:	f9 01       	movw	r30, r18
     12e:	20 81       	ld	r18, Z
     130:	20 68       	ori	r18, 0x80	; 128
     132:	fc 01       	movw	r30, r24
     134:	20 83       	st	Z, r18
     136:	00 00       	nop
     138:	df 91       	pop	r29
     13a:	cf 91       	pop	r28
     13c:	08 95       	ret

0000013e <Led1_Off>:
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	cd b7       	in	r28, 0x3d	; 61
     144:	de b7       	in	r29, 0x3e	; 62
     146:	85 e2       	ldi	r24, 0x25	; 37
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	25 e2       	ldi	r18, 0x25	; 37
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	f9 01       	movw	r30, r18
     150:	20 81       	ld	r18, Z
     152:	2f 77       	andi	r18, 0x7F	; 127
     154:	fc 01       	movw	r30, r24
     156:	20 83       	st	Z, r18
     158:	00 00       	nop
     15a:	df 91       	pop	r29
     15c:	cf 91       	pop	r28
     15e:	08 95       	ret

00000160 <Led2_On>:
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	cd b7       	in	r28, 0x3d	; 61
     166:	de b7       	in	r29, 0x3e	; 62
     168:	85 e2       	ldi	r24, 0x25	; 37
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	25 e2       	ldi	r18, 0x25	; 37
     16e:	30 e0       	ldi	r19, 0x00	; 0
     170:	f9 01       	movw	r30, r18
     172:	20 81       	ld	r18, Z
     174:	20 64       	ori	r18, 0x40	; 64
     176:	fc 01       	movw	r30, r24
     178:	20 83       	st	Z, r18
     17a:	00 00       	nop
     17c:	df 91       	pop	r29
     17e:	cf 91       	pop	r28
     180:	08 95       	ret

00000182 <Led2_Off>:
     182:	cf 93       	push	r28
     184:	df 93       	push	r29
     186:	cd b7       	in	r28, 0x3d	; 61
     188:	de b7       	in	r29, 0x3e	; 62
     18a:	85 e2       	ldi	r24, 0x25	; 37
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	25 e2       	ldi	r18, 0x25	; 37
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	f9 01       	movw	r30, r18
     194:	20 81       	ld	r18, Z
     196:	2f 7b       	andi	r18, 0xBF	; 191
     198:	fc 01       	movw	r30, r24
     19a:	20 83       	st	Z, r18
     19c:	00 00       	nop
     19e:	df 91       	pop	r29
     1a0:	cf 91       	pop	r28
     1a2:	08 95       	ret

000001a4 <Led3_On>:
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
     1a8:	cd b7       	in	r28, 0x3d	; 61
     1aa:	de b7       	in	r29, 0x3e	; 62
     1ac:	85 e2       	ldi	r24, 0x25	; 37
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	25 e2       	ldi	r18, 0x25	; 37
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	f9 01       	movw	r30, r18
     1b6:	20 81       	ld	r18, Z
     1b8:	20 62       	ori	r18, 0x20	; 32
     1ba:	fc 01       	movw	r30, r24
     1bc:	20 83       	st	Z, r18
     1be:	00 00       	nop
     1c0:	df 91       	pop	r29
     1c2:	cf 91       	pop	r28
     1c4:	08 95       	ret

000001c6 <Led3_Off>:
     1c6:	cf 93       	push	r28
     1c8:	df 93       	push	r29
     1ca:	cd b7       	in	r28, 0x3d	; 61
     1cc:	de b7       	in	r29, 0x3e	; 62
     1ce:	85 e2       	ldi	r24, 0x25	; 37
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	25 e2       	ldi	r18, 0x25	; 37
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	f9 01       	movw	r30, r18
     1d8:	20 81       	ld	r18, Z
     1da:	2f 7d       	andi	r18, 0xDF	; 223
     1dc:	fc 01       	movw	r30, r24
     1de:	20 83       	st	Z, r18
     1e0:	00 00       	nop
     1e2:	df 91       	pop	r29
     1e4:	cf 91       	pop	r28
     1e6:	08 95       	ret

000001e8 <Led4_On>:
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
     1f0:	85 e2       	ldi	r24, 0x25	; 37
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	25 e2       	ldi	r18, 0x25	; 37
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	f9 01       	movw	r30, r18
     1fa:	20 81       	ld	r18, Z
     1fc:	20 61       	ori	r18, 0x10	; 16
     1fe:	fc 01       	movw	r30, r24
     200:	20 83       	st	Z, r18
     202:	00 00       	nop
     204:	df 91       	pop	r29
     206:	cf 91       	pop	r28
     208:	08 95       	ret

0000020a <Led4_Off>:
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	85 e2       	ldi	r24, 0x25	; 37
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	25 e2       	ldi	r18, 0x25	; 37
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	f9 01       	movw	r30, r18
     21c:	20 81       	ld	r18, Z
     21e:	2f 7e       	andi	r18, 0xEF	; 239
     220:	fc 01       	movw	r30, r24
     222:	20 83       	st	Z, r18
     224:	00 00       	nop
     226:	df 91       	pop	r29
     228:	cf 91       	pop	r28
     22a:	08 95       	ret

0000022c <Led5_On>:
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	cd b7       	in	r28, 0x3d	; 61
     232:	de b7       	in	r29, 0x3e	; 62
     234:	85 e2       	ldi	r24, 0x25	; 37
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	25 e2       	ldi	r18, 0x25	; 37
     23a:	30 e0       	ldi	r19, 0x00	; 0
     23c:	f9 01       	movw	r30, r18
     23e:	20 81       	ld	r18, Z
     240:	28 60       	ori	r18, 0x08	; 8
     242:	fc 01       	movw	r30, r24
     244:	20 83       	st	Z, r18
     246:	00 00       	nop
     248:	df 91       	pop	r29
     24a:	cf 91       	pop	r28
     24c:	08 95       	ret

0000024e <Led8_On>:

/**
led8 - ioB0
*/
void Led8_On(void) {
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 0);
     256:	85 e2       	ldi	r24, 0x25	; 37
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	25 e2       	ldi	r18, 0x25	; 37
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	f9 01       	movw	r30, r18
     260:	20 81       	ld	r18, Z
     262:	21 60       	ori	r18, 0x01	; 1
     264:	fc 01       	movw	r30, r24
     266:	20 83       	st	Z, r18
}
     268:	00 00       	nop
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	08 95       	ret

00000270 <Taster_init>:
 ---------------------
 - DDR Reg has to be set to 0
 - PORT Reg has to be set to 1
 -> Pin is input with pull-up
 */
void Taster_init() {
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	cd b7       	in	r28, 0x3d	; 61
     276:	de b7       	in	r29, 0x3e	; 62
    
    // set to inputs
    DDRC &= ~(1 << 2);
     278:	87 e2       	ldi	r24, 0x27	; 39
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	27 e2       	ldi	r18, 0x27	; 39
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	f9 01       	movw	r30, r18
     282:	20 81       	ld	r18, Z
     284:	2b 7f       	andi	r18, 0xFB	; 251
     286:	fc 01       	movw	r30, r24
     288:	20 83       	st	Z, r18
    DDRD &= ~( (1 << 7) | (1 << 6) | (1 << 5) );
     28a:	8a e2       	ldi	r24, 0x2A	; 42
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	2a e2       	ldi	r18, 0x2A	; 42
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	f9 01       	movw	r30, r18
     294:	20 81       	ld	r18, Z
     296:	2f 71       	andi	r18, 0x1F	; 31
     298:	fc 01       	movw	r30, r24
     29a:	20 83       	st	Z, r18
    
    // enable pull-up
    PORTC |= (1 << 2);
     29c:	88 e2       	ldi	r24, 0x28	; 40
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	28 e2       	ldi	r18, 0x28	; 40
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	f9 01       	movw	r30, r18
     2a6:	20 81       	ld	r18, Z
     2a8:	24 60       	ori	r18, 0x04	; 4
     2aa:	fc 01       	movw	r30, r24
     2ac:	20 83       	st	Z, r18
    PORTD |= (1 << 7) | (1 << 6) | (1 << 5);
     2ae:	8b e2       	ldi	r24, 0x2B	; 43
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	2b e2       	ldi	r18, 0x2B	; 43
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	f9 01       	movw	r30, r18
     2b8:	20 81       	ld	r18, Z
     2ba:	20 6e       	ori	r18, 0xE0	; 224
     2bc:	fc 01       	movw	r30, r24
     2be:	20 83       	st	Z, r18
}
     2c0:	00 00       	nop
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	08 95       	ret

000002c8 <Taster1_get>:

/**
 Taster1 - ioD7
 */
uint8_t Taster1_get(void) {
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	00 d0       	rcall	.+0      	; 0x2ce <Taster1_get+0x6>
     2ce:	cd b7       	in	r28, 0x3d	; 61
     2d0:	de b7       	in	r29, 0x3e	; 62
    int state = PIND;
     2d2:	89 e2       	ldi	r24, 0x29	; 41
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	fc 01       	movw	r30, r24
     2d8:	80 81       	ld	r24, Z
     2da:	88 2f       	mov	r24, r24
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	9a 83       	std	Y+2, r25	; 0x02
     2e0:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<7)) == 0 ) {
     2e2:	89 81       	ldd	r24, Y+1	; 0x01
     2e4:	9a 81       	ldd	r25, Y+2	; 0x02
     2e6:	80 78       	andi	r24, 0x80	; 128
     2e8:	99 27       	eor	r25, r25
     2ea:	89 2b       	or	r24, r25
     2ec:	11 f4       	brne	.+4      	; 0x2f2 <Taster1_get+0x2a>
        return TASTER_RETURN_VALUE_LOW;
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <Taster1_get+0x2c>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
     2f2:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	08 95       	ret

000002fe <Taster2_get>:

/**
Taster2 - ioD6
*/
uint8_t Taster2_get(void) {
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	1f 92       	push	r1
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
    uint8_t state = PIND;
     308:	89 e2       	ldi	r24, 0x29	; 41
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	fc 01       	movw	r30, r24
     30e:	80 81       	ld	r24, Z
     310:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<6)) == 0 ) {
     312:	89 81       	ldd	r24, Y+1	; 0x01
     314:	88 2f       	mov	r24, r24
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	80 74       	andi	r24, 0x40	; 64
     31a:	99 27       	eor	r25, r25
     31c:	89 2b       	or	r24, r25
     31e:	11 f4       	brne	.+4      	; 0x324 <Taster2_get+0x26>
        return TASTER_RETURN_VALUE_LOW;
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	01 c0       	rjmp	.+2      	; 0x326 <Taster2_get+0x28>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
     324:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     326:	0f 90       	pop	r0
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	08 95       	ret

0000032e <Taster3_get>:

/**
Taster3 - ioD5
*/
uint8_t Taster3_get(void) {
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	1f 92       	push	r1
     334:	cd b7       	in	r28, 0x3d	; 61
     336:	de b7       	in	r29, 0x3e	; 62
    uint8_t state = PIND;
     338:	89 e2       	ldi	r24, 0x29	; 41
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	fc 01       	movw	r30, r24
     33e:	80 81       	ld	r24, Z
     340:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<5)) == 0 ) {
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	88 2f       	mov	r24, r24
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	80 72       	andi	r24, 0x20	; 32
     34a:	99 27       	eor	r25, r25
     34c:	89 2b       	or	r24, r25
     34e:	11 f4       	brne	.+4      	; 0x354 <Taster3_get+0x26>
        return TASTER_RETURN_VALUE_LOW;
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	01 c0       	rjmp	.+2      	; 0x356 <Taster3_get+0x28>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
     354:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     356:	0f 90       	pop	r0
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	08 95       	ret

0000035e <Taster4_get>:

/**
Taster4 - ioC2
*/
uint8_t Taster4_get(void) {
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	1f 92       	push	r1
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
    uint8_t state = PINC;
     368:	86 e2       	ldi	r24, 0x26	; 38
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	fc 01       	movw	r30, r24
     36e:	80 81       	ld	r24, Z
     370:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<2)) == 0 ) {
     372:	89 81       	ldd	r24, Y+1	; 0x01
     374:	88 2f       	mov	r24, r24
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	84 70       	andi	r24, 0x04	; 4
     37a:	99 27       	eor	r25, r25
     37c:	89 2b       	or	r24, r25
     37e:	11 f4       	brne	.+4      	; 0x384 <Taster4_get+0x26>
        return TASTER_RETURN_VALUE_LOW;
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	01 c0       	rjmp	.+2      	; 0x386 <Taster4_get+0x28>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
     384:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     386:	0f 90       	pop	r0
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	08 95       	ret

0000038e <main>:





int main(void) {
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	00 d0       	rcall	.+0      	; 0x394 <main+0x6>
     394:	00 d0       	rcall	.+0      	; 0x396 <main+0x8>
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
	
    Led_init(0);	// Don't set LEDs at PORTD
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	96 de       	rcall	.-724    	; 0xca <Led_init>
	Taster_init();
     39e:	68 df       	rcall	.-304    	; 0x270 <Taster_init>
    Timer_init(16); // Init timer with 16MHZ clock
     3a0:	80 e1       	ldi	r24, 0x10	; 16
     3a2:	43 d6       	rcall	.+3206   	; 0x102a <Timer_init>
     3a4:	78 94       	sei
	sei();
     3a6:	19 82       	std	Y+1, r1	; 0x01
	
    uint8_t state_testBoard = 0;
     3a8:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t last_time = 0;
     3aa:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t  toggle_asdf = 1;
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	8c 83       	std	Y+4, r24	; 0x04
			PORTB = 0x00;
		}*/
        
        
        //trafficLight();
        playground();
     3b0:	01 d0       	rcall	.+2      	; 0x3b4 <playground>
     3b2:	fe cf       	rjmp	.-4      	; 0x3b0 <main+0x22>

000003b4 <playground>:
    }
     3b4:	0f 93       	push	r16
- button1 pressed -> testTasterLed()
- button2 pressed -> testBoard()
- button3 pressed -> lauflicht()
- button4 pressed -> increment()
*/
void playground() {
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
     3c0:	c4 55       	subi	r28, 0x54	; 84
     3c2:	d1 09       	sbc	r29, r1
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	de bf       	out	0x3e, r29	; 62
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	cd bf       	out	0x3d, r28	; 61
    static int mode = 0;
    
    if (mode == 0) {    // mode selection
     3ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     3d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     3d6:	89 2b       	or	r24, r25
     3d8:	09 f0       	breq	.+2      	; 0x3dc <playground+0x28>
     3da:	02 c2       	rjmp	.+1028   	; 0x7e0 <__LOCK_REGION_LENGTH__+0x3e0>
        Led1_On();
     3dc:	9f de       	rcall	.-706    	; 0x11c <Led1_On>
        Led4_On();
     3de:	04 df       	rcall	.-504    	; 0x1e8 <Led4_On>
        Led5_On();
     3e0:	25 df       	rcall	.-438    	; 0x22c <Led5_On>
        Led8_On();
     3e2:	35 df       	rcall	.-406    	; 0x24e <Led8_On>
     3e4:	71 df       	rcall	.-286    	; 0x2c8 <Taster1_get>
        
        // test buttons
        if (Taster1_get()) {
     3e6:	89 2b       	or	r24, r25
     3e8:	09 f4       	brne	.+2      	; 0x3ec <playground+0x38>
     3ea:	79 c0       	rjmp	.+242    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	90 e0       	ldi	r25, 0x00	; 0
            mode = 1;
     3f0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     3f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     3f8:	85 e2       	ldi	r24, 0x25	; 37
            PORTB = 0x00;
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	fc 01       	movw	r30, r24
     3fe:	10 82       	st	Z, r1
     400:	8d de       	rcall	.-742    	; 0x11c <Led1_On>
            Led1_On();
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	aa ef       	ldi	r26, 0xFA	; 250
     408:	b3 e4       	ldi	r27, 0x43	; 67
     40a:	8d 8b       	std	Y+21, r24	; 0x15
     40c:	9e 8b       	std	Y+22, r25	; 0x16
     40e:	af 8b       	std	Y+23, r26	; 0x17
     410:	b8 8f       	std	Y+24, r27	; 0x18
     412:	20 e0       	ldi	r18, 0x00	; 0
     414:	30 e0       	ldi	r19, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     416:	4a e7       	ldi	r20, 0x7A	; 122
     418:	55 e4       	ldi	r21, 0x45	; 69
     41a:	6d 89       	ldd	r22, Y+21	; 0x15
     41c:	7e 89       	ldd	r23, Y+22	; 0x16
     41e:	8f 89       	ldd	r24, Y+23	; 0x17
     420:	98 8d       	ldd	r25, Y+24	; 0x18
     422:	3b d7       	rcall	.+3702   	; 0x129a <__mulsf3>
     424:	dc 01       	movw	r26, r24
     426:	cb 01       	movw	r24, r22
     428:	89 8f       	std	Y+25, r24	; 0x19
     42a:	9a 8f       	std	Y+26, r25	; 0x1a
     42c:	ab 8f       	std	Y+27, r26	; 0x1b
     42e:	bc 8f       	std	Y+28, r27	; 0x1c
     430:	20 e0       	ldi	r18, 0x00	; 0
     432:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
     434:	40 e8       	ldi	r20, 0x80	; 128
     436:	5f e3       	ldi	r21, 0x3F	; 63
     438:	69 8d       	ldd	r22, Y+25	; 0x19
     43a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     43c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     43e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     440:	ab d6       	rcall	.+3414   	; 0x1198 <__cmpsf2>
     442:	88 23       	and	r24, r24
     444:	2c f4       	brge	.+10     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
     44a:	9e 8f       	std	Y+30, r25	; 0x1e
     44c:	8d 8f       	std	Y+29, r24	; 0x1d
     44e:	3b c0       	rjmp	.+118    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	3f ef       	ldi	r19, 0xFF	; 255
	else if (__tmp > 65535)
     454:	4f e7       	ldi	r20, 0x7F	; 127
     456:	57 e4       	ldi	r21, 0x47	; 71
     458:	69 8d       	ldd	r22, Y+25	; 0x19
     45a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     45c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     45e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     460:	18 d7       	rcall	.+3632   	; 0x1292 <__gesf2>
     462:	18 16       	cp	r1, r24
     464:	3c f5       	brge	.+78     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     466:	20 e0       	ldi	r18, 0x00	; 0
     468:	30 e0       	ldi	r19, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     46a:	40 e2       	ldi	r20, 0x20	; 32
     46c:	51 e4       	ldi	r21, 0x41	; 65
     46e:	6d 89       	ldd	r22, Y+21	; 0x15
     470:	7e 89       	ldd	r23, Y+22	; 0x16
     472:	8f 89       	ldd	r24, Y+23	; 0x17
     474:	98 8d       	ldd	r25, Y+24	; 0x18
     476:	11 d7       	rcall	.+3618   	; 0x129a <__mulsf3>
     478:	dc 01       	movw	r26, r24
     47a:	cb 01       	movw	r24, r22
     47c:	bc 01       	movw	r22, r24
     47e:	cd 01       	movw	r24, r26
     480:	8f d6       	rcall	.+3358   	; 0x11a0 <__fixunssfsi>
     482:	dc 01       	movw	r26, r24
     484:	cb 01       	movw	r24, r22
     486:	9e 8f       	std	Y+30, r25	; 0x1e
     488:	8d 8f       	std	Y+29, r24	; 0x1d
     48a:	0f c0       	rjmp	.+30     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     48c:	80 e9       	ldi	r24, 0x90	; 144
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	98 a3       	std	Y+32, r25	; 0x20
     492:	8f 8f       	std	Y+31, r24	; 0x1f
     494:	8f 8d       	ldd	r24, Y+31	; 0x1f
     496:	98 a1       	ldd	r25, Y+32	; 0x20
     498:	01 97       	sbiw	r24, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     49a:	f1 f7       	brne	.-4      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     49c:	98 a3       	std	Y+32, r25	; 0x20
     49e:	8f 8f       	std	Y+31, r24	; 0x1f
     4a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     4a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     4a4:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4a6:	9e 8f       	std	Y+30, r25	; 0x1e
     4a8:	8d 8f       	std	Y+29, r24	; 0x1d
     4aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
     4ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4ae:	89 2b       	or	r24, r25
     4b0:	69 f7       	brne	.-38     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     4b2:	13 c0       	rjmp	.+38     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4b4:	69 8d       	ldd	r22, Y+25	; 0x19
     4b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4bc:	71 d6       	rcall	.+3298   	; 0x11a0 <__fixunssfsi>
     4be:	dc 01       	movw	r26, r24
     4c0:	cb 01       	movw	r24, r22
     4c2:	9e 8f       	std	Y+30, r25	; 0x1e
     4c4:	8d 8f       	std	Y+29, r24	; 0x1d
     4c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     4c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     4ca:	9a a3       	std	Y+34, r25	; 0x22
     4cc:	89 a3       	std	Y+33, r24	; 0x21
     4ce:	89 a1       	ldd	r24, Y+33	; 0x21
     4d0:	9a a1       	ldd	r25, Y+34	; 0x22
     4d2:	01 97       	sbiw	r24, 0x01	; 1
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4d6:	9a a3       	std	Y+34, r25	; 0x22
     4d8:	89 a3       	std	Y+33, r24	; 0x21
     4da:	31 de       	rcall	.-926    	; 0x13e <Led1_Off>
            _delay_ms(500);
            Led1_Off();
     4dc:	19 c3       	rjmp	.+1586   	; 0xb10 <__LOCK_REGION_LENGTH__+0x710>
     4de:	0f df       	rcall	.-482    	; 0x2fe <Taster2_get>
            default:
                mode = 0;
                break;
        }
    }
}
     4e0:	89 2b       	or	r24, r25
            mode = 1;
            PORTB = 0x00;
            Led1_On();
            _delay_ms(500);
            Led1_Off();
        } else if (Taster2_get()) {
     4e2:	09 f4       	brne	.+2      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     4e4:	79 c0       	rjmp	.+242    	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
     4e6:	82 e0       	ldi	r24, 0x02	; 2
     4e8:	90 e0       	ldi	r25, 0x00	; 0
            mode = 2;
     4ea:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     4ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     4f2:	85 e2       	ldi	r24, 0x25	; 37
     4f4:	90 e0       	ldi	r25, 0x00	; 0
            PORTB = 0x00;
     4f6:	fc 01       	movw	r30, r24
     4f8:	10 82       	st	Z, r1
     4fa:	32 de       	rcall	.-924    	; 0x160 <Led2_On>
     4fc:	80 e0       	ldi	r24, 0x00	; 0
            Led2_On();
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	aa ef       	ldi	r26, 0xFA	; 250
     502:	b3 e4       	ldi	r27, 0x43	; 67
     504:	89 83       	std	Y+1, r24	; 0x01
     506:	9a 83       	std	Y+2, r25	; 0x02
     508:	ab 83       	std	Y+3, r26	; 0x03
     50a:	bc 83       	std	Y+4, r27	; 0x04
     50c:	20 e0       	ldi	r18, 0x00	; 0
     50e:	30 e0       	ldi	r19, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     510:	4a e7       	ldi	r20, 0x7A	; 122
     512:	55 e4       	ldi	r21, 0x45	; 69
     514:	69 81       	ldd	r22, Y+1	; 0x01
     516:	7a 81       	ldd	r23, Y+2	; 0x02
     518:	8b 81       	ldd	r24, Y+3	; 0x03
     51a:	9c 81       	ldd	r25, Y+4	; 0x04
     51c:	be d6       	rcall	.+3452   	; 0x129a <__mulsf3>
     51e:	dc 01       	movw	r26, r24
     520:	cb 01       	movw	r24, r22
     522:	8b a3       	std	Y+35, r24	; 0x23
     524:	9c a3       	std	Y+36, r25	; 0x24
     526:	ad a3       	std	Y+37, r26	; 0x25
     528:	be a3       	std	Y+38, r27	; 0x26
     52a:	20 e0       	ldi	r18, 0x00	; 0
     52c:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
     52e:	40 e8       	ldi	r20, 0x80	; 128
     530:	5f e3       	ldi	r21, 0x3F	; 63
     532:	6b a1       	ldd	r22, Y+35	; 0x23
     534:	7c a1       	ldd	r23, Y+36	; 0x24
     536:	8d a1       	ldd	r24, Y+37	; 0x25
     538:	9e a1       	ldd	r25, Y+38	; 0x26
     53a:	2e d6       	rcall	.+3164   	; 0x1198 <__cmpsf2>
     53c:	88 23       	and	r24, r24
     53e:	2c f4       	brge	.+10     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
     544:	98 a7       	std	Y+40, r25	; 0x28
     546:	8f a3       	std	Y+39, r24	; 0x27
     548:	3b c0       	rjmp	.+118    	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	3f ef       	ldi	r19, 0xFF	; 255
	else if (__tmp > 65535)
     54e:	4f e7       	ldi	r20, 0x7F	; 127
     550:	57 e4       	ldi	r21, 0x47	; 71
     552:	6b a1       	ldd	r22, Y+35	; 0x23
     554:	7c a1       	ldd	r23, Y+36	; 0x24
     556:	8d a1       	ldd	r24, Y+37	; 0x25
     558:	9e a1       	ldd	r25, Y+38	; 0x26
     55a:	9b d6       	rcall	.+3382   	; 0x1292 <__gesf2>
     55c:	18 16       	cp	r1, r24
     55e:	3c f5       	brge	.+78     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
     560:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	40 e2       	ldi	r20, 0x20	; 32
     566:	51 e4       	ldi	r21, 0x41	; 65
     568:	69 81       	ldd	r22, Y+1	; 0x01
     56a:	7a 81       	ldd	r23, Y+2	; 0x02
     56c:	8b 81       	ldd	r24, Y+3	; 0x03
     56e:	9c 81       	ldd	r25, Y+4	; 0x04
     570:	94 d6       	rcall	.+3368   	; 0x129a <__mulsf3>
     572:	dc 01       	movw	r26, r24
     574:	cb 01       	movw	r24, r22
     576:	bc 01       	movw	r22, r24
     578:	cd 01       	movw	r24, r26
     57a:	12 d6       	rcall	.+3108   	; 0x11a0 <__fixunssfsi>
     57c:	dc 01       	movw	r26, r24
     57e:	cb 01       	movw	r24, r22
     580:	98 a7       	std	Y+40, r25	; 0x28
     582:	8f a3       	std	Y+39, r24	; 0x27
     584:	0f c0       	rjmp	.+30     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     586:	80 e9       	ldi	r24, 0x90	; 144
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	9a a7       	std	Y+42, r25	; 0x2a
     58c:	89 a7       	std	Y+41, r24	; 0x29
     58e:	89 a5       	ldd	r24, Y+41	; 0x29
     590:	9a a5       	ldd	r25, Y+42	; 0x2a
     592:	01 97       	sbiw	r24, 0x01	; 1
     594:	f1 f7       	brne	.-4      	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
     596:	9a a7       	std	Y+42, r25	; 0x2a
     598:	89 a7       	std	Y+41, r24	; 0x29
     59a:	8f a1       	ldd	r24, Y+39	; 0x27
     59c:	98 a5       	ldd	r25, Y+40	; 0x28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     59e:	01 97       	sbiw	r24, 0x01	; 1
     5a0:	98 a7       	std	Y+40, r25	; 0x28
     5a2:	8f a3       	std	Y+39, r24	; 0x27
     5a4:	8f a1       	ldd	r24, Y+39	; 0x27
     5a6:	98 a5       	ldd	r25, Y+40	; 0x28
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5a8:	89 2b       	or	r24, r25
     5aa:	69 f7       	brne	.-38     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     5ac:	13 c0       	rjmp	.+38     	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
     5ae:	6b a1       	ldd	r22, Y+35	; 0x23
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5b0:	7c a1       	ldd	r23, Y+36	; 0x24
     5b2:	8d a1       	ldd	r24, Y+37	; 0x25
     5b4:	9e a1       	ldd	r25, Y+38	; 0x26
     5b6:	f4 d5       	rcall	.+3048   	; 0x11a0 <__fixunssfsi>
     5b8:	dc 01       	movw	r26, r24
     5ba:	cb 01       	movw	r24, r22
     5bc:	98 a7       	std	Y+40, r25	; 0x28
     5be:	8f a3       	std	Y+39, r24	; 0x27
     5c0:	8f a1       	ldd	r24, Y+39	; 0x27
     5c2:	98 a5       	ldd	r25, Y+40	; 0x28
     5c4:	9c a7       	std	Y+44, r25	; 0x2c
     5c6:	8b a7       	std	Y+43, r24	; 0x2b
     5c8:	8b a5       	ldd	r24, Y+43	; 0x2b
     5ca:	9c a5       	ldd	r25, Y+44	; 0x2c
     5cc:	01 97       	sbiw	r24, 0x01	; 1
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     5d0:	9c a7       	std	Y+44, r25	; 0x2c
     5d2:	8b a7       	std	Y+43, r24	; 0x2b
            _delay_ms(500);
            Led2_Off();
     5d4:	d6 dd       	rcall	.-1108   	; 0x182 <Led2_Off>
     5d6:	9c c2       	rjmp	.+1336   	; 0xb10 <__LOCK_REGION_LENGTH__+0x710>
            default:
                mode = 0;
                break;
        }
    }
}
     5d8:	aa de       	rcall	.-684    	; 0x32e <Taster3_get>
            mode = 2;
            PORTB = 0x00;
            Led2_On();
            _delay_ms(500);
            Led2_Off();
        } else if (Taster3_get()) {
     5da:	89 2b       	or	r24, r25
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     5de:	79 c0       	rjmp	.+242    	; 0x6d2 <__LOCK_REGION_LENGTH__+0x2d2>
     5e0:	83 e0       	ldi	r24, 0x03	; 3
     5e2:	90 e0       	ldi	r25, 0x00	; 0
            mode = 3;
     5e4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     5e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     5ec:	85 e2       	ldi	r24, 0x25	; 37
            PORTB = 0x00;
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	fc 01       	movw	r30, r24
     5f2:	10 82       	st	Z, r1
     5f4:	d7 dd       	rcall	.-1106   	; 0x1a4 <Led3_On>
            Led3_On();
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	aa ef       	ldi	r26, 0xFA	; 250
     5fc:	b3 e4       	ldi	r27, 0x43	; 67
     5fe:	8d 83       	std	Y+5, r24	; 0x05
     600:	9e 83       	std	Y+6, r25	; 0x06
     602:	af 83       	std	Y+7, r26	; 0x07
     604:	b8 87       	std	Y+8, r27	; 0x08
     606:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	4a e7       	ldi	r20, 0x7A	; 122
     60c:	55 e4       	ldi	r21, 0x45	; 69
     60e:	6d 81       	ldd	r22, Y+5	; 0x05
     610:	7e 81       	ldd	r23, Y+6	; 0x06
     612:	8f 81       	ldd	r24, Y+7	; 0x07
     614:	98 85       	ldd	r25, Y+8	; 0x08
     616:	41 d6       	rcall	.+3202   	; 0x129a <__mulsf3>
     618:	dc 01       	movw	r26, r24
     61a:	cb 01       	movw	r24, r22
     61c:	8d a7       	std	Y+45, r24	; 0x2d
     61e:	9e a7       	std	Y+46, r25	; 0x2e
     620:	af a7       	std	Y+47, r26	; 0x2f
     622:	b8 ab       	std	Y+48, r27	; 0x30
     624:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	40 e8       	ldi	r20, 0x80	; 128
     62a:	5f e3       	ldi	r21, 0x3F	; 63
     62c:	6d a5       	ldd	r22, Y+45	; 0x2d
     62e:	7e a5       	ldd	r23, Y+46	; 0x2e
     630:	8f a5       	ldd	r24, Y+47	; 0x2f
     632:	98 a9       	ldd	r25, Y+48	; 0x30
     634:	b1 d5       	rcall	.+2914   	; 0x1198 <__cmpsf2>
     636:	88 23       	and	r24, r24
     638:	2c f4       	brge	.+10     	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
     63a:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	9a ab       	std	Y+50, r25	; 0x32
     640:	89 ab       	std	Y+49, r24	; 0x31
     642:	3b c0       	rjmp	.+118    	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
	else if (__tmp > 65535)
     644:	20 e0       	ldi	r18, 0x00	; 0
     646:	3f ef       	ldi	r19, 0xFF	; 255
     648:	4f e7       	ldi	r20, 0x7F	; 127
     64a:	57 e4       	ldi	r21, 0x47	; 71
     64c:	6d a5       	ldd	r22, Y+45	; 0x2d
     64e:	7e a5       	ldd	r23, Y+46	; 0x2e
     650:	8f a5       	ldd	r24, Y+47	; 0x2f
     652:	98 a9       	ldd	r25, Y+48	; 0x30
     654:	1e d6       	rcall	.+3132   	; 0x1292 <__gesf2>
     656:	18 16       	cp	r1, r24
     658:	3c f5       	brge	.+78     	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
     65a:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	40 e2       	ldi	r20, 0x20	; 32
     660:	51 e4       	ldi	r21, 0x41	; 65
     662:	6d 81       	ldd	r22, Y+5	; 0x05
     664:	7e 81       	ldd	r23, Y+6	; 0x06
     666:	8f 81       	ldd	r24, Y+7	; 0x07
     668:	98 85       	ldd	r25, Y+8	; 0x08
     66a:	17 d6       	rcall	.+3118   	; 0x129a <__mulsf3>
     66c:	dc 01       	movw	r26, r24
     66e:	cb 01       	movw	r24, r22
     670:	bc 01       	movw	r22, r24
     672:	cd 01       	movw	r24, r26
     674:	95 d5       	rcall	.+2858   	; 0x11a0 <__fixunssfsi>
     676:	dc 01       	movw	r26, r24
     678:	cb 01       	movw	r24, r22
     67a:	9a ab       	std	Y+50, r25	; 0x32
     67c:	89 ab       	std	Y+49, r24	; 0x31
     67e:	0f c0       	rjmp	.+30     	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
     680:	80 e9       	ldi	r24, 0x90	; 144
     682:	91 e0       	ldi	r25, 0x01	; 1
     684:	9c ab       	std	Y+52, r25	; 0x34
     686:	8b ab       	std	Y+51, r24	; 0x33
     688:	8b a9       	ldd	r24, Y+51	; 0x33
     68a:	9c a9       	ldd	r25, Y+52	; 0x34
     68c:	01 97       	sbiw	r24, 0x01	; 1
     68e:	f1 f7       	brne	.-4      	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
     690:	9c ab       	std	Y+52, r25	; 0x34
     692:	8b ab       	std	Y+51, r24	; 0x33
     694:	89 a9       	ldd	r24, Y+49	; 0x31
     696:	9a a9       	ldd	r25, Y+50	; 0x32
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     698:	01 97       	sbiw	r24, 0x01	; 1
     69a:	9a ab       	std	Y+50, r25	; 0x32
     69c:	89 ab       	std	Y+49, r24	; 0x31
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     69e:	89 a9       	ldd	r24, Y+49	; 0x31
     6a0:	9a a9       	ldd	r25, Y+50	; 0x32
     6a2:	89 2b       	or	r24, r25
     6a4:	69 f7       	brne	.-38     	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
     6a6:	13 c0       	rjmp	.+38     	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6a8:	6d a5       	ldd	r22, Y+45	; 0x2d
     6aa:	7e a5       	ldd	r23, Y+46	; 0x2e
     6ac:	8f a5       	ldd	r24, Y+47	; 0x2f
     6ae:	98 a9       	ldd	r25, Y+48	; 0x30
     6b0:	77 d5       	rcall	.+2798   	; 0x11a0 <__fixunssfsi>
     6b2:	dc 01       	movw	r26, r24
     6b4:	cb 01       	movw	r24, r22
     6b6:	9a ab       	std	Y+50, r25	; 0x32
     6b8:	89 ab       	std	Y+49, r24	; 0x31
     6ba:	89 a9       	ldd	r24, Y+49	; 0x31
     6bc:	9a a9       	ldd	r25, Y+50	; 0x32
     6be:	9e ab       	std	Y+54, r25	; 0x36
     6c0:	8d ab       	std	Y+53, r24	; 0x35
     6c2:	8d a9       	ldd	r24, Y+53	; 0x35
     6c4:	9e a9       	ldd	r25, Y+54	; 0x36
     6c6:	01 97       	sbiw	r24, 0x01	; 1
     6c8:	f1 f7       	brne	.-4      	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
     6ca:	9e ab       	std	Y+54, r25	; 0x36
     6cc:	8d ab       	std	Y+53, r24	; 0x35
            _delay_ms(500);
            Led3_Off();
     6ce:	7b dd       	rcall	.-1290   	; 0x1c6 <Led3_Off>
     6d0:	1f c2       	rjmp	.+1086   	; 0xb10 <__LOCK_REGION_LENGTH__+0x710>
            default:
                mode = 0;
                break;
        }
    }
}
     6d2:	45 de       	rcall	.-886    	; 0x35e <Taster4_get>
            mode = 3;
            PORTB = 0x00;
            Led3_On();
            _delay_ms(500);
            Led3_Off();
        } else if (Taster4_get()) {
     6d4:	89 2b       	or	r24, r25
     6d6:	09 f4       	brne	.+2      	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
     6d8:	1b c2       	rjmp	.+1078   	; 0xb10 <__LOCK_REGION_LENGTH__+0x710>
     6da:	84 e0       	ldi	r24, 0x04	; 4
            mode = 4;
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     6e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     6e6:	85 e2       	ldi	r24, 0x25	; 37
            PORTB = 0x00;
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	fc 01       	movw	r30, r24
     6ec:	10 82       	st	Z, r1
     6ee:	7c dd       	rcall	.-1288   	; 0x1e8 <Led4_On>
            Led4_On();
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	aa ef       	ldi	r26, 0xFA	; 250
     6f6:	b3 e4       	ldi	r27, 0x43	; 67
     6f8:	89 87       	std	Y+9, r24	; 0x09
     6fa:	9a 87       	std	Y+10, r25	; 0x0a
     6fc:	ab 87       	std	Y+11, r26	; 0x0b
     6fe:	bc 87       	std	Y+12, r27	; 0x0c
     700:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	4a e7       	ldi	r20, 0x7A	; 122
     706:	55 e4       	ldi	r21, 0x45	; 69
     708:	69 85       	ldd	r22, Y+9	; 0x09
     70a:	7a 85       	ldd	r23, Y+10	; 0x0a
     70c:	8b 85       	ldd	r24, Y+11	; 0x0b
     70e:	9c 85       	ldd	r25, Y+12	; 0x0c
     710:	c4 d5       	rcall	.+2952   	; 0x129a <__mulsf3>
     712:	dc 01       	movw	r26, r24
     714:	cb 01       	movw	r24, r22
     716:	8f ab       	std	Y+55, r24	; 0x37
     718:	98 af       	std	Y+56, r25	; 0x38
     71a:	a9 af       	std	Y+57, r26	; 0x39
     71c:	ba af       	std	Y+58, r27	; 0x3a
     71e:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	40 e8       	ldi	r20, 0x80	; 128
     724:	5f e3       	ldi	r21, 0x3F	; 63
     726:	6f a9       	ldd	r22, Y+55	; 0x37
     728:	78 ad       	ldd	r23, Y+56	; 0x38
     72a:	89 ad       	ldd	r24, Y+57	; 0x39
     72c:	9a ad       	ldd	r25, Y+58	; 0x3a
     72e:	34 d5       	rcall	.+2664   	; 0x1198 <__cmpsf2>
     730:	88 23       	and	r24, r24
     732:	2c f4       	brge	.+10     	; 0x73e <__LOCK_REGION_LENGTH__+0x33e>
		__ticks = 1;
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	9c af       	std	Y+60, r25	; 0x3c
     73a:	8b af       	std	Y+59, r24	; 0x3b
     73c:	3b c0       	rjmp	.+118    	; 0x7b4 <__LOCK_REGION_LENGTH__+0x3b4>
	else if (__tmp > 65535)
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	3f ef       	ldi	r19, 0xFF	; 255
     742:	4f e7       	ldi	r20, 0x7F	; 127
     744:	57 e4       	ldi	r21, 0x47	; 71
     746:	6f a9       	ldd	r22, Y+55	; 0x37
     748:	78 ad       	ldd	r23, Y+56	; 0x38
     74a:	89 ad       	ldd	r24, Y+57	; 0x39
     74c:	9a ad       	ldd	r25, Y+58	; 0x3a
     74e:	a1 d5       	rcall	.+2882   	; 0x1292 <__gesf2>
     750:	18 16       	cp	r1, r24
     752:	3c f5       	brge	.+78     	; 0x7a2 <__LOCK_REGION_LENGTH__+0x3a2>
     754:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	40 e2       	ldi	r20, 0x20	; 32
     75a:	51 e4       	ldi	r21, 0x41	; 65
     75c:	69 85       	ldd	r22, Y+9	; 0x09
     75e:	7a 85       	ldd	r23, Y+10	; 0x0a
     760:	8b 85       	ldd	r24, Y+11	; 0x0b
     762:	9c 85       	ldd	r25, Y+12	; 0x0c
     764:	9a d5       	rcall	.+2868   	; 0x129a <__mulsf3>
     766:	dc 01       	movw	r26, r24
     768:	cb 01       	movw	r24, r22
     76a:	bc 01       	movw	r22, r24
     76c:	cd 01       	movw	r24, r26
     76e:	18 d5       	rcall	.+2608   	; 0x11a0 <__fixunssfsi>
     770:	dc 01       	movw	r26, r24
     772:	cb 01       	movw	r24, r22
     774:	9c af       	std	Y+60, r25	; 0x3c
     776:	8b af       	std	Y+59, r24	; 0x3b
     778:	0f c0       	rjmp	.+30     	; 0x798 <__LOCK_REGION_LENGTH__+0x398>
     77a:	80 e9       	ldi	r24, 0x90	; 144
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	9e af       	std	Y+62, r25	; 0x3e
     780:	8d af       	std	Y+61, r24	; 0x3d
     782:	8d ad       	ldd	r24, Y+61	; 0x3d
     784:	9e ad       	ldd	r25, Y+62	; 0x3e
     786:	01 97       	sbiw	r24, 0x01	; 1
     788:	f1 f7       	brne	.-4      	; 0x786 <__LOCK_REGION_LENGTH__+0x386>
     78a:	9e af       	std	Y+62, r25	; 0x3e
     78c:	8d af       	std	Y+61, r24	; 0x3d
     78e:	8b ad       	ldd	r24, Y+59	; 0x3b
     790:	9c ad       	ldd	r25, Y+60	; 0x3c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     792:	01 97       	sbiw	r24, 0x01	; 1
     794:	9c af       	std	Y+60, r25	; 0x3c
     796:	8b af       	std	Y+59, r24	; 0x3b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     798:	8b ad       	ldd	r24, Y+59	; 0x3b
     79a:	9c ad       	ldd	r25, Y+60	; 0x3c
     79c:	89 2b       	or	r24, r25
     79e:	69 f7       	brne	.-38     	; 0x77a <__LOCK_REGION_LENGTH__+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7a0:	1d c0       	rjmp	.+58     	; 0x7dc <__LOCK_REGION_LENGTH__+0x3dc>
     7a2:	6f a9       	ldd	r22, Y+55	; 0x37
     7a4:	78 ad       	ldd	r23, Y+56	; 0x38
     7a6:	89 ad       	ldd	r24, Y+57	; 0x39
     7a8:	9a ad       	ldd	r25, Y+58	; 0x3a
     7aa:	fa d4       	rcall	.+2548   	; 0x11a0 <__fixunssfsi>
     7ac:	dc 01       	movw	r26, r24
     7ae:	cb 01       	movw	r24, r22
     7b0:	9c af       	std	Y+60, r25	; 0x3c
     7b2:	8b af       	std	Y+59, r24	; 0x3b
     7b4:	2b ad       	ldd	r18, Y+59	; 0x3b
     7b6:	3c ad       	ldd	r19, Y+60	; 0x3c
     7b8:	ce 01       	movw	r24, r28
     7ba:	cf 96       	adiw	r24, 0x3f	; 63
     7bc:	fc 01       	movw	r30, r24
     7be:	31 83       	std	Z+1, r19	; 0x01
     7c0:	20 83       	st	Z, r18
     7c2:	ce 01       	movw	r24, r28
     7c4:	cf 96       	adiw	r24, 0x3f	; 63
     7c6:	fc 01       	movw	r30, r24
     7c8:	80 81       	ld	r24, Z
     7ca:	91 81       	ldd	r25, Z+1	; 0x01
     7cc:	01 97       	sbiw	r24, 0x01	; 1
     7ce:	f1 f7       	brne	.-4      	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
     7d0:	9e 01       	movw	r18, r28
     7d2:	21 5c       	subi	r18, 0xC1	; 193
     7d4:	3f 4f       	sbci	r19, 0xFF	; 255
     7d6:	f9 01       	movw	r30, r18
     7d8:	91 83       	std	Z+1, r25	; 0x01
            _delay_ms(500);
            Led4_Off();
     7da:	80 83       	st	Z, r24
     7dc:	16 dd       	rcall	.-1492   	; 0x20a <Led4_Off>
            default:
                mode = 0;
                break;
        }
    }
}
     7de:	98 c1       	rjmp	.+816    	; 0xb10 <__LOCK_REGION_LENGTH__+0x710>
        }
        
    } else {    // run
        
        // reset if button 1 and button 2 are pressed
        if (Taster1_get() && Taster2_get()) {
     7e0:	73 dd       	rcall	.-1306   	; 0x2c8 <Taster1_get>
     7e2:	89 2b       	or	r24, r25
     7e4:	09 f4       	brne	.+2      	; 0x7e8 <__LOCK_REGION_LENGTH__+0x3e8>
     7e6:	75 c1       	rjmp	.+746    	; 0xad2 <__LOCK_REGION_LENGTH__+0x6d2>
     7e8:	8a dd       	rcall	.-1260   	; 0x2fe <Taster2_get>
     7ea:	89 2b       	or	r24, r25
     7ec:	09 f4       	brne	.+2      	; 0x7f0 <__LOCK_REGION_LENGTH__+0x3f0>
     7ee:	71 c1       	rjmp	.+738    	; 0xad2 <__LOCK_REGION_LENGTH__+0x6d2>
     7f0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
            mode = 0;
     7f4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	aa e7       	ldi	r26, 0x7A	; 122
     7fe:	b4 e4       	ldi	r27, 0x44	; 68
     800:	89 8b       	std	Y+17, r24	; 0x11
     802:	9a 8b       	std	Y+18, r25	; 0x12
     804:	ab 8b       	std	Y+19, r26	; 0x13
     806:	bc 8b       	std	Y+20, r27	; 0x14
     808:	8e 01       	movw	r16, r28

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     80a:	05 5b       	subi	r16, 0xB5	; 181
     80c:	1f 4f       	sbci	r17, 0xFF	; 255
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	4a e7       	ldi	r20, 0x7A	; 122
     814:	55 e4       	ldi	r21, 0x45	; 69
     816:	69 89       	ldd	r22, Y+17	; 0x11
     818:	7a 89       	ldd	r23, Y+18	; 0x12
     81a:	8b 89       	ldd	r24, Y+19	; 0x13
     81c:	9c 89       	ldd	r25, Y+20	; 0x14
     81e:	3d d5       	rcall	.+2682   	; 0x129a <__mulsf3>
     820:	dc 01       	movw	r26, r24
     822:	cb 01       	movw	r24, r22
     824:	f8 01       	movw	r30, r16
     826:	80 83       	st	Z, r24
     828:	91 83       	std	Z+1, r25	; 0x01
     82a:	a2 83       	std	Z+2, r26	; 0x02
     82c:	b3 83       	std	Z+3, r27	; 0x03
     82e:	ce 01       	movw	r24, r28
	if (__tmp < 1.0)
     830:	85 5b       	subi	r24, 0xB5	; 181
     832:	9f 4f       	sbci	r25, 0xFF	; 255
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	40 e8       	ldi	r20, 0x80	; 128
     83a:	5f e3       	ldi	r21, 0x3F	; 63
     83c:	fc 01       	movw	r30, r24
     83e:	60 81       	ld	r22, Z
     840:	71 81       	ldd	r23, Z+1	; 0x01
     842:	82 81       	ldd	r24, Z+2	; 0x02
     844:	93 81       	ldd	r25, Z+3	; 0x03
     846:	a8 d4       	rcall	.+2384   	; 0x1198 <__cmpsf2>
     848:	88 23       	and	r24, r24
     84a:	4c f4       	brge	.+18     	; 0x85e <__LOCK_REGION_LENGTH__+0x45e>
		__ticks = 1;
     84c:	ce 01       	movw	r24, r28
     84e:	81 5b       	subi	r24, 0xB1	; 177
     850:	9f 4f       	sbci	r25, 0xFF	; 255
     852:	21 e0       	ldi	r18, 0x01	; 1
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	fc 01       	movw	r30, r24
     858:	31 83       	std	Z+1, r19	; 0x01
     85a:	20 83       	st	Z, r18
     85c:	65 c0       	rjmp	.+202    	; 0x928 <__LOCK_REGION_LENGTH__+0x528>
	else if (__tmp > 65535)
     85e:	ce 01       	movw	r24, r28
     860:	85 5b       	subi	r24, 0xB5	; 181
     862:	9f 4f       	sbci	r25, 0xFF	; 255
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	3f ef       	ldi	r19, 0xFF	; 255
     868:	4f e7       	ldi	r20, 0x7F	; 127
     86a:	57 e4       	ldi	r21, 0x47	; 71
     86c:	fc 01       	movw	r30, r24
     86e:	60 81       	ld	r22, Z
     870:	71 81       	ldd	r23, Z+1	; 0x01
     872:	82 81       	ldd	r24, Z+2	; 0x02
     874:	93 81       	ldd	r25, Z+3	; 0x03
     876:	0d d5       	rcall	.+2586   	; 0x1292 <__gesf2>
     878:	18 16       	cp	r1, r24
     87a:	0c f0       	brlt	.+2      	; 0x87e <__LOCK_REGION_LENGTH__+0x47e>
     87c:	44 c0       	rjmp	.+136    	; 0x906 <__LOCK_REGION_LENGTH__+0x506>
     87e:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e2       	ldi	r20, 0x20	; 32
     884:	51 e4       	ldi	r21, 0x41	; 65
     886:	69 89       	ldd	r22, Y+17	; 0x11
     888:	7a 89       	ldd	r23, Y+18	; 0x12
     88a:	8b 89       	ldd	r24, Y+19	; 0x13
     88c:	9c 89       	ldd	r25, Y+20	; 0x14
     88e:	05 d5       	rcall	.+2570   	; 0x129a <__mulsf3>
     890:	dc 01       	movw	r26, r24
     892:	cb 01       	movw	r24, r22
     894:	8e 01       	movw	r16, r28
     896:	01 5b       	subi	r16, 0xB1	; 177
     898:	1f 4f       	sbci	r17, 0xFF	; 255
     89a:	bc 01       	movw	r22, r24
     89c:	cd 01       	movw	r24, r26
     89e:	80 d4       	rcall	.+2304   	; 0x11a0 <__fixunssfsi>
     8a0:	dc 01       	movw	r26, r24
     8a2:	cb 01       	movw	r24, r22
     8a4:	f8 01       	movw	r30, r16
     8a6:	91 83       	std	Z+1, r25	; 0x01
     8a8:	80 83       	st	Z, r24
     8aa:	24 c0       	rjmp	.+72     	; 0x8f4 <__LOCK_REGION_LENGTH__+0x4f4>
     8ac:	ce 01       	movw	r24, r28
     8ae:	8f 5a       	subi	r24, 0xAF	; 175
     8b0:	9f 4f       	sbci	r25, 0xFF	; 255
     8b2:	20 e9       	ldi	r18, 0x90	; 144
     8b4:	31 e0       	ldi	r19, 0x01	; 1
     8b6:	fc 01       	movw	r30, r24
     8b8:	31 83       	std	Z+1, r19	; 0x01
     8ba:	20 83       	st	Z, r18
     8bc:	ce 01       	movw	r24, r28
     8be:	8f 5a       	subi	r24, 0xAF	; 175
     8c0:	9f 4f       	sbci	r25, 0xFF	; 255
     8c2:	fc 01       	movw	r30, r24
     8c4:	80 81       	ld	r24, Z
     8c6:	91 81       	ldd	r25, Z+1	; 0x01
     8c8:	01 97       	sbiw	r24, 0x01	; 1
     8ca:	f1 f7       	brne	.-4      	; 0x8c8 <__LOCK_REGION_LENGTH__+0x4c8>
     8cc:	9e 01       	movw	r18, r28
     8ce:	2f 5a       	subi	r18, 0xAF	; 175
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	f9 01       	movw	r30, r18
     8d4:	91 83       	std	Z+1, r25	; 0x01
     8d6:	80 83       	st	Z, r24
     8d8:	ce 01       	movw	r24, r28
     8da:	81 5b       	subi	r24, 0xB1	; 177
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8dc:	9f 4f       	sbci	r25, 0xFF	; 255
     8de:	9e 01       	movw	r18, r28
     8e0:	21 5b       	subi	r18, 0xB1	; 177
     8e2:	3f 4f       	sbci	r19, 0xFF	; 255
     8e4:	f9 01       	movw	r30, r18
     8e6:	20 81       	ld	r18, Z
     8e8:	31 81       	ldd	r19, Z+1	; 0x01
     8ea:	21 50       	subi	r18, 0x01	; 1
     8ec:	31 09       	sbc	r19, r1
     8ee:	fc 01       	movw	r30, r24
     8f0:	31 83       	std	Z+1, r19	; 0x01
     8f2:	20 83       	st	Z, r18
     8f4:	ce 01       	movw	r24, r28
     8f6:	81 5b       	subi	r24, 0xB1	; 177
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8f8:	9f 4f       	sbci	r25, 0xFF	; 255
     8fa:	fc 01       	movw	r30, r24
     8fc:	80 81       	ld	r24, Z
     8fe:	91 81       	ldd	r25, Z+1	; 0x01
     900:	89 2b       	or	r24, r25
     902:	a1 f6       	brne	.-88     	; 0x8ac <__LOCK_REGION_LENGTH__+0x4ac>
     904:	2b c0       	rjmp	.+86     	; 0x95c <__LOCK_REGION_LENGTH__+0x55c>
     906:	8e 01       	movw	r16, r28
     908:	01 5b       	subi	r16, 0xB1	; 177
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     90a:	1f 4f       	sbci	r17, 0xFF	; 255
     90c:	ce 01       	movw	r24, r28
     90e:	85 5b       	subi	r24, 0xB5	; 181
     910:	9f 4f       	sbci	r25, 0xFF	; 255
     912:	fc 01       	movw	r30, r24
     914:	60 81       	ld	r22, Z
     916:	71 81       	ldd	r23, Z+1	; 0x01
     918:	82 81       	ldd	r24, Z+2	; 0x02
     91a:	93 81       	ldd	r25, Z+3	; 0x03
     91c:	41 d4       	rcall	.+2178   	; 0x11a0 <__fixunssfsi>
     91e:	dc 01       	movw	r26, r24
     920:	cb 01       	movw	r24, r22
     922:	f8 01       	movw	r30, r16
     924:	91 83       	std	Z+1, r25	; 0x01
     926:	80 83       	st	Z, r24
     928:	ce 01       	movw	r24, r28
     92a:	8d 5a       	subi	r24, 0xAD	; 173
     92c:	9f 4f       	sbci	r25, 0xFF	; 255
     92e:	9e 01       	movw	r18, r28
     930:	21 5b       	subi	r18, 0xB1	; 177
     932:	3f 4f       	sbci	r19, 0xFF	; 255
     934:	f9 01       	movw	r30, r18
     936:	20 81       	ld	r18, Z
     938:	31 81       	ldd	r19, Z+1	; 0x01
     93a:	fc 01       	movw	r30, r24
     93c:	31 83       	std	Z+1, r19	; 0x01
     93e:	20 83       	st	Z, r18
     940:	ce 01       	movw	r24, r28
     942:	8d 5a       	subi	r24, 0xAD	; 173
     944:	9f 4f       	sbci	r25, 0xFF	; 255
     946:	fc 01       	movw	r30, r24
     948:	80 81       	ld	r24, Z
     94a:	91 81       	ldd	r25, Z+1	; 0x01
     94c:	01 97       	sbiw	r24, 0x01	; 1
     94e:	f1 f7       	brne	.-4      	; 0x94c <__LOCK_REGION_LENGTH__+0x54c>
     950:	9e 01       	movw	r18, r28
     952:	2d 5a       	subi	r18, 0xAD	; 173
     954:	3f 4f       	sbci	r19, 0xFF	; 255
     956:	f9 01       	movw	r30, r18
     958:	91 83       	std	Z+1, r25	; 0x01
     95a:	80 83       	st	Z, r24
     95c:	85 e2       	ldi	r24, 0x25	; 37
            _delay_ms(1000);
            PORTB = 0xFF;
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	2f ef       	ldi	r18, 0xFF	; 255
     962:	fc 01       	movw	r30, r24
     964:	20 83       	st	Z, r18
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	aa ef       	ldi	r26, 0xFA	; 250
     96c:	b3 e4       	ldi	r27, 0x43	; 67
     96e:	8d 87       	std	Y+13, r24	; 0x0d
     970:	9e 87       	std	Y+14, r25	; 0x0e
     972:	af 87       	std	Y+15, r26	; 0x0f
     974:	b8 8b       	std	Y+16, r27	; 0x10
     976:	8e 01       	movw	r16, r28

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     978:	0f 5b       	subi	r16, 0xBF	; 191
     97a:	1f 4f       	sbci	r17, 0xFF	; 255
     97c:	20 e0       	ldi	r18, 0x00	; 0
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	4a e7       	ldi	r20, 0x7A	; 122
     982:	55 e4       	ldi	r21, 0x45	; 69
     984:	6d 85       	ldd	r22, Y+13	; 0x0d
     986:	7e 85       	ldd	r23, Y+14	; 0x0e
     988:	8f 85       	ldd	r24, Y+15	; 0x0f
     98a:	98 89       	ldd	r25, Y+16	; 0x10
     98c:	86 d4       	rcall	.+2316   	; 0x129a <__mulsf3>
     98e:	dc 01       	movw	r26, r24
     990:	cb 01       	movw	r24, r22
     992:	f8 01       	movw	r30, r16
     994:	80 83       	st	Z, r24
     996:	91 83       	std	Z+1, r25	; 0x01
     998:	a2 83       	std	Z+2, r26	; 0x02
     99a:	b3 83       	std	Z+3, r27	; 0x03
     99c:	ce 01       	movw	r24, r28
	if (__tmp < 1.0)
     99e:	8f 5b       	subi	r24, 0xBF	; 191
     9a0:	9f 4f       	sbci	r25, 0xFF	; 255
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	40 e8       	ldi	r20, 0x80	; 128
     9a8:	5f e3       	ldi	r21, 0x3F	; 63
     9aa:	fc 01       	movw	r30, r24
     9ac:	60 81       	ld	r22, Z
     9ae:	71 81       	ldd	r23, Z+1	; 0x01
     9b0:	82 81       	ldd	r24, Z+2	; 0x02
     9b2:	93 81       	ldd	r25, Z+3	; 0x03
     9b4:	f1 d3       	rcall	.+2018   	; 0x1198 <__cmpsf2>
     9b6:	88 23       	and	r24, r24
     9b8:	4c f4       	brge	.+18     	; 0x9cc <__LOCK_REGION_LENGTH__+0x5cc>
     9ba:	ce 01       	movw	r24, r28
		__ticks = 1;
     9bc:	8b 5b       	subi	r24, 0xBB	; 187
     9be:	9f 4f       	sbci	r25, 0xFF	; 255
     9c0:	21 e0       	ldi	r18, 0x01	; 1
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	fc 01       	movw	r30, r24
     9c6:	31 83       	std	Z+1, r19	; 0x01
     9c8:	20 83       	st	Z, r18
     9ca:	65 c0       	rjmp	.+202    	; 0xa96 <__LOCK_REGION_LENGTH__+0x696>
     9cc:	ce 01       	movw	r24, r28
	else if (__tmp > 65535)
     9ce:	8f 5b       	subi	r24, 0xBF	; 191
     9d0:	9f 4f       	sbci	r25, 0xFF	; 255
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	3f ef       	ldi	r19, 0xFF	; 255
     9d6:	4f e7       	ldi	r20, 0x7F	; 127
     9d8:	57 e4       	ldi	r21, 0x47	; 71
     9da:	fc 01       	movw	r30, r24
     9dc:	60 81       	ld	r22, Z
     9de:	71 81       	ldd	r23, Z+1	; 0x01
     9e0:	82 81       	ldd	r24, Z+2	; 0x02
     9e2:	93 81       	ldd	r25, Z+3	; 0x03
     9e4:	56 d4       	rcall	.+2220   	; 0x1292 <__gesf2>
     9e6:	18 16       	cp	r1, r24
     9e8:	0c f0       	brlt	.+2      	; 0x9ec <__LOCK_REGION_LENGTH__+0x5ec>
     9ea:	44 c0       	rjmp	.+136    	; 0xa74 <__LOCK_REGION_LENGTH__+0x674>
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	30 e0       	ldi	r19, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9f0:	40 e2       	ldi	r20, 0x20	; 32
     9f2:	51 e4       	ldi	r21, 0x41	; 65
     9f4:	6d 85       	ldd	r22, Y+13	; 0x0d
     9f6:	7e 85       	ldd	r23, Y+14	; 0x0e
     9f8:	8f 85       	ldd	r24, Y+15	; 0x0f
     9fa:	98 89       	ldd	r25, Y+16	; 0x10
     9fc:	4e d4       	rcall	.+2204   	; 0x129a <__mulsf3>
     9fe:	dc 01       	movw	r26, r24
     a00:	cb 01       	movw	r24, r22
     a02:	8e 01       	movw	r16, r28
     a04:	0b 5b       	subi	r16, 0xBB	; 187
     a06:	1f 4f       	sbci	r17, 0xFF	; 255
     a08:	bc 01       	movw	r22, r24
     a0a:	cd 01       	movw	r24, r26
     a0c:	c9 d3       	rcall	.+1938   	; 0x11a0 <__fixunssfsi>
     a0e:	dc 01       	movw	r26, r24
     a10:	cb 01       	movw	r24, r22
     a12:	f8 01       	movw	r30, r16
     a14:	91 83       	std	Z+1, r25	; 0x01
     a16:	80 83       	st	Z, r24
     a18:	24 c0       	rjmp	.+72     	; 0xa62 <__LOCK_REGION_LENGTH__+0x662>
     a1a:	ce 01       	movw	r24, r28
     a1c:	89 5b       	subi	r24, 0xB9	; 185
     a1e:	9f 4f       	sbci	r25, 0xFF	; 255
     a20:	20 e9       	ldi	r18, 0x90	; 144
     a22:	31 e0       	ldi	r19, 0x01	; 1
     a24:	fc 01       	movw	r30, r24
     a26:	31 83       	std	Z+1, r19	; 0x01
     a28:	20 83       	st	Z, r18
     a2a:	ce 01       	movw	r24, r28
     a2c:	89 5b       	subi	r24, 0xB9	; 185
     a2e:	9f 4f       	sbci	r25, 0xFF	; 255
     a30:	fc 01       	movw	r30, r24
     a32:	80 81       	ld	r24, Z
     a34:	91 81       	ldd	r25, Z+1	; 0x01
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	f1 f7       	brne	.-4      	; 0xa36 <__LOCK_REGION_LENGTH__+0x636>
     a3a:	9e 01       	movw	r18, r28
     a3c:	29 5b       	subi	r18, 0xB9	; 185
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	f9 01       	movw	r30, r18
     a42:	91 83       	std	Z+1, r25	; 0x01
     a44:	80 83       	st	Z, r24
     a46:	ce 01       	movw	r24, r28
     a48:	8b 5b       	subi	r24, 0xBB	; 187
     a4a:	9f 4f       	sbci	r25, 0xFF	; 255
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a4c:	9e 01       	movw	r18, r28
     a4e:	2b 5b       	subi	r18, 0xBB	; 187
     a50:	3f 4f       	sbci	r19, 0xFF	; 255
     a52:	f9 01       	movw	r30, r18
     a54:	20 81       	ld	r18, Z
     a56:	31 81       	ldd	r19, Z+1	; 0x01
     a58:	21 50       	subi	r18, 0x01	; 1
     a5a:	31 09       	sbc	r19, r1
     a5c:	fc 01       	movw	r30, r24
     a5e:	31 83       	std	Z+1, r19	; 0x01
     a60:	20 83       	st	Z, r18
     a62:	ce 01       	movw	r24, r28
     a64:	8b 5b       	subi	r24, 0xBB	; 187
     a66:	9f 4f       	sbci	r25, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a68:	fc 01       	movw	r30, r24
     a6a:	80 81       	ld	r24, Z
     a6c:	91 81       	ldd	r25, Z+1	; 0x01
     a6e:	89 2b       	or	r24, r25
     a70:	a1 f6       	brne	.-88     	; 0xa1a <__LOCK_REGION_LENGTH__+0x61a>
     a72:	2b c0       	rjmp	.+86     	; 0xaca <__LOCK_REGION_LENGTH__+0x6ca>
     a74:	8e 01       	movw	r16, r28
     a76:	0b 5b       	subi	r16, 0xBB	; 187
     a78:	1f 4f       	sbci	r17, 0xFF	; 255
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a7a:	ce 01       	movw	r24, r28
     a7c:	8f 5b       	subi	r24, 0xBF	; 191
     a7e:	9f 4f       	sbci	r25, 0xFF	; 255
     a80:	fc 01       	movw	r30, r24
     a82:	60 81       	ld	r22, Z
     a84:	71 81       	ldd	r23, Z+1	; 0x01
     a86:	82 81       	ldd	r24, Z+2	; 0x02
     a88:	93 81       	ldd	r25, Z+3	; 0x03
     a8a:	8a d3       	rcall	.+1812   	; 0x11a0 <__fixunssfsi>
     a8c:	dc 01       	movw	r26, r24
     a8e:	cb 01       	movw	r24, r22
     a90:	f8 01       	movw	r30, r16
     a92:	91 83       	std	Z+1, r25	; 0x01
     a94:	80 83       	st	Z, r24
     a96:	ce 01       	movw	r24, r28
     a98:	87 5b       	subi	r24, 0xB7	; 183
     a9a:	9f 4f       	sbci	r25, 0xFF	; 255
     a9c:	9e 01       	movw	r18, r28
     a9e:	2b 5b       	subi	r18, 0xBB	; 187
     aa0:	3f 4f       	sbci	r19, 0xFF	; 255
     aa2:	f9 01       	movw	r30, r18
     aa4:	20 81       	ld	r18, Z
     aa6:	31 81       	ldd	r19, Z+1	; 0x01
     aa8:	fc 01       	movw	r30, r24
     aaa:	31 83       	std	Z+1, r19	; 0x01
     aac:	20 83       	st	Z, r18
     aae:	ce 01       	movw	r24, r28
     ab0:	87 5b       	subi	r24, 0xB7	; 183
     ab2:	9f 4f       	sbci	r25, 0xFF	; 255
     ab4:	fc 01       	movw	r30, r24
     ab6:	80 81       	ld	r24, Z
     ab8:	91 81       	ldd	r25, Z+1	; 0x01
     aba:	01 97       	sbiw	r24, 0x01	; 1
     abc:	f1 f7       	brne	.-4      	; 0xaba <__LOCK_REGION_LENGTH__+0x6ba>
     abe:	9e 01       	movw	r18, r28
     ac0:	27 5b       	subi	r18, 0xB7	; 183
     ac2:	3f 4f       	sbci	r19, 0xFF	; 255
     ac4:	f9 01       	movw	r30, r18
     ac6:	91 83       	std	Z+1, r25	; 0x01
     ac8:	80 83       	st	Z, r24
            _delay_ms(500);
            PORTB = 0x00;
     aca:	85 e2       	ldi	r24, 0x25	; 37
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	fc 01       	movw	r30, r24
     ad0:	10 82       	st	Z, r1
        }
        
        // execute
        switch (mode) {
     ad2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     ad6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     ada:	82 30       	cpi	r24, 0x02	; 2
     adc:	91 05       	cpc	r25, r1
     ade:	71 f0       	breq	.+28     	; 0xafc <__LOCK_REGION_LENGTH__+0x6fc>
     ae0:	83 30       	cpi	r24, 0x03	; 3
     ae2:	91 05       	cpc	r25, r1
     ae4:	1c f4       	brge	.+6      	; 0xaec <__LOCK_REGION_LENGTH__+0x6ec>
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	39 f0       	breq	.+14     	; 0xaf8 <__LOCK_REGION_LENGTH__+0x6f8>
     aea:	0d c0       	rjmp	.+26     	; 0xb06 <__LOCK_REGION_LENGTH__+0x706>
     aec:	83 30       	cpi	r24, 0x03	; 3
     aee:	91 05       	cpc	r25, r1
     af0:	39 f0       	breq	.+14     	; 0xb00 <__LOCK_REGION_LENGTH__+0x700>
     af2:	04 97       	sbiw	r24, 0x04	; 4
     af4:	31 f0       	breq	.+12     	; 0xb02 <__LOCK_REGION_LENGTH__+0x702>
     af6:	07 c0       	rjmp	.+14     	; 0xb06 <__LOCK_REGION_LENGTH__+0x706>
            case 1:
                testTasterLed();
     af8:	78 d2       	rcall	.+1264   	; 0xfea <testTasterLed>
     afa:	0a c0       	rjmp	.+20     	; 0xb10 <__LOCK_REGION_LENGTH__+0x710>
                break;
     afc:	6f d1       	rcall	.+734    	; 0xddc <testBoard>
            case 2:
                testBoard();
     afe:	08 c0       	rjmp	.+16     	; 0xb10 <__LOCK_REGION_LENGTH__+0x710>
     b00:	14 d0       	rcall	.+40     	; 0xb2a <lauflicht>
                break;
     b02:	ef d0       	rcall	.+478    	; 0xce2 <increment>
            case 3:
                lauflicht();
     b04:	05 c0       	rjmp	.+10     	; 0xb10 <__LOCK_REGION_LENGTH__+0x710>
     b06:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
            case 4:
                increment();
     b0a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
                break;
            default:
                mode = 0;
     b0e:	00 00       	nop
     b10:	00 00       	nop
     b12:	cc 5a       	subi	r28, 0xAC	; 172
     b14:	df 4f       	sbci	r29, 0xFF	; 255
                break;
     b16:	0f b6       	in	r0, 0x3f	; 63
        }
    }
}
     b18:	f8 94       	cli
     b1a:	de bf       	out	0x3e, r29	; 62
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	cd bf       	out	0x3d, r28	; 61
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	08 95       	ret

00000b2a <lauflicht>:
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	cd b7       	in	r28, 0x3d	; 61
     b30:	de b7       	in	r29, 0x3e	; 62
 Starting at Led0, the Led next to the current led will turn on at the same time the current led turns off.
 If last led is reached, the direction will change
 
 Only one led is active at once
 */
void lauflicht() {
     b32:	60 97       	sbiw	r28, 0x10	; 16
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	f8 94       	cli
     b38:	de bf       	out	0x3e, r29	; 62
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	cd bf       	out	0x3d, r28	; 61
    static int laufCount = 0;
    static int direction = 0;   // 0=right, 1=left
    
    if (direction) {    // left
     b3e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <direction.1779>
     b42:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <direction.1779+0x1>
     b46:	89 2b       	or	r24, r25
     b48:	f1 f0       	breq	.+60     	; 0xb86 <lauflicht+0x5c>
        if (laufCount <= 1) {
     b4a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <laufCount.1778>
     b4e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <laufCount.1778+0x1>
     b52:	02 97       	sbiw	r24, 0x02	; 2
     b54:	74 f4       	brge	.+28     	; 0xb72 <lauflicht+0x48>
            direction = 0;
     b56:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <direction.1779+0x1>
     b5a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <direction.1779>
            laufCount++;
     b5e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <laufCount.1778>
     b62:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <laufCount.1778+0x1>
     b66:	01 96       	adiw	r24, 0x01	; 1
     b68:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <laufCount.1778+0x1>
     b6c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <laufCount.1778>
     b70:	29 c0       	rjmp	.+82     	; 0xbc4 <lauflicht+0x9a>
        } else {
            laufCount--;
     b72:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <laufCount.1778>
     b76:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <laufCount.1778+0x1>
     b7a:	01 97       	sbiw	r24, 0x01	; 1
     b7c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <laufCount.1778+0x1>
     b80:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <laufCount.1778>
     b84:	1f c0       	rjmp	.+62     	; 0xbc4 <lauflicht+0x9a>
        }
    }else { // right
        if (laufCount >= 8) {
     b86:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <laufCount.1778>
     b8a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <laufCount.1778+0x1>
     b8e:	08 97       	sbiw	r24, 0x08	; 8
     b90:	84 f0       	brlt	.+32     	; 0xbb2 <lauflicht+0x88>
            direction = 1;
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <direction.1779+0x1>
     b9a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <direction.1779>
            laufCount--;
     b9e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <laufCount.1778>
     ba2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <laufCount.1778+0x1>
     ba6:	01 97       	sbiw	r24, 0x01	; 1
     ba8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <laufCount.1778+0x1>
     bac:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <laufCount.1778>
     bb0:	09 c0       	rjmp	.+18     	; 0xbc4 <lauflicht+0x9a>
        } else {
            laufCount++;
     bb2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <laufCount.1778>
     bb6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <laufCount.1778+0x1>
     bba:	01 96       	adiw	r24, 0x01	; 1
     bbc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <laufCount.1778+0x1>
     bc0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <laufCount.1778>
        }
    }
    
    // create byte
    int ledByte = 1;
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	9a 83       	std	Y+2, r25	; 0x02
     bca:	89 83       	std	Y+1, r24	; 0x01
    ledByte = ledByte << (laufCount - 1);
     bcc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <laufCount.1778>
     bd0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <laufCount.1778+0x1>
     bd4:	9c 01       	movw	r18, r24
     bd6:	21 50       	subi	r18, 0x01	; 1
     bd8:	31 09       	sbc	r19, r1
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	9a 81       	ldd	r25, Y+2	; 0x02
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <lauflicht+0xba>
     be0:	88 0f       	add	r24, r24
     be2:	99 1f       	adc	r25, r25
     be4:	2a 95       	dec	r18
     be6:	e2 f7       	brpl	.-8      	; 0xbe0 <lauflicht+0xb6>
     be8:	9a 83       	std	Y+2, r25	; 0x02
     bea:	89 83       	std	Y+1, r24	; 0x01
    
    // set Port
    PORTB = ledByte;
     bec:	85 e2       	ldi	r24, 0x25	; 37
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	29 81       	ldd	r18, Y+1	; 0x01
     bf2:	fc 01       	movw	r30, r24
     bf4:	20 83       	st	Z, r18
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	a8 e4       	ldi	r26, 0x48	; 72
     bfc:	b3 e4       	ldi	r27, 0x43	; 67
     bfe:	8b 83       	std	Y+3, r24	; 0x03
     c00:	9c 83       	std	Y+4, r25	; 0x04
     c02:	ad 83       	std	Y+5, r26	; 0x05
     c04:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	4a e7       	ldi	r20, 0x7A	; 122
     c0c:	55 e4       	ldi	r21, 0x45	; 69
     c0e:	6b 81       	ldd	r22, Y+3	; 0x03
     c10:	7c 81       	ldd	r23, Y+4	; 0x04
     c12:	8d 81       	ldd	r24, Y+5	; 0x05
     c14:	9e 81       	ldd	r25, Y+6	; 0x06
     c16:	41 d3       	rcall	.+1666   	; 0x129a <__mulsf3>
     c18:	dc 01       	movw	r26, r24
     c1a:	cb 01       	movw	r24, r22
     c1c:	8f 83       	std	Y+7, r24	; 0x07
     c1e:	98 87       	std	Y+8, r25	; 0x08
     c20:	a9 87       	std	Y+9, r26	; 0x09
     c22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	40 e8       	ldi	r20, 0x80	; 128
     c2a:	5f e3       	ldi	r21, 0x3F	; 63
     c2c:	6f 81       	ldd	r22, Y+7	; 0x07
     c2e:	78 85       	ldd	r23, Y+8	; 0x08
     c30:	89 85       	ldd	r24, Y+9	; 0x09
     c32:	9a 85       	ldd	r25, Y+10	; 0x0a
     c34:	b1 d2       	rcall	.+1378   	; 0x1198 <__cmpsf2>
     c36:	88 23       	and	r24, r24
     c38:	2c f4       	brge	.+10     	; 0xc44 <lauflicht+0x11a>
		__ticks = 1;
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	9c 87       	std	Y+12, r25	; 0x0c
     c40:	8b 87       	std	Y+11, r24	; 0x0b
     c42:	3b c0       	rjmp	.+118    	; 0xcba <lauflicht+0x190>
	else if (__tmp > 65535)
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	3f ef       	ldi	r19, 0xFF	; 255
     c48:	4f e7       	ldi	r20, 0x7F	; 127
     c4a:	57 e4       	ldi	r21, 0x47	; 71
     c4c:	6f 81       	ldd	r22, Y+7	; 0x07
     c4e:	78 85       	ldd	r23, Y+8	; 0x08
     c50:	89 85       	ldd	r24, Y+9	; 0x09
     c52:	9a 85       	ldd	r25, Y+10	; 0x0a
     c54:	1e d3       	rcall	.+1596   	; 0x1292 <__gesf2>
     c56:	18 16       	cp	r1, r24
     c58:	3c f5       	brge	.+78     	; 0xca8 <lauflicht+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	40 e2       	ldi	r20, 0x20	; 32
     c60:	51 e4       	ldi	r21, 0x41	; 65
     c62:	6b 81       	ldd	r22, Y+3	; 0x03
     c64:	7c 81       	ldd	r23, Y+4	; 0x04
     c66:	8d 81       	ldd	r24, Y+5	; 0x05
     c68:	9e 81       	ldd	r25, Y+6	; 0x06
     c6a:	17 d3       	rcall	.+1582   	; 0x129a <__mulsf3>
     c6c:	dc 01       	movw	r26, r24
     c6e:	cb 01       	movw	r24, r22
     c70:	bc 01       	movw	r22, r24
     c72:	cd 01       	movw	r24, r26
     c74:	95 d2       	rcall	.+1322   	; 0x11a0 <__fixunssfsi>
     c76:	dc 01       	movw	r26, r24
     c78:	cb 01       	movw	r24, r22
     c7a:	9c 87       	std	Y+12, r25	; 0x0c
     c7c:	8b 87       	std	Y+11, r24	; 0x0b
     c7e:	0f c0       	rjmp	.+30     	; 0xc9e <lauflicht+0x174>
     c80:	80 e9       	ldi	r24, 0x90	; 144
     c82:	91 e0       	ldi	r25, 0x01	; 1
     c84:	9e 87       	std	Y+14, r25	; 0x0e
     c86:	8d 87       	std	Y+13, r24	; 0x0d
     c88:	8d 85       	ldd	r24, Y+13	; 0x0d
     c8a:	9e 85       	ldd	r25, Y+14	; 0x0e
     c8c:	01 97       	sbiw	r24, 0x01	; 1
     c8e:	f1 f7       	brne	.-4      	; 0xc8c <lauflicht+0x162>
     c90:	9e 87       	std	Y+14, r25	; 0x0e
     c92:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c94:	8b 85       	ldd	r24, Y+11	; 0x0b
     c96:	9c 85       	ldd	r25, Y+12	; 0x0c
     c98:	01 97       	sbiw	r24, 0x01	; 1
     c9a:	9c 87       	std	Y+12, r25	; 0x0c
     c9c:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c9e:	8b 85       	ldd	r24, Y+11	; 0x0b
     ca0:	9c 85       	ldd	r25, Y+12	; 0x0c
     ca2:	89 2b       	or	r24, r25
     ca4:	69 f7       	brne	.-38     	; 0xc80 <lauflicht+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ca6:	13 c0       	rjmp	.+38     	; 0xcce <lauflicht+0x1a4>
     ca8:	6f 81       	ldd	r22, Y+7	; 0x07
     caa:	78 85       	ldd	r23, Y+8	; 0x08
     cac:	89 85       	ldd	r24, Y+9	; 0x09
     cae:	9a 85       	ldd	r25, Y+10	; 0x0a
     cb0:	77 d2       	rcall	.+1262   	; 0x11a0 <__fixunssfsi>
     cb2:	dc 01       	movw	r26, r24
     cb4:	cb 01       	movw	r24, r22
     cb6:	9c 87       	std	Y+12, r25	; 0x0c
     cb8:	8b 87       	std	Y+11, r24	; 0x0b
     cba:	8b 85       	ldd	r24, Y+11	; 0x0b
     cbc:	9c 85       	ldd	r25, Y+12	; 0x0c
     cbe:	98 8b       	std	Y+16, r25	; 0x10
     cc0:	8f 87       	std	Y+15, r24	; 0x0f
     cc2:	8f 85       	ldd	r24, Y+15	; 0x0f
     cc4:	98 89       	ldd	r25, Y+16	; 0x10
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	f1 f7       	brne	.-4      	; 0xcc6 <lauflicht+0x19c>
     cca:	98 8b       	std	Y+16, r25	; 0x10
     ccc:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(200);
}
     cce:	00 00       	nop
     cd0:	60 96       	adiw	r28, 0x10	; 16
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	f8 94       	cli
     cd6:	de bf       	out	0x3e, r29	; 62
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	cd bf       	out	0x3d, r28	; 61
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret

00000ce2 <increment>:

/**
 Increment if button 1 is pressed, decrement if button 2 is pressed.
 Value of count will display with leds. if count is dez 5, 5 leds will turn on
 */
void increment() {
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	00 d0       	rcall	.+0      	; 0xce8 <increment+0x6>
     ce8:	00 d0       	rcall	.+0      	; 0xcea <increment+0x8>
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
    static int count = 0;
    static int lockt1 = 0, lockt2 = 0;
    
    // If button is pressed and lock is released
    if (!lockt1 && Taster1_get()) {
     cee:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lockt1.1784>
     cf2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <lockt1.1784+0x1>
     cf6:	89 2b       	or	r24, r25
     cf8:	c9 f4       	brne	.+50     	; 0xd2c <increment+0x4a>
     cfa:	e6 da       	rcall	.-2612   	; 0x2c8 <Taster1_get>
     cfc:	89 2b       	or	r24, r25
     cfe:	b1 f0       	breq	.+44     	; 0xd2c <increment+0x4a>
        //count to max 8
        if (count <= 8) {
     d00:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count.1783>
     d04:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count.1783+0x1>
     d08:	09 97       	sbiw	r24, 0x09	; 9
     d0a:	4c f4       	brge	.+18     	; 0xd1e <increment+0x3c>
            count++;
     d0c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count.1783>
     d10:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count.1783+0x1>
     d14:	01 96       	adiw	r24, 0x01	; 1
     d16:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <count.1783+0x1>
     d1a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <count.1783>
        }
        // lock
        lockt1 = 1;
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <lockt1.1784+0x1>
     d26:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <lockt1.1784>
     d2a:	1f c0       	rjmp	.+62     	; 0xd6a <increment+0x88>
    }else if (!lockt2 && Taster2_get()) {
     d2c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lockt2.1785>
     d30:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lockt2.1785+0x1>
     d34:	89 2b       	or	r24, r25
     d36:	c9 f4       	brne	.+50     	; 0xd6a <increment+0x88>
     d38:	e2 da       	rcall	.-2620   	; 0x2fe <Taster2_get>
     d3a:	89 2b       	or	r24, r25
     d3c:	b1 f0       	breq	.+44     	; 0xd6a <increment+0x88>
        //count to min 0
        if (count > 0) {
     d3e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count.1783>
     d42:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count.1783+0x1>
     d46:	18 16       	cp	r1, r24
     d48:	19 06       	cpc	r1, r25
     d4a:	4c f4       	brge	.+18     	; 0xd5e <increment+0x7c>
            count--;
     d4c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count.1783>
     d50:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count.1783+0x1>
     d54:	01 97       	sbiw	r24, 0x01	; 1
     d56:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <count.1783+0x1>
     d5a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <count.1783>
        }
        // lock
        lockt2 = 1;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <lockt2.1785+0x1>
     d66:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lockt2.1785>
    }
    
    // if button is released, release lock
    if (!Taster1_get()) {
     d6a:	ae da       	rcall	.-2724   	; 0x2c8 <Taster1_get>
     d6c:	89 2b       	or	r24, r25
     d6e:	21 f4       	brne	.+8      	; 0xd78 <increment+0x96>
        lockt1 = 0;
     d70:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <lockt1.1784+0x1>
     d74:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <lockt1.1784>
    }
    if (!Taster2_get()) {
     d78:	c2 da       	rcall	.-2684   	; 0x2fe <Taster2_get>
     d7a:	89 2b       	or	r24, r25
     d7c:	21 f4       	brne	.+8      	; 0xd86 <increment+0xa4>
        lockt2 = 0;
     d7e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lockt2.1785+0x1>
     d82:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lockt2.1785>
    }
    
    // shift as many ones as count to byte
    int ledByte = 0;
     d86:	1a 82       	std	Y+2, r1	; 0x02
     d88:	19 82       	std	Y+1, r1	; 0x01
    for (int i = 0; i < count; i++) {
     d8a:	1c 82       	std	Y+4, r1	; 0x04
     d8c:	1b 82       	std	Y+3, r1	; 0x03
     d8e:	10 c0       	rjmp	.+32     	; 0xdb0 <increment+0xce>
        ledByte = ledByte << 1;
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	9a 81       	ldd	r25, Y+2	; 0x02
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	9a 83       	std	Y+2, r25	; 0x02
     d9a:	89 83       	std	Y+1, r24	; 0x01
        ledByte++;
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	9a 81       	ldd	r25, Y+2	; 0x02
     da0:	01 96       	adiw	r24, 0x01	; 1
     da2:	9a 83       	std	Y+2, r25	; 0x02
     da4:	89 83       	std	Y+1, r24	; 0x01
        lockt2 = 0;
    }
    
    // shift as many ones as count to byte
    int ledByte = 0;
    for (int i = 0; i < count; i++) {
     da6:	8b 81       	ldd	r24, Y+3	; 0x03
     da8:	9c 81       	ldd	r25, Y+4	; 0x04
     daa:	01 96       	adiw	r24, 0x01	; 1
     dac:	9c 83       	std	Y+4, r25	; 0x04
     dae:	8b 83       	std	Y+3, r24	; 0x03
     db0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count.1783>
     db4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count.1783+0x1>
     db8:	2b 81       	ldd	r18, Y+3	; 0x03
     dba:	3c 81       	ldd	r19, Y+4	; 0x04
     dbc:	28 17       	cp	r18, r24
     dbe:	39 07       	cpc	r19, r25
     dc0:	3c f3       	brlt	.-50     	; 0xd90 <increment+0xae>
        ledByte = ledByte << 1;
        ledByte++;
    }
    // set Port
    PORTB = ledByte;
     dc2:	85 e2       	ldi	r24, 0x25	; 37
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	29 81       	ldd	r18, Y+1	; 0x01
     dc8:	fc 01       	movw	r30, r24
     dca:	20 83       	st	Z, r18
}
     dcc:	00 00       	nop
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	0f 90       	pop	r0
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	08 95       	ret

00000ddc <testBoard>:

/**
 Switches PORTB on and off with a delay off 500 ms
 */
void testBoard() {
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	6c 97       	sbiw	r28, 0x1c	; 28
     de6:	0f b6       	in	r0, 0x3f	; 63
     de8:	f8 94       	cli
     dea:	de bf       	out	0x3e, r29	; 62
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	cd bf       	out	0x3d, r28	; 61
    static int state_testBoard = 0;
    if (state_testBoard) {
     df0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <state_testBoard.1797>
     df4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <state_testBoard.1797+0x1>
     df8:	89 2b       	or	r24, r25
     dfa:	09 f4       	brne	.+2      	; 0xdfe <testBoard+0x22>
     dfc:	75 c0       	rjmp	.+234    	; 0xee8 <testBoard+0x10c>
		state_testBoard = 0;
     dfe:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <state_testBoard.1797+0x1>
     e02:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <state_testBoard.1797>
        PORTB = 0x00;
     e06:	85 e2       	ldi	r24, 0x25	; 37
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	fc 01       	movw	r30, r24
     e0c:	10 82       	st	Z, r1
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	aa ef       	ldi	r26, 0xFA	; 250
     e14:	b3 e4       	ldi	r27, 0x43	; 67
     e16:	8d 83       	std	Y+5, r24	; 0x05
     e18:	9e 83       	std	Y+6, r25	; 0x06
     e1a:	af 83       	std	Y+7, r26	; 0x07
     e1c:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	4a e7       	ldi	r20, 0x7A	; 122
     e24:	55 e4       	ldi	r21, 0x45	; 69
     e26:	6d 81       	ldd	r22, Y+5	; 0x05
     e28:	7e 81       	ldd	r23, Y+6	; 0x06
     e2a:	8f 81       	ldd	r24, Y+7	; 0x07
     e2c:	98 85       	ldd	r25, Y+8	; 0x08
     e2e:	35 d2       	rcall	.+1130   	; 0x129a <__mulsf3>
     e30:	dc 01       	movw	r26, r24
     e32:	cb 01       	movw	r24, r22
     e34:	89 87       	std	Y+9, r24	; 0x09
     e36:	9a 87       	std	Y+10, r25	; 0x0a
     e38:	ab 87       	std	Y+11, r26	; 0x0b
     e3a:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	40 e8       	ldi	r20, 0x80	; 128
     e42:	5f e3       	ldi	r21, 0x3F	; 63
     e44:	69 85       	ldd	r22, Y+9	; 0x09
     e46:	7a 85       	ldd	r23, Y+10	; 0x0a
     e48:	8b 85       	ldd	r24, Y+11	; 0x0b
     e4a:	9c 85       	ldd	r25, Y+12	; 0x0c
     e4c:	a5 d1       	rcall	.+842    	; 0x1198 <__cmpsf2>
     e4e:	88 23       	and	r24, r24
     e50:	2c f4       	brge	.+10     	; 0xe5c <testBoard+0x80>
		__ticks = 1;
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	9e 87       	std	Y+14, r25	; 0x0e
     e58:	8d 87       	std	Y+13, r24	; 0x0d
     e5a:	3b c0       	rjmp	.+118    	; 0xed2 <testBoard+0xf6>
	else if (__tmp > 65535)
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	3f ef       	ldi	r19, 0xFF	; 255
     e60:	4f e7       	ldi	r20, 0x7F	; 127
     e62:	57 e4       	ldi	r21, 0x47	; 71
     e64:	69 85       	ldd	r22, Y+9	; 0x09
     e66:	7a 85       	ldd	r23, Y+10	; 0x0a
     e68:	8b 85       	ldd	r24, Y+11	; 0x0b
     e6a:	9c 85       	ldd	r25, Y+12	; 0x0c
     e6c:	12 d2       	rcall	.+1060   	; 0x1292 <__gesf2>
     e6e:	18 16       	cp	r1, r24
     e70:	3c f5       	brge	.+78     	; 0xec0 <testBoard+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e2       	ldi	r20, 0x20	; 32
     e78:	51 e4       	ldi	r21, 0x41	; 65
     e7a:	6d 81       	ldd	r22, Y+5	; 0x05
     e7c:	7e 81       	ldd	r23, Y+6	; 0x06
     e7e:	8f 81       	ldd	r24, Y+7	; 0x07
     e80:	98 85       	ldd	r25, Y+8	; 0x08
     e82:	0b d2       	rcall	.+1046   	; 0x129a <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	bc 01       	movw	r22, r24
     e8a:	cd 01       	movw	r24, r26
     e8c:	89 d1       	rcall	.+786    	; 0x11a0 <__fixunssfsi>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	9e 87       	std	Y+14, r25	; 0x0e
     e94:	8d 87       	std	Y+13, r24	; 0x0d
     e96:	0f c0       	rjmp	.+30     	; 0xeb6 <testBoard+0xda>
     e98:	80 e9       	ldi	r24, 0x90	; 144
     e9a:	91 e0       	ldi	r25, 0x01	; 1
     e9c:	98 8b       	std	Y+16, r25	; 0x10
     e9e:	8f 87       	std	Y+15, r24	; 0x0f
     ea0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ea2:	98 89       	ldd	r25, Y+16	; 0x10
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	f1 f7       	brne	.-4      	; 0xea4 <testBoard+0xc8>
     ea8:	98 8b       	std	Y+16, r25	; 0x10
     eaa:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eac:	8d 85       	ldd	r24, Y+13	; 0x0d
     eae:	9e 85       	ldd	r25, Y+14	; 0x0e
     eb0:	01 97       	sbiw	r24, 0x01	; 1
     eb2:	9e 87       	std	Y+14, r25	; 0x0e
     eb4:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb6:	8d 85       	ldd	r24, Y+13	; 0x0d
     eb8:	9e 85       	ldd	r25, Y+14	; 0x0e
     eba:	89 2b       	or	r24, r25
     ebc:	69 f7       	brne	.-38     	; 0xe98 <testBoard+0xbc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ebe:	8b c0       	rjmp	.+278    	; 0xfd6 <testBoard+0x1fa>
     ec0:	69 85       	ldd	r22, Y+9	; 0x09
     ec2:	7a 85       	ldd	r23, Y+10	; 0x0a
     ec4:	8b 85       	ldd	r24, Y+11	; 0x0b
     ec6:	9c 85       	ldd	r25, Y+12	; 0x0c
     ec8:	6b d1       	rcall	.+726    	; 0x11a0 <__fixunssfsi>
     eca:	dc 01       	movw	r26, r24
     ecc:	cb 01       	movw	r24, r22
     ece:	9e 87       	std	Y+14, r25	; 0x0e
     ed0:	8d 87       	std	Y+13, r24	; 0x0d
     ed2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ed4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed6:	9a 8b       	std	Y+18, r25	; 0x12
     ed8:	89 8b       	std	Y+17, r24	; 0x11
     eda:	89 89       	ldd	r24, Y+17	; 0x11
     edc:	9a 89       	ldd	r25, Y+18	; 0x12
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	f1 f7       	brne	.-4      	; 0xede <testBoard+0x102>
     ee2:	9a 8b       	std	Y+18, r25	; 0x12
     ee4:	89 8b       	std	Y+17, r24	; 0x11
    }else {
		state_testBoard = 1;
        PORTB = 0xFF;
        _delay_ms(500);
    }
}
     ee6:	77 c0       	rjmp	.+238    	; 0xfd6 <testBoard+0x1fa>
    if (state_testBoard) {
		state_testBoard = 0;
        PORTB = 0x00;
        _delay_ms(500);
    }else {
		state_testBoard = 1;
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <state_testBoard.1797+0x1>
     ef0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state_testBoard.1797>
        PORTB = 0xFF;
     ef4:	85 e2       	ldi	r24, 0x25	; 37
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	2f ef       	ldi	r18, 0xFF	; 255
     efa:	fc 01       	movw	r30, r24
     efc:	20 83       	st	Z, r18
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	aa ef       	ldi	r26, 0xFA	; 250
     f04:	b3 e4       	ldi	r27, 0x43	; 67
     f06:	89 83       	std	Y+1, r24	; 0x01
     f08:	9a 83       	std	Y+2, r25	; 0x02
     f0a:	ab 83       	std	Y+3, r26	; 0x03
     f0c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	4a e7       	ldi	r20, 0x7A	; 122
     f14:	55 e4       	ldi	r21, 0x45	; 69
     f16:	69 81       	ldd	r22, Y+1	; 0x01
     f18:	7a 81       	ldd	r23, Y+2	; 0x02
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	9c 81       	ldd	r25, Y+4	; 0x04
     f1e:	bd d1       	rcall	.+890    	; 0x129a <__mulsf3>
     f20:	dc 01       	movw	r26, r24
     f22:	cb 01       	movw	r24, r22
     f24:	8b 8b       	std	Y+19, r24	; 0x13
     f26:	9c 8b       	std	Y+20, r25	; 0x14
     f28:	ad 8b       	std	Y+21, r26	; 0x15
     f2a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	40 e8       	ldi	r20, 0x80	; 128
     f32:	5f e3       	ldi	r21, 0x3F	; 63
     f34:	6b 89       	ldd	r22, Y+19	; 0x13
     f36:	7c 89       	ldd	r23, Y+20	; 0x14
     f38:	8d 89       	ldd	r24, Y+21	; 0x15
     f3a:	9e 89       	ldd	r25, Y+22	; 0x16
     f3c:	2d d1       	rcall	.+602    	; 0x1198 <__cmpsf2>
     f3e:	88 23       	and	r24, r24
     f40:	2c f4       	brge	.+10     	; 0xf4c <testBoard+0x170>
		__ticks = 1;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	98 8f       	std	Y+24, r25	; 0x18
     f48:	8f 8b       	std	Y+23, r24	; 0x17
     f4a:	3b c0       	rjmp	.+118    	; 0xfc2 <testBoard+0x1e6>
	else if (__tmp > 65535)
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	3f ef       	ldi	r19, 0xFF	; 255
     f50:	4f e7       	ldi	r20, 0x7F	; 127
     f52:	57 e4       	ldi	r21, 0x47	; 71
     f54:	6b 89       	ldd	r22, Y+19	; 0x13
     f56:	7c 89       	ldd	r23, Y+20	; 0x14
     f58:	8d 89       	ldd	r24, Y+21	; 0x15
     f5a:	9e 89       	ldd	r25, Y+22	; 0x16
     f5c:	9a d1       	rcall	.+820    	; 0x1292 <__gesf2>
     f5e:	18 16       	cp	r1, r24
     f60:	3c f5       	brge	.+78     	; 0xfb0 <testBoard+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	40 e2       	ldi	r20, 0x20	; 32
     f68:	51 e4       	ldi	r21, 0x41	; 65
     f6a:	69 81       	ldd	r22, Y+1	; 0x01
     f6c:	7a 81       	ldd	r23, Y+2	; 0x02
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	9c 81       	ldd	r25, Y+4	; 0x04
     f72:	93 d1       	rcall	.+806    	; 0x129a <__mulsf3>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	bc 01       	movw	r22, r24
     f7a:	cd 01       	movw	r24, r26
     f7c:	11 d1       	rcall	.+546    	; 0x11a0 <__fixunssfsi>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	98 8f       	std	Y+24, r25	; 0x18
     f84:	8f 8b       	std	Y+23, r24	; 0x17
     f86:	0f c0       	rjmp	.+30     	; 0xfa6 <testBoard+0x1ca>
     f88:	80 e9       	ldi	r24, 0x90	; 144
     f8a:	91 e0       	ldi	r25, 0x01	; 1
     f8c:	9a 8f       	std	Y+26, r25	; 0x1a
     f8e:	89 8f       	std	Y+25, r24	; 0x19
     f90:	89 8d       	ldd	r24, Y+25	; 0x19
     f92:	9a 8d       	ldd	r25, Y+26	; 0x1a
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	f1 f7       	brne	.-4      	; 0xf94 <testBoard+0x1b8>
     f98:	9a 8f       	std	Y+26, r25	; 0x1a
     f9a:	89 8f       	std	Y+25, r24	; 0x19
     f9c:	8f 89       	ldd	r24, Y+23	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f9e:	98 8d       	ldd	r25, Y+24	; 0x18
     fa0:	01 97       	sbiw	r24, 0x01	; 1
     fa2:	98 8f       	std	Y+24, r25	; 0x18
     fa4:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa6:	8f 89       	ldd	r24, Y+23	; 0x17
     fa8:	98 8d       	ldd	r25, Y+24	; 0x18
     faa:	89 2b       	or	r24, r25
     fac:	69 f7       	brne	.-38     	; 0xf88 <testBoard+0x1ac>
        _delay_ms(500);
    }
}
     fae:	13 c0       	rjmp	.+38     	; 0xfd6 <testBoard+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb0:	6b 89       	ldd	r22, Y+19	; 0x13
     fb2:	7c 89       	ldd	r23, Y+20	; 0x14
     fb4:	8d 89       	ldd	r24, Y+21	; 0x15
     fb6:	9e 89       	ldd	r25, Y+22	; 0x16
     fb8:	f3 d0       	rcall	.+486    	; 0x11a0 <__fixunssfsi>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	98 8f       	std	Y+24, r25	; 0x18
     fc0:	8f 8b       	std	Y+23, r24	; 0x17
     fc2:	8f 89       	ldd	r24, Y+23	; 0x17
     fc4:	98 8d       	ldd	r25, Y+24	; 0x18
     fc6:	9c 8f       	std	Y+28, r25	; 0x1c
     fc8:	8b 8f       	std	Y+27, r24	; 0x1b
     fca:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	f1 f7       	brne	.-4      	; 0xfce <testBoard+0x1f2>
     fd2:	9c 8f       	std	Y+28, r25	; 0x1c
     fd4:	8b 8f       	std	Y+27, r24	; 0x1b
     fd6:	00 00       	nop
     fd8:	6c 96       	adiw	r28, 0x1c	; 28
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	08 95       	ret

00000fea <testTasterLed>:
     fea:	cf 93       	push	r28

/**
 If button1 is pressed, led1 will turn on. If button2 is pressed, led2 will turn on and so on...
 */
void testTasterLed() {
     fec:	df 93       	push	r29
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
    if (Taster1_get()) {
     ff2:	6a d9       	rcall	.-3372   	; 0x2c8 <Taster1_get>
     ff4:	89 2b       	or	r24, r25
     ff6:	11 f0       	breq	.+4      	; 0xffc <testTasterLed+0x12>
        Led1_On();
     ff8:	91 d8       	rcall	.-3806   	; 0x11c <Led1_On>
     ffa:	01 c0       	rjmp	.+2      	; 0xffe <testTasterLed+0x14>
    }else {
        Led1_Off();
     ffc:	a0 d8       	rcall	.-3776   	; 0x13e <Led1_Off>
     ffe:	7f d9       	rcall	.-3330   	; 0x2fe <Taster2_get>
    }
    if (Taster2_get()) {
    1000:	89 2b       	or	r24, r25
    1002:	11 f0       	breq	.+4      	; 0x1008 <testTasterLed+0x1e>
        Led2_On();
    1004:	ad d8       	rcall	.-3750   	; 0x160 <Led2_On>
    1006:	01 c0       	rjmp	.+2      	; 0x100a <testTasterLed+0x20>
    }else {
        Led2_Off();
    1008:	bc d8       	rcall	.-3720   	; 0x182 <Led2_Off>
    }
    if (Taster3_get()) {
    100a:	91 d9       	rcall	.-3294   	; 0x32e <Taster3_get>
    100c:	89 2b       	or	r24, r25
    100e:	11 f0       	breq	.+4      	; 0x1014 <testTasterLed+0x2a>
        Led3_On();
    1010:	c9 d8       	rcall	.-3694   	; 0x1a4 <Led3_On>
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <testTasterLed+0x2c>
        }else {
        Led3_Off();
    1014:	d8 d8       	rcall	.-3664   	; 0x1c6 <Led3_Off>
    1016:	a3 d9       	rcall	.-3258   	; 0x35e <Taster4_get>
    }
    if (Taster4_get()) {
    1018:	89 2b       	or	r24, r25
    101a:	11 f0       	breq	.+4      	; 0x1020 <testTasterLed+0x36>
    101c:	e5 d8       	rcall	.-3638   	; 0x1e8 <Led4_On>
    101e:	01 c0       	rjmp	.+2      	; 0x1022 <testTasterLed+0x38>
        Led4_On();
    1020:	f4 d8       	rcall	.-3608   	; 0x20a <Led4_Off>
    1022:	00 00       	nop
        }else {
        Led4_Off();
    }
}
    1024:	df 91       	pop	r29
        Led3_Off();
    }
    if (Taster4_get()) {
        Led4_On();
        }else {
        Led4_Off();
    1026:	cf 91       	pop	r28
    1028:	08 95       	ret

0000102a <Timer_init>:
    }
}
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	1f 92       	push	r1
    1030:	cd b7       	in	r28, 0x3d	; 61
    
    // enable global interrupt
    sei();

    return temp_timer_count;
}
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	88 2f       	mov	r24, r24
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	05 d0       	rcall	.+10     	; 0x1048 <Timer_init_withoutStruct>
    103e:	00 00       	nop
    1040:	0f 90       	pop	r0
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	08 95       	ret

00001048 <Timer_init_withoutStruct>:
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	1f 92       	push	r1
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	89 83       	std	Y+1, r24	; 0x01
    1054:	85 e4       	ldi	r24, 0x45	; 69
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	25 e4       	ldi	r18, 0x45	; 69
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	f9 01       	movw	r30, r18
    105e:	20 81       	ld	r18, Z
    1060:	27 7f       	andi	r18, 0xF7	; 247
    1062:	fc 01       	movw	r30, r24
    1064:	20 83       	st	Z, r18
    1066:	84 e4       	ldi	r24, 0x44	; 68
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	24 e4       	ldi	r18, 0x44	; 68
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	f9 01       	movw	r30, r18
    1070:	20 81       	ld	r18, Z
    1072:	22 60       	ori	r18, 0x02	; 2
    1074:	fc 01       	movw	r30, r24
    1076:	20 83       	st	Z, r18
    1078:	84 e4       	ldi	r24, 0x44	; 68
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	24 e4       	ldi	r18, 0x44	; 68
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	f9 01       	movw	r30, r18
    1082:	20 81       	ld	r18, Z
    1084:	2e 7f       	andi	r18, 0xFE	; 254
    1086:	fc 01       	movw	r30, r24
    1088:	20 83       	st	Z, r18
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	88 2f       	mov	r24, r24
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	40 97       	sbiw	r24, 0x10	; 16
    1092:	09 f5       	brne	.+66     	; 0x10d6 <Timer_init_withoutStruct+0x8e>
    1094:	87 e4       	ldi	r24, 0x47	; 71
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	29 ef       	ldi	r18, 0xF9	; 249
    109a:	fc 01       	movw	r30, r24
    109c:	20 83       	st	Z, r18
    109e:	85 e4       	ldi	r24, 0x45	; 69
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	25 e4       	ldi	r18, 0x45	; 69
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	f9 01       	movw	r30, r18
    10a8:	20 81       	ld	r18, Z
    10aa:	2b 7f       	andi	r18, 0xFB	; 251
    10ac:	fc 01       	movw	r30, r24
    10ae:	20 83       	st	Z, r18
    10b0:	85 e4       	ldi	r24, 0x45	; 69
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	25 e4       	ldi	r18, 0x45	; 69
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	f9 01       	movw	r30, r18
    10ba:	20 81       	ld	r18, Z
    10bc:	22 60       	ori	r18, 0x02	; 2
    10be:	fc 01       	movw	r30, r24
    10c0:	20 83       	st	Z, r18
    10c2:	85 e4       	ldi	r24, 0x45	; 69
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	25 e4       	ldi	r18, 0x45	; 69
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	f9 01       	movw	r30, r18
    10cc:	20 81       	ld	r18, Z
    10ce:	21 60       	ori	r18, 0x01	; 1
    10d0:	fc 01       	movw	r30, r24
    10d2:	20 83       	st	Z, r18
    10d4:	21 c0       	rjmp	.+66     	; 0x1118 <Timer_init_withoutStruct+0xd0>
    10d6:	87 e4       	ldi	r24, 0x47	; 71
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	2c e7       	ldi	r18, 0x7C	; 124
    10dc:	fc 01       	movw	r30, r24
    10de:	20 83       	st	Z, r18
    10e0:	85 e4       	ldi	r24, 0x45	; 69
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	25 e4       	ldi	r18, 0x45	; 69
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	f9 01       	movw	r30, r18
    10ea:	20 81       	ld	r18, Z
    10ec:	2b 7f       	andi	r18, 0xFB	; 251
    10ee:	fc 01       	movw	r30, r24
    10f0:	20 83       	st	Z, r18
    10f2:	85 e4       	ldi	r24, 0x45	; 69
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	25 e4       	ldi	r18, 0x45	; 69
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	f9 01       	movw	r30, r18
    10fc:	20 81       	ld	r18, Z
    10fe:	22 60       	ori	r18, 0x02	; 2
    1100:	fc 01       	movw	r30, r24
    1102:	20 83       	st	Z, r18
    1104:	85 e4       	ldi	r24, 0x45	; 69
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	25 e4       	ldi	r18, 0x45	; 69
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	f9 01       	movw	r30, r18
    110e:	20 81       	ld	r18, Z
    1110:	2e 7f       	andi	r18, 0xFE	; 254
    1112:	fc 01       	movw	r30, r24
    1114:	20 83       	st	Z, r18
    1116:	00 00       	nop
    1118:	8e e6       	ldi	r24, 0x6E	; 110
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	2e e6       	ldi	r18, 0x6E	; 110
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	f9 01       	movw	r30, r18
    1122:	20 81       	ld	r18, Z
    1124:	2b 7f       	andi	r18, 0xFB	; 251
    1126:	fc 01       	movw	r30, r24
    1128:	20 83       	st	Z, r18
    112a:	8e e6       	ldi	r24, 0x6E	; 110
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	2e e6       	ldi	r18, 0x6E	; 110
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	f9 01       	movw	r30, r18
    1134:	20 81       	ld	r18, Z
    1136:	22 60       	ori	r18, 0x02	; 2
    1138:	fc 01       	movw	r30, r24
    113a:	20 83       	st	Z, r18
    113c:	8e e6       	ldi	r24, 0x6E	; 110
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	2e e6       	ldi	r18, 0x6E	; 110
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	f9 01       	movw	r30, r18
    1146:	20 81       	ld	r18, Z
    1148:	2e 7f       	andi	r18, 0xFE	; 254
    114a:	fc 01       	movw	r30, r24
    114c:	20 83       	st	Z, r18
    114e:	00 00       	nop
    1150:	0f 90       	pop	r0
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	08 95       	ret

00001158 <__vector_16>:
 ( not used atm)
 Timer compare A interrput:
 - increase timer_count
 - if timer_count is at max of uint16, set it to 0
 */
ISR(TIMER0_COMPA_vect){
    1158:	1f 92       	push	r1
    115a:	0f 92       	push	r0
    115c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1160:	0f 92       	push	r0
    1162:	11 24       	eor	r1, r1
    1164:	8f 93       	push	r24
    1166:	9f 93       	push	r25
    1168:	cf 93       	push	r28
    116a:	df 93       	push	r29
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    timer_count++;
    1170:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <timer_count>
    1174:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <timer_count+0x1>
    1178:	01 96       	adiw	r24, 0x01	; 1
    117a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timer_count+0x1>
    117e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timer_count>
}
    1182:	00 00       	nop
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	9f 91       	pop	r25
    118a:	8f 91       	pop	r24
    118c:	0f 90       	pop	r0
    118e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1192:	0f 90       	pop	r0
    1194:	1f 90       	pop	r1
    1196:	18 95       	reti

00001198 <__cmpsf2>:
    1198:	2f d0       	rcall	.+94     	; 0x11f8 <__fp_cmp>
    119a:	08 f4       	brcc	.+2      	; 0x119e <__cmpsf2+0x6>
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	08 95       	ret

000011a0 <__fixunssfsi>:
    11a0:	57 d0       	rcall	.+174    	; 0x1250 <__fp_splitA>
    11a2:	88 f0       	brcs	.+34     	; 0x11c6 <__fixunssfsi+0x26>
    11a4:	9f 57       	subi	r25, 0x7F	; 127
    11a6:	90 f0       	brcs	.+36     	; 0x11cc <__fixunssfsi+0x2c>
    11a8:	b9 2f       	mov	r27, r25
    11aa:	99 27       	eor	r25, r25
    11ac:	b7 51       	subi	r27, 0x17	; 23
    11ae:	a0 f0       	brcs	.+40     	; 0x11d8 <__fixunssfsi+0x38>
    11b0:	d1 f0       	breq	.+52     	; 0x11e6 <__fixunssfsi+0x46>
    11b2:	66 0f       	add	r22, r22
    11b4:	77 1f       	adc	r23, r23
    11b6:	88 1f       	adc	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	1a f0       	brmi	.+6      	; 0x11c2 <__fixunssfsi+0x22>
    11bc:	ba 95       	dec	r27
    11be:	c9 f7       	brne	.-14     	; 0x11b2 <__fixunssfsi+0x12>
    11c0:	12 c0       	rjmp	.+36     	; 0x11e6 <__fixunssfsi+0x46>
    11c2:	b1 30       	cpi	r27, 0x01	; 1
    11c4:	81 f0       	breq	.+32     	; 0x11e6 <__fixunssfsi+0x46>
    11c6:	5e d0       	rcall	.+188    	; 0x1284 <__fp_zero>
    11c8:	b1 e0       	ldi	r27, 0x01	; 1
    11ca:	08 95       	ret
    11cc:	5b c0       	rjmp	.+182    	; 0x1284 <__fp_zero>
    11ce:	67 2f       	mov	r22, r23
    11d0:	78 2f       	mov	r23, r24
    11d2:	88 27       	eor	r24, r24
    11d4:	b8 5f       	subi	r27, 0xF8	; 248
    11d6:	39 f0       	breq	.+14     	; 0x11e6 <__fixunssfsi+0x46>
    11d8:	b9 3f       	cpi	r27, 0xF9	; 249
    11da:	cc f3       	brlt	.-14     	; 0x11ce <__fixunssfsi+0x2e>
    11dc:	86 95       	lsr	r24
    11de:	77 95       	ror	r23
    11e0:	67 95       	ror	r22
    11e2:	b3 95       	inc	r27
    11e4:	d9 f7       	brne	.-10     	; 0x11dc <__fixunssfsi+0x3c>
    11e6:	3e f4       	brtc	.+14     	; 0x11f6 <__fixunssfsi+0x56>
    11e8:	90 95       	com	r25
    11ea:	80 95       	com	r24
    11ec:	70 95       	com	r23
    11ee:	61 95       	neg	r22
    11f0:	7f 4f       	sbci	r23, 0xFF	; 255
    11f2:	8f 4f       	sbci	r24, 0xFF	; 255
    11f4:	9f 4f       	sbci	r25, 0xFF	; 255
    11f6:	08 95       	ret

000011f8 <__fp_cmp>:
    11f8:	99 0f       	add	r25, r25
    11fa:	00 08       	sbc	r0, r0
    11fc:	55 0f       	add	r21, r21
    11fe:	aa 0b       	sbc	r26, r26
    1200:	e0 e8       	ldi	r30, 0x80	; 128
    1202:	fe ef       	ldi	r31, 0xFE	; 254
    1204:	16 16       	cp	r1, r22
    1206:	17 06       	cpc	r1, r23
    1208:	e8 07       	cpc	r30, r24
    120a:	f9 07       	cpc	r31, r25
    120c:	c0 f0       	brcs	.+48     	; 0x123e <__fp_cmp+0x46>
    120e:	12 16       	cp	r1, r18
    1210:	13 06       	cpc	r1, r19
    1212:	e4 07       	cpc	r30, r20
    1214:	f5 07       	cpc	r31, r21
    1216:	98 f0       	brcs	.+38     	; 0x123e <__fp_cmp+0x46>
    1218:	62 1b       	sub	r22, r18
    121a:	73 0b       	sbc	r23, r19
    121c:	84 0b       	sbc	r24, r20
    121e:	95 0b       	sbc	r25, r21
    1220:	39 f4       	brne	.+14     	; 0x1230 <__fp_cmp+0x38>
    1222:	0a 26       	eor	r0, r26
    1224:	61 f0       	breq	.+24     	; 0x123e <__fp_cmp+0x46>
    1226:	23 2b       	or	r18, r19
    1228:	24 2b       	or	r18, r20
    122a:	25 2b       	or	r18, r21
    122c:	21 f4       	brne	.+8      	; 0x1236 <__fp_cmp+0x3e>
    122e:	08 95       	ret
    1230:	0a 26       	eor	r0, r26
    1232:	09 f4       	brne	.+2      	; 0x1236 <__fp_cmp+0x3e>
    1234:	a1 40       	sbci	r26, 0x01	; 1
    1236:	a6 95       	lsr	r26
    1238:	8f ef       	ldi	r24, 0xFF	; 255
    123a:	81 1d       	adc	r24, r1
    123c:	81 1d       	adc	r24, r1
    123e:	08 95       	ret

00001240 <__fp_split3>:
    1240:	57 fd       	sbrc	r21, 7
    1242:	90 58       	subi	r25, 0x80	; 128
    1244:	44 0f       	add	r20, r20
    1246:	55 1f       	adc	r21, r21
    1248:	59 f0       	breq	.+22     	; 0x1260 <__fp_splitA+0x10>
    124a:	5f 3f       	cpi	r21, 0xFF	; 255
    124c:	71 f0       	breq	.+28     	; 0x126a <__fp_splitA+0x1a>
    124e:	47 95       	ror	r20

00001250 <__fp_splitA>:
    1250:	88 0f       	add	r24, r24
    1252:	97 fb       	bst	r25, 7
    1254:	99 1f       	adc	r25, r25
    1256:	61 f0       	breq	.+24     	; 0x1270 <__fp_splitA+0x20>
    1258:	9f 3f       	cpi	r25, 0xFF	; 255
    125a:	79 f0       	breq	.+30     	; 0x127a <__fp_splitA+0x2a>
    125c:	87 95       	ror	r24
    125e:	08 95       	ret
    1260:	12 16       	cp	r1, r18
    1262:	13 06       	cpc	r1, r19
    1264:	14 06       	cpc	r1, r20
    1266:	55 1f       	adc	r21, r21
    1268:	f2 cf       	rjmp	.-28     	; 0x124e <__fp_split3+0xe>
    126a:	46 95       	lsr	r20
    126c:	f1 df       	rcall	.-30     	; 0x1250 <__fp_splitA>
    126e:	08 c0       	rjmp	.+16     	; 0x1280 <__fp_splitA+0x30>
    1270:	16 16       	cp	r1, r22
    1272:	17 06       	cpc	r1, r23
    1274:	18 06       	cpc	r1, r24
    1276:	99 1f       	adc	r25, r25
    1278:	f1 cf       	rjmp	.-30     	; 0x125c <__fp_splitA+0xc>
    127a:	86 95       	lsr	r24
    127c:	71 05       	cpc	r23, r1
    127e:	61 05       	cpc	r22, r1
    1280:	08 94       	sec
    1282:	08 95       	ret

00001284 <__fp_zero>:
    1284:	e8 94       	clt

00001286 <__fp_szero>:
    1286:	bb 27       	eor	r27, r27
    1288:	66 27       	eor	r22, r22
    128a:	77 27       	eor	r23, r23
    128c:	cb 01       	movw	r24, r22
    128e:	97 f9       	bld	r25, 7
    1290:	08 95       	ret

00001292 <__gesf2>:
    1292:	b2 df       	rcall	.-156    	; 0x11f8 <__fp_cmp>
    1294:	08 f4       	brcc	.+2      	; 0x1298 <__gesf2+0x6>
    1296:	8f ef       	ldi	r24, 0xFF	; 255
    1298:	08 95       	ret

0000129a <__mulsf3>:
    129a:	0b d0       	rcall	.+22     	; 0x12b2 <__mulsf3x>
    129c:	78 c0       	rjmp	.+240    	; 0x138e <__fp_round>
    129e:	69 d0       	rcall	.+210    	; 0x1372 <__fp_pscA>
    12a0:	28 f0       	brcs	.+10     	; 0x12ac <__mulsf3+0x12>
    12a2:	6e d0       	rcall	.+220    	; 0x1380 <__fp_pscB>
    12a4:	18 f0       	brcs	.+6      	; 0x12ac <__mulsf3+0x12>
    12a6:	95 23       	and	r25, r21
    12a8:	09 f0       	breq	.+2      	; 0x12ac <__mulsf3+0x12>
    12aa:	5a c0       	rjmp	.+180    	; 0x1360 <__fp_inf>
    12ac:	5f c0       	rjmp	.+190    	; 0x136c <__fp_nan>
    12ae:	11 24       	eor	r1, r1
    12b0:	ea cf       	rjmp	.-44     	; 0x1286 <__fp_szero>

000012b2 <__mulsf3x>:
    12b2:	c6 df       	rcall	.-116    	; 0x1240 <__fp_split3>
    12b4:	a0 f3       	brcs	.-24     	; 0x129e <__mulsf3+0x4>

000012b6 <__mulsf3_pse>:
    12b6:	95 9f       	mul	r25, r21
    12b8:	d1 f3       	breq	.-12     	; 0x12ae <__mulsf3+0x14>
    12ba:	95 0f       	add	r25, r21
    12bc:	50 e0       	ldi	r21, 0x00	; 0
    12be:	55 1f       	adc	r21, r21
    12c0:	62 9f       	mul	r22, r18
    12c2:	f0 01       	movw	r30, r0
    12c4:	72 9f       	mul	r23, r18
    12c6:	bb 27       	eor	r27, r27
    12c8:	f0 0d       	add	r31, r0
    12ca:	b1 1d       	adc	r27, r1
    12cc:	63 9f       	mul	r22, r19
    12ce:	aa 27       	eor	r26, r26
    12d0:	f0 0d       	add	r31, r0
    12d2:	b1 1d       	adc	r27, r1
    12d4:	aa 1f       	adc	r26, r26
    12d6:	64 9f       	mul	r22, r20
    12d8:	66 27       	eor	r22, r22
    12da:	b0 0d       	add	r27, r0
    12dc:	a1 1d       	adc	r26, r1
    12de:	66 1f       	adc	r22, r22
    12e0:	82 9f       	mul	r24, r18
    12e2:	22 27       	eor	r18, r18
    12e4:	b0 0d       	add	r27, r0
    12e6:	a1 1d       	adc	r26, r1
    12e8:	62 1f       	adc	r22, r18
    12ea:	73 9f       	mul	r23, r19
    12ec:	b0 0d       	add	r27, r0
    12ee:	a1 1d       	adc	r26, r1
    12f0:	62 1f       	adc	r22, r18
    12f2:	83 9f       	mul	r24, r19
    12f4:	a0 0d       	add	r26, r0
    12f6:	61 1d       	adc	r22, r1
    12f8:	22 1f       	adc	r18, r18
    12fa:	74 9f       	mul	r23, r20
    12fc:	33 27       	eor	r19, r19
    12fe:	a0 0d       	add	r26, r0
    1300:	61 1d       	adc	r22, r1
    1302:	23 1f       	adc	r18, r19
    1304:	84 9f       	mul	r24, r20
    1306:	60 0d       	add	r22, r0
    1308:	21 1d       	adc	r18, r1
    130a:	82 2f       	mov	r24, r18
    130c:	76 2f       	mov	r23, r22
    130e:	6a 2f       	mov	r22, r26
    1310:	11 24       	eor	r1, r1
    1312:	9f 57       	subi	r25, 0x7F	; 127
    1314:	50 40       	sbci	r21, 0x00	; 0
    1316:	8a f0       	brmi	.+34     	; 0x133a <__mulsf3_pse+0x84>
    1318:	e1 f0       	breq	.+56     	; 0x1352 <__mulsf3_pse+0x9c>
    131a:	88 23       	and	r24, r24
    131c:	4a f0       	brmi	.+18     	; 0x1330 <__mulsf3_pse+0x7a>
    131e:	ee 0f       	add	r30, r30
    1320:	ff 1f       	adc	r31, r31
    1322:	bb 1f       	adc	r27, r27
    1324:	66 1f       	adc	r22, r22
    1326:	77 1f       	adc	r23, r23
    1328:	88 1f       	adc	r24, r24
    132a:	91 50       	subi	r25, 0x01	; 1
    132c:	50 40       	sbci	r21, 0x00	; 0
    132e:	a9 f7       	brne	.-22     	; 0x131a <__mulsf3_pse+0x64>
    1330:	9e 3f       	cpi	r25, 0xFE	; 254
    1332:	51 05       	cpc	r21, r1
    1334:	70 f0       	brcs	.+28     	; 0x1352 <__mulsf3_pse+0x9c>
    1336:	14 c0       	rjmp	.+40     	; 0x1360 <__fp_inf>
    1338:	a6 cf       	rjmp	.-180    	; 0x1286 <__fp_szero>
    133a:	5f 3f       	cpi	r21, 0xFF	; 255
    133c:	ec f3       	brlt	.-6      	; 0x1338 <__mulsf3_pse+0x82>
    133e:	98 3e       	cpi	r25, 0xE8	; 232
    1340:	dc f3       	brlt	.-10     	; 0x1338 <__mulsf3_pse+0x82>
    1342:	86 95       	lsr	r24
    1344:	77 95       	ror	r23
    1346:	67 95       	ror	r22
    1348:	b7 95       	ror	r27
    134a:	f7 95       	ror	r31
    134c:	e7 95       	ror	r30
    134e:	9f 5f       	subi	r25, 0xFF	; 255
    1350:	c1 f7       	brne	.-16     	; 0x1342 <__mulsf3_pse+0x8c>
    1352:	fe 2b       	or	r31, r30
    1354:	88 0f       	add	r24, r24
    1356:	91 1d       	adc	r25, r1
    1358:	96 95       	lsr	r25
    135a:	87 95       	ror	r24
    135c:	97 f9       	bld	r25, 7
    135e:	08 95       	ret

00001360 <__fp_inf>:
    1360:	97 f9       	bld	r25, 7
    1362:	9f 67       	ori	r25, 0x7F	; 127
    1364:	80 e8       	ldi	r24, 0x80	; 128
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	60 e0       	ldi	r22, 0x00	; 0
    136a:	08 95       	ret

0000136c <__fp_nan>:
    136c:	9f ef       	ldi	r25, 0xFF	; 255
    136e:	80 ec       	ldi	r24, 0xC0	; 192
    1370:	08 95       	ret

00001372 <__fp_pscA>:
    1372:	00 24       	eor	r0, r0
    1374:	0a 94       	dec	r0
    1376:	16 16       	cp	r1, r22
    1378:	17 06       	cpc	r1, r23
    137a:	18 06       	cpc	r1, r24
    137c:	09 06       	cpc	r0, r25
    137e:	08 95       	ret

00001380 <__fp_pscB>:
    1380:	00 24       	eor	r0, r0
    1382:	0a 94       	dec	r0
    1384:	12 16       	cp	r1, r18
    1386:	13 06       	cpc	r1, r19
    1388:	14 06       	cpc	r1, r20
    138a:	05 06       	cpc	r0, r21
    138c:	08 95       	ret

0000138e <__fp_round>:
    138e:	09 2e       	mov	r0, r25
    1390:	03 94       	inc	r0
    1392:	00 0c       	add	r0, r0
    1394:	11 f4       	brne	.+4      	; 0x139a <__fp_round+0xc>
    1396:	88 23       	and	r24, r24
    1398:	52 f0       	brmi	.+20     	; 0x13ae <__fp_round+0x20>
    139a:	bb 0f       	add	r27, r27
    139c:	40 f4       	brcc	.+16     	; 0x13ae <__fp_round+0x20>
    139e:	bf 2b       	or	r27, r31
    13a0:	11 f4       	brne	.+4      	; 0x13a6 <__fp_round+0x18>
    13a2:	60 ff       	sbrs	r22, 0
    13a4:	04 c0       	rjmp	.+8      	; 0x13ae <__fp_round+0x20>
    13a6:	6f 5f       	subi	r22, 0xFF	; 255
    13a8:	7f 4f       	sbci	r23, 0xFF	; 255
    13aa:	8f 4f       	sbci	r24, 0xFF	; 255
    13ac:	9f 4f       	sbci	r25, 0xFF	; 255
    13ae:	08 95       	ret

000013b0 <_exit>:
    13b0:	f8 94       	cli

000013b2 <__stop_program>:
    13b2:	ff cf       	rjmp	.-2      	; 0x13b2 <__stop_program>
