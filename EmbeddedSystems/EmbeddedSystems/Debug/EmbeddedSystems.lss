
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000013b8  0000144c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000430  0080010c  0080010c  00001458  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001564  00000000  00000000  0000172c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d71  00000000  00000000  00002c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000111a  00000000  00000000  00003a01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007d8  00000000  00000000  00004b1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e6  00000000  00000000  000052f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f88  00000000  00000000  00005ada  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00006a62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
       2:	00 00       	nop
       4:	68 c0       	rjmp	.+208    	; 0xd6 <__bad_interrupt>
       6:	00 00       	nop
       8:	66 c0       	rjmp	.+204    	; 0xd6 <__bad_interrupt>
       a:	00 00       	nop
       c:	64 c0       	rjmp	.+200    	; 0xd6 <__bad_interrupt>
       e:	00 00       	nop
      10:	62 c0       	rjmp	.+196    	; 0xd6 <__bad_interrupt>
      12:	00 00       	nop
      14:	60 c0       	rjmp	.+192    	; 0xd6 <__bad_interrupt>
      16:	00 00       	nop
      18:	5e c0       	rjmp	.+188    	; 0xd6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5c c0       	rjmp	.+184    	; 0xd6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5a c0       	rjmp	.+180    	; 0xd6 <__bad_interrupt>
      22:	00 00       	nop
      24:	6c c4       	rjmp	.+2264   	; 0x8fe <__vector_9>
      26:	00 00       	nop
      28:	56 c0       	rjmp	.+172    	; 0xd6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	54 c0       	rjmp	.+168    	; 0xd6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	52 c0       	rjmp	.+164    	; 0xd6 <__bad_interrupt>
      32:	00 00       	nop
      34:	50 c0       	rjmp	.+160    	; 0xd6 <__bad_interrupt>
      36:	00 00       	nop
      38:	4e c0       	rjmp	.+156    	; 0xd6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4c c0       	rjmp	.+152    	; 0xd6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3e c4       	rjmp	.+2172   	; 0x8be <__vector_16>
      42:	00 00       	nop
      44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	44 c0       	rjmp	.+136    	; 0xd6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8c c6       	rjmp	.+3352   	; 0xd6a <__vector_20>
      52:	00 00       	nop
      54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
      56:	00 00       	nop
      58:	49 c6       	rjmp	.+3218   	; 0xcec <__vector_22>
      5a:	00 00       	nop
      5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	55 c0       	rjmp	.+170    	; 0x10c <__vector_24>
      62:	00 00       	nop
      64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
      66:	00 00       	nop
      68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	52 01       	movw	r10, r4
      8e:	63 01       	movw	r12, r6
      90:	74 01       	movw	r14, r8
      92:	85 01       	movw	r16, r10
      94:	9f 01       	movw	r18, r30
      96:	af 01       	movw	r20, r30
      98:	bf 01       	movw	r22, r30

0000009a <__ctors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d0 e4       	ldi	r29, 0x40	; 64
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
      a6:	11 e0       	ldi	r17, 0x01	; 1
      a8:	a0 e0       	ldi	r26, 0x00	; 0
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	e8 eb       	ldi	r30, 0xB8	; 184
      ae:	f3 e1       	ldi	r31, 0x13	; 19
      b0:	00 e0       	ldi	r16, 0x00	; 0
      b2:	0b bf       	out	0x3b, r16	; 59
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
      b6:	07 90       	elpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	ac 30       	cpi	r26, 0x0C	; 12
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
      c0:	25 e0       	ldi	r18, 0x05	; 5
      c2:	ac e0       	ldi	r26, 0x0C	; 12
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	ac 33       	cpi	r26, 0x3C	; 60
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	4e d2       	rcall	.+1180   	; 0x56e <main>
      d2:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <_exit>

000000d6 <__bad_interrupt>:
      d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <adc_init>:
    // Make average
    avg = avg / 8;
    
    // Return a 16 bit value
    return (avg & 0xffff);
}
      d8:	cf 93       	push	r28
      da:	df 93       	push	r29
      dc:	cd b7       	in	r28, 0x3d	; 61
      de:	de b7       	in	r29, 0x3e	; 62
      e0:	8a e7       	ldi	r24, 0x7A	; 122
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	2a e7       	ldi	r18, 0x7A	; 122
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	f9 01       	movw	r30, r18
      ea:	20 81       	ld	r18, Z
      ec:	27 60       	ori	r18, 0x07	; 7
      ee:	fc 01       	movw	r30, r24
      f0:	20 83       	st	Z, r18
      f2:	8a e7       	ldi	r24, 0x7A	; 122
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	2a e7       	ldi	r18, 0x7A	; 122
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	f9 01       	movw	r30, r18
      fc:	20 81       	ld	r18, Z
      fe:	28 6c       	ori	r18, 0xC8	; 200
     100:	fc 01       	movw	r30, r24
     102:	20 83       	st	Z, r18
     104:	00 00       	nop
     106:	df 91       	pop	r29
     108:	cf 91       	pop	r28
     10a:	08 95       	ret

0000010c <__vector_24>:

ISR(ADC_vect){
     10c:	1f 92       	push	r1
     10e:	0f 92       	push	r0
     110:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     114:	0f 92       	push	r0
     116:	11 24       	eor	r1, r1
     118:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     11c:	0f 92       	push	r0
     11e:	2f 93       	push	r18
     120:	3f 93       	push	r19
     122:	8f 93       	push	r24
     124:	9f 93       	push	r25
     126:	ef 93       	push	r30
     128:	ff 93       	push	r31
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	00 d0       	rcall	.+0      	; 0x130 <__vector_24+0x24>
     130:	cd b7       	in	r28, 0x3d	; 61
     132:	de b7       	in	r29, 0x3e	; 62
    // Pull data from AD conversion
    uint16_t res = ADC;
     134:	88 e7       	ldi	r24, 0x78	; 120
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	fc 01       	movw	r30, r24
     13a:	80 81       	ld	r24, Z
     13c:	91 81       	ldd	r25, Z+1	; 0x01
     13e:	9a 83       	std	Y+2, r25	; 0x02
     140:	89 83       	std	Y+1, r24	; 0x01
#ifdef DEBUG_LEDS_ADC
    Led3_Off();
#endif
    
    // Switch between LM35 and Poti
    switch (ADMUX & (1 << MUX0)) {
     142:	8c e7       	ldi	r24, 0x7C	; 124
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	fc 01       	movw	r30, r24
     148:	80 81       	ld	r24, Z
     14a:	88 2f       	mov	r24, r24
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	81 70       	andi	r24, 0x01	; 1
     150:	99 27       	eor	r25, r25
     152:	00 97       	sbiw	r24, 0x00	; 0
     154:	19 f0       	breq	.+6      	; 0x15c <__vector_24+0x50>
     156:	01 97       	sbiw	r24, 0x01	; 1
     158:	b9 f1       	breq	.+110    	; 0x1c8 <__vector_24+0xbc>
#endif
            }
            break;
            
        default:
            break;
     15a:	63 c0       	rjmp	.+198    	; 0x222 <__vector_24+0x116>
    
    // Switch between LM35 and Poti
    switch (ADMUX & (1 << MUX0)) {
        case 0: // LM35
            
            if (index_LM35 == 42) {
     15c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     160:	8a 32       	cpi	r24, 0x2A	; 42
     162:	19 f4       	brne	.+6      	; 0x16a <__vector_24+0x5e>
                // Trash first conversion
                index_LM35 = 0;
     164:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
                
#ifdef DEBUG_LEDS_ADC
                Led4_Off();
#endif
            }
            break;
     168:	5c c0       	rjmp	.+184    	; 0x222 <__vector_24+0x116>
                // Trash first conversion
                index_LM35 = 0;
#ifdef DEBUG_LEDS_ADC
                Led4_On();
#endif
            }else if (index_LM35 >= 0 && index_LM35 <= 7) {
     16a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     16e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     172:	88 30       	cpi	r24, 0x08	; 8
     174:	98 f4       	brcc	.+38     	; 0x19c <__vector_24+0x90>
                // Store 8 AD conversions in the Array
                LM35_Array[index_LM35] = res;
     176:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     17a:	88 2f       	mov	r24, r24
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	88 0f       	add	r24, r24
     180:	99 1f       	adc	r25, r25
     182:	84 5f       	subi	r24, 0xF4	; 244
     184:	9e 4f       	sbci	r25, 0xFE	; 254
     186:	29 81       	ldd	r18, Y+1	; 0x01
     188:	3a 81       	ldd	r19, Y+2	; 0x02
     18a:	fc 01       	movw	r30, r24
     18c:	31 83       	std	Z+1, r19	; 0x01
     18e:	20 83       	st	Z, r18
                index_LM35++;
     190:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     194:	8f 5f       	subi	r24, 0xFF	; 255
     196:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
                
#ifdef DEBUG_LEDS_ADC
                Led4_Off();
#endif
            }
            break;
     19a:	43 c0       	rjmp	.+134    	; 0x222 <__vector_24+0x116>
                // Store 8 AD conversions in the Array
                LM35_Array[index_LM35] = res;
                index_LM35++;
            }else {
                // Switch to Poti
                ADMUX &= ~(30); // Set MUX1..4 to 0
     19c:	8c e7       	ldi	r24, 0x7C	; 124
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	2c e7       	ldi	r18, 0x7C	; 124
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	f9 01       	movw	r30, r18
     1a6:	20 81       	ld	r18, Z
     1a8:	21 7e       	andi	r18, 0xE1	; 225
     1aa:	fc 01       	movw	r30, r24
     1ac:	20 83       	st	Z, r18
                ADMUX |= (1 << MUX0);
     1ae:	8c e7       	ldi	r24, 0x7C	; 124
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	2c e7       	ldi	r18, 0x7C	; 124
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	f9 01       	movw	r30, r18
     1b8:	20 81       	ld	r18, Z
     1ba:	21 60       	ori	r18, 0x01	; 1
     1bc:	fc 01       	movw	r30, r24
     1be:	20 83       	st	Z, r18
                
                // Set index to default value, so that the first conversion will be trashed
                index_LM35 = 42;
     1c0:	8a e2       	ldi	r24, 0x2A	; 42
     1c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
                
#ifdef DEBUG_LEDS_ADC
                Led4_Off();
#endif
            }
            break;
     1c6:	2d c0       	rjmp	.+90     	; 0x222 <__vector_24+0x116>
            
        case 1: // Poti
            if (index_Poti == 42) { // Trash first conversion
     1c8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
     1cc:	8a 32       	cpi	r24, 0x2A	; 42
     1ce:	19 f4       	brne	.+6      	; 0x1d6 <__vector_24+0xca>
#ifdef DEBUG_LEDS_ADC
                Led5_On();
#endif
                index_Poti = 0;
     1d0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <index_Poti>
                
#ifdef DEBUG_LEDS_ADC
                Led5_Off();
#endif
            }
            break;
     1d4:	25 c0       	rjmp	.+74     	; 0x220 <__vector_24+0x114>
            if (index_Poti == 42) { // Trash first conversion
#ifdef DEBUG_LEDS_ADC
                Led5_On();
#endif
                index_Poti = 0;
            }else if (index_Poti >= 0 && index_Poti <= 7) {
     1d6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
     1da:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
     1de:	88 30       	cpi	r24, 0x08	; 8
     1e0:	98 f4       	brcc	.+38     	; 0x208 <__vector_24+0xfc>
                // Store 8 AD conversions in the Array
                Poti_Array[index_Poti] = res;
     1e2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
     1e6:	88 2f       	mov	r24, r24
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	88 0f       	add	r24, r24
     1ec:	99 1f       	adc	r25, r25
     1ee:	84 5e       	subi	r24, 0xE4	; 228
     1f0:	9e 4f       	sbci	r25, 0xFE	; 254
     1f2:	29 81       	ldd	r18, Y+1	; 0x01
     1f4:	3a 81       	ldd	r19, Y+2	; 0x02
     1f6:	fc 01       	movw	r30, r24
     1f8:	31 83       	std	Z+1, r19	; 0x01
     1fa:	20 83       	st	Z, r18
                index_Poti++;
     1fc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
     200:	8f 5f       	subi	r24, 0xFF	; 255
     202:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <index_Poti>
                
#ifdef DEBUG_LEDS_ADC
                Led5_Off();
#endif
            }
            break;
     206:	0c c0       	rjmp	.+24     	; 0x220 <__vector_24+0x114>
                // Store 8 AD conversions in the Array
                Poti_Array[index_Poti] = res;
                index_Poti++;
            }else {
                // Switch to LM35
                ADMUX &= ~(31); // Set MUX0..4 to 0
     208:	8c e7       	ldi	r24, 0x7C	; 124
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	2c e7       	ldi	r18, 0x7C	; 124
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	f9 01       	movw	r30, r18
     212:	20 81       	ld	r18, Z
     214:	20 7e       	andi	r18, 0xE0	; 224
     216:	fc 01       	movw	r30, r24
     218:	20 83       	st	Z, r18
                
                // Set index to default value, so that the first conversion will be trashed
                index_Poti = 42;
     21a:	8a e2       	ldi	r24, 0x2A	; 42
     21c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <index_Poti>
                
#ifdef DEBUG_LEDS_ADC
                Led5_Off();
#endif
            }
            break;
     220:	00 00       	nop
#ifdef DEBUG_LEDS_ADC
    Led3_On();
#endif
    
    // Trigger next conversion
    ADCSRA |= (1 << ADSC) | (1 << ADIE);
     222:	8a e7       	ldi	r24, 0x7A	; 122
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	2a e7       	ldi	r18, 0x7A	; 122
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	f9 01       	movw	r30, r18
     22c:	20 81       	ld	r18, Z
     22e:	28 64       	ori	r18, 0x48	; 72
     230:	fc 01       	movw	r30, r24
     232:	20 83       	st	Z, r18
}
     234:	00 00       	nop
     236:	0f 90       	pop	r0
     238:	0f 90       	pop	r0
     23a:	df 91       	pop	r29
     23c:	cf 91       	pop	r28
     23e:	ff 91       	pop	r31
     240:	ef 91       	pop	r30
     242:	9f 91       	pop	r25
     244:	8f 91       	pop	r24
     246:	3f 91       	pop	r19
     248:	2f 91       	pop	r18
     24a:	0f 90       	pop	r0
     24c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     250:	0f 90       	pop	r0
     252:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     256:	0f 90       	pop	r0
     258:	1f 90       	pop	r1
     25a:	18 95       	reti

0000025c <encoder_process>:
volatile uint8_t st_m_state = 0;

volatile int16_t val = 0;


void encoder_process(){
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	cd b7       	in	r28, 0x3d	; 61
     262:	de b7       	in	r29, 0x3e	; 62
    
    // Update enc_state
    enc_state = (PINC & ( (1 << PC6) | (1 << PC7) )) >> 6;
     264:	86 e2       	ldi	r24, 0x26	; 38
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	fc 01       	movw	r30, r24
     26a:	80 81       	ld	r24, Z
     26c:	82 95       	swap	r24
     26e:	86 95       	lsr	r24
     270:	86 95       	lsr	r24
     272:	83 70       	andi	r24, 0x03	; 3
     274:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <enc_state>
    
    
    // State machine
//  Begin of state machine
    switch (st_m_state) {
     278:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <st_m_state>
     27c:	88 2f       	mov	r24, r24
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	09 2e       	mov	r0, r25
     282:	00 0c       	add	r0, r0
     284:	aa 0b       	sbc	r26, r26
     286:	bb 0b       	sbc	r27, r27
     288:	41 e0       	ldi	r20, 0x01	; 1
     28a:	50 e0       	ldi	r21, 0x00	; 0
     28c:	26 e0       	ldi	r18, 0x06	; 6
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	84 1b       	sub	r24, r20
     292:	95 0b       	sbc	r25, r21
     294:	28 17       	cp	r18, r24
     296:	39 07       	cpc	r19, r25
     298:	08 f4       	brcc	.+2      	; 0x29c <encoder_process+0x40>
     29a:	8a c0       	rjmp	.+276    	; 0x3b0 <encoder_process+0x154>
     29c:	8a 5b       	subi	r24, 0xBA	; 186
     29e:	9f 4f       	sbci	r25, 0xFF	; 255
     2a0:	fc 01       	movw	r30, r24
     2a2:	9b c5       	rjmp	.+2870   	; 0xdda <__tablejump2__>
        case 1: // Init state
            
            if (enc_state == 1) {
     2a4:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <enc_state>
     2a8:	81 30       	cpi	r24, 0x01	; 1
     2aa:	21 f4       	brne	.+8      	; 0x2b4 <encoder_process+0x58>
                // Rotation forward
                st_m_state = 2;
     2ac:	82 e0       	ldi	r24, 0x02	; 2
     2ae:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
                
            } else if (enc_state == 2) {
                // Rotation backward
                st_m_state = 5;
            }
            break;
     2b2:	80 c0       	rjmp	.+256    	; 0x3b4 <encoder_process+0x158>
            
            if (enc_state == 1) {
                // Rotation forward
                st_m_state = 2;
                
            } else if (enc_state == 2) {
     2b4:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <enc_state>
     2b8:	82 30       	cpi	r24, 0x02	; 2
     2ba:	09 f0       	breq	.+2      	; 0x2be <encoder_process+0x62>
     2bc:	7b c0       	rjmp	.+246    	; 0x3b4 <encoder_process+0x158>
                // Rotation backward
                st_m_state = 5;
     2be:	85 e0       	ldi	r24, 0x05	; 5
     2c0:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
            }
            break;
     2c4:	77 c0       	rjmp	.+238    	; 0x3b4 <encoder_process+0x158>
            
        case 2: // Rotation forward
            
            if (enc_state == 3) {
     2c6:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <enc_state>
     2ca:	83 30       	cpi	r24, 0x03	; 3
     2cc:	21 f4       	brne	.+8      	; 0x2d6 <encoder_process+0x7a>
                // Still rotating forward
                st_m_state = 3;
     2ce:	83 e0       	ldi	r24, 0x03	; 3
     2d0:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
                
            } else if (enc_state == 0) {
                // Fail, go back to init state (maybe bouncing)
                st_m_state = 1;
            }
            break;
     2d4:	71 c0       	rjmp	.+226    	; 0x3b8 <encoder_process+0x15c>
            
            if (enc_state == 3) {
                // Still rotating forward
                st_m_state = 3;
                
            } else if (enc_state == 0) {
     2d6:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <enc_state>
     2da:	88 23       	and	r24, r24
     2dc:	09 f0       	breq	.+2      	; 0x2e0 <encoder_process+0x84>
     2de:	6c c0       	rjmp	.+216    	; 0x3b8 <encoder_process+0x15c>
                // Fail, go back to init state (maybe bouncing)
                st_m_state = 1;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
            }
            break;
     2e6:	68 c0       	rjmp	.+208    	; 0x3b8 <encoder_process+0x15c>
            
        case 3: // Rotation forward
        
            if (enc_state == 2) {
     2e8:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <enc_state>
     2ec:	82 30       	cpi	r24, 0x02	; 2
     2ee:	21 f4       	brne	.+8      	; 0x2f8 <encoder_process+0x9c>
                // Still rotating forward
                st_m_state = 4;
     2f0:	84 e0       	ldi	r24, 0x04	; 4
     2f2:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
                
            } else if (enc_state == 1) {
                // Fail, go back to previous state (maybe bouncing)
                st_m_state = 2;
            }
            break;
     2f6:	62 c0       	rjmp	.+196    	; 0x3bc <encoder_process+0x160>
        
            if (enc_state == 2) {
                // Still rotating forward
                st_m_state = 4;
                
            } else if (enc_state == 1) {
     2f8:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <enc_state>
     2fc:	81 30       	cpi	r24, 0x01	; 1
     2fe:	09 f0       	breq	.+2      	; 0x302 <encoder_process+0xa6>
     300:	5d c0       	rjmp	.+186    	; 0x3bc <encoder_process+0x160>
                // Fail, go back to previous state (maybe bouncing)
                st_m_state = 2;
     302:	82 e0       	ldi	r24, 0x02	; 2
     304:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
            }
            break;
     308:	59 c0       	rjmp	.+178    	; 0x3bc <encoder_process+0x160>
            
        case 4: // Rotation forward
        
            if (enc_state == 0) {
     30a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <enc_state>
     30e:	88 23       	and	r24, r24
     310:	69 f4       	brne	.+26     	; 0x32c <encoder_process+0xd0>
                // Forward Rotation done
                st_m_state = 1;
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
                val++;
     318:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <val>
     31c:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <val+0x1>
     320:	01 96       	adiw	r24, 0x01	; 1
     322:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <val+0x1>
     326:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <val>
                
            } else if (enc_state == 3) {
                // Fail, go back to previous state (maybe bouncing)
                st_m_state = 3;
            }
            break;
     32a:	4a c0       	rjmp	.+148    	; 0x3c0 <encoder_process+0x164>
            if (enc_state == 0) {
                // Forward Rotation done
                st_m_state = 1;
                val++;
                
            } else if (enc_state == 3) {
     32c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <enc_state>
     330:	83 30       	cpi	r24, 0x03	; 3
     332:	09 f0       	breq	.+2      	; 0x336 <encoder_process+0xda>
     334:	45 c0       	rjmp	.+138    	; 0x3c0 <encoder_process+0x164>
                // Fail, go back to previous state (maybe bouncing)
                st_m_state = 3;
     336:	83 e0       	ldi	r24, 0x03	; 3
     338:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
            }
            break;
     33c:	41 c0       	rjmp	.+130    	; 0x3c0 <encoder_process+0x164>
            
            
        case 5: // Rotation backward
        
            if (enc_state == 0) {
     33e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <enc_state>
     342:	88 23       	and	r24, r24
     344:	21 f4       	brne	.+8      	; 0x34e <encoder_process+0xf2>
                // Fail, go back to init state (maybe bouncing)
                st_m_state = 1;
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
                
            } else if (enc_state == 3) {
                // Still rotating backward
                st_m_state = 6;
            }
            break;
     34c:	3b c0       	rjmp	.+118    	; 0x3c4 <encoder_process+0x168>
        
            if (enc_state == 0) {
                // Fail, go back to init state (maybe bouncing)
                st_m_state = 1;
                
            } else if (enc_state == 3) {
     34e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <enc_state>
     352:	83 30       	cpi	r24, 0x03	; 3
     354:	b9 f5       	brne	.+110    	; 0x3c4 <encoder_process+0x168>
                // Still rotating backward
                st_m_state = 6;
     356:	86 e0       	ldi	r24, 0x06	; 6
     358:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
            }
            break;
     35c:	33 c0       	rjmp	.+102    	; 0x3c4 <encoder_process+0x168>
            
        case 6: // Rotation backward
        
            if (enc_state == 2) {
     35e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <enc_state>
     362:	82 30       	cpi	r24, 0x02	; 2
     364:	21 f4       	brne	.+8      	; 0x36e <encoder_process+0x112>
                // Fail, go back to previous state (maybe bouncing)
                st_m_state = 5;
     366:	85 e0       	ldi	r24, 0x05	; 5
     368:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
                
            } else if (enc_state == 1) {
                // Still rotating backward
                st_m_state = 7;
            }
            break;
     36c:	2d c0       	rjmp	.+90     	; 0x3c8 <encoder_process+0x16c>
        
            if (enc_state == 2) {
                // Fail, go back to previous state (maybe bouncing)
                st_m_state = 5;
                
            } else if (enc_state == 1) {
     36e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <enc_state>
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	49 f5       	brne	.+82     	; 0x3c8 <encoder_process+0x16c>
                // Still rotating backward
                st_m_state = 7;
     376:	87 e0       	ldi	r24, 0x07	; 7
     378:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
            }
            break;
     37c:	25 c0       	rjmp	.+74     	; 0x3c8 <encoder_process+0x16c>
            
        case 7: // Rotation backward
        
            if (enc_state == 3) {
     37e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <enc_state>
     382:	83 30       	cpi	r24, 0x03	; 3
     384:	21 f4       	brne	.+8      	; 0x38e <encoder_process+0x132>
                // Fail, go back to previous state (maybe bouncing)
                st_m_state = 6;
     386:	86 e0       	ldi	r24, 0x06	; 6
     388:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
            } else if (enc_state == 0) {
                // Rotating backward done
                st_m_state = 1;
                val--;
            }
            break;
     38c:	1f c0       	rjmp	.+62     	; 0x3cc <encoder_process+0x170>
        
            if (enc_state == 3) {
                // Fail, go back to previous state (maybe bouncing)
                st_m_state = 6;
                
            } else if (enc_state == 0) {
     38e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <enc_state>
     392:	88 23       	and	r24, r24
     394:	d9 f4       	brne	.+54     	; 0x3cc <encoder_process+0x170>
                // Rotating backward done
                st_m_state = 1;
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
                val--;
     39c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <val>
     3a0:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <val+0x1>
     3a4:	01 97       	sbiw	r24, 0x01	; 1
     3a6:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <val+0x1>
     3aa:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <val>
            }
            break;
     3ae:	0e c0       	rjmp	.+28     	; 0x3cc <encoder_process+0x170>

            
        default:
            //st_m_state = 1;
            break;
     3b0:	00 00       	nop
     3b2:	0d c0       	rjmp	.+26     	; 0x3ce <encoder_process+0x172>
                
            } else if (enc_state == 2) {
                // Rotation backward
                st_m_state = 5;
            }
            break;
     3b4:	00 00       	nop
     3b6:	0b c0       	rjmp	.+22     	; 0x3ce <encoder_process+0x172>
                
            } else if (enc_state == 0) {
                // Fail, go back to init state (maybe bouncing)
                st_m_state = 1;
            }
            break;
     3b8:	00 00       	nop
     3ba:	09 c0       	rjmp	.+18     	; 0x3ce <encoder_process+0x172>
                
            } else if (enc_state == 1) {
                // Fail, go back to previous state (maybe bouncing)
                st_m_state = 2;
            }
            break;
     3bc:	00 00       	nop
     3be:	07 c0       	rjmp	.+14     	; 0x3ce <encoder_process+0x172>
                
            } else if (enc_state == 3) {
                // Fail, go back to previous state (maybe bouncing)
                st_m_state = 3;
            }
            break;
     3c0:	00 00       	nop
     3c2:	05 c0       	rjmp	.+10     	; 0x3ce <encoder_process+0x172>
                
            } else if (enc_state == 3) {
                // Still rotating backward
                st_m_state = 6;
            }
            break;
     3c4:	00 00       	nop
     3c6:	03 c0       	rjmp	.+6      	; 0x3ce <encoder_process+0x172>
                
            } else if (enc_state == 1) {
                // Still rotating backward
                st_m_state = 7;
            }
            break;
     3c8:	00 00       	nop
     3ca:	01 c0       	rjmp	.+2      	; 0x3ce <encoder_process+0x172>
            } else if (enc_state == 0) {
                // Rotating backward done
                st_m_state = 1;
                val--;
            }
            break;
     3cc:	00 00       	nop
            //st_m_state = 1;
            break;
    }
//  End of state machine
    
}
     3ce:	00 00       	nop
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	08 95       	ret

000003d6 <encoder_init>:

void encoder_init( void ){
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	cd b7       	in	r28, 0x3d	; 61
     3dc:	de b7       	in	r29, 0x3e	; 62
    
    // Init state machine
    st_m_state = 1;
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
    
    // Init timer (16MHZ, call encoder_isr() at timer isr)
    Timer2_init(16, encoder_process);
     3e4:	6e e2       	ldi	r22, 0x2E	; 46
     3e6:	71 e0       	ldi	r23, 0x01	; 1
     3e8:	80 e1       	ldi	r24, 0x10	; 16
     3ea:	a5 d1       	rcall	.+842    	; 0x736 <Timer2_init>
}
     3ec:	00 00       	nop
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	08 95       	ret

000003f4 <encoder_get>:

int16_t encoder_get(){
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	00 d0       	rcall	.+0      	; 0x3fa <encoder_get+0x6>
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
    TIMSK2 &= ~(1 << OCIE0A);
     3fe:	80 e7       	ldi	r24, 0x70	; 112
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	20 e7       	ldi	r18, 0x70	; 112
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	f9 01       	movw	r30, r18
     408:	20 81       	ld	r18, Z
     40a:	2d 7f       	andi	r18, 0xFD	; 253
     40c:	fc 01       	movw	r30, r24
     40e:	20 83       	st	Z, r18
    int16_t temp = val;
     410:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <val>
     414:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <val+0x1>
     418:	9a 83       	std	Y+2, r25	; 0x02
     41a:	89 83       	std	Y+1, r24	; 0x01
    TIMSK2 |= (1 << OCIE0A);
     41c:	80 e7       	ldi	r24, 0x70	; 112
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	20 e7       	ldi	r18, 0x70	; 112
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	f9 01       	movw	r30, r18
     426:	20 81       	ld	r18, Z
     428:	22 60       	ori	r18, 0x02	; 2
     42a:	fc 01       	movw	r30, r24
     42c:	20 83       	st	Z, r18
    return temp;
     42e:	89 81       	ldd	r24, Y+1	; 0x01
     430:	9a 81       	ldd	r25, Y+2	; 0x02
}
     432:	0f 90       	pop	r0
     434:	0f 90       	pop	r0
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	08 95       	ret

0000043c <Led_init>:
void turnOnD(uint8_t bit) {
    PORTD |= (1 << bit);
}
void turnOffD(uint8_t bit) {
    PORTD &= ~(1 << bit);
}
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	1f 92       	push	r1
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
     446:	89 83       	std	Y+1, r24	; 0x01
     448:	84 e2       	ldi	r24, 0x24	; 36
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	2f ef       	ldi	r18, 0xFF	; 255
     44e:	fc 01       	movw	r30, r24
     450:	20 83       	st	Z, r18
     452:	85 e2       	ldi	r24, 0x25	; 37
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	fc 01       	movw	r30, r24
     458:	10 82       	st	Z, r1
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	88 23       	and	r24, r24
     45e:	91 f0       	breq	.+36     	; 0x484 <Led_init+0x48>
     460:	8a e2       	ldi	r24, 0x2A	; 42
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	2a e2       	ldi	r18, 0x2A	; 42
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	f9 01       	movw	r30, r18
     46a:	20 81       	ld	r18, Z
     46c:	2f 61       	ori	r18, 0x1F	; 31
     46e:	fc 01       	movw	r30, r24
     470:	20 83       	st	Z, r18
     472:	8b e2       	ldi	r24, 0x2B	; 43
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	2b e2       	ldi	r18, 0x2B	; 43
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	f9 01       	movw	r30, r18
     47c:	20 81       	ld	r18, Z
     47e:	20 7e       	andi	r18, 0xE0	; 224
     480:	fc 01       	movw	r30, r24
     482:	20 83       	st	Z, r18
     484:	00 00       	nop
     486:	0f 90       	pop	r0
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	08 95       	ret

0000048e <Led1_On>:

/**
 led1 - ioB7
 */
void Led1_On(void) {
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
     492:	cd b7       	in	r28, 0x3d	; 61
     494:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 7);
     496:	85 e2       	ldi	r24, 0x25	; 37
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	25 e2       	ldi	r18, 0x25	; 37
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	f9 01       	movw	r30, r18
     4a0:	20 81       	ld	r18, Z
     4a2:	20 68       	ori	r18, 0x80	; 128
     4a4:	fc 01       	movw	r30, r24
     4a6:	20 83       	st	Z, r18
}
     4a8:	00 00       	nop
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	08 95       	ret

000004b0 <Led1_Off>:
void Led1_Off(void) {
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 7);
     4b8:	85 e2       	ldi	r24, 0x25	; 37
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	25 e2       	ldi	r18, 0x25	; 37
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	f9 01       	movw	r30, r18
     4c2:	20 81       	ld	r18, Z
     4c4:	2f 77       	andi	r18, 0x7F	; 127
     4c6:	fc 01       	movw	r30, r24
     4c8:	20 83       	st	Z, r18
}
     4ca:	00 00       	nop
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	08 95       	ret

000004d2 <Led2_On>:

/**
led2 - ioB6
*/
void Led2_On(void) {
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	cd b7       	in	r28, 0x3d	; 61
     4d8:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 6);
     4da:	85 e2       	ldi	r24, 0x25	; 37
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	25 e2       	ldi	r18, 0x25	; 37
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	f9 01       	movw	r30, r18
     4e4:	20 81       	ld	r18, Z
     4e6:	20 64       	ori	r18, 0x40	; 64
     4e8:	fc 01       	movw	r30, r24
     4ea:	20 83       	st	Z, r18
}
     4ec:	00 00       	nop
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	08 95       	ret

000004f4 <Led2_Off>:
void Led2_Off(void) {
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	cd b7       	in	r28, 0x3d	; 61
     4fa:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 6);
     4fc:	85 e2       	ldi	r24, 0x25	; 37
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	25 e2       	ldi	r18, 0x25	; 37
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	f9 01       	movw	r30, r18
     506:	20 81       	ld	r18, Z
     508:	2f 7b       	andi	r18, 0xBF	; 191
     50a:	fc 01       	movw	r30, r24
     50c:	20 83       	st	Z, r18
}
     50e:	00 00       	nop
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	08 95       	ret

00000516 <Taster_init>:
 ---------------------
 - DDR Reg has to be set to 0
 - PORT Reg has to be set to 1
 -> Pin is input with pull-up
 */
void Taster_init() {
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	cd b7       	in	r28, 0x3d	; 61
     51c:	de b7       	in	r29, 0x3e	; 62
    
    // set to inputs
    DDRC &= ~(1 << 2);
     51e:	87 e2       	ldi	r24, 0x27	; 39
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	27 e2       	ldi	r18, 0x27	; 39
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	f9 01       	movw	r30, r18
     528:	20 81       	ld	r18, Z
     52a:	2b 7f       	andi	r18, 0xFB	; 251
     52c:	fc 01       	movw	r30, r24
     52e:	20 83       	st	Z, r18
    DDRD &= ~( (1 << 7) | (1 << 6) | (1 << 5) );
     530:	8a e2       	ldi	r24, 0x2A	; 42
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	2a e2       	ldi	r18, 0x2A	; 42
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	f9 01       	movw	r30, r18
     53a:	20 81       	ld	r18, Z
     53c:	2f 71       	andi	r18, 0x1F	; 31
     53e:	fc 01       	movw	r30, r24
     540:	20 83       	st	Z, r18
    
    // enable pull-up
    PORTC |= (1 << 2);
     542:	88 e2       	ldi	r24, 0x28	; 40
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	28 e2       	ldi	r18, 0x28	; 40
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	f9 01       	movw	r30, r18
     54c:	20 81       	ld	r18, Z
     54e:	24 60       	ori	r18, 0x04	; 4
     550:	fc 01       	movw	r30, r24
     552:	20 83       	st	Z, r18
    PORTD |= (1 << 7) | (1 << 6) | (1 << 5);
     554:	8b e2       	ldi	r24, 0x2B	; 43
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	2b e2       	ldi	r18, 0x2B	; 43
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	f9 01       	movw	r30, r18
     55e:	20 81       	ld	r18, Z
     560:	20 6e       	ori	r18, 0xE0	; 224
     562:	fc 01       	movw	r30, r24
     564:	20 83       	st	Z, r18
}
     566:	00 00       	nop
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	08 95       	ret

0000056e <main>:
#define CLK_F_MHZ 16

uint8_t iahsdfoads = 0;
uint16_t afdsfasdf = 0;

int main(void) {
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	cd b7       	in	r28, 0x3d	; 61
     574:	de b7       	in	r29, 0x3e	; 62
     576:	c1 55       	subi	r28, 0x51	; 81
     578:	d1 09       	sbc	r29, r1
     57a:	0f b6       	in	r0, 0x3f	; 63
     57c:	f8 94       	cli
     57e:	de bf       	out	0x3e, r29	; 62
     580:	0f be       	out	0x3f, r0	; 63
     582:	cd bf       	out	0x3d, r28	; 61
	
    cli();
     584:	f8 94       	cli
    Led_init(0);	// Don't set LEDs at PORTD
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	59 df       	rcall	.-334    	; 0x43c <Led_init>
	Taster_init();
     58a:	c5 df       	rcall	.-118    	; 0x516 <Taster_init>
    Timer_init(CLK_F_MHZ); // Init timer with 16MHZ clock
     58c:	80 e1       	ldi	r24, 0x10	; 16
	uart_init_isr();
     58e:	66 d1       	rcall	.+716    	; 0x85c <Timer_init>
    adc_init();
     590:	38 d3       	rcall	.+1648   	; 0xc02 <uart_init_isr>
     592:	a2 dd       	rcall	.-1212   	; 0xd8 <adc_init>
    encoder_init();
     594:	20 df       	rcall	.-448    	; 0x3d6 <encoder_init>
     596:	78 94       	sei
	sei();
     598:	6e d1       	rcall	.+732    	; 0x876 <Timer_getTick>
    
    uint16_t timeVarMain = Timer_getTick();
     59a:	9a 83       	std	Y+2, r25	; 0x02
     59c:	89 83       	std	Y+1, r24	; 0x01
     59e:	22 e3       	ldi	r18, 0x32	; 50
     5a0:	ce 01       	movw	r24, r28
    char data_s;
    char data[50] = {0};
     5a2:	07 96       	adiw	r24, 0x07	; 7
     5a4:	fc 01       	movw	r30, r24
     5a6:	32 2f       	mov	r19, r18
     5a8:	11 92       	st	Z+, r1
     5aa:	3a 95       	dec	r19
     5ac:	e9 f7       	brne	.-6      	; 0x5a8 <main+0x3a>
     5ae:	1c 82       	std	Y+4, r1	; 0x04
    int isafd = 0;
     5b0:	1b 82       	std	Y+3, r1	; 0x03
     5b2:	1e 82       	std	Y+6, r1	; 0x06
	char str[25];
    uint16_t Poti = 0;
     5b4:	1d 82       	std	Y+5, r1	; 0x05
     5b6:	5f d1       	rcall	.+702    	; 0x876 <Timer_getTick>
    
	
    while (1) {
        if((Timer_getTick() - timeVarMain) >= 500){
     5b8:	9c 01       	movw	r18, r24
     5ba:	89 81       	ldd	r24, Y+1	; 0x01
     5bc:	9a 81       	ldd	r25, Y+2	; 0x02
     5be:	a9 01       	movw	r20, r18
     5c0:	48 1b       	sub	r20, r24
     5c2:	59 0b       	sbc	r21, r25
     5c4:	ca 01       	movw	r24, r20
     5c6:	84 3f       	cpi	r24, 0xF4	; 244
     5c8:	91 40       	sbci	r25, 0x01	; 1
     5ca:	a8 f3       	brcs	.-22     	; 0x5b6 <main+0x48>
     5cc:	54 d1       	rcall	.+680    	; 0x876 <Timer_getTick>
            timeVarMain = Timer_getTick();
     5ce:	9a 83       	std	Y+2, r25	; 0x02
     5d0:	89 83       	std	Y+1, r24	; 0x01
     5d2:	8b 81       	ldd	r24, Y+3	; 0x03
            if ( isafd == 0){
     5d4:	9c 81       	ldd	r25, Y+4	; 0x04
     5d6:	89 2b       	or	r24, r25
     5d8:	39 f4       	brne	.+14     	; 0x5e8 <main+0x7a>
                Led1_On();
     5da:	59 df       	rcall	.-334    	; 0x48e <Led1_On>
     5dc:	8b df       	rcall	.-234    	; 0x4f4 <Led2_Off>
                Led2_Off();
     5de:	81 e0       	ldi	r24, 0x01	; 1
                isafd = 1;
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	9c 83       	std	Y+4, r25	; 0x04
     5e4:	8b 83       	std	Y+3, r24	; 0x03
     5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <main+0x82>
     5e8:	63 df       	rcall	.-314    	; 0x4b0 <Led1_Off>
            }else  {
                Led1_Off();
     5ea:	73 df       	rcall	.-282    	; 0x4d2 <Led2_On>
     5ec:	1c 82       	std	Y+4, r1	; 0x04
                Led2_On();
     5ee:	1b 82       	std	Y+3, r1	; 0x03
     5f0:	01 df       	rcall	.-510    	; 0x3f4 <encoder_get>
                isafd = 0;
     5f2:	29 2f       	mov	r18, r25
     5f4:	2f 93       	push	r18
            }
            
            sprintf(str, "Val: %d\n", encoder_get());
     5f6:	8f 93       	push	r24
     5f8:	82 e0       	ldi	r24, 0x02	; 2
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	89 2f       	mov	r24, r25
     5fe:	8f 93       	push	r24
     600:	82 e0       	ldi	r24, 0x02	; 2
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	8f 93       	push	r24
     606:	ce 01       	movw	r24, r28
     608:	c9 96       	adiw	r24, 0x39	; 57
     60a:	29 2f       	mov	r18, r25
     60c:	2f 93       	push	r18
     60e:	8f 93       	push	r24
     610:	f6 d3       	rcall	.+2028   	; 0xdfe <sprintf>
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	ce 01       	movw	r24, r28
     620:	c9 96       	adiw	r24, 0x39	; 57
     622:	0a d3       	rcall	.+1556   	; 0xc38 <uart_send_isr>
            uart_send_isr(str);
     624:	c8 cf       	rjmp	.-112    	; 0x5b6 <main+0x48>

00000626 <Timer_init_withoutStruct>:
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	1f 92       	push	r1
        
        i = 0;*/
        
        //trafficLight(0);
        //playground();
    }
     62c:	cd b7       	in	r28, 0x3d	; 61
    TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
}

void Timer_init_withoutStruct(uint8_t clockFreqMhz) {
     62e:	de b7       	in	r29, 0x3e	; 62
     630:	89 83       	std	Y+1, r24	; 0x01
    // datasheet page 97
    // set mode to clear timer on compare (CTC)
    TCCR0B &= ~(1 << WGM02);
     632:	85 e4       	ldi	r24, 0x45	; 69
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	25 e4       	ldi	r18, 0x45	; 69
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	f9 01       	movw	r30, r18
     63c:	20 81       	ld	r18, Z
     63e:	27 7f       	andi	r18, 0xF7	; 247
     640:	fc 01       	movw	r30, r24
     642:	20 83       	st	Z, r18
    TCCR0A |= (1 << WGM01);
     644:	84 e4       	ldi	r24, 0x44	; 68
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	24 e4       	ldi	r18, 0x44	; 68
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	f9 01       	movw	r30, r18
     64e:	20 81       	ld	r18, Z
     650:	22 60       	ori	r18, 0x02	; 2
     652:	fc 01       	movw	r30, r24
     654:	20 83       	st	Z, r18
    TCCR0A &= ~(1 << WGM00);
     656:	84 e4       	ldi	r24, 0x44	; 68
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	24 e4       	ldi	r18, 0x44	; 68
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	f9 01       	movw	r30, r18
     660:	20 81       	ld	r18, Z
     662:	2e 7f       	andi	r18, 0xFE	; 254
     664:	fc 01       	movw	r30, r24
     666:	20 83       	st	Z, r18
    
    
    switch (clockFreqMhz) {
     668:	89 81       	ldd	r24, Y+1	; 0x01
     66a:	88 2f       	mov	r24, r24
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	40 97       	sbiw	r24, 0x10	; 16
     670:	09 f5       	brne	.+66     	; 0x6b4 <Timer_init_withoutStruct+0x8e>
        case 16:
            // extern osc (16 MHZ)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = COMPA_VAL-1;   // dez 249; range 0 - 249 -> 250 cycles till interrupt
     672:	87 e4       	ldi	r24, 0x47	; 71
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	29 ef       	ldi	r18, 0xF9	; 249
     678:	fc 01       	movw	r30, r24
     67a:	20 83       	st	Z, r18
            
            // set prescaler to 1/64
            TCCR0B &= ~(1 << CS02);
     67c:	85 e4       	ldi	r24, 0x45	; 69
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	25 e4       	ldi	r18, 0x45	; 69
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	f9 01       	movw	r30, r18
     686:	20 81       	ld	r18, Z
     688:	2b 7f       	andi	r18, 0xFB	; 251
     68a:	fc 01       	movw	r30, r24
     68c:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
     68e:	85 e4       	ldi	r24, 0x45	; 69
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	25 e4       	ldi	r18, 0x45	; 69
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	f9 01       	movw	r30, r18
     698:	20 81       	ld	r18, Z
     69a:	22 60       	ori	r18, 0x02	; 2
     69c:	fc 01       	movw	r30, r24
     69e:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS00);
     6a0:	85 e4       	ldi	r24, 0x45	; 69
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	25 e4       	ldi	r18, 0x45	; 69
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	f9 01       	movw	r30, r18
     6aa:	20 81       	ld	r18, Z
     6ac:	21 60       	ori	r18, 0x01	; 1
     6ae:	fc 01       	movw	r30, r24
     6b0:	20 83       	st	Z, r18
            break;
     6b2:	21 c0       	rjmp	.+66     	; 0x6f6 <Timer_init_withoutStruct+0xd0>
            
        default:
            // inter osc (8 MHZ divided by 8 -> 1 MHZ clock)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = COMPA_VAL_8MHZ-1;   // dez 124; range 0 - 124 -> 125 cycles till interrupt
     6b4:	87 e4       	ldi	r24, 0x47	; 71
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	2c e7       	ldi	r18, 0x7C	; 124
     6ba:	fc 01       	movw	r30, r24
     6bc:	20 83       	st	Z, r18
            
            // set prescaler to 1/8
            TCCR0B &= ~(1 << CS02);
     6be:	85 e4       	ldi	r24, 0x45	; 69
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	25 e4       	ldi	r18, 0x45	; 69
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	f9 01       	movw	r30, r18
     6c8:	20 81       	ld	r18, Z
     6ca:	2b 7f       	andi	r18, 0xFB	; 251
     6cc:	fc 01       	movw	r30, r24
     6ce:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
     6d0:	85 e4       	ldi	r24, 0x45	; 69
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	25 e4       	ldi	r18, 0x45	; 69
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	f9 01       	movw	r30, r18
     6da:	20 81       	ld	r18, Z
     6dc:	22 60       	ori	r18, 0x02	; 2
     6de:	fc 01       	movw	r30, r24
     6e0:	20 83       	st	Z, r18
            TCCR0B &= ~(1 << CS00);
     6e2:	85 e4       	ldi	r24, 0x45	; 69
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	25 e4       	ldi	r18, 0x45	; 69
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	f9 01       	movw	r30, r18
     6ec:	20 81       	ld	r18, Z
     6ee:	2e 7f       	andi	r18, 0xFE	; 254
     6f0:	fc 01       	movw	r30, r24
     6f2:	20 83       	st	Z, r18
            break;
     6f4:	00 00       	nop
    }
    
    TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
     6f6:	8e e6       	ldi	r24, 0x6E	; 110
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	2e e6       	ldi	r18, 0x6E	; 110
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	f9 01       	movw	r30, r18
     700:	20 81       	ld	r18, Z
     702:	2b 7f       	andi	r18, 0xFB	; 251
     704:	fc 01       	movw	r30, r24
     706:	20 83       	st	Z, r18
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
     708:	8e e6       	ldi	r24, 0x6E	; 110
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	2e e6       	ldi	r18, 0x6E	; 110
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	f9 01       	movw	r30, r18
     712:	20 81       	ld	r18, Z
     714:	22 60       	ori	r18, 0x02	; 2
     716:	fc 01       	movw	r30, r24
     718:	20 83       	st	Z, r18
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
     71a:	8e e6       	ldi	r24, 0x6E	; 110
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	2e e6       	ldi	r18, 0x6E	; 110
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	f9 01       	movw	r30, r18
     724:	20 81       	ld	r18, Z
     726:	2e 7f       	andi	r18, 0xFE	; 254
     728:	fc 01       	movw	r30, r24
     72a:	20 83       	st	Z, r18
}
     72c:	00 00       	nop
     72e:	0f 90       	pop	r0
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	08 95       	ret

00000736 <Timer2_init>:

void Timer2_init(uint8_t clockFreqMhz, void (*f)(void)) {
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	00 d0       	rcall	.+0      	; 0x73c <Timer2_init+0x6>
     73c:	1f 92       	push	r1
     73e:	cd b7       	in	r28, 0x3d	; 61
     740:	de b7       	in	r29, 0x3e	; 62
     742:	89 83       	std	Y+1, r24	; 0x01
     744:	7b 83       	std	Y+3, r23	; 0x03
     746:	6a 83       	std	Y+2, r22	; 0x02
    timer2_func = f;
     748:	8a 81       	ldd	r24, Y+2	; 0x02
     74a:	9b 81       	ldd	r25, Y+3	; 0x03
     74c:	90 93 3b 05 	sts	0x053B, r25	; 0x80053b <timer2_func+0x1>
     750:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <timer2_func>
    // datasheet page 97
    // set mode to clear timer on compare (CTC)
    TCCR2B &= ~(1 << WGM22);
     754:	81 eb       	ldi	r24, 0xB1	; 177
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	21 eb       	ldi	r18, 0xB1	; 177
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	f9 01       	movw	r30, r18
     75e:	20 81       	ld	r18, Z
     760:	27 7f       	andi	r18, 0xF7	; 247
     762:	fc 01       	movw	r30, r24
     764:	20 83       	st	Z, r18
    TCCR2A |= (1 << WGM21);
     766:	80 eb       	ldi	r24, 0xB0	; 176
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	20 eb       	ldi	r18, 0xB0	; 176
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	f9 01       	movw	r30, r18
     770:	20 81       	ld	r18, Z
     772:	22 60       	ori	r18, 0x02	; 2
     774:	fc 01       	movw	r30, r24
     776:	20 83       	st	Z, r18
    TCCR2A &= ~(1 << WGM20);
     778:	80 eb       	ldi	r24, 0xB0	; 176
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	20 eb       	ldi	r18, 0xB0	; 176
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	f9 01       	movw	r30, r18
     782:	20 81       	ld	r18, Z
     784:	2e 7f       	andi	r18, 0xFE	; 254
     786:	fc 01       	movw	r30, r24
     788:	20 83       	st	Z, r18
    
    
    switch (clockFreqMhz) {
     78a:	89 81       	ldd	r24, Y+1	; 0x01
     78c:	88 2f       	mov	r24, r24
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	40 97       	sbiw	r24, 0x10	; 16
     792:	09 f5       	brne	.+66     	; 0x7d6 <Timer2_init+0xa0>
        case 16:
            // extern osc (16 MHZ)
            
            // set OCR0A-reg (top value of timer)
            OCR2A = T2_COMPA_VAL-1;   // dez 249; range 0 - 249 -> 250 cycles till interrupt
     794:	83 eb       	ldi	r24, 0xB3	; 179
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	23 e6       	ldi	r18, 0x63	; 99
     79a:	fc 01       	movw	r30, r24
     79c:	20 83       	st	Z, r18
            
            // set prescaler to 1/64
            TCCR2B |= (1 << CS22);
     79e:	81 eb       	ldi	r24, 0xB1	; 177
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	21 eb       	ldi	r18, 0xB1	; 177
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	f9 01       	movw	r30, r18
     7a8:	20 81       	ld	r18, Z
     7aa:	24 60       	ori	r18, 0x04	; 4
     7ac:	fc 01       	movw	r30, r24
     7ae:	20 83       	st	Z, r18
            TCCR2B &= ~(1 << CS21);
     7b0:	81 eb       	ldi	r24, 0xB1	; 177
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	21 eb       	ldi	r18, 0xB1	; 177
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	f9 01       	movw	r30, r18
     7ba:	20 81       	ld	r18, Z
     7bc:	2d 7f       	andi	r18, 0xFD	; 253
     7be:	fc 01       	movw	r30, r24
     7c0:	20 83       	st	Z, r18
            TCCR2B &= ~(1 << CS20);
     7c2:	81 eb       	ldi	r24, 0xB1	; 177
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	21 eb       	ldi	r18, 0xB1	; 177
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	f9 01       	movw	r30, r18
     7cc:	20 81       	ld	r18, Z
     7ce:	2e 7f       	andi	r18, 0xFE	; 254
     7d0:	fc 01       	movw	r30, r24
     7d2:	20 83       	st	Z, r18
            break;
     7d4:	21 c0       	rjmp	.+66     	; 0x818 <Timer2_init+0xe2>
            
        default:
            // inter osc (8 MHZ divided by 8 -> 1 MHZ clock)
            
            // set OCR0A-reg (top value of timer)
            OCR2A = T2_COMPA_VAL_8MHZ-1;   // dez 124; range 0 - 124 -> 125 cycles till interrupt
     7d6:	83 eb       	ldi	r24, 0xB3	; 179
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	2c e7       	ldi	r18, 0x7C	; 124
     7dc:	fc 01       	movw	r30, r24
     7de:	20 83       	st	Z, r18
            
            // set prescaler to 1/8
            TCCR2B &= ~(1 << CS22);
     7e0:	81 eb       	ldi	r24, 0xB1	; 177
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	21 eb       	ldi	r18, 0xB1	; 177
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	f9 01       	movw	r30, r18
     7ea:	20 81       	ld	r18, Z
     7ec:	2b 7f       	andi	r18, 0xFB	; 251
     7ee:	fc 01       	movw	r30, r24
     7f0:	20 83       	st	Z, r18
            TCCR2B |= (1 << CS21);
     7f2:	81 eb       	ldi	r24, 0xB1	; 177
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	21 eb       	ldi	r18, 0xB1	; 177
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	f9 01       	movw	r30, r18
     7fc:	20 81       	ld	r18, Z
     7fe:	22 60       	ori	r18, 0x02	; 2
     800:	fc 01       	movw	r30, r24
     802:	20 83       	st	Z, r18
            TCCR2B &= ~(1 << CS20);
     804:	81 eb       	ldi	r24, 0xB1	; 177
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	21 eb       	ldi	r18, 0xB1	; 177
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	f9 01       	movw	r30, r18
     80e:	20 81       	ld	r18, Z
     810:	2e 7f       	andi	r18, 0xFE	; 254
     812:	fc 01       	movw	r30, r24
     814:	20 83       	st	Z, r18
            break;
     816:	00 00       	nop
    }
    
    TIMSK2 &= ~(1 << OCIE2B);   // disable Output Compare Match B Interrupt
     818:	80 e7       	ldi	r24, 0x70	; 112
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	20 e7       	ldi	r18, 0x70	; 112
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	f9 01       	movw	r30, r18
     822:	20 81       	ld	r18, Z
     824:	2b 7f       	andi	r18, 0xFB	; 251
     826:	fc 01       	movw	r30, r24
     828:	20 83       	st	Z, r18
    TIMSK2 |= (1 << OCIE2A);    // enable Output Compare Match A Interrupt
     82a:	80 e7       	ldi	r24, 0x70	; 112
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	20 e7       	ldi	r18, 0x70	; 112
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	f9 01       	movw	r30, r18
     834:	20 81       	ld	r18, Z
     836:	22 60       	ori	r18, 0x02	; 2
     838:	fc 01       	movw	r30, r24
     83a:	20 83       	st	Z, r18
    TIMSK2 &= ~(1 << TOIE2);    // disable timer overflow interrupt
     83c:	80 e7       	ldi	r24, 0x70	; 112
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	20 e7       	ldi	r18, 0x70	; 112
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	f9 01       	movw	r30, r18
     846:	20 81       	ld	r18, Z
     848:	2e 7f       	andi	r18, 0xFE	; 254
     84a:	fc 01       	movw	r30, r24
     84c:	20 83       	st	Z, r18
}
     84e:	00 00       	nop
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	08 95       	ret

0000085c <Timer_init>:

void Timer_init(uint8_t clockFreqMhz) {
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	1f 92       	push	r1
     862:	cd b7       	in	r28, 0x3d	; 61
     864:	de b7       	in	r29, 0x3e	; 62
     866:	89 83       	std	Y+1, r24	; 0x01
    Timer_init_withoutStruct(clockFreqMhz);
     868:	89 81       	ldd	r24, Y+1	; 0x01
     86a:	dd de       	rcall	.-582    	; 0x626 <Timer_init_withoutStruct>
}
     86c:	00 00       	nop
     86e:	0f 90       	pop	r0
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	08 95       	ret

00000876 <Timer_getTick>:

uint16_t Timer_getTick() {
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	00 d0       	rcall	.+0      	; 0x87c <Timer_getTick+0x6>
     87c:	cd b7       	in	r28, 0x3d	; 61
     87e:	de b7       	in	r29, 0x3e	; 62
    // disable Output Compare Match A Interrupt
    TIMSK0 &= ~(1 << OCIE0A);
     880:	8e e6       	ldi	r24, 0x6E	; 110
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	2e e6       	ldi	r18, 0x6E	; 110
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	f9 01       	movw	r30, r18
     88a:	20 81       	ld	r18, Z
     88c:	2d 7f       	andi	r18, 0xFD	; 253
     88e:	fc 01       	movw	r30, r24
     890:	20 83       	st	Z, r18
    
    // store timer_count in a temp int that can't get changed by ISR
    uint16_t temp_timer_count = timer_count;
     892:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <timer_count>
     896:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <timer_count+0x1>
     89a:	9a 83       	std	Y+2, r25	; 0x02
     89c:	89 83       	std	Y+1, r24	; 0x01
    
    // enable Output Compare Match A Interrupt
    TIMSK0 |= (1 << OCIE0A);
     89e:	8e e6       	ldi	r24, 0x6E	; 110
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	2e e6       	ldi	r18, 0x6E	; 110
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	f9 01       	movw	r30, r18
     8a8:	20 81       	ld	r18, Z
     8aa:	22 60       	ori	r18, 0x02	; 2
     8ac:	fc 01       	movw	r30, r24
     8ae:	20 83       	st	Z, r18

    return temp_timer_count;
     8b0:	89 81       	ldd	r24, Y+1	; 0x01
     8b2:	9a 81       	ldd	r25, Y+2	; 0x02
}
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <__vector_16>:
/**
 Timer compare A interrput:
 - increase timer_count
 - if timer_count is at max of uint16, set it to 0
 */
ISR(TIMER0_COMPA_vect){
     8be:	1f 92       	push	r1
     8c0:	0f 92       	push	r0
     8c2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     8c6:	0f 92       	push	r0
     8c8:	11 24       	eor	r1, r1
     8ca:	8f 93       	push	r24
     8cc:	9f 93       	push	r25
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	cd b7       	in	r28, 0x3d	; 61
     8d4:	de b7       	in	r29, 0x3e	; 62
    timer_count++;
     8d6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <timer_count>
     8da:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <timer_count+0x1>
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timer_count+0x1>
     8e4:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timer_count>
}
     8e8:	00 00       	nop
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	9f 91       	pop	r25
     8f0:	8f 91       	pop	r24
     8f2:	0f 90       	pop	r0
     8f4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     8f8:	0f 90       	pop	r0
     8fa:	1f 90       	pop	r1
     8fc:	18 95       	reti

000008fe <__vector_9>:

ISR(TIMER2_COMPA_vect){
     8fe:	1f 92       	push	r1
     900:	0f 92       	push	r0
     902:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     906:	0f 92       	push	r0
     908:	11 24       	eor	r1, r1
     90a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     90e:	0f 92       	push	r0
     910:	2f 93       	push	r18
     912:	3f 93       	push	r19
     914:	4f 93       	push	r20
     916:	5f 93       	push	r21
     918:	6f 93       	push	r22
     91a:	7f 93       	push	r23
     91c:	8f 93       	push	r24
     91e:	9f 93       	push	r25
     920:	af 93       	push	r26
     922:	bf 93       	push	r27
     924:	ef 93       	push	r30
     926:	ff 93       	push	r31
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
    (*timer2_func)();
     930:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <timer2_func>
     934:	90 91 3b 05 	lds	r25, 0x053B	; 0x80053b <timer2_func+0x1>
     938:	fc 01       	movw	r30, r24
     93a:	09 95       	icall
}
     93c:	00 00       	nop
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	ff 91       	pop	r31
     944:	ef 91       	pop	r30
     946:	bf 91       	pop	r27
     948:	af 91       	pop	r26
     94a:	9f 91       	pop	r25
     94c:	8f 91       	pop	r24
     94e:	7f 91       	pop	r23
     950:	6f 91       	pop	r22
     952:	5f 91       	pop	r21
     954:	4f 91       	pop	r20
     956:	3f 91       	pop	r19
     958:	2f 91       	pop	r18
     95a:	0f 90       	pop	r0
     95c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     960:	0f 90       	pop	r0
     962:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     966:	0f 90       	pop	r0
     968:	1f 90       	pop	r1
     96a:	18 95       	reti

0000096c <buff_put>:
        // Return byte
        return pByte;
    }else {
        return 0;
    }
}
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
     970:	00 d0       	rcall	.+0      	; 0x972 <buff_put+0x6>
     972:	1f 92       	push	r1
     974:	cd b7       	in	r28, 0x3d	; 61
     976:	de b7       	in	r29, 0x3e	; 62
     978:	89 83       	std	Y+1, r24	; 0x01
     97a:	7b 83       	std	Y+3, r23	; 0x03
     97c:	6a 83       	std	Y+2, r22	; 0x02
     97e:	81 ec       	ldi	r24, 0xC1	; 193
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	21 ec       	ldi	r18, 0xC1	; 193
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	f9 01       	movw	r30, r18
     988:	20 81       	ld	r18, Z
     98a:	2f 7b       	andi	r18, 0xBF	; 191
     98c:	fc 01       	movw	r30, r24
     98e:	20 83       	st	Z, r18
     990:	81 ec       	ldi	r24, 0xC1	; 193
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	21 ec       	ldi	r18, 0xC1	; 193
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	f9 01       	movw	r30, r18
     99a:	20 81       	ld	r18, Z
     99c:	2f 77       	andi	r18, 0x7F	; 127
     99e:	fc 01       	movw	r30, r24
     9a0:	20 83       	st	Z, r18
     9a2:	8a 81       	ldd	r24, Y+2	; 0x02
     9a4:	9b 81       	ldd	r25, Y+3	; 0x03
     9a6:	8e 5f       	subi	r24, 0xFE	; 254
     9a8:	9d 4f       	sbci	r25, 0xFD	; 253
     9aa:	fc 01       	movw	r30, r24
     9ac:	80 81       	ld	r24, Z
     9ae:	91 81       	ldd	r25, Z+1	; 0x01
     9b0:	9c 01       	movw	r18, r24
     9b2:	2f 5f       	subi	r18, 0xFF	; 255
     9b4:	3f 4f       	sbci	r19, 0xFF	; 255
     9b6:	8a 81       	ldd	r24, Y+2	; 0x02
     9b8:	9b 81       	ldd	r25, Y+3	; 0x03
     9ba:	9e 5f       	subi	r25, 0xFE	; 254
     9bc:	fc 01       	movw	r30, r24
     9be:	80 81       	ld	r24, Z
     9c0:	91 81       	ldd	r25, Z+1	; 0x01
     9c2:	28 17       	cp	r18, r24
     9c4:	39 07       	cpc	r19, r25
     9c6:	91 f0       	breq	.+36     	; 0x9ec <buff_put+0x80>
     9c8:	8a 81       	ldd	r24, Y+2	; 0x02
     9ca:	9b 81       	ldd	r25, Y+3	; 0x03
     9cc:	9e 5f       	subi	r25, 0xFE	; 254
     9ce:	fc 01       	movw	r30, r24
     9d0:	80 81       	ld	r24, Z
     9d2:	91 81       	ldd	r25, Z+1	; 0x01
     9d4:	89 2b       	or	r24, r25
     9d6:	f1 f4       	brne	.+60     	; 0xa14 <buff_put+0xa8>
     9d8:	8a 81       	ldd	r24, Y+2	; 0x02
     9da:	9b 81       	ldd	r25, Y+3	; 0x03
     9dc:	8e 5f       	subi	r24, 0xFE	; 254
     9de:	9d 4f       	sbci	r25, 0xFD	; 253
     9e0:	fc 01       	movw	r30, r24
     9e2:	80 81       	ld	r24, Z
     9e4:	91 81       	ldd	r25, Z+1	; 0x01
     9e6:	8f 3f       	cpi	r24, 0xFF	; 255
     9e8:	91 40       	sbci	r25, 0x01	; 1
     9ea:	a1 f4       	brne	.+40     	; 0xa14 <buff_put+0xa8>
     9ec:	81 ec       	ldi	r24, 0xC1	; 193
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	21 ec       	ldi	r18, 0xC1	; 193
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	f9 01       	movw	r30, r18
     9f6:	20 81       	ld	r18, Z
     9f8:	20 64       	ori	r18, 0x40	; 64
     9fa:	fc 01       	movw	r30, r24
     9fc:	20 83       	st	Z, r18
     9fe:	81 ec       	ldi	r24, 0xC1	; 193
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	21 ec       	ldi	r18, 0xC1	; 193
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	f9 01       	movw	r30, r18
     a08:	20 81       	ld	r18, Z
     a0a:	20 68       	ori	r18, 0x80	; 128
     a0c:	fc 01       	movw	r30, r24
     a0e:	20 83       	st	Z, r18
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	43 c0       	rjmp	.+134    	; 0xa9a <buff_put+0x12e>
     a14:	8a 81       	ldd	r24, Y+2	; 0x02
     a16:	9b 81       	ldd	r25, Y+3	; 0x03
     a18:	8e 5f       	subi	r24, 0xFE	; 254
     a1a:	9d 4f       	sbci	r25, 0xFD	; 253
     a1c:	fc 01       	movw	r30, r24
     a1e:	80 81       	ld	r24, Z
     a20:	91 81       	ldd	r25, Z+1	; 0x01
     a22:	2a 81       	ldd	r18, Y+2	; 0x02
     a24:	3b 81       	ldd	r19, Y+3	; 0x03
     a26:	82 0f       	add	r24, r18
     a28:	93 1f       	adc	r25, r19
     a2a:	29 81       	ldd	r18, Y+1	; 0x01
     a2c:	fc 01       	movw	r30, r24
     a2e:	20 83       	st	Z, r18
     a30:	8a 81       	ldd	r24, Y+2	; 0x02
     a32:	9b 81       	ldd	r25, Y+3	; 0x03
     a34:	8e 5f       	subi	r24, 0xFE	; 254
     a36:	9d 4f       	sbci	r25, 0xFD	; 253
     a38:	fc 01       	movw	r30, r24
     a3a:	80 81       	ld	r24, Z
     a3c:	91 81       	ldd	r25, Z+1	; 0x01
     a3e:	9c 01       	movw	r18, r24
     a40:	2f 5f       	subi	r18, 0xFF	; 255
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	8a 81       	ldd	r24, Y+2	; 0x02
     a46:	9b 81       	ldd	r25, Y+3	; 0x03
     a48:	8e 5f       	subi	r24, 0xFE	; 254
     a4a:	9d 4f       	sbci	r25, 0xFD	; 253
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 83       	std	Z+1, r19	; 0x01
     a50:	20 83       	st	Z, r18
     a52:	8a 81       	ldd	r24, Y+2	; 0x02
     a54:	9b 81       	ldd	r25, Y+3	; 0x03
     a56:	8e 5f       	subi	r24, 0xFE	; 254
     a58:	9d 4f       	sbci	r25, 0xFD	; 253
     a5a:	fc 01       	movw	r30, r24
     a5c:	80 81       	ld	r24, Z
     a5e:	91 81       	ldd	r25, Z+1	; 0x01
     a60:	81 15       	cp	r24, r1
     a62:	92 40       	sbci	r25, 0x02	; 2
     a64:	38 f0       	brcs	.+14     	; 0xa74 <buff_put+0x108>
     a66:	8a 81       	ldd	r24, Y+2	; 0x02
     a68:	9b 81       	ldd	r25, Y+3	; 0x03
     a6a:	8e 5f       	subi	r24, 0xFE	; 254
     a6c:	9d 4f       	sbci	r25, 0xFD	; 253
     a6e:	fc 01       	movw	r30, r24
     a70:	11 82       	std	Z+1, r1	; 0x01
     a72:	10 82       	st	Z, r1
     a74:	81 ec       	ldi	r24, 0xC1	; 193
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	21 ec       	ldi	r18, 0xC1	; 193
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	f9 01       	movw	r30, r18
     a7e:	20 81       	ld	r18, Z
     a80:	20 64       	ori	r18, 0x40	; 64
     a82:	fc 01       	movw	r30, r24
     a84:	20 83       	st	Z, r18
     a86:	81 ec       	ldi	r24, 0xC1	; 193
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	21 ec       	ldi	r18, 0xC1	; 193
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	f9 01       	movw	r30, r18
     a90:	20 81       	ld	r18, Z
     a92:	20 68       	ori	r18, 0x80	; 128
     a94:	fc 01       	movw	r30, r24
     a96:	20 83       	st	Z, r18
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	0f 90       	pop	r0
     a9c:	0f 90       	pop	r0
     a9e:	0f 90       	pop	r0
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	08 95       	ret

00000aa6 <buff_get>:
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	00 d0       	rcall	.+0      	; 0xaac <buff_get+0x6>
     aac:	00 d0       	rcall	.+0      	; 0xaae <buff_get+0x8>
     aae:	cd b7       	in	r28, 0x3d	; 61
     ab0:	de b7       	in	r29, 0x3e	; 62
     ab2:	9a 83       	std	Y+2, r25	; 0x02
     ab4:	89 83       	std	Y+1, r24	; 0x01
     ab6:	7c 83       	std	Y+4, r23	; 0x04
     ab8:	6b 83       	std	Y+3, r22	; 0x03
     aba:	81 ec       	ldi	r24, 0xC1	; 193
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	21 ec       	ldi	r18, 0xC1	; 193
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	f9 01       	movw	r30, r18
     ac4:	20 81       	ld	r18, Z
     ac6:	2f 7b       	andi	r18, 0xBF	; 191
     ac8:	fc 01       	movw	r30, r24
     aca:	20 83       	st	Z, r18
     acc:	81 ec       	ldi	r24, 0xC1	; 193
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	21 ec       	ldi	r18, 0xC1	; 193
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	f9 01       	movw	r30, r18
     ad6:	20 81       	ld	r18, Z
     ad8:	2f 77       	andi	r18, 0x7F	; 127
     ada:	fc 01       	movw	r30, r24
     adc:	20 83       	st	Z, r18
     ade:	8b 81       	ldd	r24, Y+3	; 0x03
     ae0:	9c 81       	ldd	r25, Y+4	; 0x04
     ae2:	9e 5f       	subi	r25, 0xFE	; 254
     ae4:	fc 01       	movw	r30, r24
     ae6:	20 81       	ld	r18, Z
     ae8:	31 81       	ldd	r19, Z+1	; 0x01
     aea:	8b 81       	ldd	r24, Y+3	; 0x03
     aec:	9c 81       	ldd	r25, Y+4	; 0x04
     aee:	8e 5f       	subi	r24, 0xFE	; 254
     af0:	9d 4f       	sbci	r25, 0xFD	; 253
     af2:	fc 01       	movw	r30, r24
     af4:	80 81       	ld	r24, Z
     af6:	91 81       	ldd	r25, Z+1	; 0x01
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	a1 f4       	brne	.+40     	; 0xb26 <buff_get+0x80>
     afe:	81 ec       	ldi	r24, 0xC1	; 193
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	21 ec       	ldi	r18, 0xC1	; 193
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	f9 01       	movw	r30, r18
     b08:	20 81       	ld	r18, Z
     b0a:	20 64       	ori	r18, 0x40	; 64
     b0c:	fc 01       	movw	r30, r24
     b0e:	20 83       	st	Z, r18
     b10:	81 ec       	ldi	r24, 0xC1	; 193
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	21 ec       	ldi	r18, 0xC1	; 193
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	f9 01       	movw	r30, r18
     b1a:	20 81       	ld	r18, Z
     b1c:	20 68       	ori	r18, 0x80	; 128
     b1e:	fc 01       	movw	r30, r24
     b20:	20 83       	st	Z, r18
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	41 c0       	rjmp	.+130    	; 0xba8 <buff_get+0x102>
     b26:	8b 81       	ldd	r24, Y+3	; 0x03
     b28:	9c 81       	ldd	r25, Y+4	; 0x04
     b2a:	9e 5f       	subi	r25, 0xFE	; 254
     b2c:	fc 01       	movw	r30, r24
     b2e:	80 81       	ld	r24, Z
     b30:	91 81       	ldd	r25, Z+1	; 0x01
     b32:	2b 81       	ldd	r18, Y+3	; 0x03
     b34:	3c 81       	ldd	r19, Y+4	; 0x04
     b36:	82 0f       	add	r24, r18
     b38:	93 1f       	adc	r25, r19
     b3a:	fc 01       	movw	r30, r24
     b3c:	20 81       	ld	r18, Z
     b3e:	89 81       	ldd	r24, Y+1	; 0x01
     b40:	9a 81       	ldd	r25, Y+2	; 0x02
     b42:	fc 01       	movw	r30, r24
     b44:	20 83       	st	Z, r18
     b46:	8b 81       	ldd	r24, Y+3	; 0x03
     b48:	9c 81       	ldd	r25, Y+4	; 0x04
     b4a:	9e 5f       	subi	r25, 0xFE	; 254
     b4c:	fc 01       	movw	r30, r24
     b4e:	80 81       	ld	r24, Z
     b50:	91 81       	ldd	r25, Z+1	; 0x01
     b52:	9c 01       	movw	r18, r24
     b54:	2f 5f       	subi	r18, 0xFF	; 255
     b56:	3f 4f       	sbci	r19, 0xFF	; 255
     b58:	8b 81       	ldd	r24, Y+3	; 0x03
     b5a:	9c 81       	ldd	r25, Y+4	; 0x04
     b5c:	9e 5f       	subi	r25, 0xFE	; 254
     b5e:	fc 01       	movw	r30, r24
     b60:	31 83       	std	Z+1, r19	; 0x01
     b62:	20 83       	st	Z, r18
     b64:	8b 81       	ldd	r24, Y+3	; 0x03
     b66:	9c 81       	ldd	r25, Y+4	; 0x04
     b68:	9e 5f       	subi	r25, 0xFE	; 254
     b6a:	fc 01       	movw	r30, r24
     b6c:	80 81       	ld	r24, Z
     b6e:	91 81       	ldd	r25, Z+1	; 0x01
     b70:	81 15       	cp	r24, r1
     b72:	92 40       	sbci	r25, 0x02	; 2
     b74:	30 f0       	brcs	.+12     	; 0xb82 <buff_get+0xdc>
     b76:	8b 81       	ldd	r24, Y+3	; 0x03
     b78:	9c 81       	ldd	r25, Y+4	; 0x04
     b7a:	9e 5f       	subi	r25, 0xFE	; 254
     b7c:	fc 01       	movw	r30, r24
     b7e:	11 82       	std	Z+1, r1	; 0x01
     b80:	10 82       	st	Z, r1
     b82:	81 ec       	ldi	r24, 0xC1	; 193
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	21 ec       	ldi	r18, 0xC1	; 193
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	f9 01       	movw	r30, r18
     b8c:	20 81       	ld	r18, Z
     b8e:	20 64       	ori	r18, 0x40	; 64
     b90:	fc 01       	movw	r30, r24
     b92:	20 83       	st	Z, r18
     b94:	81 ec       	ldi	r24, 0xC1	; 193
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	21 ec       	ldi	r18, 0xC1	; 193
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	f9 01       	movw	r30, r18
     b9e:	20 81       	ld	r18, Z
     ba0:	20 68       	ori	r18, 0x80	; 128
     ba2:	fc 01       	movw	r30, r24
     ba4:	20 83       	st	Z, r18
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	0f 90       	pop	r0
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	08 95       	ret

00000bb6 <uart_init>:
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	00 d0       	rcall	.+0      	; 0xbbc <uart_init+0x6>
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	87 e6       	ldi	r24, 0x67	; 103
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	9a 83       	std	Y+2, r25	; 0x02
     bc6:	89 83       	std	Y+1, r24	; 0x01
     bc8:	85 ec       	ldi	r24, 0xC5	; 197
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	29 81       	ldd	r18, Y+1	; 0x01
     bce:	3a 81       	ldd	r19, Y+2	; 0x02
     bd0:	23 2f       	mov	r18, r19
     bd2:	33 27       	eor	r19, r19
     bd4:	fc 01       	movw	r30, r24
     bd6:	20 83       	st	Z, r18
     bd8:	84 ec       	ldi	r24, 0xC4	; 196
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	29 81       	ldd	r18, Y+1	; 0x01
     bde:	fc 01       	movw	r30, r24
     be0:	20 83       	st	Z, r18
     be2:	81 ec       	ldi	r24, 0xC1	; 193
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	28 e1       	ldi	r18, 0x18	; 24
     be8:	fc 01       	movw	r30, r24
     bea:	20 83       	st	Z, r18
     bec:	82 ec       	ldi	r24, 0xC2	; 194
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	26 e0       	ldi	r18, 0x06	; 6
     bf2:	fc 01       	movw	r30, r24
     bf4:	20 83       	st	Z, r18
     bf6:	00 00       	nop
     bf8:	0f 90       	pop	r0
     bfa:	0f 90       	pop	r0
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	08 95       	ret

00000c02 <uart_init_isr>:
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	d5 df       	rcall	.-86     	; 0xbb6 <uart_init>
     c0c:	81 ec       	ldi	r24, 0xC1	; 193
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	21 ec       	ldi	r18, 0xC1	; 193
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	f9 01       	movw	r30, r18
     c16:	20 81       	ld	r18, Z
     c18:	20 64       	ori	r18, 0x40	; 64
     c1a:	fc 01       	movw	r30, r24
     c1c:	20 83       	st	Z, r18
     c1e:	81 ec       	ldi	r24, 0xC1	; 193
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	21 ec       	ldi	r18, 0xC1	; 193
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	f9 01       	movw	r30, r18
     c28:	20 81       	ld	r18, Z
     c2a:	20 68       	ori	r18, 0x80	; 128
     c2c:	fc 01       	movw	r30, r24
     c2e:	20 83       	st	Z, r18
     c30:	00 00       	nop
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	08 95       	ret

00000c38 <uart_send_isr>:
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	29 97       	sbiw	r28, 0x09	; 9
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	f8 94       	cli
     c46:	de bf       	out	0x3e, r29	; 62
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	cd bf       	out	0x3d, r28	; 61
     c4c:	99 87       	std	Y+9, r25	; 0x09
     c4e:	88 87       	std	Y+8, r24	; 0x08
     c50:	88 85       	ldd	r24, Y+8	; 0x08
     c52:	99 85       	ldd	r25, Y+9	; 0x09
     c54:	cb d0       	rcall	.+406    	; 0xdec <strlen>
     c56:	9e 83       	std	Y+6, r25	; 0x06
     c58:	8d 83       	std	Y+5, r24	; 0x05
     c5a:	1a 82       	std	Y+2, r1	; 0x02
     c5c:	19 82       	std	Y+1, r1	; 0x01
     c5e:	1c 82       	std	Y+4, r1	; 0x04
     c60:	1b 82       	std	Y+3, r1	; 0x03
     c62:	1c c0       	rjmp	.+56     	; 0xc9c <uart_send_isr+0x64>
     c64:	8b 81       	ldd	r24, Y+3	; 0x03
     c66:	9c 81       	ldd	r25, Y+4	; 0x04
     c68:	28 85       	ldd	r18, Y+8	; 0x08
     c6a:	39 85       	ldd	r19, Y+9	; 0x09
     c6c:	82 0f       	add	r24, r18
     c6e:	93 1f       	adc	r25, r19
     c70:	fc 01       	movw	r30, r24
     c72:	80 81       	ld	r24, Z
     c74:	62 e3       	ldi	r22, 0x32	; 50
     c76:	71 e0       	ldi	r23, 0x01	; 1
     c78:	79 de       	rcall	.-782    	; 0x96c <buff_put>
     c7a:	81 30       	cpi	r24, 0x01	; 1
     c7c:	51 f4       	brne	.+20     	; 0xc92 <uart_send_isr+0x5a>
     c7e:	8b 81       	ldd	r24, Y+3	; 0x03
     c80:	9c 81       	ldd	r25, Y+4	; 0x04
     c82:	9c 01       	movw	r18, r24
     c84:	2f 5f       	subi	r18, 0xFF	; 255
     c86:	3f 4f       	sbci	r19, 0xFF	; 255
     c88:	3c 83       	std	Y+4, r19	; 0x04
     c8a:	2b 83       	std	Y+3, r18	; 0x03
     c8c:	9a 83       	std	Y+2, r25	; 0x02
     c8e:	89 83       	std	Y+1, r24	; 0x01
     c90:	0c c0       	rjmp	.+24     	; 0xcaa <uart_send_isr+0x72>
     c92:	8b 81       	ldd	r24, Y+3	; 0x03
     c94:	9c 81       	ldd	r25, Y+4	; 0x04
     c96:	01 96       	adiw	r24, 0x01	; 1
     c98:	9c 83       	std	Y+4, r25	; 0x04
     c9a:	8b 83       	std	Y+3, r24	; 0x03
     c9c:	2b 81       	ldd	r18, Y+3	; 0x03
     c9e:	3c 81       	ldd	r19, Y+4	; 0x04
     ca0:	8d 81       	ldd	r24, Y+5	; 0x05
     ca2:	9e 81       	ldd	r25, Y+6	; 0x06
     ca4:	28 17       	cp	r18, r24
     ca6:	39 07       	cpc	r19, r25
     ca8:	ec f2       	brlt	.-70     	; 0xc64 <uart_send_isr+0x2c>
     caa:	80 ec       	ldi	r24, 0xC0	; 192
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	fc 01       	movw	r30, r24
     cb0:	80 81       	ld	r24, Z
     cb2:	88 2f       	mov	r24, r24
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	80 72       	andi	r24, 0x20	; 32
     cb8:	99 27       	eor	r25, r25
     cba:	89 2b       	or	r24, r25
     cbc:	61 f0       	breq	.+24     	; 0xcd6 <uart_send_isr+0x9e>
     cbe:	ce 01       	movw	r24, r28
     cc0:	07 96       	adiw	r24, 0x07	; 7
     cc2:	62 e3       	ldi	r22, 0x32	; 50
     cc4:	71 e0       	ldi	r23, 0x01	; 1
     cc6:	ef de       	rcall	.-546    	; 0xaa6 <buff_get>
     cc8:	88 23       	and	r24, r24
     cca:	29 f4       	brne	.+10     	; 0xcd6 <uart_send_isr+0x9e>
     ccc:	86 ec       	ldi	r24, 0xC6	; 198
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	2f 81       	ldd	r18, Y+7	; 0x07
     cd2:	fc 01       	movw	r30, r24
     cd4:	20 83       	st	Z, r18
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	9a 81       	ldd	r25, Y+2	; 0x02
     cda:	29 96       	adiw	r28, 0x09	; 9
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	08 95       	ret

00000cec <__vector_22>:

/**
 ISR for USART Transmit Complete flag
 */
ISR(USART0_TX_vect){
     cec:	1f 92       	push	r1
     cee:	0f 92       	push	r0
     cf0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     cf4:	0f 92       	push	r0
     cf6:	11 24       	eor	r1, r1
     cf8:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     cfc:	0f 92       	push	r0
     cfe:	2f 93       	push	r18
     d00:	3f 93       	push	r19
     d02:	4f 93       	push	r20
     d04:	5f 93       	push	r21
     d06:	6f 93       	push	r22
     d08:	7f 93       	push	r23
     d0a:	8f 93       	push	r24
     d0c:	9f 93       	push	r25
     d0e:	af 93       	push	r26
     d10:	bf 93       	push	r27
     d12:	ef 93       	push	r30
     d14:	ff 93       	push	r31
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	1f 92       	push	r1
     d1c:	cd b7       	in	r28, 0x3d	; 61
     d1e:	de b7       	in	r29, 0x3e	; 62
    unsigned char pByte;
    // Pull one byte from buffer and store it in pByte
    if (buff_get(&pByte, &bufferSend) == 0) {
     d20:	62 e3       	ldi	r22, 0x32	; 50
     d22:	71 e0       	ldi	r23, 0x01	; 1
     d24:	ce 01       	movw	r24, r28
     d26:	01 96       	adiw	r24, 0x01	; 1
     d28:	be de       	rcall	.-644    	; 0xaa6 <buff_get>
     d2a:	88 23       	and	r24, r24
     d2c:	29 f4       	brne	.+10     	; 0xd38 <__vector_22+0x4c>
        // Send byte
        UDR0 = pByte;
     d2e:	86 ec       	ldi	r24, 0xC6	; 198
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	29 81       	ldd	r18, Y+1	; 0x01
     d34:	fc 01       	movw	r30, r24
     d36:	20 83       	st	Z, r18
    }
}
     d38:	00 00       	nop
     d3a:	0f 90       	pop	r0
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	ff 91       	pop	r31
     d42:	ef 91       	pop	r30
     d44:	bf 91       	pop	r27
     d46:	af 91       	pop	r26
     d48:	9f 91       	pop	r25
     d4a:	8f 91       	pop	r24
     d4c:	7f 91       	pop	r23
     d4e:	6f 91       	pop	r22
     d50:	5f 91       	pop	r21
     d52:	4f 91       	pop	r20
     d54:	3f 91       	pop	r19
     d56:	2f 91       	pop	r18
     d58:	0f 90       	pop	r0
     d5a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     d5e:	0f 90       	pop	r0
     d60:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d64:	0f 90       	pop	r0
     d66:	1f 90       	pop	r1
     d68:	18 95       	reti

00000d6a <__vector_20>:

ISR(USART0_RX_vect){
     d6a:	1f 92       	push	r1
     d6c:	0f 92       	push	r0
     d6e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d72:	0f 92       	push	r0
     d74:	11 24       	eor	r1, r1
     d76:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     d7a:	0f 92       	push	r0
     d7c:	2f 93       	push	r18
     d7e:	3f 93       	push	r19
     d80:	4f 93       	push	r20
     d82:	5f 93       	push	r21
     d84:	6f 93       	push	r22
     d86:	7f 93       	push	r23
     d88:	8f 93       	push	r24
     d8a:	9f 93       	push	r25
     d8c:	af 93       	push	r26
     d8e:	bf 93       	push	r27
     d90:	ef 93       	push	r30
     d92:	ff 93       	push	r31
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
    // Put received byte to bufferRecv (will read but don't save the value if buffer overflows)
    buff_put(UDR0, &bufferRecv);
     d9c:	86 ec       	ldi	r24, 0xC6	; 198
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	fc 01       	movw	r30, r24
     da2:	80 81       	ld	r24, Z
     da4:	66 e3       	ldi	r22, 0x36	; 54
     da6:	73 e0       	ldi	r23, 0x03	; 3
     da8:	e1 dd       	rcall	.-1086   	; 0x96c <buff_put>
}
     daa:	00 00       	nop
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	ff 91       	pop	r31
     db2:	ef 91       	pop	r30
     db4:	bf 91       	pop	r27
     db6:	af 91       	pop	r26
     db8:	9f 91       	pop	r25
     dba:	8f 91       	pop	r24
     dbc:	7f 91       	pop	r23
     dbe:	6f 91       	pop	r22
     dc0:	5f 91       	pop	r21
     dc2:	4f 91       	pop	r20
     dc4:	3f 91       	pop	r19
     dc6:	2f 91       	pop	r18
     dc8:	0f 90       	pop	r0
     dca:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     dce:	0f 90       	pop	r0
     dd0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     dd4:	0f 90       	pop	r0
     dd6:	1f 90       	pop	r1
     dd8:	18 95       	reti

00000dda <__tablejump2__>:
     dda:	ee 0f       	add	r30, r30
     ddc:	ff 1f       	adc	r31, r31
     dde:	00 24       	eor	r0, r0
     de0:	00 1c       	adc	r0, r0
     de2:	0b be       	out	0x3b, r0	; 59
     de4:	07 90       	elpm	r0, Z+
     de6:	f6 91       	elpm	r31, Z
     de8:	e0 2d       	mov	r30, r0
     dea:	09 94       	ijmp

00000dec <strlen>:
     dec:	fc 01       	movw	r30, r24
     dee:	01 90       	ld	r0, Z+
     df0:	00 20       	and	r0, r0
     df2:	e9 f7       	brne	.-6      	; 0xdee <strlen+0x2>
     df4:	80 95       	com	r24
     df6:	90 95       	com	r25
     df8:	8e 0f       	add	r24, r30
     dfa:	9f 1f       	adc	r25, r31
     dfc:	08 95       	ret

00000dfe <sprintf>:
     dfe:	0f 93       	push	r16
     e00:	1f 93       	push	r17
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	2e 97       	sbiw	r28, 0x0e	; 14
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	f8 94       	cli
     e10:	de bf       	out	0x3e, r29	; 62
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	cd bf       	out	0x3d, r28	; 61
     e16:	0d 89       	ldd	r16, Y+21	; 0x15
     e18:	1e 89       	ldd	r17, Y+22	; 0x16
     e1a:	86 e0       	ldi	r24, 0x06	; 6
     e1c:	8c 83       	std	Y+4, r24	; 0x04
     e1e:	1a 83       	std	Y+2, r17	; 0x02
     e20:	09 83       	std	Y+1, r16	; 0x01
     e22:	8f ef       	ldi	r24, 0xFF	; 255
     e24:	9f e7       	ldi	r25, 0x7F	; 127
     e26:	9e 83       	std	Y+6, r25	; 0x06
     e28:	8d 83       	std	Y+5, r24	; 0x05
     e2a:	ae 01       	movw	r20, r28
     e2c:	47 5e       	subi	r20, 0xE7	; 231
     e2e:	5f 4f       	sbci	r21, 0xFF	; 255
     e30:	6f 89       	ldd	r22, Y+23	; 0x17
     e32:	78 8d       	ldd	r23, Y+24	; 0x18
     e34:	ce 01       	movw	r24, r28
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	10 d0       	rcall	.+32     	; 0xe5a <vfprintf>
     e3a:	ef 81       	ldd	r30, Y+7	; 0x07
     e3c:	f8 85       	ldd	r31, Y+8	; 0x08
     e3e:	e0 0f       	add	r30, r16
     e40:	f1 1f       	adc	r31, r17
     e42:	10 82       	st	Z, r1
     e44:	2e 96       	adiw	r28, 0x0e	; 14
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	f8 94       	cli
     e4a:	de bf       	out	0x3e, r29	; 62
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	cd bf       	out	0x3d, r28	; 61
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	1f 91       	pop	r17
     e56:	0f 91       	pop	r16
     e58:	08 95       	ret

00000e5a <vfprintf>:
     e5a:	2f 92       	push	r2
     e5c:	3f 92       	push	r3
     e5e:	4f 92       	push	r4
     e60:	5f 92       	push	r5
     e62:	6f 92       	push	r6
     e64:	7f 92       	push	r7
     e66:	8f 92       	push	r8
     e68:	9f 92       	push	r9
     e6a:	af 92       	push	r10
     e6c:	bf 92       	push	r11
     e6e:	cf 92       	push	r12
     e70:	df 92       	push	r13
     e72:	ef 92       	push	r14
     e74:	ff 92       	push	r15
     e76:	0f 93       	push	r16
     e78:	1f 93       	push	r17
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	2b 97       	sbiw	r28, 0x0b	; 11
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	6c 01       	movw	r12, r24
     e90:	7b 01       	movw	r14, r22
     e92:	8a 01       	movw	r16, r20
     e94:	fc 01       	movw	r30, r24
     e96:	17 82       	std	Z+7, r1	; 0x07
     e98:	16 82       	std	Z+6, r1	; 0x06
     e9a:	83 81       	ldd	r24, Z+3	; 0x03
     e9c:	81 ff       	sbrs	r24, 1
     e9e:	bf c1       	rjmp	.+894    	; 0x121e <vfprintf+0x3c4>
     ea0:	ce 01       	movw	r24, r28
     ea2:	01 96       	adiw	r24, 0x01	; 1
     ea4:	3c 01       	movw	r6, r24
     ea6:	f6 01       	movw	r30, r12
     ea8:	93 81       	ldd	r25, Z+3	; 0x03
     eaa:	f7 01       	movw	r30, r14
     eac:	93 fd       	sbrc	r25, 3
     eae:	85 91       	lpm	r24, Z+
     eb0:	93 ff       	sbrs	r25, 3
     eb2:	81 91       	ld	r24, Z+
     eb4:	7f 01       	movw	r14, r30
     eb6:	88 23       	and	r24, r24
     eb8:	09 f4       	brne	.+2      	; 0xebc <vfprintf+0x62>
     eba:	ad c1       	rjmp	.+858    	; 0x1216 <vfprintf+0x3bc>
     ebc:	85 32       	cpi	r24, 0x25	; 37
     ebe:	39 f4       	brne	.+14     	; 0xece <vfprintf+0x74>
     ec0:	93 fd       	sbrc	r25, 3
     ec2:	85 91       	lpm	r24, Z+
     ec4:	93 ff       	sbrs	r25, 3
     ec6:	81 91       	ld	r24, Z+
     ec8:	7f 01       	movw	r14, r30
     eca:	85 32       	cpi	r24, 0x25	; 37
     ecc:	21 f4       	brne	.+8      	; 0xed6 <vfprintf+0x7c>
     ece:	b6 01       	movw	r22, r12
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	d6 d1       	rcall	.+940    	; 0x1280 <fputc>
     ed4:	e8 cf       	rjmp	.-48     	; 0xea6 <vfprintf+0x4c>
     ed6:	91 2c       	mov	r9, r1
     ed8:	21 2c       	mov	r2, r1
     eda:	31 2c       	mov	r3, r1
     edc:	ff e1       	ldi	r31, 0x1F	; 31
     ede:	f3 15       	cp	r31, r3
     ee0:	d8 f0       	brcs	.+54     	; 0xf18 <vfprintf+0xbe>
     ee2:	8b 32       	cpi	r24, 0x2B	; 43
     ee4:	79 f0       	breq	.+30     	; 0xf04 <vfprintf+0xaa>
     ee6:	38 f4       	brcc	.+14     	; 0xef6 <vfprintf+0x9c>
     ee8:	80 32       	cpi	r24, 0x20	; 32
     eea:	79 f0       	breq	.+30     	; 0xf0a <vfprintf+0xb0>
     eec:	83 32       	cpi	r24, 0x23	; 35
     eee:	a1 f4       	brne	.+40     	; 0xf18 <vfprintf+0xbe>
     ef0:	23 2d       	mov	r18, r3
     ef2:	20 61       	ori	r18, 0x10	; 16
     ef4:	1d c0       	rjmp	.+58     	; 0xf30 <vfprintf+0xd6>
     ef6:	8d 32       	cpi	r24, 0x2D	; 45
     ef8:	61 f0       	breq	.+24     	; 0xf12 <vfprintf+0xb8>
     efa:	80 33       	cpi	r24, 0x30	; 48
     efc:	69 f4       	brne	.+26     	; 0xf18 <vfprintf+0xbe>
     efe:	23 2d       	mov	r18, r3
     f00:	21 60       	ori	r18, 0x01	; 1
     f02:	16 c0       	rjmp	.+44     	; 0xf30 <vfprintf+0xd6>
     f04:	83 2d       	mov	r24, r3
     f06:	82 60       	ori	r24, 0x02	; 2
     f08:	38 2e       	mov	r3, r24
     f0a:	e3 2d       	mov	r30, r3
     f0c:	e4 60       	ori	r30, 0x04	; 4
     f0e:	3e 2e       	mov	r3, r30
     f10:	2a c0       	rjmp	.+84     	; 0xf66 <vfprintf+0x10c>
     f12:	f3 2d       	mov	r31, r3
     f14:	f8 60       	ori	r31, 0x08	; 8
     f16:	1d c0       	rjmp	.+58     	; 0xf52 <vfprintf+0xf8>
     f18:	37 fc       	sbrc	r3, 7
     f1a:	2d c0       	rjmp	.+90     	; 0xf76 <vfprintf+0x11c>
     f1c:	20 ed       	ldi	r18, 0xD0	; 208
     f1e:	28 0f       	add	r18, r24
     f20:	2a 30       	cpi	r18, 0x0A	; 10
     f22:	40 f0       	brcs	.+16     	; 0xf34 <vfprintf+0xda>
     f24:	8e 32       	cpi	r24, 0x2E	; 46
     f26:	b9 f4       	brne	.+46     	; 0xf56 <vfprintf+0xfc>
     f28:	36 fc       	sbrc	r3, 6
     f2a:	75 c1       	rjmp	.+746    	; 0x1216 <vfprintf+0x3bc>
     f2c:	23 2d       	mov	r18, r3
     f2e:	20 64       	ori	r18, 0x40	; 64
     f30:	32 2e       	mov	r3, r18
     f32:	19 c0       	rjmp	.+50     	; 0xf66 <vfprintf+0x10c>
     f34:	36 fe       	sbrs	r3, 6
     f36:	06 c0       	rjmp	.+12     	; 0xf44 <vfprintf+0xea>
     f38:	8a e0       	ldi	r24, 0x0A	; 10
     f3a:	98 9e       	mul	r9, r24
     f3c:	20 0d       	add	r18, r0
     f3e:	11 24       	eor	r1, r1
     f40:	92 2e       	mov	r9, r18
     f42:	11 c0       	rjmp	.+34     	; 0xf66 <vfprintf+0x10c>
     f44:	ea e0       	ldi	r30, 0x0A	; 10
     f46:	2e 9e       	mul	r2, r30
     f48:	20 0d       	add	r18, r0
     f4a:	11 24       	eor	r1, r1
     f4c:	22 2e       	mov	r2, r18
     f4e:	f3 2d       	mov	r31, r3
     f50:	f0 62       	ori	r31, 0x20	; 32
     f52:	3f 2e       	mov	r3, r31
     f54:	08 c0       	rjmp	.+16     	; 0xf66 <vfprintf+0x10c>
     f56:	8c 36       	cpi	r24, 0x6C	; 108
     f58:	21 f4       	brne	.+8      	; 0xf62 <vfprintf+0x108>
     f5a:	83 2d       	mov	r24, r3
     f5c:	80 68       	ori	r24, 0x80	; 128
     f5e:	38 2e       	mov	r3, r24
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <vfprintf+0x10c>
     f62:	88 36       	cpi	r24, 0x68	; 104
     f64:	41 f4       	brne	.+16     	; 0xf76 <vfprintf+0x11c>
     f66:	f7 01       	movw	r30, r14
     f68:	93 fd       	sbrc	r25, 3
     f6a:	85 91       	lpm	r24, Z+
     f6c:	93 ff       	sbrs	r25, 3
     f6e:	81 91       	ld	r24, Z+
     f70:	7f 01       	movw	r14, r30
     f72:	81 11       	cpse	r24, r1
     f74:	b3 cf       	rjmp	.-154    	; 0xedc <vfprintf+0x82>
     f76:	98 2f       	mov	r25, r24
     f78:	9f 7d       	andi	r25, 0xDF	; 223
     f7a:	95 54       	subi	r25, 0x45	; 69
     f7c:	93 30       	cpi	r25, 0x03	; 3
     f7e:	28 f4       	brcc	.+10     	; 0xf8a <vfprintf+0x130>
     f80:	0c 5f       	subi	r16, 0xFC	; 252
     f82:	1f 4f       	sbci	r17, 0xFF	; 255
     f84:	9f e3       	ldi	r25, 0x3F	; 63
     f86:	99 83       	std	Y+1, r25	; 0x01
     f88:	0d c0       	rjmp	.+26     	; 0xfa4 <vfprintf+0x14a>
     f8a:	83 36       	cpi	r24, 0x63	; 99
     f8c:	31 f0       	breq	.+12     	; 0xf9a <vfprintf+0x140>
     f8e:	83 37       	cpi	r24, 0x73	; 115
     f90:	71 f0       	breq	.+28     	; 0xfae <vfprintf+0x154>
     f92:	83 35       	cpi	r24, 0x53	; 83
     f94:	09 f0       	breq	.+2      	; 0xf98 <vfprintf+0x13e>
     f96:	55 c0       	rjmp	.+170    	; 0x1042 <vfprintf+0x1e8>
     f98:	20 c0       	rjmp	.+64     	; 0xfda <vfprintf+0x180>
     f9a:	f8 01       	movw	r30, r16
     f9c:	80 81       	ld	r24, Z
     f9e:	89 83       	std	Y+1, r24	; 0x01
     fa0:	0e 5f       	subi	r16, 0xFE	; 254
     fa2:	1f 4f       	sbci	r17, 0xFF	; 255
     fa4:	88 24       	eor	r8, r8
     fa6:	83 94       	inc	r8
     fa8:	91 2c       	mov	r9, r1
     faa:	53 01       	movw	r10, r6
     fac:	12 c0       	rjmp	.+36     	; 0xfd2 <vfprintf+0x178>
     fae:	28 01       	movw	r4, r16
     fb0:	f2 e0       	ldi	r31, 0x02	; 2
     fb2:	4f 0e       	add	r4, r31
     fb4:	51 1c       	adc	r5, r1
     fb6:	f8 01       	movw	r30, r16
     fb8:	a0 80       	ld	r10, Z
     fba:	b1 80       	ldd	r11, Z+1	; 0x01
     fbc:	36 fe       	sbrs	r3, 6
     fbe:	03 c0       	rjmp	.+6      	; 0xfc6 <vfprintf+0x16c>
     fc0:	69 2d       	mov	r22, r9
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <vfprintf+0x170>
     fc6:	6f ef       	ldi	r22, 0xFF	; 255
     fc8:	7f ef       	ldi	r23, 0xFF	; 255
     fca:	c5 01       	movw	r24, r10
     fcc:	4e d1       	rcall	.+668    	; 0x126a <strnlen>
     fce:	4c 01       	movw	r8, r24
     fd0:	82 01       	movw	r16, r4
     fd2:	f3 2d       	mov	r31, r3
     fd4:	ff 77       	andi	r31, 0x7F	; 127
     fd6:	3f 2e       	mov	r3, r31
     fd8:	15 c0       	rjmp	.+42     	; 0x1004 <vfprintf+0x1aa>
     fda:	28 01       	movw	r4, r16
     fdc:	22 e0       	ldi	r18, 0x02	; 2
     fde:	42 0e       	add	r4, r18
     fe0:	51 1c       	adc	r5, r1
     fe2:	f8 01       	movw	r30, r16
     fe4:	a0 80       	ld	r10, Z
     fe6:	b1 80       	ldd	r11, Z+1	; 0x01
     fe8:	36 fe       	sbrs	r3, 6
     fea:	03 c0       	rjmp	.+6      	; 0xff2 <vfprintf+0x198>
     fec:	69 2d       	mov	r22, r9
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <vfprintf+0x19c>
     ff2:	6f ef       	ldi	r22, 0xFF	; 255
     ff4:	7f ef       	ldi	r23, 0xFF	; 255
     ff6:	c5 01       	movw	r24, r10
     ff8:	2d d1       	rcall	.+602    	; 0x1254 <strnlen_P>
     ffa:	4c 01       	movw	r8, r24
     ffc:	f3 2d       	mov	r31, r3
     ffe:	f0 68       	ori	r31, 0x80	; 128
    1000:	3f 2e       	mov	r3, r31
    1002:	82 01       	movw	r16, r4
    1004:	33 fc       	sbrc	r3, 3
    1006:	19 c0       	rjmp	.+50     	; 0x103a <vfprintf+0x1e0>
    1008:	82 2d       	mov	r24, r2
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	88 16       	cp	r8, r24
    100e:	99 06       	cpc	r9, r25
    1010:	a0 f4       	brcc	.+40     	; 0x103a <vfprintf+0x1e0>
    1012:	b6 01       	movw	r22, r12
    1014:	80 e2       	ldi	r24, 0x20	; 32
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	33 d1       	rcall	.+614    	; 0x1280 <fputc>
    101a:	2a 94       	dec	r2
    101c:	f5 cf       	rjmp	.-22     	; 0x1008 <vfprintf+0x1ae>
    101e:	f5 01       	movw	r30, r10
    1020:	37 fc       	sbrc	r3, 7
    1022:	85 91       	lpm	r24, Z+
    1024:	37 fe       	sbrs	r3, 7
    1026:	81 91       	ld	r24, Z+
    1028:	5f 01       	movw	r10, r30
    102a:	b6 01       	movw	r22, r12
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	28 d1       	rcall	.+592    	; 0x1280 <fputc>
    1030:	21 10       	cpse	r2, r1
    1032:	2a 94       	dec	r2
    1034:	21 e0       	ldi	r18, 0x01	; 1
    1036:	82 1a       	sub	r8, r18
    1038:	91 08       	sbc	r9, r1
    103a:	81 14       	cp	r8, r1
    103c:	91 04       	cpc	r9, r1
    103e:	79 f7       	brne	.-34     	; 0x101e <vfprintf+0x1c4>
    1040:	e1 c0       	rjmp	.+450    	; 0x1204 <vfprintf+0x3aa>
    1042:	84 36       	cpi	r24, 0x64	; 100
    1044:	11 f0       	breq	.+4      	; 0x104a <vfprintf+0x1f0>
    1046:	89 36       	cpi	r24, 0x69	; 105
    1048:	39 f5       	brne	.+78     	; 0x1098 <vfprintf+0x23e>
    104a:	f8 01       	movw	r30, r16
    104c:	37 fe       	sbrs	r3, 7
    104e:	07 c0       	rjmp	.+14     	; 0x105e <vfprintf+0x204>
    1050:	60 81       	ld	r22, Z
    1052:	71 81       	ldd	r23, Z+1	; 0x01
    1054:	82 81       	ldd	r24, Z+2	; 0x02
    1056:	93 81       	ldd	r25, Z+3	; 0x03
    1058:	0c 5f       	subi	r16, 0xFC	; 252
    105a:	1f 4f       	sbci	r17, 0xFF	; 255
    105c:	08 c0       	rjmp	.+16     	; 0x106e <vfprintf+0x214>
    105e:	60 81       	ld	r22, Z
    1060:	71 81       	ldd	r23, Z+1	; 0x01
    1062:	07 2e       	mov	r0, r23
    1064:	00 0c       	add	r0, r0
    1066:	88 0b       	sbc	r24, r24
    1068:	99 0b       	sbc	r25, r25
    106a:	0e 5f       	subi	r16, 0xFE	; 254
    106c:	1f 4f       	sbci	r17, 0xFF	; 255
    106e:	f3 2d       	mov	r31, r3
    1070:	ff 76       	andi	r31, 0x6F	; 111
    1072:	3f 2e       	mov	r3, r31
    1074:	97 ff       	sbrs	r25, 7
    1076:	09 c0       	rjmp	.+18     	; 0x108a <vfprintf+0x230>
    1078:	90 95       	com	r25
    107a:	80 95       	com	r24
    107c:	70 95       	com	r23
    107e:	61 95       	neg	r22
    1080:	7f 4f       	sbci	r23, 0xFF	; 255
    1082:	8f 4f       	sbci	r24, 0xFF	; 255
    1084:	9f 4f       	sbci	r25, 0xFF	; 255
    1086:	f0 68       	ori	r31, 0x80	; 128
    1088:	3f 2e       	mov	r3, r31
    108a:	2a e0       	ldi	r18, 0x0A	; 10
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	a3 01       	movw	r20, r6
    1090:	33 d1       	rcall	.+614    	; 0x12f8 <__ultoa_invert>
    1092:	88 2e       	mov	r8, r24
    1094:	86 18       	sub	r8, r6
    1096:	44 c0       	rjmp	.+136    	; 0x1120 <vfprintf+0x2c6>
    1098:	85 37       	cpi	r24, 0x75	; 117
    109a:	31 f4       	brne	.+12     	; 0x10a8 <vfprintf+0x24e>
    109c:	23 2d       	mov	r18, r3
    109e:	2f 7e       	andi	r18, 0xEF	; 239
    10a0:	b2 2e       	mov	r11, r18
    10a2:	2a e0       	ldi	r18, 0x0A	; 10
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	25 c0       	rjmp	.+74     	; 0x10f2 <vfprintf+0x298>
    10a8:	93 2d       	mov	r25, r3
    10aa:	99 7f       	andi	r25, 0xF9	; 249
    10ac:	b9 2e       	mov	r11, r25
    10ae:	8f 36       	cpi	r24, 0x6F	; 111
    10b0:	c1 f0       	breq	.+48     	; 0x10e2 <vfprintf+0x288>
    10b2:	18 f4       	brcc	.+6      	; 0x10ba <vfprintf+0x260>
    10b4:	88 35       	cpi	r24, 0x58	; 88
    10b6:	79 f0       	breq	.+30     	; 0x10d6 <vfprintf+0x27c>
    10b8:	ae c0       	rjmp	.+348    	; 0x1216 <vfprintf+0x3bc>
    10ba:	80 37       	cpi	r24, 0x70	; 112
    10bc:	19 f0       	breq	.+6      	; 0x10c4 <vfprintf+0x26a>
    10be:	88 37       	cpi	r24, 0x78	; 120
    10c0:	21 f0       	breq	.+8      	; 0x10ca <vfprintf+0x270>
    10c2:	a9 c0       	rjmp	.+338    	; 0x1216 <vfprintf+0x3bc>
    10c4:	e9 2f       	mov	r30, r25
    10c6:	e0 61       	ori	r30, 0x10	; 16
    10c8:	be 2e       	mov	r11, r30
    10ca:	b4 fe       	sbrs	r11, 4
    10cc:	0d c0       	rjmp	.+26     	; 0x10e8 <vfprintf+0x28e>
    10ce:	fb 2d       	mov	r31, r11
    10d0:	f4 60       	ori	r31, 0x04	; 4
    10d2:	bf 2e       	mov	r11, r31
    10d4:	09 c0       	rjmp	.+18     	; 0x10e8 <vfprintf+0x28e>
    10d6:	34 fe       	sbrs	r3, 4
    10d8:	0a c0       	rjmp	.+20     	; 0x10ee <vfprintf+0x294>
    10da:	29 2f       	mov	r18, r25
    10dc:	26 60       	ori	r18, 0x06	; 6
    10de:	b2 2e       	mov	r11, r18
    10e0:	06 c0       	rjmp	.+12     	; 0x10ee <vfprintf+0x294>
    10e2:	28 e0       	ldi	r18, 0x08	; 8
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	05 c0       	rjmp	.+10     	; 0x10f2 <vfprintf+0x298>
    10e8:	20 e1       	ldi	r18, 0x10	; 16
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <vfprintf+0x298>
    10ee:	20 e1       	ldi	r18, 0x10	; 16
    10f0:	32 e0       	ldi	r19, 0x02	; 2
    10f2:	f8 01       	movw	r30, r16
    10f4:	b7 fe       	sbrs	r11, 7
    10f6:	07 c0       	rjmp	.+14     	; 0x1106 <vfprintf+0x2ac>
    10f8:	60 81       	ld	r22, Z
    10fa:	71 81       	ldd	r23, Z+1	; 0x01
    10fc:	82 81       	ldd	r24, Z+2	; 0x02
    10fe:	93 81       	ldd	r25, Z+3	; 0x03
    1100:	0c 5f       	subi	r16, 0xFC	; 252
    1102:	1f 4f       	sbci	r17, 0xFF	; 255
    1104:	06 c0       	rjmp	.+12     	; 0x1112 <vfprintf+0x2b8>
    1106:	60 81       	ld	r22, Z
    1108:	71 81       	ldd	r23, Z+1	; 0x01
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 5f       	subi	r16, 0xFE	; 254
    1110:	1f 4f       	sbci	r17, 0xFF	; 255
    1112:	a3 01       	movw	r20, r6
    1114:	f1 d0       	rcall	.+482    	; 0x12f8 <__ultoa_invert>
    1116:	88 2e       	mov	r8, r24
    1118:	86 18       	sub	r8, r6
    111a:	fb 2d       	mov	r31, r11
    111c:	ff 77       	andi	r31, 0x7F	; 127
    111e:	3f 2e       	mov	r3, r31
    1120:	36 fe       	sbrs	r3, 6
    1122:	0d c0       	rjmp	.+26     	; 0x113e <vfprintf+0x2e4>
    1124:	23 2d       	mov	r18, r3
    1126:	2e 7f       	andi	r18, 0xFE	; 254
    1128:	a2 2e       	mov	r10, r18
    112a:	89 14       	cp	r8, r9
    112c:	58 f4       	brcc	.+22     	; 0x1144 <vfprintf+0x2ea>
    112e:	34 fe       	sbrs	r3, 4
    1130:	0b c0       	rjmp	.+22     	; 0x1148 <vfprintf+0x2ee>
    1132:	32 fc       	sbrc	r3, 2
    1134:	09 c0       	rjmp	.+18     	; 0x1148 <vfprintf+0x2ee>
    1136:	83 2d       	mov	r24, r3
    1138:	8e 7e       	andi	r24, 0xEE	; 238
    113a:	a8 2e       	mov	r10, r24
    113c:	05 c0       	rjmp	.+10     	; 0x1148 <vfprintf+0x2ee>
    113e:	b8 2c       	mov	r11, r8
    1140:	a3 2c       	mov	r10, r3
    1142:	03 c0       	rjmp	.+6      	; 0x114a <vfprintf+0x2f0>
    1144:	b8 2c       	mov	r11, r8
    1146:	01 c0       	rjmp	.+2      	; 0x114a <vfprintf+0x2f0>
    1148:	b9 2c       	mov	r11, r9
    114a:	a4 fe       	sbrs	r10, 4
    114c:	0f c0       	rjmp	.+30     	; 0x116c <vfprintf+0x312>
    114e:	fe 01       	movw	r30, r28
    1150:	e8 0d       	add	r30, r8
    1152:	f1 1d       	adc	r31, r1
    1154:	80 81       	ld	r24, Z
    1156:	80 33       	cpi	r24, 0x30	; 48
    1158:	21 f4       	brne	.+8      	; 0x1162 <vfprintf+0x308>
    115a:	9a 2d       	mov	r25, r10
    115c:	99 7e       	andi	r25, 0xE9	; 233
    115e:	a9 2e       	mov	r10, r25
    1160:	09 c0       	rjmp	.+18     	; 0x1174 <vfprintf+0x31a>
    1162:	a2 fe       	sbrs	r10, 2
    1164:	06 c0       	rjmp	.+12     	; 0x1172 <vfprintf+0x318>
    1166:	b3 94       	inc	r11
    1168:	b3 94       	inc	r11
    116a:	04 c0       	rjmp	.+8      	; 0x1174 <vfprintf+0x31a>
    116c:	8a 2d       	mov	r24, r10
    116e:	86 78       	andi	r24, 0x86	; 134
    1170:	09 f0       	breq	.+2      	; 0x1174 <vfprintf+0x31a>
    1172:	b3 94       	inc	r11
    1174:	a3 fc       	sbrc	r10, 3
    1176:	10 c0       	rjmp	.+32     	; 0x1198 <vfprintf+0x33e>
    1178:	a0 fe       	sbrs	r10, 0
    117a:	06 c0       	rjmp	.+12     	; 0x1188 <vfprintf+0x32e>
    117c:	b2 14       	cp	r11, r2
    117e:	80 f4       	brcc	.+32     	; 0x11a0 <vfprintf+0x346>
    1180:	28 0c       	add	r2, r8
    1182:	92 2c       	mov	r9, r2
    1184:	9b 18       	sub	r9, r11
    1186:	0d c0       	rjmp	.+26     	; 0x11a2 <vfprintf+0x348>
    1188:	b2 14       	cp	r11, r2
    118a:	58 f4       	brcc	.+22     	; 0x11a2 <vfprintf+0x348>
    118c:	b6 01       	movw	r22, r12
    118e:	80 e2       	ldi	r24, 0x20	; 32
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	76 d0       	rcall	.+236    	; 0x1280 <fputc>
    1194:	b3 94       	inc	r11
    1196:	f8 cf       	rjmp	.-16     	; 0x1188 <vfprintf+0x32e>
    1198:	b2 14       	cp	r11, r2
    119a:	18 f4       	brcc	.+6      	; 0x11a2 <vfprintf+0x348>
    119c:	2b 18       	sub	r2, r11
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <vfprintf+0x34a>
    11a0:	98 2c       	mov	r9, r8
    11a2:	21 2c       	mov	r2, r1
    11a4:	a4 fe       	sbrs	r10, 4
    11a6:	0f c0       	rjmp	.+30     	; 0x11c6 <vfprintf+0x36c>
    11a8:	b6 01       	movw	r22, r12
    11aa:	80 e3       	ldi	r24, 0x30	; 48
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	68 d0       	rcall	.+208    	; 0x1280 <fputc>
    11b0:	a2 fe       	sbrs	r10, 2
    11b2:	16 c0       	rjmp	.+44     	; 0x11e0 <vfprintf+0x386>
    11b4:	a1 fc       	sbrc	r10, 1
    11b6:	03 c0       	rjmp	.+6      	; 0x11be <vfprintf+0x364>
    11b8:	88 e7       	ldi	r24, 0x78	; 120
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <vfprintf+0x368>
    11be:	88 e5       	ldi	r24, 0x58	; 88
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	b6 01       	movw	r22, r12
    11c4:	0c c0       	rjmp	.+24     	; 0x11de <vfprintf+0x384>
    11c6:	8a 2d       	mov	r24, r10
    11c8:	86 78       	andi	r24, 0x86	; 134
    11ca:	51 f0       	breq	.+20     	; 0x11e0 <vfprintf+0x386>
    11cc:	a1 fe       	sbrs	r10, 1
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <vfprintf+0x37a>
    11d0:	8b e2       	ldi	r24, 0x2B	; 43
    11d2:	01 c0       	rjmp	.+2      	; 0x11d6 <vfprintf+0x37c>
    11d4:	80 e2       	ldi	r24, 0x20	; 32
    11d6:	a7 fc       	sbrc	r10, 7
    11d8:	8d e2       	ldi	r24, 0x2D	; 45
    11da:	b6 01       	movw	r22, r12
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	50 d0       	rcall	.+160    	; 0x1280 <fputc>
    11e0:	89 14       	cp	r8, r9
    11e2:	30 f4       	brcc	.+12     	; 0x11f0 <vfprintf+0x396>
    11e4:	b6 01       	movw	r22, r12
    11e6:	80 e3       	ldi	r24, 0x30	; 48
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	4a d0       	rcall	.+148    	; 0x1280 <fputc>
    11ec:	9a 94       	dec	r9
    11ee:	f8 cf       	rjmp	.-16     	; 0x11e0 <vfprintf+0x386>
    11f0:	8a 94       	dec	r8
    11f2:	f3 01       	movw	r30, r6
    11f4:	e8 0d       	add	r30, r8
    11f6:	f1 1d       	adc	r31, r1
    11f8:	80 81       	ld	r24, Z
    11fa:	b6 01       	movw	r22, r12
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	40 d0       	rcall	.+128    	; 0x1280 <fputc>
    1200:	81 10       	cpse	r8, r1
    1202:	f6 cf       	rjmp	.-20     	; 0x11f0 <vfprintf+0x396>
    1204:	22 20       	and	r2, r2
    1206:	09 f4       	brne	.+2      	; 0x120a <vfprintf+0x3b0>
    1208:	4e ce       	rjmp	.-868    	; 0xea6 <vfprintf+0x4c>
    120a:	b6 01       	movw	r22, r12
    120c:	80 e2       	ldi	r24, 0x20	; 32
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	37 d0       	rcall	.+110    	; 0x1280 <fputc>
    1212:	2a 94       	dec	r2
    1214:	f7 cf       	rjmp	.-18     	; 0x1204 <vfprintf+0x3aa>
    1216:	f6 01       	movw	r30, r12
    1218:	86 81       	ldd	r24, Z+6	; 0x06
    121a:	97 81       	ldd	r25, Z+7	; 0x07
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <vfprintf+0x3c8>
    121e:	8f ef       	ldi	r24, 0xFF	; 255
    1220:	9f ef       	ldi	r25, 0xFF	; 255
    1222:	2b 96       	adiw	r28, 0x0b	; 11
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	1f 91       	pop	r17
    1234:	0f 91       	pop	r16
    1236:	ff 90       	pop	r15
    1238:	ef 90       	pop	r14
    123a:	df 90       	pop	r13
    123c:	cf 90       	pop	r12
    123e:	bf 90       	pop	r11
    1240:	af 90       	pop	r10
    1242:	9f 90       	pop	r9
    1244:	8f 90       	pop	r8
    1246:	7f 90       	pop	r7
    1248:	6f 90       	pop	r6
    124a:	5f 90       	pop	r5
    124c:	4f 90       	pop	r4
    124e:	3f 90       	pop	r3
    1250:	2f 90       	pop	r2
    1252:	08 95       	ret

00001254 <strnlen_P>:
    1254:	fc 01       	movw	r30, r24
    1256:	05 90       	lpm	r0, Z+
    1258:	61 50       	subi	r22, 0x01	; 1
    125a:	70 40       	sbci	r23, 0x00	; 0
    125c:	01 10       	cpse	r0, r1
    125e:	d8 f7       	brcc	.-10     	; 0x1256 <strnlen_P+0x2>
    1260:	80 95       	com	r24
    1262:	90 95       	com	r25
    1264:	8e 0f       	add	r24, r30
    1266:	9f 1f       	adc	r25, r31
    1268:	08 95       	ret

0000126a <strnlen>:
    126a:	fc 01       	movw	r30, r24
    126c:	61 50       	subi	r22, 0x01	; 1
    126e:	70 40       	sbci	r23, 0x00	; 0
    1270:	01 90       	ld	r0, Z+
    1272:	01 10       	cpse	r0, r1
    1274:	d8 f7       	brcc	.-10     	; 0x126c <strnlen+0x2>
    1276:	80 95       	com	r24
    1278:	90 95       	com	r25
    127a:	8e 0f       	add	r24, r30
    127c:	9f 1f       	adc	r25, r31
    127e:	08 95       	ret

00001280 <fputc>:
    1280:	0f 93       	push	r16
    1282:	1f 93       	push	r17
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	fb 01       	movw	r30, r22
    128a:	23 81       	ldd	r18, Z+3	; 0x03
    128c:	21 fd       	sbrc	r18, 1
    128e:	03 c0       	rjmp	.+6      	; 0x1296 <fputc+0x16>
    1290:	8f ef       	ldi	r24, 0xFF	; 255
    1292:	9f ef       	ldi	r25, 0xFF	; 255
    1294:	2c c0       	rjmp	.+88     	; 0x12ee <fputc+0x6e>
    1296:	22 ff       	sbrs	r18, 2
    1298:	16 c0       	rjmp	.+44     	; 0x12c6 <fputc+0x46>
    129a:	46 81       	ldd	r20, Z+6	; 0x06
    129c:	57 81       	ldd	r21, Z+7	; 0x07
    129e:	24 81       	ldd	r18, Z+4	; 0x04
    12a0:	35 81       	ldd	r19, Z+5	; 0x05
    12a2:	42 17       	cp	r20, r18
    12a4:	53 07       	cpc	r21, r19
    12a6:	44 f4       	brge	.+16     	; 0x12b8 <fputc+0x38>
    12a8:	a0 81       	ld	r26, Z
    12aa:	b1 81       	ldd	r27, Z+1	; 0x01
    12ac:	9d 01       	movw	r18, r26
    12ae:	2f 5f       	subi	r18, 0xFF	; 255
    12b0:	3f 4f       	sbci	r19, 0xFF	; 255
    12b2:	31 83       	std	Z+1, r19	; 0x01
    12b4:	20 83       	st	Z, r18
    12b6:	8c 93       	st	X, r24
    12b8:	26 81       	ldd	r18, Z+6	; 0x06
    12ba:	37 81       	ldd	r19, Z+7	; 0x07
    12bc:	2f 5f       	subi	r18, 0xFF	; 255
    12be:	3f 4f       	sbci	r19, 0xFF	; 255
    12c0:	37 83       	std	Z+7, r19	; 0x07
    12c2:	26 83       	std	Z+6, r18	; 0x06
    12c4:	14 c0       	rjmp	.+40     	; 0x12ee <fputc+0x6e>
    12c6:	8b 01       	movw	r16, r22
    12c8:	ec 01       	movw	r28, r24
    12ca:	fb 01       	movw	r30, r22
    12cc:	00 84       	ldd	r0, Z+8	; 0x08
    12ce:	f1 85       	ldd	r31, Z+9	; 0x09
    12d0:	e0 2d       	mov	r30, r0
    12d2:	09 95       	icall
    12d4:	89 2b       	or	r24, r25
    12d6:	e1 f6       	brne	.-72     	; 0x1290 <fputc+0x10>
    12d8:	d8 01       	movw	r26, r16
    12da:	16 96       	adiw	r26, 0x06	; 6
    12dc:	8d 91       	ld	r24, X+
    12de:	9c 91       	ld	r25, X
    12e0:	17 97       	sbiw	r26, 0x07	; 7
    12e2:	01 96       	adiw	r24, 0x01	; 1
    12e4:	17 96       	adiw	r26, 0x07	; 7
    12e6:	9c 93       	st	X, r25
    12e8:	8e 93       	st	-X, r24
    12ea:	16 97       	sbiw	r26, 0x06	; 6
    12ec:	ce 01       	movw	r24, r28
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	08 95       	ret

000012f8 <__ultoa_invert>:
    12f8:	fa 01       	movw	r30, r20
    12fa:	aa 27       	eor	r26, r26
    12fc:	28 30       	cpi	r18, 0x08	; 8
    12fe:	51 f1       	breq	.+84     	; 0x1354 <__ultoa_invert+0x5c>
    1300:	20 31       	cpi	r18, 0x10	; 16
    1302:	81 f1       	breq	.+96     	; 0x1364 <__ultoa_invert+0x6c>
    1304:	e8 94       	clt
    1306:	6f 93       	push	r22
    1308:	6e 7f       	andi	r22, 0xFE	; 254
    130a:	6e 5f       	subi	r22, 0xFE	; 254
    130c:	7f 4f       	sbci	r23, 0xFF	; 255
    130e:	8f 4f       	sbci	r24, 0xFF	; 255
    1310:	9f 4f       	sbci	r25, 0xFF	; 255
    1312:	af 4f       	sbci	r26, 0xFF	; 255
    1314:	b1 e0       	ldi	r27, 0x01	; 1
    1316:	3e d0       	rcall	.+124    	; 0x1394 <__ultoa_invert+0x9c>
    1318:	b4 e0       	ldi	r27, 0x04	; 4
    131a:	3c d0       	rcall	.+120    	; 0x1394 <__ultoa_invert+0x9c>
    131c:	67 0f       	add	r22, r23
    131e:	78 1f       	adc	r23, r24
    1320:	89 1f       	adc	r24, r25
    1322:	9a 1f       	adc	r25, r26
    1324:	a1 1d       	adc	r26, r1
    1326:	68 0f       	add	r22, r24
    1328:	79 1f       	adc	r23, r25
    132a:	8a 1f       	adc	r24, r26
    132c:	91 1d       	adc	r25, r1
    132e:	a1 1d       	adc	r26, r1
    1330:	6a 0f       	add	r22, r26
    1332:	71 1d       	adc	r23, r1
    1334:	81 1d       	adc	r24, r1
    1336:	91 1d       	adc	r25, r1
    1338:	a1 1d       	adc	r26, r1
    133a:	20 d0       	rcall	.+64     	; 0x137c <__ultoa_invert+0x84>
    133c:	09 f4       	brne	.+2      	; 0x1340 <__ultoa_invert+0x48>
    133e:	68 94       	set
    1340:	3f 91       	pop	r19
    1342:	2a e0       	ldi	r18, 0x0A	; 10
    1344:	26 9f       	mul	r18, r22
    1346:	11 24       	eor	r1, r1
    1348:	30 19       	sub	r19, r0
    134a:	30 5d       	subi	r19, 0xD0	; 208
    134c:	31 93       	st	Z+, r19
    134e:	de f6       	brtc	.-74     	; 0x1306 <__ultoa_invert+0xe>
    1350:	cf 01       	movw	r24, r30
    1352:	08 95       	ret
    1354:	46 2f       	mov	r20, r22
    1356:	47 70       	andi	r20, 0x07	; 7
    1358:	40 5d       	subi	r20, 0xD0	; 208
    135a:	41 93       	st	Z+, r20
    135c:	b3 e0       	ldi	r27, 0x03	; 3
    135e:	0f d0       	rcall	.+30     	; 0x137e <__ultoa_invert+0x86>
    1360:	c9 f7       	brne	.-14     	; 0x1354 <__ultoa_invert+0x5c>
    1362:	f6 cf       	rjmp	.-20     	; 0x1350 <__ultoa_invert+0x58>
    1364:	46 2f       	mov	r20, r22
    1366:	4f 70       	andi	r20, 0x0F	; 15
    1368:	40 5d       	subi	r20, 0xD0	; 208
    136a:	4a 33       	cpi	r20, 0x3A	; 58
    136c:	18 f0       	brcs	.+6      	; 0x1374 <__ultoa_invert+0x7c>
    136e:	49 5d       	subi	r20, 0xD9	; 217
    1370:	31 fd       	sbrc	r19, 1
    1372:	40 52       	subi	r20, 0x20	; 32
    1374:	41 93       	st	Z+, r20
    1376:	02 d0       	rcall	.+4      	; 0x137c <__ultoa_invert+0x84>
    1378:	a9 f7       	brne	.-22     	; 0x1364 <__ultoa_invert+0x6c>
    137a:	ea cf       	rjmp	.-44     	; 0x1350 <__ultoa_invert+0x58>
    137c:	b4 e0       	ldi	r27, 0x04	; 4
    137e:	a6 95       	lsr	r26
    1380:	97 95       	ror	r25
    1382:	87 95       	ror	r24
    1384:	77 95       	ror	r23
    1386:	67 95       	ror	r22
    1388:	ba 95       	dec	r27
    138a:	c9 f7       	brne	.-14     	; 0x137e <__ultoa_invert+0x86>
    138c:	00 97       	sbiw	r24, 0x00	; 0
    138e:	61 05       	cpc	r22, r1
    1390:	71 05       	cpc	r23, r1
    1392:	08 95       	ret
    1394:	9b 01       	movw	r18, r22
    1396:	ac 01       	movw	r20, r24
    1398:	0a 2e       	mov	r0, r26
    139a:	06 94       	lsr	r0
    139c:	57 95       	ror	r21
    139e:	47 95       	ror	r20
    13a0:	37 95       	ror	r19
    13a2:	27 95       	ror	r18
    13a4:	ba 95       	dec	r27
    13a6:	c9 f7       	brne	.-14     	; 0x139a <__ultoa_invert+0xa2>
    13a8:	62 0f       	add	r22, r18
    13aa:	73 1f       	adc	r23, r19
    13ac:	84 1f       	adc	r24, r20
    13ae:	95 1f       	adc	r25, r21
    13b0:	a0 1d       	adc	r26, r0
    13b2:	08 95       	ret

000013b4 <_exit>:
    13b4:	f8 94       	cli

000013b6 <__stop_program>:
    13b6:	ff cf       	rjmp	.-2      	; 0x13b6 <__stop_program>
