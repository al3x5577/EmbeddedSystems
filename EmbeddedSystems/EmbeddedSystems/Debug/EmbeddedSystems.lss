
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000011f0  00001284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000042d  0080011a  0080011a  0000129e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000129e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013b5  00000000  00000000  00001534  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cac  00000000  00000000  000028e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e5e  00000000  00000000  00003595  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000700  00000000  00000000  000043f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000772  00000000  00000000  00004af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ded  00000000  00000000  00005266  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00006053  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	9b c3       	rjmp	.+1846   	; 0x778 <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	b1 c5       	rjmp	.+2914   	; 0xbb4 <__vector_20>
      52:	00 00       	nop
      54:	66 c5       	rjmp	.+2764   	; 0xb22 <__vector_21>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	35 c1       	rjmp	.+618    	; 0x2cc <__vector_24>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 ef       	ldi	r30, 0xF0	; 240
      a0:	f1 e1       	ldi	r31, 0x11	; 17
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 31       	cpi	r26, 0x1A	; 26
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	25 e0       	ldi	r18, 0x05	; 5
      b4:	aa e1       	ldi	r26, 0x1A	; 26
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a7 34       	cpi	r26, 0x47	; 71
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	3b d2       	rcall	.+1142   	; 0x53a <main>
      c4:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <adc_init>:
uint16_t LM35_Array[8] = {0};
uint8_t index_LM35 = 0;
uint16_t Poti_Array[8] = {0};
uint8_t index_Poti = 0;

void adc_init() {
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	00 d0       	rcall	.+0      	; 0xd0 <adc_init+0x6>
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
    ADMUX = 0;  // AREF, Right Adjust, ADC0
      d4:	8c e7       	ldi	r24, 0x7C	; 124
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	fc 01       	movw	r30, r24
      da:	10 82       	st	Z, r1
    
    ADCSRB = 3; // Set trigger to Timer0 Compare Match
      dc:	8b e7       	ldi	r24, 0x7B	; 123
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	23 e0       	ldi	r18, 0x03	; 3
      e2:	fc 01       	movw	r30, r24
      e4:	20 83       	st	Z, r18
    
    ADCSRA = 7; // Set prescaler to 128
      e6:	8a e7       	ldi	r24, 0x7A	; 122
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	27 e0       	ldi	r18, 0x07	; 7
      ec:	fc 01       	movw	r30, r24
      ee:	20 83       	st	Z, r18
    ADCSRA |= (1 << ADEN) | (1 << ADSC); // Set ADC enable, no Auto trigger | (1 << ADATE)
      f0:	8a e7       	ldi	r24, 0x7A	; 122
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	2a e7       	ldi	r18, 0x7A	; 122
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	f9 01       	movw	r30, r18
      fa:	20 81       	ld	r18, Z
      fc:	20 6c       	ori	r18, 0xC0	; 192
      fe:	fc 01       	movw	r30, r24
     100:	20 83       	st	Z, r18
    
    while (ADCSRA & (1 << ADSC));   // wait till first conversion is finished
     102:	00 00       	nop
     104:	8a e7       	ldi	r24, 0x7A	; 122
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	fc 01       	movw	r30, r24
     10a:	80 81       	ld	r24, Z
     10c:	88 2f       	mov	r24, r24
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	80 74       	andi	r24, 0x40	; 64
     112:	99 27       	eor	r25, r25
     114:	89 2b       	or	r24, r25
     116:	b1 f7       	brne	.-20     	; 0x104 <adc_init+0x3a>
    uint16_t trash = ADC;
     118:	88 e7       	ldi	r24, 0x78	; 120
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	fc 01       	movw	r30, r24
     11e:	80 81       	ld	r24, Z
     120:	91 81       	ldd	r25, Z+1	; 0x01
     122:	9a 83       	std	Y+2, r25	; 0x02
     124:	89 83       	std	Y+1, r24	; 0x01
    
    ADCSRA |= (1 << ADIE) | (1 << ADSC); // ADC interrupt
     126:	8a e7       	ldi	r24, 0x7A	; 122
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	2a e7       	ldi	r18, 0x7A	; 122
     12c:	30 e0       	ldi	r19, 0x00	; 0
     12e:	f9 01       	movw	r30, r18
     130:	20 81       	ld	r18, Z
     132:	28 64       	ori	r18, 0x48	; 72
     134:	fc 01       	movw	r30, r24
     136:	20 83       	st	Z, r18
}
     138:	00 00       	nop
     13a:	0f 90       	pop	r0
     13c:	0f 90       	pop	r0
     13e:	df 91       	pop	r29
     140:	cf 91       	pop	r28
     142:	08 95       	ret

00000144 <adc_get_LM35>:

uint32_t adc_get_LM35() {
     144:	cf 93       	push	r28
     146:	df 93       	push	r29
     148:	00 d0       	rcall	.+0      	; 0x14a <adc_get_LM35+0x6>
     14a:	00 d0       	rcall	.+0      	; 0x14c <adc_get_LM35+0x8>
     14c:	00 d0       	rcall	.+0      	; 0x14e <adc_get_LM35+0xa>
     14e:	cd b7       	in	r28, 0x3d	; 61
     150:	de b7       	in	r29, 0x3e	; 62
	Led7_Off();
     152:	94 d1       	rcall	.+808    	; 0x47c <Led7_Off>
    if (LM35_Array[7] == 0) {
     154:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <LM35_Array+0xe>
     158:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <LM35_Array+0xf>
     15c:	89 2b       	or	r24, r25
     15e:	21 f4       	brne	.+8      	; 0x168 <adc_get_LM35+0x24>
        return 0; // Not enoght data in Array
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	dc 01       	movw	r26, r24
     166:	3c c0       	rjmp	.+120    	; 0x1e0 <adc_get_LM35+0x9c>
    }
    
    uint32_t avg = 0;
     168:	19 82       	std	Y+1, r1	; 0x01
     16a:	1a 82       	std	Y+2, r1	; 0x02
     16c:	1b 82       	std	Y+3, r1	; 0x03
     16e:	1c 82       	std	Y+4, r1	; 0x04
    
    for (int i = 0; i < 8; i++) {
     170:	1e 82       	std	Y+6, r1	; 0x06
     172:	1d 82       	std	Y+5, r1	; 0x05
     174:	1d c0       	rjmp	.+58     	; 0x1b0 <adc_get_LM35+0x6c>
        avg += LM35_Array[i];
     176:	8d 81       	ldd	r24, Y+5	; 0x05
     178:	9e 81       	ldd	r25, Y+6	; 0x06
     17a:	88 0f       	add	r24, r24
     17c:	99 1f       	adc	r25, r25
     17e:	85 5e       	subi	r24, 0xE5	; 229
     180:	9e 4f       	sbci	r25, 0xFE	; 254
     182:	fc 01       	movw	r30, r24
     184:	80 81       	ld	r24, Z
     186:	91 81       	ldd	r25, Z+1	; 0x01
     188:	cc 01       	movw	r24, r24
     18a:	a0 e0       	ldi	r26, 0x00	; 0
     18c:	b0 e0       	ldi	r27, 0x00	; 0
     18e:	29 81       	ldd	r18, Y+1	; 0x01
     190:	3a 81       	ldd	r19, Y+2	; 0x02
     192:	4b 81       	ldd	r20, Y+3	; 0x03
     194:	5c 81       	ldd	r21, Y+4	; 0x04
     196:	82 0f       	add	r24, r18
     198:	93 1f       	adc	r25, r19
     19a:	a4 1f       	adc	r26, r20
     19c:	b5 1f       	adc	r27, r21
     19e:	89 83       	std	Y+1, r24	; 0x01
     1a0:	9a 83       	std	Y+2, r25	; 0x02
     1a2:	ab 83       	std	Y+3, r26	; 0x03
     1a4:	bc 83       	std	Y+4, r27	; 0x04
        return 0; // Not enoght data in Array
    }
    
    uint32_t avg = 0;
    
    for (int i = 0; i < 8; i++) {
     1a6:	8d 81       	ldd	r24, Y+5	; 0x05
     1a8:	9e 81       	ldd	r25, Y+6	; 0x06
     1aa:	01 96       	adiw	r24, 0x01	; 1
     1ac:	9e 83       	std	Y+6, r25	; 0x06
     1ae:	8d 83       	std	Y+5, r24	; 0x05
     1b0:	8d 81       	ldd	r24, Y+5	; 0x05
     1b2:	9e 81       	ldd	r25, Y+6	; 0x06
     1b4:	08 97       	sbiw	r24, 0x08	; 8
     1b6:	fc f2       	brlt	.-66     	; 0x176 <adc_get_LM35+0x32>
        avg += LM35_Array[i];
    }
    avg = avg / 8;
     1b8:	89 81       	ldd	r24, Y+1	; 0x01
     1ba:	9a 81       	ldd	r25, Y+2	; 0x02
     1bc:	ab 81       	ldd	r26, Y+3	; 0x03
     1be:	bc 81       	ldd	r27, Y+4	; 0x04
     1c0:	68 94       	set
     1c2:	12 f8       	bld	r1, 2
     1c4:	b6 95       	lsr	r27
     1c6:	a7 95       	ror	r26
     1c8:	97 95       	ror	r25
     1ca:	87 95       	ror	r24
     1cc:	16 94       	lsr	r1
     1ce:	d1 f7       	brne	.-12     	; 0x1c4 <adc_get_LM35+0x80>
     1d0:	89 83       	std	Y+1, r24	; 0x01
     1d2:	9a 83       	std	Y+2, r25	; 0x02
     1d4:	ab 83       	std	Y+3, r26	; 0x03
     1d6:	bc 83       	std	Y+4, r27	; 0x04
    
    return avg;
     1d8:	89 81       	ldd	r24, Y+1	; 0x01
     1da:	9a 81       	ldd	r25, Y+2	; 0x02
     1dc:	ab 81       	ldd	r26, Y+3	; 0x03
     1de:	bc 81       	ldd	r27, Y+4	; 0x04
}
     1e0:	bc 01       	movw	r22, r24
     1e2:	cd 01       	movw	r24, r26
     1e4:	26 96       	adiw	r28, 0x06	; 6
     1e6:	0f b6       	in	r0, 0x3f	; 63
     1e8:	f8 94       	cli
     1ea:	de bf       	out	0x3e, r29	; 62
     1ec:	0f be       	out	0x3f, r0	; 63
     1ee:	cd bf       	out	0x3d, r28	; 61
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	08 95       	ret

000001f6 <adc_get_Poti>:

uint32_t adc_get_Poti() {
     1f6:	cf 93       	push	r28
     1f8:	df 93       	push	r29
     1fa:	00 d0       	rcall	.+0      	; 0x1fc <adc_get_Poti+0x6>
     1fc:	00 d0       	rcall	.+0      	; 0x1fe <adc_get_Poti+0x8>
     1fe:	00 d0       	rcall	.+0      	; 0x200 <adc_get_Poti+0xa>
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
	Led8_Off();
     204:	5d d1       	rcall	.+698    	; 0x4c0 <Led8_Off>
    if (Poti_Array[7] == 0) {
     206:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <Poti_Array+0xe>
     20a:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <Poti_Array+0xf>
     20e:	89 2b       	or	r24, r25
     210:	21 f4       	brne	.+8      	; 0x21a <adc_get_Poti+0x24>
        return 0; // Not enoght data in Array
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	dc 01       	movw	r26, r24
     218:	4e c0       	rjmp	.+156    	; 0x2b6 <adc_get_Poti+0xc0>
    }
    
    uint32_t avg = 0;
     21a:	19 82       	std	Y+1, r1	; 0x01
     21c:	1a 82       	std	Y+2, r1	; 0x02
     21e:	1b 82       	std	Y+3, r1	; 0x03
     220:	1c 82       	std	Y+4, r1	; 0x04
    
    for (int i = 0; i < 8; i++) {
     222:	1e 82       	std	Y+6, r1	; 0x06
     224:	1d 82       	std	Y+5, r1	; 0x05
     226:	2f c0       	rjmp	.+94     	; 0x286 <adc_get_Poti+0x90>
        ADCSRA &= (1 << ADIE);
     228:	8a e7       	ldi	r24, 0x7A	; 122
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	2a e7       	ldi	r18, 0x7A	; 122
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	f9 01       	movw	r30, r18
     232:	20 81       	ld	r18, Z
     234:	28 70       	andi	r18, 0x08	; 8
     236:	fc 01       	movw	r30, r24
     238:	20 83       	st	Z, r18
        avg += Poti_Array[i];
     23a:	8d 81       	ldd	r24, Y+5	; 0x05
     23c:	9e 81       	ldd	r25, Y+6	; 0x06
     23e:	88 0f       	add	r24, r24
     240:	99 1f       	adc	r25, r25
     242:	84 5d       	subi	r24, 0xD4	; 212
     244:	9e 4f       	sbci	r25, 0xFE	; 254
     246:	fc 01       	movw	r30, r24
     248:	80 81       	ld	r24, Z
     24a:	91 81       	ldd	r25, Z+1	; 0x01
     24c:	cc 01       	movw	r24, r24
     24e:	a0 e0       	ldi	r26, 0x00	; 0
     250:	b0 e0       	ldi	r27, 0x00	; 0
     252:	29 81       	ldd	r18, Y+1	; 0x01
     254:	3a 81       	ldd	r19, Y+2	; 0x02
     256:	4b 81       	ldd	r20, Y+3	; 0x03
     258:	5c 81       	ldd	r21, Y+4	; 0x04
     25a:	82 0f       	add	r24, r18
     25c:	93 1f       	adc	r25, r19
     25e:	a4 1f       	adc	r26, r20
     260:	b5 1f       	adc	r27, r21
     262:	89 83       	std	Y+1, r24	; 0x01
     264:	9a 83       	std	Y+2, r25	; 0x02
     266:	ab 83       	std	Y+3, r26	; 0x03
     268:	bc 83       	std	Y+4, r27	; 0x04
        ADCSRA |= (1 << ADIE);
     26a:	8a e7       	ldi	r24, 0x7A	; 122
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	2a e7       	ldi	r18, 0x7A	; 122
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	f9 01       	movw	r30, r18
     274:	20 81       	ld	r18, Z
     276:	28 60       	ori	r18, 0x08	; 8
     278:	fc 01       	movw	r30, r24
     27a:	20 83       	st	Z, r18
        return 0; // Not enoght data in Array
    }
    
    uint32_t avg = 0;
    
    for (int i = 0; i < 8; i++) {
     27c:	8d 81       	ldd	r24, Y+5	; 0x05
     27e:	9e 81       	ldd	r25, Y+6	; 0x06
     280:	01 96       	adiw	r24, 0x01	; 1
     282:	9e 83       	std	Y+6, r25	; 0x06
     284:	8d 83       	std	Y+5, r24	; 0x05
     286:	8d 81       	ldd	r24, Y+5	; 0x05
     288:	9e 81       	ldd	r25, Y+6	; 0x06
     28a:	08 97       	sbiw	r24, 0x08	; 8
     28c:	6c f2       	brlt	.-102    	; 0x228 <adc_get_Poti+0x32>
        ADCSRA &= (1 << ADIE);
        avg += Poti_Array[i];
        ADCSRA |= (1 << ADIE);
    }
    avg = avg / 8;
     28e:	89 81       	ldd	r24, Y+1	; 0x01
     290:	9a 81       	ldd	r25, Y+2	; 0x02
     292:	ab 81       	ldd	r26, Y+3	; 0x03
     294:	bc 81       	ldd	r27, Y+4	; 0x04
     296:	68 94       	set
     298:	12 f8       	bld	r1, 2
     29a:	b6 95       	lsr	r27
     29c:	a7 95       	ror	r26
     29e:	97 95       	ror	r25
     2a0:	87 95       	ror	r24
     2a2:	16 94       	lsr	r1
     2a4:	d1 f7       	brne	.-12     	; 0x29a <adc_get_Poti+0xa4>
     2a6:	89 83       	std	Y+1, r24	; 0x01
     2a8:	9a 83       	std	Y+2, r25	; 0x02
     2aa:	ab 83       	std	Y+3, r26	; 0x03
     2ac:	bc 83       	std	Y+4, r27	; 0x04
    
    return avg;
     2ae:	89 81       	ldd	r24, Y+1	; 0x01
     2b0:	9a 81       	ldd	r25, Y+2	; 0x02
     2b2:	ab 81       	ldd	r26, Y+3	; 0x03
     2b4:	bc 81       	ldd	r27, Y+4	; 0x04
}
     2b6:	bc 01       	movw	r22, r24
     2b8:	cd 01       	movw	r24, r26
     2ba:	26 96       	adiw	r28, 0x06	; 6
     2bc:	0f b6       	in	r0, 0x3f	; 63
     2be:	f8 94       	cli
     2c0:	de bf       	out	0x3e, r29	; 62
     2c2:	0f be       	out	0x3f, r0	; 63
     2c4:	cd bf       	out	0x3d, r28	; 61
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	08 95       	ret

000002cc <__vector_24>:

ISR(ADC_vect){
     2cc:	1f 92       	push	r1
     2ce:	0f 92       	push	r0
     2d0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     2d4:	0f 92       	push	r0
     2d6:	11 24       	eor	r1, r1
     2d8:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     2dc:	0f 92       	push	r0
     2de:	2f 93       	push	r18
     2e0:	3f 93       	push	r19
     2e2:	4f 93       	push	r20
     2e4:	5f 93       	push	r21
     2e6:	6f 93       	push	r22
     2e8:	7f 93       	push	r23
     2ea:	8f 93       	push	r24
     2ec:	9f 93       	push	r25
     2ee:	af 93       	push	r26
     2f0:	bf 93       	push	r27
     2f2:	ef 93       	push	r30
     2f4:	ff 93       	push	r31
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	00 d0       	rcall	.+0      	; 0x2fc <__vector_24+0x30>
     2fc:	cd b7       	in	r28, 0x3d	; 61
     2fe:	de b7       	in	r29, 0x3e	; 62
    volatile uint16_t res = ADC;
     300:	88 e7       	ldi	r24, 0x78	; 120
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	fc 01       	movw	r30, r24
     306:	80 81       	ld	r24, Z
     308:	91 81       	ldd	r25, Z+1	; 0x01
     30a:	9a 83       	std	Y+2, r25	; 0x02
     30c:	89 83       	std	Y+1, r24	; 0x01
    switch (pin) {
     30e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
     312:	88 2f       	mov	r24, r24
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	00 97       	sbiw	r24, 0x00	; 0
     318:	19 f0       	breq	.+6      	; 0x320 <__vector_24+0x54>
     31a:	01 97       	sbiw	r24, 0x01	; 1
     31c:	51 f1       	breq	.+84     	; 0x372 <__vector_24+0xa6>
            }
            pin = Temperatur;
            break;
            
        default:
            break;
     31e:	51 c0       	rjmp	.+162    	; 0x3c2 <__vector_24+0xf6>

ISR(ADC_vect){
    volatile uint16_t res = ADC;
    switch (pin) {
        case Temperatur:
			Led7_On();
     320:	9c d0       	rcall	.+312    	; 0x45a <Led7_On>
            if (index_LM35 >= 8 || index_LM35 == 0) {
     322:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <index_LM35>
     326:	88 30       	cpi	r24, 0x08	; 8
     328:	20 f4       	brcc	.+8      	; 0x332 <__vector_24+0x66>
     32a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <index_LM35>
     32e:	88 23       	and	r24, r24
     330:	51 f4       	brne	.+20     	; 0x346 <__vector_24+0x7a>
                LM35_Array[0] = res;
     332:	89 81       	ldd	r24, Y+1	; 0x01
     334:	9a 81       	ldd	r25, Y+2	; 0x02
     336:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <LM35_Array+0x1>
     33a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <LM35_Array>
                index_LM35 = 1;
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <index_LM35>
     344:	12 c0       	rjmp	.+36     	; 0x36a <__vector_24+0x9e>
            }else {
                LM35_Array[index_LM35] = res;
     346:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <index_LM35>
     34a:	88 2f       	mov	r24, r24
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	29 81       	ldd	r18, Y+1	; 0x01
     350:	3a 81       	ldd	r19, Y+2	; 0x02
     352:	88 0f       	add	r24, r24
     354:	99 1f       	adc	r25, r25
     356:	85 5e       	subi	r24, 0xE5	; 229
     358:	9e 4f       	sbci	r25, 0xFE	; 254
     35a:	fc 01       	movw	r30, r24
     35c:	31 83       	std	Z+1, r19	; 0x01
     35e:	20 83       	st	Z, r18
                index_LM35++;
     360:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <index_LM35>
     364:	8f 5f       	subi	r24, 0xFF	; 255
     366:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <index_LM35>
            }
            pin = Poti;
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
            break;
            
        case Poti:
			Led8_On();
     370:	28 c0       	rjmp	.+80     	; 0x3c2 <__vector_24+0xf6>
     372:	95 d0       	rcall	.+298    	; 0x49e <Led8_On>
            if (index_Poti >= 8 || index_Poti == 0) {
     374:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <index_Poti>
     378:	88 30       	cpi	r24, 0x08	; 8
     37a:	20 f4       	brcc	.+8      	; 0x384 <__vector_24+0xb8>
     37c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <index_Poti>
     380:	88 23       	and	r24, r24
     382:	51 f4       	brne	.+20     	; 0x398 <__vector_24+0xcc>
                Poti_Array[0] = res;
     384:	89 81       	ldd	r24, Y+1	; 0x01
     386:	9a 81       	ldd	r25, Y+2	; 0x02
     388:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <Poti_Array+0x1>
     38c:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <Poti_Array>
                index_Poti = 1;
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <index_Poti>
     396:	12 c0       	rjmp	.+36     	; 0x3bc <__vector_24+0xf0>
            }else {
                Poti_Array[index_Poti] = res;
     398:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <index_Poti>
     39c:	88 2f       	mov	r24, r24
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	29 81       	ldd	r18, Y+1	; 0x01
     3a2:	3a 81       	ldd	r19, Y+2	; 0x02
     3a4:	88 0f       	add	r24, r24
     3a6:	99 1f       	adc	r25, r25
     3a8:	84 5d       	subi	r24, 0xD4	; 212
     3aa:	9e 4f       	sbci	r25, 0xFE	; 254
     3ac:	fc 01       	movw	r30, r24
     3ae:	31 83       	std	Z+1, r19	; 0x01
     3b0:	20 83       	st	Z, r18
                index_Poti++;
     3b2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <index_Poti>
     3b6:	8f 5f       	subi	r24, 0xFF	; 255
     3b8:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <index_Poti>
            }
            pin = Temperatur;
     3bc:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
            break;
     3c0:	00 00       	nop
            
        default:
            break;
    }
    
    ADCSRA |= (1 << ADSC);
     3c2:	8a e7       	ldi	r24, 0x7A	; 122
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	2a e7       	ldi	r18, 0x7A	; 122
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	f9 01       	movw	r30, r18
     3cc:	20 81       	ld	r18, Z
     3ce:	20 64       	ori	r18, 0x40	; 64
     3d0:	fc 01       	movw	r30, r24
     3d2:	20 83       	st	Z, r18
}
     3d4:	00 00       	nop
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	ff 91       	pop	r31
     3e0:	ef 91       	pop	r30
     3e2:	bf 91       	pop	r27
     3e4:	af 91       	pop	r26
     3e6:	9f 91       	pop	r25
     3e8:	8f 91       	pop	r24
     3ea:	7f 91       	pop	r23
     3ec:	6f 91       	pop	r22
     3ee:	5f 91       	pop	r21
     3f0:	4f 91       	pop	r20
     3f2:	3f 91       	pop	r19
     3f4:	2f 91       	pop	r18
     3f6:	0f 90       	pop	r0
     3f8:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     3fc:	0f 90       	pop	r0
     3fe:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     402:	0f 90       	pop	r0
     404:	1f 90       	pop	r1
     406:	18 95       	reti

00000408 <Led_init>:
void Led6_On(void) {
    PORTB |= (1 << 2);
}
void Led6_Off(void) {
    PORTB &= ~(1 << 2);
}
     408:	cf 93       	push	r28
     40a:	df 93       	push	r29
     40c:	1f 92       	push	r1
     40e:	cd b7       	in	r28, 0x3d	; 61
     410:	de b7       	in	r29, 0x3e	; 62
     412:	89 83       	std	Y+1, r24	; 0x01
     414:	84 e2       	ldi	r24, 0x24	; 36
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	2f ef       	ldi	r18, 0xFF	; 255
     41a:	fc 01       	movw	r30, r24
     41c:	20 83       	st	Z, r18
     41e:	85 e2       	ldi	r24, 0x25	; 37
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	fc 01       	movw	r30, r24
     424:	10 82       	st	Z, r1
     426:	89 81       	ldd	r24, Y+1	; 0x01
     428:	88 23       	and	r24, r24
     42a:	91 f0       	breq	.+36     	; 0x450 <Led_init+0x48>
     42c:	8a e2       	ldi	r24, 0x2A	; 42
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	2a e2       	ldi	r18, 0x2A	; 42
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	f9 01       	movw	r30, r18
     436:	20 81       	ld	r18, Z
     438:	2f 61       	ori	r18, 0x1F	; 31
     43a:	fc 01       	movw	r30, r24
     43c:	20 83       	st	Z, r18
     43e:	8b e2       	ldi	r24, 0x2B	; 43
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	2b e2       	ldi	r18, 0x2B	; 43
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	f9 01       	movw	r30, r18
     448:	20 81       	ld	r18, Z
     44a:	20 7e       	andi	r18, 0xE0	; 224
     44c:	fc 01       	movw	r30, r24
     44e:	20 83       	st	Z, r18
     450:	00 00       	nop
     452:	0f 90       	pop	r0
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	08 95       	ret

0000045a <Led7_On>:

/**
led7 - ioB1
*/
void Led7_On(void) {
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	cd b7       	in	r28, 0x3d	; 61
     460:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 1);
     462:	85 e2       	ldi	r24, 0x25	; 37
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	25 e2       	ldi	r18, 0x25	; 37
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	f9 01       	movw	r30, r18
     46c:	20 81       	ld	r18, Z
     46e:	22 60       	ori	r18, 0x02	; 2
     470:	fc 01       	movw	r30, r24
     472:	20 83       	st	Z, r18
}
     474:	00 00       	nop
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	08 95       	ret

0000047c <Led7_Off>:
void Led7_Off(void) {
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 1);
     484:	85 e2       	ldi	r24, 0x25	; 37
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	25 e2       	ldi	r18, 0x25	; 37
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	f9 01       	movw	r30, r18
     48e:	20 81       	ld	r18, Z
     490:	2d 7f       	andi	r18, 0xFD	; 253
     492:	fc 01       	movw	r30, r24
     494:	20 83       	st	Z, r18
}
     496:	00 00       	nop
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	08 95       	ret

0000049e <Led8_On>:

/**
led8 - ioB0
*/
void Led8_On(void) {
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 0);
     4a6:	85 e2       	ldi	r24, 0x25	; 37
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	25 e2       	ldi	r18, 0x25	; 37
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	f9 01       	movw	r30, r18
     4b0:	20 81       	ld	r18, Z
     4b2:	21 60       	ori	r18, 0x01	; 1
     4b4:	fc 01       	movw	r30, r24
     4b6:	20 83       	st	Z, r18
}
     4b8:	00 00       	nop
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	08 95       	ret

000004c0 <Led8_Off>:
void Led8_Off(void) {
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 0);
     4c8:	85 e2       	ldi	r24, 0x25	; 37
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	25 e2       	ldi	r18, 0x25	; 37
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	f9 01       	movw	r30, r18
     4d2:	20 81       	ld	r18, Z
     4d4:	2e 7f       	andi	r18, 0xFE	; 254
     4d6:	fc 01       	movw	r30, r24
     4d8:	20 83       	st	Z, r18
}
     4da:	00 00       	nop
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	08 95       	ret

000004e2 <Taster_init>:
 ---------------------
 - DDR Reg has to be set to 0
 - PORT Reg has to be set to 1
 -> Pin is input with pull-up
 */
void Taster_init() {
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
    
    // set to inputs
    DDRC &= ~(1 << 2);
     4ea:	87 e2       	ldi	r24, 0x27	; 39
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	27 e2       	ldi	r18, 0x27	; 39
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	f9 01       	movw	r30, r18
     4f4:	20 81       	ld	r18, Z
     4f6:	2b 7f       	andi	r18, 0xFB	; 251
     4f8:	fc 01       	movw	r30, r24
     4fa:	20 83       	st	Z, r18
    DDRD &= ~( (1 << 7) | (1 << 6) | (1 << 5) );
     4fc:	8a e2       	ldi	r24, 0x2A	; 42
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	2a e2       	ldi	r18, 0x2A	; 42
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	f9 01       	movw	r30, r18
     506:	20 81       	ld	r18, Z
     508:	2f 71       	andi	r18, 0x1F	; 31
     50a:	fc 01       	movw	r30, r24
     50c:	20 83       	st	Z, r18
    
    // enable pull-up
    PORTC |= (1 << 2);
     50e:	88 e2       	ldi	r24, 0x28	; 40
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	28 e2       	ldi	r18, 0x28	; 40
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	f9 01       	movw	r30, r18
     518:	20 81       	ld	r18, Z
     51a:	24 60       	ori	r18, 0x04	; 4
     51c:	fc 01       	movw	r30, r24
     51e:	20 83       	st	Z, r18
    PORTD |= (1 << 7) | (1 << 6) | (1 << 5);
     520:	8b e2       	ldi	r24, 0x2B	; 43
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	2b e2       	ldi	r18, 0x2B	; 43
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	f9 01       	movw	r30, r18
     52a:	20 81       	ld	r18, Z
     52c:	20 6e       	ori	r18, 0xE0	; 224
     52e:	fc 01       	movw	r30, r24
     530:	20 83       	st	Z, r18
}
     532:	00 00       	nop
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	08 95       	ret

0000053a <main>:
#include <avr/interrupt.h>
#include "adc/adc.h"

#define CLK_F_MHZ 16

int main(void) {
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	cd b7       	in	r28, 0x3d	; 61
     540:	de b7       	in	r29, 0x3e	; 62
     542:	c7 57       	subi	r28, 0x77	; 119
     544:	d1 09       	sbc	r29, r1
     546:	0f b6       	in	r0, 0x3f	; 63
     548:	f8 94       	cli
     54a:	de bf       	out	0x3e, r29	; 62
     54c:	0f be       	out	0x3f, r0	; 63
     54e:	cd bf       	out	0x3d, r28	; 61
	
    cli();
     550:	f8 94       	cli
    Led_init(0);	// Don't set LEDs at PORTD
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	59 df       	rcall	.-334    	; 0x408 <Led_init>
	Taster_init();
     556:	c5 df       	rcall	.-118    	; 0x4e2 <Taster_init>
    Timer_init(CLK_F_MHZ); // Init timer with 16MHZ clock
     558:	80 e1       	ldi	r24, 0x10	; 16
	uart_init_isr();
     55a:	63 d0       	rcall	.+198    	; 0x622 <Timer_init>
    adc_init();
     55c:	78 d2       	rcall	.+1264   	; 0xa4e <uart_init_isr>
     55e:	b5 dd       	rcall	.-1174   	; 0xca <adc_init>
	sei();
     560:	78 94       	sei
    
    uint16_t timeVarMain = Timer_getTick();
     562:	f6 d0       	rcall	.+492    	; 0x750 <Timer_getTick>
     564:	9a 83       	std	Y+2, r25	; 0x02
     566:	89 83       	std	Y+1, r24	; 0x01
     568:	22 e3       	ldi	r18, 0x32	; 50
    char data_s;
    char data[50] = {0};
     56a:	ce 01       	movw	r24, r28
     56c:	05 96       	adiw	r24, 0x05	; 5
     56e:	fc 01       	movw	r30, r24
     570:	32 2f       	mov	r19, r18
     572:	11 92       	st	Z+, r1
     574:	3a 95       	dec	r19
     576:	e9 f7       	brne	.-6      	; 0x572 <main+0x38>
    int i = 0;
     578:	1c 82       	std	Y+4, r1	; 0x04
     57a:	1b 82       	std	Y+3, r1	; 0x03
	char str[65];
	
    while (1) {
        
        if((Timer_getTick() - timeVarMain) >= 2000){
     57c:	e9 d0       	rcall	.+466    	; 0x750 <Timer_getTick>
     57e:	9c 01       	movw	r18, r24
     580:	89 81       	ldd	r24, Y+1	; 0x01
     582:	9a 81       	ldd	r25, Y+2	; 0x02
     584:	a9 01       	movw	r20, r18
     586:	48 1b       	sub	r20, r24
     588:	59 0b       	sbc	r21, r25
     58a:	ca 01       	movw	r24, r20
     58c:	80 3d       	cpi	r24, 0xD0	; 208
     58e:	97 40       	sbci	r25, 0x07	; 7
            timeVarMain = Timer_getTick();
     590:	a8 f3       	brcs	.-22     	; 0x57c <main+0x42>
     592:	de d0       	rcall	.+444    	; 0x750 <Timer_getTick>
     594:	9a 83       	std	Y+2, r25	; 0x02
     596:	89 83       	std	Y+1, r24	; 0x01
            
            
            
            sprintf(str, "Temperatur: %i\n", adc_get_LM35());
     598:	d5 dd       	rcall	.-1110   	; 0x144 <adc_get_LM35>
     59a:	dc 01       	movw	r26, r24
     59c:	cb 01       	movw	r24, r22
     59e:	2b 2f       	mov	r18, r27
     5a0:	2f 93       	push	r18
     5a2:	2a 2f       	mov	r18, r26
     5a4:	2f 93       	push	r18
     5a6:	29 2f       	mov	r18, r25
     5a8:	2f 93       	push	r18
     5aa:	8f 93       	push	r24
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	91 e0       	ldi	r25, 0x01	; 1
     5b0:	89 2f       	mov	r24, r25
     5b2:	8f 93       	push	r24
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	8f 93       	push	r24
     5ba:	ce 01       	movw	r24, r28
     5bc:	c7 96       	adiw	r24, 0x37	; 55
     5be:	29 2f       	mov	r18, r25
     5c0:	2f 93       	push	r18
     5c2:	8f 93       	push	r24
     5c4:	38 d3       	rcall	.+1648   	; 0xc36 <sprintf>
     5c6:	8d b7       	in	r24, 0x3d	; 61
     5c8:	9e b7       	in	r25, 0x3e	; 62
     5ca:	08 96       	adiw	r24, 0x08	; 8
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	f8 94       	cli
     5d0:	de bf       	out	0x3e, r29	; 62
     5d2:	0f be       	out	0x3f, r0	; 63
            uart_send_isr(str);
     5d4:	cd bf       	out	0x3d, r28	; 61
     5d6:	ce 01       	movw	r24, r28
     5d8:	c7 96       	adiw	r24, 0x37	; 55
     5da:	54 d2       	rcall	.+1192   	; 0xa84 <uart_send_isr>
            
            sprintf(str, "Poti: %i\n", adc_get_Poti());
     5dc:	0c de       	rcall	.-1000   	; 0x1f6 <adc_get_Poti>
     5de:	dc 01       	movw	r26, r24
     5e0:	cb 01       	movw	r24, r22
     5e2:	2b 2f       	mov	r18, r27
     5e4:	2f 93       	push	r18
     5e6:	2a 2f       	mov	r18, r26
     5e8:	2f 93       	push	r18
     5ea:	29 2f       	mov	r18, r25
     5ec:	2f 93       	push	r18
     5ee:	8f 93       	push	r24
     5f0:	80 e1       	ldi	r24, 0x10	; 16
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	89 2f       	mov	r24, r25
     5f6:	8f 93       	push	r24
     5f8:	80 e1       	ldi	r24, 0x10	; 16
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	8f 93       	push	r24
     5fe:	ce 01       	movw	r24, r28
     600:	c7 96       	adiw	r24, 0x37	; 55
     602:	29 2f       	mov	r18, r25
     604:	2f 93       	push	r18
     606:	8f 93       	push	r24
     608:	16 d3       	rcall	.+1580   	; 0xc36 <sprintf>
     60a:	ed b7       	in	r30, 0x3d	; 61
     60c:	fe b7       	in	r31, 0x3e	; 62
     60e:	38 96       	adiw	r30, 0x08	; 8
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	de bf       	out	0x3e, r29	; 62
     616:	0f be       	out	0x3f, r0	; 63
     618:	cd bf       	out	0x3d, r28	; 61
            uart_send_isr(str);
     61a:	ce 01       	movw	r24, r28
     61c:	c7 96       	adiw	r24, 0x37	; 55
     61e:	32 d2       	rcall	.+1124   	; 0xa84 <uart_send_isr>
     620:	ad cf       	rjmp	.-166    	; 0x57c <main+0x42>

00000622 <Timer_init>:
            }
        }*/
        
        //trafficLight(0);
        //playground();
    }
     622:	cf 93       	push	r28
    }
    
    TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
}
     624:	df 93       	push	r29
     626:	1f 92       	push	r1
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
     62c:	89 83       	std	Y+1, r24	; 0x01
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	88 2f       	mov	r24, r24
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	05 d0       	rcall	.+10     	; 0x640 <Timer_init_withoutStruct>
     636:	00 00       	nop
     638:	0f 90       	pop	r0
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	08 95       	ret

00000640 <Timer_init_withoutStruct>:

void Timer_init_withoutStruct(uint8_t clockFreqMhz) {
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	1f 92       	push	r1
     646:	cd b7       	in	r28, 0x3d	; 61
     648:	de b7       	in	r29, 0x3e	; 62
     64a:	89 83       	std	Y+1, r24	; 0x01
    // datasheet page 97
    // set mode to clear timer on compare (CTC)
    TCCR0B &= ~(1 << WGM02);
     64c:	85 e4       	ldi	r24, 0x45	; 69
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	25 e4       	ldi	r18, 0x45	; 69
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	f9 01       	movw	r30, r18
     656:	20 81       	ld	r18, Z
     658:	27 7f       	andi	r18, 0xF7	; 247
     65a:	fc 01       	movw	r30, r24
     65c:	20 83       	st	Z, r18
    TCCR0A |= (1 << WGM01);
     65e:	84 e4       	ldi	r24, 0x44	; 68
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	24 e4       	ldi	r18, 0x44	; 68
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	f9 01       	movw	r30, r18
     668:	20 81       	ld	r18, Z
     66a:	22 60       	ori	r18, 0x02	; 2
     66c:	fc 01       	movw	r30, r24
     66e:	20 83       	st	Z, r18
    TCCR0A &= ~(1 << WGM00);
     670:	84 e4       	ldi	r24, 0x44	; 68
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	24 e4       	ldi	r18, 0x44	; 68
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	f9 01       	movw	r30, r18
     67a:	20 81       	ld	r18, Z
     67c:	2e 7f       	andi	r18, 0xFE	; 254
     67e:	fc 01       	movw	r30, r24
     680:	20 83       	st	Z, r18
    
    
    switch (clockFreqMhz) {
     682:	89 81       	ldd	r24, Y+1	; 0x01
     684:	88 2f       	mov	r24, r24
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	40 97       	sbiw	r24, 0x10	; 16
     68a:	09 f5       	brne	.+66     	; 0x6ce <Timer_init_withoutStruct+0x8e>
        case 16:
            // extern osc (16 MHZ)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = 249;   // dez 249; range 0 - 249 -> 250 cycles till interrupt
     68c:	87 e4       	ldi	r24, 0x47	; 71
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	29 ef       	ldi	r18, 0xF9	; 249
     692:	fc 01       	movw	r30, r24
     694:	20 83       	st	Z, r18
            
            // set prescaler to 1/64
            TCCR0B &= ~(1 << CS02);
     696:	85 e4       	ldi	r24, 0x45	; 69
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	25 e4       	ldi	r18, 0x45	; 69
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	f9 01       	movw	r30, r18
     6a0:	20 81       	ld	r18, Z
     6a2:	2b 7f       	andi	r18, 0xFB	; 251
     6a4:	fc 01       	movw	r30, r24
     6a6:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
     6a8:	85 e4       	ldi	r24, 0x45	; 69
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	25 e4       	ldi	r18, 0x45	; 69
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	f9 01       	movw	r30, r18
     6b2:	20 81       	ld	r18, Z
     6b4:	22 60       	ori	r18, 0x02	; 2
     6b6:	fc 01       	movw	r30, r24
     6b8:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS00);
     6ba:	85 e4       	ldi	r24, 0x45	; 69
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	25 e4       	ldi	r18, 0x45	; 69
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	f9 01       	movw	r30, r18
     6c4:	20 81       	ld	r18, Z
     6c6:	21 60       	ori	r18, 0x01	; 1
     6c8:	fc 01       	movw	r30, r24
     6ca:	20 83       	st	Z, r18
            break;
     6cc:	21 c0       	rjmp	.+66     	; 0x710 <Timer_init_withoutStruct+0xd0>
            
        default:
            // inter osc (8 MHZ divided by 8 -> 1 MHZ clock)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = 0x7C;   // dez 124; range 0 - 124 -> 125 cycles till interrupt
     6ce:	87 e4       	ldi	r24, 0x47	; 71
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	2c e7       	ldi	r18, 0x7C	; 124
     6d4:	fc 01       	movw	r30, r24
     6d6:	20 83       	st	Z, r18
            
            // set prescaler to 1/8
            TCCR0B &= ~(1 << CS02);
     6d8:	85 e4       	ldi	r24, 0x45	; 69
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	25 e4       	ldi	r18, 0x45	; 69
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	f9 01       	movw	r30, r18
     6e2:	20 81       	ld	r18, Z
     6e4:	2b 7f       	andi	r18, 0xFB	; 251
     6e6:	fc 01       	movw	r30, r24
     6e8:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
     6ea:	85 e4       	ldi	r24, 0x45	; 69
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	25 e4       	ldi	r18, 0x45	; 69
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	f9 01       	movw	r30, r18
     6f4:	20 81       	ld	r18, Z
     6f6:	22 60       	ori	r18, 0x02	; 2
     6f8:	fc 01       	movw	r30, r24
     6fa:	20 83       	st	Z, r18
            TCCR0B &= ~(1 << CS00);
     6fc:	85 e4       	ldi	r24, 0x45	; 69
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	25 e4       	ldi	r18, 0x45	; 69
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	f9 01       	movw	r30, r18
     706:	20 81       	ld	r18, Z
     708:	2e 7f       	andi	r18, 0xFE	; 254
     70a:	fc 01       	movw	r30, r24
     70c:	20 83       	st	Z, r18
            break;
     70e:	00 00       	nop
    }
    
    TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
     710:	8e e6       	ldi	r24, 0x6E	; 110
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	2e e6       	ldi	r18, 0x6E	; 110
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	f9 01       	movw	r30, r18
     71a:	20 81       	ld	r18, Z
     71c:	2b 7f       	andi	r18, 0xFB	; 251
     71e:	fc 01       	movw	r30, r24
     720:	20 83       	st	Z, r18
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
     722:	8e e6       	ldi	r24, 0x6E	; 110
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	2e e6       	ldi	r18, 0x6E	; 110
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	f9 01       	movw	r30, r18
     72c:	20 81       	ld	r18, Z
     72e:	22 60       	ori	r18, 0x02	; 2
     730:	fc 01       	movw	r30, r24
     732:	20 83       	st	Z, r18
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
     734:	8e e6       	ldi	r24, 0x6E	; 110
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	2e e6       	ldi	r18, 0x6E	; 110
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	f9 01       	movw	r30, r18
     73e:	20 81       	ld	r18, Z
     740:	2e 7f       	andi	r18, 0xFE	; 254
     742:	fc 01       	movw	r30, r24
     744:	20 83       	st	Z, r18
}
     746:	00 00       	nop
     748:	0f 90       	pop	r0
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	08 95       	ret

00000750 <Timer_getTick>:

uint16_t Timer_getTick() {
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	00 d0       	rcall	.+0      	; 0x756 <Timer_getTick+0x6>
     756:	cd b7       	in	r28, 0x3d	; 61
     758:	de b7       	in	r29, 0x3e	; 62
    // disable global interrupt
    cli();
     75a:	f8 94       	cli
    
    // store timer_count in a temp int that can't get changed by ISR
    uint16_t temp_timer_count = timer_count;
     75c:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <timer_count>
     760:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <timer_count+0x1>
     764:	9a 83       	std	Y+2, r25	; 0x02
     766:	89 83       	std	Y+1, r24	; 0x01
    
    // enable global interrupt
    sei();
     768:	78 94       	sei

    return temp_timer_count;
     76a:	89 81       	ldd	r24, Y+1	; 0x01
     76c:	9a 81       	ldd	r25, Y+2	; 0x02
}
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	08 95       	ret

00000778 <__vector_16>:
 ( not used atm)
 Timer compare A interrput:
 - increase timer_count
 - if timer_count is at max of uint16, set it to 0
 */
ISR(TIMER0_COMPA_vect){
     778:	1f 92       	push	r1
     77a:	0f 92       	push	r0
     77c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     780:	0f 92       	push	r0
     782:	11 24       	eor	r1, r1
     784:	8f 93       	push	r24
     786:	9f 93       	push	r25
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	cd b7       	in	r28, 0x3d	; 61
     78e:	de b7       	in	r29, 0x3e	; 62
    timer_count++;
     790:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <timer_count>
     794:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <timer_count+0x1>
     798:	01 96       	adiw	r24, 0x01	; 1
     79a:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <timer_count+0x1>
     79e:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <timer_count>
}
     7a2:	00 00       	nop
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	9f 91       	pop	r25
     7aa:	8f 91       	pop	r24
     7ac:	0f 90       	pop	r0
     7ae:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     7b2:	0f 90       	pop	r0
     7b4:	1f 90       	pop	r1
     7b6:	18 95       	reti

000007b8 <buff_put>:
        // Return byte
        return pByte;
    }else {
        return 0;
    }
}
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	00 d0       	rcall	.+0      	; 0x7be <buff_put+0x6>
     7be:	1f 92       	push	r1
     7c0:	cd b7       	in	r28, 0x3d	; 61
     7c2:	de b7       	in	r29, 0x3e	; 62
     7c4:	89 83       	std	Y+1, r24	; 0x01
     7c6:	7b 83       	std	Y+3, r23	; 0x03
     7c8:	6a 83       	std	Y+2, r22	; 0x02
     7ca:	81 ec       	ldi	r24, 0xC1	; 193
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	21 ec       	ldi	r18, 0xC1	; 193
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	f9 01       	movw	r30, r18
     7d4:	20 81       	ld	r18, Z
     7d6:	2f 7d       	andi	r18, 0xDF	; 223
     7d8:	fc 01       	movw	r30, r24
     7da:	20 83       	st	Z, r18
     7dc:	81 ec       	ldi	r24, 0xC1	; 193
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	21 ec       	ldi	r18, 0xC1	; 193
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	f9 01       	movw	r30, r18
     7e6:	20 81       	ld	r18, Z
     7e8:	2f 77       	andi	r18, 0x7F	; 127
     7ea:	fc 01       	movw	r30, r24
     7ec:	20 83       	st	Z, r18
     7ee:	8a 81       	ldd	r24, Y+2	; 0x02
     7f0:	9b 81       	ldd	r25, Y+3	; 0x03
     7f2:	8e 5f       	subi	r24, 0xFE	; 254
     7f4:	9d 4f       	sbci	r25, 0xFD	; 253
     7f6:	fc 01       	movw	r30, r24
     7f8:	80 81       	ld	r24, Z
     7fa:	91 81       	ldd	r25, Z+1	; 0x01
     7fc:	9c 01       	movw	r18, r24
     7fe:	2f 5f       	subi	r18, 0xFF	; 255
     800:	3f 4f       	sbci	r19, 0xFF	; 255
     802:	8a 81       	ldd	r24, Y+2	; 0x02
     804:	9b 81       	ldd	r25, Y+3	; 0x03
     806:	9e 5f       	subi	r25, 0xFE	; 254
     808:	fc 01       	movw	r30, r24
     80a:	80 81       	ld	r24, Z
     80c:	91 81       	ldd	r25, Z+1	; 0x01
     80e:	28 17       	cp	r18, r24
     810:	39 07       	cpc	r19, r25
     812:	91 f0       	breq	.+36     	; 0x838 <buff_put+0x80>
     814:	8a 81       	ldd	r24, Y+2	; 0x02
     816:	9b 81       	ldd	r25, Y+3	; 0x03
     818:	9e 5f       	subi	r25, 0xFE	; 254
     81a:	fc 01       	movw	r30, r24
     81c:	80 81       	ld	r24, Z
     81e:	91 81       	ldd	r25, Z+1	; 0x01
     820:	89 2b       	or	r24, r25
     822:	f1 f4       	brne	.+60     	; 0x860 <buff_put+0xa8>
     824:	8a 81       	ldd	r24, Y+2	; 0x02
     826:	9b 81       	ldd	r25, Y+3	; 0x03
     828:	8e 5f       	subi	r24, 0xFE	; 254
     82a:	9d 4f       	sbci	r25, 0xFD	; 253
     82c:	fc 01       	movw	r30, r24
     82e:	80 81       	ld	r24, Z
     830:	91 81       	ldd	r25, Z+1	; 0x01
     832:	8f 3f       	cpi	r24, 0xFF	; 255
     834:	91 40       	sbci	r25, 0x01	; 1
     836:	a1 f4       	brne	.+40     	; 0x860 <buff_put+0xa8>
     838:	81 ec       	ldi	r24, 0xC1	; 193
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	21 ec       	ldi	r18, 0xC1	; 193
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	f9 01       	movw	r30, r18
     842:	20 81       	ld	r18, Z
     844:	20 62       	ori	r18, 0x20	; 32
     846:	fc 01       	movw	r30, r24
     848:	20 83       	st	Z, r18
     84a:	81 ec       	ldi	r24, 0xC1	; 193
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	21 ec       	ldi	r18, 0xC1	; 193
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	f9 01       	movw	r30, r18
     854:	20 81       	ld	r18, Z
     856:	20 68       	ori	r18, 0x80	; 128
     858:	fc 01       	movw	r30, r24
     85a:	20 83       	st	Z, r18
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	43 c0       	rjmp	.+134    	; 0x8e6 <buff_put+0x12e>
     860:	8a 81       	ldd	r24, Y+2	; 0x02
     862:	9b 81       	ldd	r25, Y+3	; 0x03
     864:	8e 5f       	subi	r24, 0xFE	; 254
     866:	9d 4f       	sbci	r25, 0xFD	; 253
     868:	fc 01       	movw	r30, r24
     86a:	80 81       	ld	r24, Z
     86c:	91 81       	ldd	r25, Z+1	; 0x01
     86e:	2a 81       	ldd	r18, Y+2	; 0x02
     870:	3b 81       	ldd	r19, Y+3	; 0x03
     872:	82 0f       	add	r24, r18
     874:	93 1f       	adc	r25, r19
     876:	29 81       	ldd	r18, Y+1	; 0x01
     878:	fc 01       	movw	r30, r24
     87a:	20 83       	st	Z, r18
     87c:	8a 81       	ldd	r24, Y+2	; 0x02
     87e:	9b 81       	ldd	r25, Y+3	; 0x03
     880:	8e 5f       	subi	r24, 0xFE	; 254
     882:	9d 4f       	sbci	r25, 0xFD	; 253
     884:	fc 01       	movw	r30, r24
     886:	80 81       	ld	r24, Z
     888:	91 81       	ldd	r25, Z+1	; 0x01
     88a:	9c 01       	movw	r18, r24
     88c:	2f 5f       	subi	r18, 0xFF	; 255
     88e:	3f 4f       	sbci	r19, 0xFF	; 255
     890:	8a 81       	ldd	r24, Y+2	; 0x02
     892:	9b 81       	ldd	r25, Y+3	; 0x03
     894:	8e 5f       	subi	r24, 0xFE	; 254
     896:	9d 4f       	sbci	r25, 0xFD	; 253
     898:	fc 01       	movw	r30, r24
     89a:	31 83       	std	Z+1, r19	; 0x01
     89c:	20 83       	st	Z, r18
     89e:	8a 81       	ldd	r24, Y+2	; 0x02
     8a0:	9b 81       	ldd	r25, Y+3	; 0x03
     8a2:	8e 5f       	subi	r24, 0xFE	; 254
     8a4:	9d 4f       	sbci	r25, 0xFD	; 253
     8a6:	fc 01       	movw	r30, r24
     8a8:	80 81       	ld	r24, Z
     8aa:	91 81       	ldd	r25, Z+1	; 0x01
     8ac:	81 15       	cp	r24, r1
     8ae:	92 40       	sbci	r25, 0x02	; 2
     8b0:	38 f0       	brcs	.+14     	; 0x8c0 <buff_put+0x108>
     8b2:	8a 81       	ldd	r24, Y+2	; 0x02
     8b4:	9b 81       	ldd	r25, Y+3	; 0x03
     8b6:	8e 5f       	subi	r24, 0xFE	; 254
     8b8:	9d 4f       	sbci	r25, 0xFD	; 253
     8ba:	fc 01       	movw	r30, r24
     8bc:	11 82       	std	Z+1, r1	; 0x01
     8be:	10 82       	st	Z, r1
     8c0:	81 ec       	ldi	r24, 0xC1	; 193
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	21 ec       	ldi	r18, 0xC1	; 193
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	f9 01       	movw	r30, r18
     8ca:	20 81       	ld	r18, Z
     8cc:	20 62       	ori	r18, 0x20	; 32
     8ce:	fc 01       	movw	r30, r24
     8d0:	20 83       	st	Z, r18
     8d2:	81 ec       	ldi	r24, 0xC1	; 193
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	21 ec       	ldi	r18, 0xC1	; 193
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	f9 01       	movw	r30, r18
     8dc:	20 81       	ld	r18, Z
     8de:	20 68       	ori	r18, 0x80	; 128
     8e0:	fc 01       	movw	r30, r24
     8e2:	20 83       	st	Z, r18
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	0f 90       	pop	r0
     8e8:	0f 90       	pop	r0
     8ea:	0f 90       	pop	r0
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	08 95       	ret

000008f2 <buff_get>:
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	00 d0       	rcall	.+0      	; 0x8f8 <buff_get+0x6>
     8f8:	00 d0       	rcall	.+0      	; 0x8fa <buff_get+0x8>
     8fa:	cd b7       	in	r28, 0x3d	; 61
     8fc:	de b7       	in	r29, 0x3e	; 62
     8fe:	9a 83       	std	Y+2, r25	; 0x02
     900:	89 83       	std	Y+1, r24	; 0x01
     902:	7c 83       	std	Y+4, r23	; 0x04
     904:	6b 83       	std	Y+3, r22	; 0x03
     906:	81 ec       	ldi	r24, 0xC1	; 193
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	21 ec       	ldi	r18, 0xC1	; 193
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	f9 01       	movw	r30, r18
     910:	20 81       	ld	r18, Z
     912:	2f 7d       	andi	r18, 0xDF	; 223
     914:	fc 01       	movw	r30, r24
     916:	20 83       	st	Z, r18
     918:	81 ec       	ldi	r24, 0xC1	; 193
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	21 ec       	ldi	r18, 0xC1	; 193
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	f9 01       	movw	r30, r18
     922:	20 81       	ld	r18, Z
     924:	2f 77       	andi	r18, 0x7F	; 127
     926:	fc 01       	movw	r30, r24
     928:	20 83       	st	Z, r18
     92a:	8b 81       	ldd	r24, Y+3	; 0x03
     92c:	9c 81       	ldd	r25, Y+4	; 0x04
     92e:	9e 5f       	subi	r25, 0xFE	; 254
     930:	fc 01       	movw	r30, r24
     932:	20 81       	ld	r18, Z
     934:	31 81       	ldd	r19, Z+1	; 0x01
     936:	8b 81       	ldd	r24, Y+3	; 0x03
     938:	9c 81       	ldd	r25, Y+4	; 0x04
     93a:	8e 5f       	subi	r24, 0xFE	; 254
     93c:	9d 4f       	sbci	r25, 0xFD	; 253
     93e:	fc 01       	movw	r30, r24
     940:	80 81       	ld	r24, Z
     942:	91 81       	ldd	r25, Z+1	; 0x01
     944:	28 17       	cp	r18, r24
     946:	39 07       	cpc	r19, r25
     948:	a1 f4       	brne	.+40     	; 0x972 <buff_get+0x80>
     94a:	81 ec       	ldi	r24, 0xC1	; 193
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	21 ec       	ldi	r18, 0xC1	; 193
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	f9 01       	movw	r30, r18
     954:	20 81       	ld	r18, Z
     956:	20 62       	ori	r18, 0x20	; 32
     958:	fc 01       	movw	r30, r24
     95a:	20 83       	st	Z, r18
     95c:	81 ec       	ldi	r24, 0xC1	; 193
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	21 ec       	ldi	r18, 0xC1	; 193
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	f9 01       	movw	r30, r18
     966:	20 81       	ld	r18, Z
     968:	20 68       	ori	r18, 0x80	; 128
     96a:	fc 01       	movw	r30, r24
     96c:	20 83       	st	Z, r18
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	41 c0       	rjmp	.+130    	; 0x9f4 <buff_get+0x102>
     972:	8b 81       	ldd	r24, Y+3	; 0x03
     974:	9c 81       	ldd	r25, Y+4	; 0x04
     976:	9e 5f       	subi	r25, 0xFE	; 254
     978:	fc 01       	movw	r30, r24
     97a:	80 81       	ld	r24, Z
     97c:	91 81       	ldd	r25, Z+1	; 0x01
     97e:	2b 81       	ldd	r18, Y+3	; 0x03
     980:	3c 81       	ldd	r19, Y+4	; 0x04
     982:	82 0f       	add	r24, r18
     984:	93 1f       	adc	r25, r19
     986:	fc 01       	movw	r30, r24
     988:	20 81       	ld	r18, Z
     98a:	89 81       	ldd	r24, Y+1	; 0x01
     98c:	9a 81       	ldd	r25, Y+2	; 0x02
     98e:	fc 01       	movw	r30, r24
     990:	20 83       	st	Z, r18
     992:	8b 81       	ldd	r24, Y+3	; 0x03
     994:	9c 81       	ldd	r25, Y+4	; 0x04
     996:	9e 5f       	subi	r25, 0xFE	; 254
     998:	fc 01       	movw	r30, r24
     99a:	80 81       	ld	r24, Z
     99c:	91 81       	ldd	r25, Z+1	; 0x01
     99e:	9c 01       	movw	r18, r24
     9a0:	2f 5f       	subi	r18, 0xFF	; 255
     9a2:	3f 4f       	sbci	r19, 0xFF	; 255
     9a4:	8b 81       	ldd	r24, Y+3	; 0x03
     9a6:	9c 81       	ldd	r25, Y+4	; 0x04
     9a8:	9e 5f       	subi	r25, 0xFE	; 254
     9aa:	fc 01       	movw	r30, r24
     9ac:	31 83       	std	Z+1, r19	; 0x01
     9ae:	20 83       	st	Z, r18
     9b0:	8b 81       	ldd	r24, Y+3	; 0x03
     9b2:	9c 81       	ldd	r25, Y+4	; 0x04
     9b4:	9e 5f       	subi	r25, 0xFE	; 254
     9b6:	fc 01       	movw	r30, r24
     9b8:	80 81       	ld	r24, Z
     9ba:	91 81       	ldd	r25, Z+1	; 0x01
     9bc:	81 15       	cp	r24, r1
     9be:	92 40       	sbci	r25, 0x02	; 2
     9c0:	30 f0       	brcs	.+12     	; 0x9ce <buff_get+0xdc>
     9c2:	8b 81       	ldd	r24, Y+3	; 0x03
     9c4:	9c 81       	ldd	r25, Y+4	; 0x04
     9c6:	9e 5f       	subi	r25, 0xFE	; 254
     9c8:	fc 01       	movw	r30, r24
     9ca:	11 82       	std	Z+1, r1	; 0x01
     9cc:	10 82       	st	Z, r1
     9ce:	81 ec       	ldi	r24, 0xC1	; 193
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	21 ec       	ldi	r18, 0xC1	; 193
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	f9 01       	movw	r30, r18
     9d8:	20 81       	ld	r18, Z
     9da:	20 62       	ori	r18, 0x20	; 32
     9dc:	fc 01       	movw	r30, r24
     9de:	20 83       	st	Z, r18
     9e0:	81 ec       	ldi	r24, 0xC1	; 193
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	21 ec       	ldi	r18, 0xC1	; 193
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	f9 01       	movw	r30, r18
     9ea:	20 81       	ld	r18, Z
     9ec:	20 68       	ori	r18, 0x80	; 128
     9ee:	fc 01       	movw	r30, r24
     9f0:	20 83       	st	Z, r18
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	0f 90       	pop	r0
     9f6:	0f 90       	pop	r0
     9f8:	0f 90       	pop	r0
     9fa:	0f 90       	pop	r0
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	08 95       	ret

00000a02 <uart_init>:
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	00 d0       	rcall	.+0      	; 0xa08 <uart_init+0x6>
     a08:	cd b7       	in	r28, 0x3d	; 61
     a0a:	de b7       	in	r29, 0x3e	; 62
     a0c:	87 e6       	ldi	r24, 0x67	; 103
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	9a 83       	std	Y+2, r25	; 0x02
     a12:	89 83       	std	Y+1, r24	; 0x01
     a14:	85 ec       	ldi	r24, 0xC5	; 197
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	29 81       	ldd	r18, Y+1	; 0x01
     a1a:	3a 81       	ldd	r19, Y+2	; 0x02
     a1c:	23 2f       	mov	r18, r19
     a1e:	33 27       	eor	r19, r19
     a20:	fc 01       	movw	r30, r24
     a22:	20 83       	st	Z, r18
     a24:	84 ec       	ldi	r24, 0xC4	; 196
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	29 81       	ldd	r18, Y+1	; 0x01
     a2a:	fc 01       	movw	r30, r24
     a2c:	20 83       	st	Z, r18
     a2e:	81 ec       	ldi	r24, 0xC1	; 193
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	28 e1       	ldi	r18, 0x18	; 24
     a34:	fc 01       	movw	r30, r24
     a36:	20 83       	st	Z, r18
     a38:	82 ec       	ldi	r24, 0xC2	; 194
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	26 e0       	ldi	r18, 0x06	; 6
     a3e:	fc 01       	movw	r30, r24
     a40:	20 83       	st	Z, r18
     a42:	00 00       	nop
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	08 95       	ret

00000a4e <uart_init_isr>:
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	cd b7       	in	r28, 0x3d	; 61
     a54:	de b7       	in	r29, 0x3e	; 62
     a56:	d5 df       	rcall	.-86     	; 0xa02 <uart_init>
     a58:	81 ec       	ldi	r24, 0xC1	; 193
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	21 ec       	ldi	r18, 0xC1	; 193
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	f9 01       	movw	r30, r18
     a62:	20 81       	ld	r18, Z
     a64:	20 62       	ori	r18, 0x20	; 32
     a66:	fc 01       	movw	r30, r24
     a68:	20 83       	st	Z, r18
     a6a:	81 ec       	ldi	r24, 0xC1	; 193
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	21 ec       	ldi	r18, 0xC1	; 193
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	f9 01       	movw	r30, r18
     a74:	20 81       	ld	r18, Z
     a76:	20 68       	ori	r18, 0x80	; 128
     a78:	fc 01       	movw	r30, r24
     a7a:	20 83       	st	Z, r18
     a7c:	00 00       	nop
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	08 95       	ret

00000a84 <uart_send_isr>:
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	00 d0       	rcall	.+0      	; 0xa8a <uart_send_isr+0x6>
     a8a:	00 d0       	rcall	.+0      	; 0xa8c <uart_send_isr+0x8>
     a8c:	00 d0       	rcall	.+0      	; 0xa8e <uart_send_isr+0xa>
     a8e:	cd b7       	in	r28, 0x3d	; 61
     a90:	de b7       	in	r29, 0x3e	; 62
     a92:	9e 83       	std	Y+6, r25	; 0x06
     a94:	8d 83       	std	Y+5, r24	; 0x05
     a96:	8d 81       	ldd	r24, Y+5	; 0x05
     a98:	9e 81       	ldd	r25, Y+6	; 0x06
     a9a:	c4 d0       	rcall	.+392    	; 0xc24 <strlen>
     a9c:	9c 83       	std	Y+4, r25	; 0x04
     a9e:	8b 83       	std	Y+3, r24	; 0x03
     aa0:	1a 82       	std	Y+2, r1	; 0x02
     aa2:	19 82       	std	Y+1, r1	; 0x01
     aa4:	23 c0       	rjmp	.+70     	; 0xaec <uart_send_isr+0x68>
     aa6:	89 81       	ldd	r24, Y+1	; 0x01
     aa8:	9a 81       	ldd	r25, Y+2	; 0x02
     aaa:	2d 81       	ldd	r18, Y+5	; 0x05
     aac:	3e 81       	ldd	r19, Y+6	; 0x06
     aae:	82 0f       	add	r24, r18
     ab0:	93 1f       	adc	r25, r19
     ab2:	fc 01       	movw	r30, r24
     ab4:	80 81       	ld	r24, Z
     ab6:	6f e3       	ldi	r22, 0x3F	; 63
     ab8:	71 e0       	ldi	r23, 0x01	; 1
     aba:	7e de       	rcall	.-772    	; 0x7b8 <buff_put>
     abc:	81 30       	cpi	r24, 0x01	; 1
     abe:	89 f4       	brne	.+34     	; 0xae2 <uart_send_isr+0x5e>
     ac0:	80 ec       	ldi	r24, 0xC0	; 192
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	20 ec       	ldi	r18, 0xC0	; 192
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	f9 01       	movw	r30, r18
     aca:	20 81       	ld	r18, Z
     acc:	20 62       	ori	r18, 0x20	; 32
     ace:	fc 01       	movw	r30, r24
     ad0:	20 83       	st	Z, r18
     ad2:	89 81       	ldd	r24, Y+1	; 0x01
     ad4:	9a 81       	ldd	r25, Y+2	; 0x02
     ad6:	9c 01       	movw	r18, r24
     ad8:	2f 5f       	subi	r18, 0xFF	; 255
     ada:	3f 4f       	sbci	r19, 0xFF	; 255
     adc:	3a 83       	std	Y+2, r19	; 0x02
     ade:	29 83       	std	Y+1, r18	; 0x01
     ae0:	17 c0       	rjmp	.+46     	; 0xb10 <uart_send_isr+0x8c>
     ae2:	89 81       	ldd	r24, Y+1	; 0x01
     ae4:	9a 81       	ldd	r25, Y+2	; 0x02
     ae6:	01 96       	adiw	r24, 0x01	; 1
     ae8:	9a 83       	std	Y+2, r25	; 0x02
     aea:	89 83       	std	Y+1, r24	; 0x01
     aec:	29 81       	ldd	r18, Y+1	; 0x01
     aee:	3a 81       	ldd	r19, Y+2	; 0x02
     af0:	8b 81       	ldd	r24, Y+3	; 0x03
     af2:	9c 81       	ldd	r25, Y+4	; 0x04
     af4:	28 17       	cp	r18, r24
     af6:	39 07       	cpc	r19, r25
     af8:	b4 f2       	brlt	.-84     	; 0xaa6 <uart_send_isr+0x22>
     afa:	80 ec       	ldi	r24, 0xC0	; 192
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	20 ec       	ldi	r18, 0xC0	; 192
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	f9 01       	movw	r30, r18
     b04:	20 81       	ld	r18, Z
     b06:	20 62       	ori	r18, 0x20	; 32
     b08:	fc 01       	movw	r30, r24
     b0a:	20 83       	st	Z, r18
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	26 96       	adiw	r28, 0x06	; 6
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	f8 94       	cli
     b16:	de bf       	out	0x3e, r29	; 62
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	cd bf       	out	0x3d, r28	; 61
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	08 95       	ret

00000b22 <__vector_21>:

/**
 ISR for USART Data Register Empty flag
 */
ISR(USART0_UDRE_vect){
     b22:	1f 92       	push	r1
     b24:	0f 92       	push	r0
     b26:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b2a:	0f 92       	push	r0
     b2c:	11 24       	eor	r1, r1
     b2e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     b32:	0f 92       	push	r0
     b34:	2f 93       	push	r18
     b36:	3f 93       	push	r19
     b38:	4f 93       	push	r20
     b3a:	5f 93       	push	r21
     b3c:	6f 93       	push	r22
     b3e:	7f 93       	push	r23
     b40:	8f 93       	push	r24
     b42:	9f 93       	push	r25
     b44:	af 93       	push	r26
     b46:	bf 93       	push	r27
     b48:	ef 93       	push	r30
     b4a:	ff 93       	push	r31
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	1f 92       	push	r1
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
    unsigned char pByte;
    // Pull one byte from buffer and store it in pByte
    if (buff_get(&pByte, &bufferSend) == 0) {
     b56:	6f e3       	ldi	r22, 0x3F	; 63
     b58:	71 e0       	ldi	r23, 0x01	; 1
     b5a:	ce 01       	movw	r24, r28
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	c9 de       	rcall	.-622    	; 0x8f2 <buff_get>
     b60:	88 23       	and	r24, r24
     b62:	31 f4       	brne	.+12     	; 0xb70 <__vector_21+0x4e>
        // Send byte
        UDR0 = pByte;
     b64:	86 ec       	ldi	r24, 0xC6	; 198
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	29 81       	ldd	r18, Y+1	; 0x01
     b6a:	fc 01       	movw	r30, r24
     b6c:	20 83       	st	Z, r18
    }else {
        // Buffer empty: disable interrupt
        UCSR0A &= ~(1 << UDRE0);
    }
}
     b6e:	09 c0       	rjmp	.+18     	; 0xb82 <__vector_21+0x60>
    if (buff_get(&pByte, &bufferSend) == 0) {
        // Send byte
        UDR0 = pByte;
    }else {
        // Buffer empty: disable interrupt
        UCSR0A &= ~(1 << UDRE0);
     b70:	80 ec       	ldi	r24, 0xC0	; 192
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	20 ec       	ldi	r18, 0xC0	; 192
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	f9 01       	movw	r30, r18
     b7a:	20 81       	ld	r18, Z
     b7c:	2f 7d       	andi	r18, 0xDF	; 223
     b7e:	fc 01       	movw	r30, r24
     b80:	20 83       	st	Z, r18
    }
}
     b82:	00 00       	nop
     b84:	0f 90       	pop	r0
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     ba8:	0f 90       	pop	r0
     baa:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     bae:	0f 90       	pop	r0
     bb0:	1f 90       	pop	r1
     bb2:	18 95       	reti

00000bb4 <__vector_20>:

ISR(USART0_RX_vect){
     bb4:	1f 92       	push	r1
     bb6:	0f 92       	push	r0
     bb8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     bbc:	0f 92       	push	r0
     bbe:	11 24       	eor	r1, r1
     bc0:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     bc4:	0f 92       	push	r0
     bc6:	2f 93       	push	r18
     bc8:	3f 93       	push	r19
     bca:	4f 93       	push	r20
     bcc:	5f 93       	push	r21
     bce:	6f 93       	push	r22
     bd0:	7f 93       	push	r23
     bd2:	8f 93       	push	r24
     bd4:	9f 93       	push	r25
     bd6:	af 93       	push	r26
     bd8:	bf 93       	push	r27
     bda:	ef 93       	push	r30
     bdc:	ff 93       	push	r31
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
    // Put received byte to bufferRecv (will read but don't save the value if buffer overflows)
    buff_put(UDR0, &bufferRecv);
     be6:	86 ec       	ldi	r24, 0xC6	; 198
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	fc 01       	movw	r30, r24
     bec:	80 81       	ld	r24, Z
     bee:	63 e4       	ldi	r22, 0x43	; 67
     bf0:	73 e0       	ldi	r23, 0x03	; 3
     bf2:	e2 dd       	rcall	.-1084   	; 0x7b8 <buff_put>
}
     bf4:	00 00       	nop
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	ff 91       	pop	r31
     bfc:	ef 91       	pop	r30
     bfe:	bf 91       	pop	r27
     c00:	af 91       	pop	r26
     c02:	9f 91       	pop	r25
     c04:	8f 91       	pop	r24
     c06:	7f 91       	pop	r23
     c08:	6f 91       	pop	r22
     c0a:	5f 91       	pop	r21
     c0c:	4f 91       	pop	r20
     c0e:	3f 91       	pop	r19
     c10:	2f 91       	pop	r18
     c12:	0f 90       	pop	r0
     c14:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     c18:	0f 90       	pop	r0
     c1a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c1e:	0f 90       	pop	r0
     c20:	1f 90       	pop	r1
     c22:	18 95       	reti

00000c24 <strlen>:
     c24:	fc 01       	movw	r30, r24
     c26:	01 90       	ld	r0, Z+
     c28:	00 20       	and	r0, r0
     c2a:	e9 f7       	brne	.-6      	; 0xc26 <strlen+0x2>
     c2c:	80 95       	com	r24
     c2e:	90 95       	com	r25
     c30:	8e 0f       	add	r24, r30
     c32:	9f 1f       	adc	r25, r31
     c34:	08 95       	ret

00000c36 <sprintf>:
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
     c42:	2e 97       	sbiw	r28, 0x0e	; 14
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	f8 94       	cli
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	cd bf       	out	0x3d, r28	; 61
     c4e:	0d 89       	ldd	r16, Y+21	; 0x15
     c50:	1e 89       	ldd	r17, Y+22	; 0x16
     c52:	86 e0       	ldi	r24, 0x06	; 6
     c54:	8c 83       	std	Y+4, r24	; 0x04
     c56:	1a 83       	std	Y+2, r17	; 0x02
     c58:	09 83       	std	Y+1, r16	; 0x01
     c5a:	8f ef       	ldi	r24, 0xFF	; 255
     c5c:	9f e7       	ldi	r25, 0x7F	; 127
     c5e:	9e 83       	std	Y+6, r25	; 0x06
     c60:	8d 83       	std	Y+5, r24	; 0x05
     c62:	ae 01       	movw	r20, r28
     c64:	47 5e       	subi	r20, 0xE7	; 231
     c66:	5f 4f       	sbci	r21, 0xFF	; 255
     c68:	6f 89       	ldd	r22, Y+23	; 0x17
     c6a:	78 8d       	ldd	r23, Y+24	; 0x18
     c6c:	ce 01       	movw	r24, r28
     c6e:	01 96       	adiw	r24, 0x01	; 1
     c70:	10 d0       	rcall	.+32     	; 0xc92 <vfprintf>
     c72:	ef 81       	ldd	r30, Y+7	; 0x07
     c74:	f8 85       	ldd	r31, Y+8	; 0x08
     c76:	e0 0f       	add	r30, r16
     c78:	f1 1f       	adc	r31, r17
     c7a:	10 82       	st	Z, r1
     c7c:	2e 96       	adiw	r28, 0x0e	; 14
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	f8 94       	cli
     c82:	de bf       	out	0x3e, r29	; 62
     c84:	0f be       	out	0x3f, r0	; 63
     c86:	cd bf       	out	0x3d, r28	; 61
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	1f 91       	pop	r17
     c8e:	0f 91       	pop	r16
     c90:	08 95       	ret

00000c92 <vfprintf>:
     c92:	2f 92       	push	r2
     c94:	3f 92       	push	r3
     c96:	4f 92       	push	r4
     c98:	5f 92       	push	r5
     c9a:	6f 92       	push	r6
     c9c:	7f 92       	push	r7
     c9e:	8f 92       	push	r8
     ca0:	9f 92       	push	r9
     ca2:	af 92       	push	r10
     ca4:	bf 92       	push	r11
     ca6:	cf 92       	push	r12
     ca8:	df 92       	push	r13
     caa:	ef 92       	push	r14
     cac:	ff 92       	push	r15
     cae:	0f 93       	push	r16
     cb0:	1f 93       	push	r17
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	2b 97       	sbiw	r28, 0x0b	; 11
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	f8 94       	cli
     cc0:	de bf       	out	0x3e, r29	; 62
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	cd bf       	out	0x3d, r28	; 61
     cc6:	6c 01       	movw	r12, r24
     cc8:	7b 01       	movw	r14, r22
     cca:	8a 01       	movw	r16, r20
     ccc:	fc 01       	movw	r30, r24
     cce:	17 82       	std	Z+7, r1	; 0x07
     cd0:	16 82       	std	Z+6, r1	; 0x06
     cd2:	83 81       	ldd	r24, Z+3	; 0x03
     cd4:	81 ff       	sbrs	r24, 1
     cd6:	bf c1       	rjmp	.+894    	; 0x1056 <vfprintf+0x3c4>
     cd8:	ce 01       	movw	r24, r28
     cda:	01 96       	adiw	r24, 0x01	; 1
     cdc:	3c 01       	movw	r6, r24
     cde:	f6 01       	movw	r30, r12
     ce0:	93 81       	ldd	r25, Z+3	; 0x03
     ce2:	f7 01       	movw	r30, r14
     ce4:	93 fd       	sbrc	r25, 3
     ce6:	85 91       	lpm	r24, Z+
     ce8:	93 ff       	sbrs	r25, 3
     cea:	81 91       	ld	r24, Z+
     cec:	7f 01       	movw	r14, r30
     cee:	88 23       	and	r24, r24
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <vfprintf+0x62>
     cf2:	ad c1       	rjmp	.+858    	; 0x104e <vfprintf+0x3bc>
     cf4:	85 32       	cpi	r24, 0x25	; 37
     cf6:	39 f4       	brne	.+14     	; 0xd06 <vfprintf+0x74>
     cf8:	93 fd       	sbrc	r25, 3
     cfa:	85 91       	lpm	r24, Z+
     cfc:	93 ff       	sbrs	r25, 3
     cfe:	81 91       	ld	r24, Z+
     d00:	7f 01       	movw	r14, r30
     d02:	85 32       	cpi	r24, 0x25	; 37
     d04:	21 f4       	brne	.+8      	; 0xd0e <vfprintf+0x7c>
     d06:	b6 01       	movw	r22, r12
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	d6 d1       	rcall	.+940    	; 0x10b8 <fputc>
     d0c:	e8 cf       	rjmp	.-48     	; 0xcde <vfprintf+0x4c>
     d0e:	91 2c       	mov	r9, r1
     d10:	21 2c       	mov	r2, r1
     d12:	31 2c       	mov	r3, r1
     d14:	ff e1       	ldi	r31, 0x1F	; 31
     d16:	f3 15       	cp	r31, r3
     d18:	d8 f0       	brcs	.+54     	; 0xd50 <vfprintf+0xbe>
     d1a:	8b 32       	cpi	r24, 0x2B	; 43
     d1c:	79 f0       	breq	.+30     	; 0xd3c <vfprintf+0xaa>
     d1e:	38 f4       	brcc	.+14     	; 0xd2e <vfprintf+0x9c>
     d20:	80 32       	cpi	r24, 0x20	; 32
     d22:	79 f0       	breq	.+30     	; 0xd42 <vfprintf+0xb0>
     d24:	83 32       	cpi	r24, 0x23	; 35
     d26:	a1 f4       	brne	.+40     	; 0xd50 <vfprintf+0xbe>
     d28:	23 2d       	mov	r18, r3
     d2a:	20 61       	ori	r18, 0x10	; 16
     d2c:	1d c0       	rjmp	.+58     	; 0xd68 <vfprintf+0xd6>
     d2e:	8d 32       	cpi	r24, 0x2D	; 45
     d30:	61 f0       	breq	.+24     	; 0xd4a <vfprintf+0xb8>
     d32:	80 33       	cpi	r24, 0x30	; 48
     d34:	69 f4       	brne	.+26     	; 0xd50 <vfprintf+0xbe>
     d36:	23 2d       	mov	r18, r3
     d38:	21 60       	ori	r18, 0x01	; 1
     d3a:	16 c0       	rjmp	.+44     	; 0xd68 <vfprintf+0xd6>
     d3c:	83 2d       	mov	r24, r3
     d3e:	82 60       	ori	r24, 0x02	; 2
     d40:	38 2e       	mov	r3, r24
     d42:	e3 2d       	mov	r30, r3
     d44:	e4 60       	ori	r30, 0x04	; 4
     d46:	3e 2e       	mov	r3, r30
     d48:	2a c0       	rjmp	.+84     	; 0xd9e <vfprintf+0x10c>
     d4a:	f3 2d       	mov	r31, r3
     d4c:	f8 60       	ori	r31, 0x08	; 8
     d4e:	1d c0       	rjmp	.+58     	; 0xd8a <vfprintf+0xf8>
     d50:	37 fc       	sbrc	r3, 7
     d52:	2d c0       	rjmp	.+90     	; 0xdae <vfprintf+0x11c>
     d54:	20 ed       	ldi	r18, 0xD0	; 208
     d56:	28 0f       	add	r18, r24
     d58:	2a 30       	cpi	r18, 0x0A	; 10
     d5a:	40 f0       	brcs	.+16     	; 0xd6c <vfprintf+0xda>
     d5c:	8e 32       	cpi	r24, 0x2E	; 46
     d5e:	b9 f4       	brne	.+46     	; 0xd8e <vfprintf+0xfc>
     d60:	36 fc       	sbrc	r3, 6
     d62:	75 c1       	rjmp	.+746    	; 0x104e <vfprintf+0x3bc>
     d64:	23 2d       	mov	r18, r3
     d66:	20 64       	ori	r18, 0x40	; 64
     d68:	32 2e       	mov	r3, r18
     d6a:	19 c0       	rjmp	.+50     	; 0xd9e <vfprintf+0x10c>
     d6c:	36 fe       	sbrs	r3, 6
     d6e:	06 c0       	rjmp	.+12     	; 0xd7c <vfprintf+0xea>
     d70:	8a e0       	ldi	r24, 0x0A	; 10
     d72:	98 9e       	mul	r9, r24
     d74:	20 0d       	add	r18, r0
     d76:	11 24       	eor	r1, r1
     d78:	92 2e       	mov	r9, r18
     d7a:	11 c0       	rjmp	.+34     	; 0xd9e <vfprintf+0x10c>
     d7c:	ea e0       	ldi	r30, 0x0A	; 10
     d7e:	2e 9e       	mul	r2, r30
     d80:	20 0d       	add	r18, r0
     d82:	11 24       	eor	r1, r1
     d84:	22 2e       	mov	r2, r18
     d86:	f3 2d       	mov	r31, r3
     d88:	f0 62       	ori	r31, 0x20	; 32
     d8a:	3f 2e       	mov	r3, r31
     d8c:	08 c0       	rjmp	.+16     	; 0xd9e <vfprintf+0x10c>
     d8e:	8c 36       	cpi	r24, 0x6C	; 108
     d90:	21 f4       	brne	.+8      	; 0xd9a <vfprintf+0x108>
     d92:	83 2d       	mov	r24, r3
     d94:	80 68       	ori	r24, 0x80	; 128
     d96:	38 2e       	mov	r3, r24
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <vfprintf+0x10c>
     d9a:	88 36       	cpi	r24, 0x68	; 104
     d9c:	41 f4       	brne	.+16     	; 0xdae <vfprintf+0x11c>
     d9e:	f7 01       	movw	r30, r14
     da0:	93 fd       	sbrc	r25, 3
     da2:	85 91       	lpm	r24, Z+
     da4:	93 ff       	sbrs	r25, 3
     da6:	81 91       	ld	r24, Z+
     da8:	7f 01       	movw	r14, r30
     daa:	81 11       	cpse	r24, r1
     dac:	b3 cf       	rjmp	.-154    	; 0xd14 <vfprintf+0x82>
     dae:	98 2f       	mov	r25, r24
     db0:	9f 7d       	andi	r25, 0xDF	; 223
     db2:	95 54       	subi	r25, 0x45	; 69
     db4:	93 30       	cpi	r25, 0x03	; 3
     db6:	28 f4       	brcc	.+10     	; 0xdc2 <vfprintf+0x130>
     db8:	0c 5f       	subi	r16, 0xFC	; 252
     dba:	1f 4f       	sbci	r17, 0xFF	; 255
     dbc:	9f e3       	ldi	r25, 0x3F	; 63
     dbe:	99 83       	std	Y+1, r25	; 0x01
     dc0:	0d c0       	rjmp	.+26     	; 0xddc <vfprintf+0x14a>
     dc2:	83 36       	cpi	r24, 0x63	; 99
     dc4:	31 f0       	breq	.+12     	; 0xdd2 <vfprintf+0x140>
     dc6:	83 37       	cpi	r24, 0x73	; 115
     dc8:	71 f0       	breq	.+28     	; 0xde6 <vfprintf+0x154>
     dca:	83 35       	cpi	r24, 0x53	; 83
     dcc:	09 f0       	breq	.+2      	; 0xdd0 <vfprintf+0x13e>
     dce:	55 c0       	rjmp	.+170    	; 0xe7a <vfprintf+0x1e8>
     dd0:	20 c0       	rjmp	.+64     	; 0xe12 <vfprintf+0x180>
     dd2:	f8 01       	movw	r30, r16
     dd4:	80 81       	ld	r24, Z
     dd6:	89 83       	std	Y+1, r24	; 0x01
     dd8:	0e 5f       	subi	r16, 0xFE	; 254
     dda:	1f 4f       	sbci	r17, 0xFF	; 255
     ddc:	88 24       	eor	r8, r8
     dde:	83 94       	inc	r8
     de0:	91 2c       	mov	r9, r1
     de2:	53 01       	movw	r10, r6
     de4:	12 c0       	rjmp	.+36     	; 0xe0a <vfprintf+0x178>
     de6:	28 01       	movw	r4, r16
     de8:	f2 e0       	ldi	r31, 0x02	; 2
     dea:	4f 0e       	add	r4, r31
     dec:	51 1c       	adc	r5, r1
     dee:	f8 01       	movw	r30, r16
     df0:	a0 80       	ld	r10, Z
     df2:	b1 80       	ldd	r11, Z+1	; 0x01
     df4:	36 fe       	sbrs	r3, 6
     df6:	03 c0       	rjmp	.+6      	; 0xdfe <vfprintf+0x16c>
     df8:	69 2d       	mov	r22, r9
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <vfprintf+0x170>
     dfe:	6f ef       	ldi	r22, 0xFF	; 255
     e00:	7f ef       	ldi	r23, 0xFF	; 255
     e02:	c5 01       	movw	r24, r10
     e04:	4e d1       	rcall	.+668    	; 0x10a2 <strnlen>
     e06:	4c 01       	movw	r8, r24
     e08:	82 01       	movw	r16, r4
     e0a:	f3 2d       	mov	r31, r3
     e0c:	ff 77       	andi	r31, 0x7F	; 127
     e0e:	3f 2e       	mov	r3, r31
     e10:	15 c0       	rjmp	.+42     	; 0xe3c <vfprintf+0x1aa>
     e12:	28 01       	movw	r4, r16
     e14:	22 e0       	ldi	r18, 0x02	; 2
     e16:	42 0e       	add	r4, r18
     e18:	51 1c       	adc	r5, r1
     e1a:	f8 01       	movw	r30, r16
     e1c:	a0 80       	ld	r10, Z
     e1e:	b1 80       	ldd	r11, Z+1	; 0x01
     e20:	36 fe       	sbrs	r3, 6
     e22:	03 c0       	rjmp	.+6      	; 0xe2a <vfprintf+0x198>
     e24:	69 2d       	mov	r22, r9
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <vfprintf+0x19c>
     e2a:	6f ef       	ldi	r22, 0xFF	; 255
     e2c:	7f ef       	ldi	r23, 0xFF	; 255
     e2e:	c5 01       	movw	r24, r10
     e30:	2d d1       	rcall	.+602    	; 0x108c <strnlen_P>
     e32:	4c 01       	movw	r8, r24
     e34:	f3 2d       	mov	r31, r3
     e36:	f0 68       	ori	r31, 0x80	; 128
     e38:	3f 2e       	mov	r3, r31
     e3a:	82 01       	movw	r16, r4
     e3c:	33 fc       	sbrc	r3, 3
     e3e:	19 c0       	rjmp	.+50     	; 0xe72 <vfprintf+0x1e0>
     e40:	82 2d       	mov	r24, r2
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	88 16       	cp	r8, r24
     e46:	99 06       	cpc	r9, r25
     e48:	a0 f4       	brcc	.+40     	; 0xe72 <vfprintf+0x1e0>
     e4a:	b6 01       	movw	r22, r12
     e4c:	80 e2       	ldi	r24, 0x20	; 32
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	33 d1       	rcall	.+614    	; 0x10b8 <fputc>
     e52:	2a 94       	dec	r2
     e54:	f5 cf       	rjmp	.-22     	; 0xe40 <vfprintf+0x1ae>
     e56:	f5 01       	movw	r30, r10
     e58:	37 fc       	sbrc	r3, 7
     e5a:	85 91       	lpm	r24, Z+
     e5c:	37 fe       	sbrs	r3, 7
     e5e:	81 91       	ld	r24, Z+
     e60:	5f 01       	movw	r10, r30
     e62:	b6 01       	movw	r22, r12
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	28 d1       	rcall	.+592    	; 0x10b8 <fputc>
     e68:	21 10       	cpse	r2, r1
     e6a:	2a 94       	dec	r2
     e6c:	21 e0       	ldi	r18, 0x01	; 1
     e6e:	82 1a       	sub	r8, r18
     e70:	91 08       	sbc	r9, r1
     e72:	81 14       	cp	r8, r1
     e74:	91 04       	cpc	r9, r1
     e76:	79 f7       	brne	.-34     	; 0xe56 <vfprintf+0x1c4>
     e78:	e1 c0       	rjmp	.+450    	; 0x103c <vfprintf+0x3aa>
     e7a:	84 36       	cpi	r24, 0x64	; 100
     e7c:	11 f0       	breq	.+4      	; 0xe82 <vfprintf+0x1f0>
     e7e:	89 36       	cpi	r24, 0x69	; 105
     e80:	39 f5       	brne	.+78     	; 0xed0 <vfprintf+0x23e>
     e82:	f8 01       	movw	r30, r16
     e84:	37 fe       	sbrs	r3, 7
     e86:	07 c0       	rjmp	.+14     	; 0xe96 <vfprintf+0x204>
     e88:	60 81       	ld	r22, Z
     e8a:	71 81       	ldd	r23, Z+1	; 0x01
     e8c:	82 81       	ldd	r24, Z+2	; 0x02
     e8e:	93 81       	ldd	r25, Z+3	; 0x03
     e90:	0c 5f       	subi	r16, 0xFC	; 252
     e92:	1f 4f       	sbci	r17, 0xFF	; 255
     e94:	08 c0       	rjmp	.+16     	; 0xea6 <vfprintf+0x214>
     e96:	60 81       	ld	r22, Z
     e98:	71 81       	ldd	r23, Z+1	; 0x01
     e9a:	07 2e       	mov	r0, r23
     e9c:	00 0c       	add	r0, r0
     e9e:	88 0b       	sbc	r24, r24
     ea0:	99 0b       	sbc	r25, r25
     ea2:	0e 5f       	subi	r16, 0xFE	; 254
     ea4:	1f 4f       	sbci	r17, 0xFF	; 255
     ea6:	f3 2d       	mov	r31, r3
     ea8:	ff 76       	andi	r31, 0x6F	; 111
     eaa:	3f 2e       	mov	r3, r31
     eac:	97 ff       	sbrs	r25, 7
     eae:	09 c0       	rjmp	.+18     	; 0xec2 <vfprintf+0x230>
     eb0:	90 95       	com	r25
     eb2:	80 95       	com	r24
     eb4:	70 95       	com	r23
     eb6:	61 95       	neg	r22
     eb8:	7f 4f       	sbci	r23, 0xFF	; 255
     eba:	8f 4f       	sbci	r24, 0xFF	; 255
     ebc:	9f 4f       	sbci	r25, 0xFF	; 255
     ebe:	f0 68       	ori	r31, 0x80	; 128
     ec0:	3f 2e       	mov	r3, r31
     ec2:	2a e0       	ldi	r18, 0x0A	; 10
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	a3 01       	movw	r20, r6
     ec8:	33 d1       	rcall	.+614    	; 0x1130 <__ultoa_invert>
     eca:	88 2e       	mov	r8, r24
     ecc:	86 18       	sub	r8, r6
     ece:	44 c0       	rjmp	.+136    	; 0xf58 <vfprintf+0x2c6>
     ed0:	85 37       	cpi	r24, 0x75	; 117
     ed2:	31 f4       	brne	.+12     	; 0xee0 <vfprintf+0x24e>
     ed4:	23 2d       	mov	r18, r3
     ed6:	2f 7e       	andi	r18, 0xEF	; 239
     ed8:	b2 2e       	mov	r11, r18
     eda:	2a e0       	ldi	r18, 0x0A	; 10
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	25 c0       	rjmp	.+74     	; 0xf2a <vfprintf+0x298>
     ee0:	93 2d       	mov	r25, r3
     ee2:	99 7f       	andi	r25, 0xF9	; 249
     ee4:	b9 2e       	mov	r11, r25
     ee6:	8f 36       	cpi	r24, 0x6F	; 111
     ee8:	c1 f0       	breq	.+48     	; 0xf1a <vfprintf+0x288>
     eea:	18 f4       	brcc	.+6      	; 0xef2 <vfprintf+0x260>
     eec:	88 35       	cpi	r24, 0x58	; 88
     eee:	79 f0       	breq	.+30     	; 0xf0e <vfprintf+0x27c>
     ef0:	ae c0       	rjmp	.+348    	; 0x104e <vfprintf+0x3bc>
     ef2:	80 37       	cpi	r24, 0x70	; 112
     ef4:	19 f0       	breq	.+6      	; 0xefc <vfprintf+0x26a>
     ef6:	88 37       	cpi	r24, 0x78	; 120
     ef8:	21 f0       	breq	.+8      	; 0xf02 <vfprintf+0x270>
     efa:	a9 c0       	rjmp	.+338    	; 0x104e <vfprintf+0x3bc>
     efc:	e9 2f       	mov	r30, r25
     efe:	e0 61       	ori	r30, 0x10	; 16
     f00:	be 2e       	mov	r11, r30
     f02:	b4 fe       	sbrs	r11, 4
     f04:	0d c0       	rjmp	.+26     	; 0xf20 <vfprintf+0x28e>
     f06:	fb 2d       	mov	r31, r11
     f08:	f4 60       	ori	r31, 0x04	; 4
     f0a:	bf 2e       	mov	r11, r31
     f0c:	09 c0       	rjmp	.+18     	; 0xf20 <vfprintf+0x28e>
     f0e:	34 fe       	sbrs	r3, 4
     f10:	0a c0       	rjmp	.+20     	; 0xf26 <vfprintf+0x294>
     f12:	29 2f       	mov	r18, r25
     f14:	26 60       	ori	r18, 0x06	; 6
     f16:	b2 2e       	mov	r11, r18
     f18:	06 c0       	rjmp	.+12     	; 0xf26 <vfprintf+0x294>
     f1a:	28 e0       	ldi	r18, 0x08	; 8
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	05 c0       	rjmp	.+10     	; 0xf2a <vfprintf+0x298>
     f20:	20 e1       	ldi	r18, 0x10	; 16
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <vfprintf+0x298>
     f26:	20 e1       	ldi	r18, 0x10	; 16
     f28:	32 e0       	ldi	r19, 0x02	; 2
     f2a:	f8 01       	movw	r30, r16
     f2c:	b7 fe       	sbrs	r11, 7
     f2e:	07 c0       	rjmp	.+14     	; 0xf3e <vfprintf+0x2ac>
     f30:	60 81       	ld	r22, Z
     f32:	71 81       	ldd	r23, Z+1	; 0x01
     f34:	82 81       	ldd	r24, Z+2	; 0x02
     f36:	93 81       	ldd	r25, Z+3	; 0x03
     f38:	0c 5f       	subi	r16, 0xFC	; 252
     f3a:	1f 4f       	sbci	r17, 0xFF	; 255
     f3c:	06 c0       	rjmp	.+12     	; 0xf4a <vfprintf+0x2b8>
     f3e:	60 81       	ld	r22, Z
     f40:	71 81       	ldd	r23, Z+1	; 0x01
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	0e 5f       	subi	r16, 0xFE	; 254
     f48:	1f 4f       	sbci	r17, 0xFF	; 255
     f4a:	a3 01       	movw	r20, r6
     f4c:	f1 d0       	rcall	.+482    	; 0x1130 <__ultoa_invert>
     f4e:	88 2e       	mov	r8, r24
     f50:	86 18       	sub	r8, r6
     f52:	fb 2d       	mov	r31, r11
     f54:	ff 77       	andi	r31, 0x7F	; 127
     f56:	3f 2e       	mov	r3, r31
     f58:	36 fe       	sbrs	r3, 6
     f5a:	0d c0       	rjmp	.+26     	; 0xf76 <vfprintf+0x2e4>
     f5c:	23 2d       	mov	r18, r3
     f5e:	2e 7f       	andi	r18, 0xFE	; 254
     f60:	a2 2e       	mov	r10, r18
     f62:	89 14       	cp	r8, r9
     f64:	58 f4       	brcc	.+22     	; 0xf7c <vfprintf+0x2ea>
     f66:	34 fe       	sbrs	r3, 4
     f68:	0b c0       	rjmp	.+22     	; 0xf80 <vfprintf+0x2ee>
     f6a:	32 fc       	sbrc	r3, 2
     f6c:	09 c0       	rjmp	.+18     	; 0xf80 <vfprintf+0x2ee>
     f6e:	83 2d       	mov	r24, r3
     f70:	8e 7e       	andi	r24, 0xEE	; 238
     f72:	a8 2e       	mov	r10, r24
     f74:	05 c0       	rjmp	.+10     	; 0xf80 <vfprintf+0x2ee>
     f76:	b8 2c       	mov	r11, r8
     f78:	a3 2c       	mov	r10, r3
     f7a:	03 c0       	rjmp	.+6      	; 0xf82 <vfprintf+0x2f0>
     f7c:	b8 2c       	mov	r11, r8
     f7e:	01 c0       	rjmp	.+2      	; 0xf82 <vfprintf+0x2f0>
     f80:	b9 2c       	mov	r11, r9
     f82:	a4 fe       	sbrs	r10, 4
     f84:	0f c0       	rjmp	.+30     	; 0xfa4 <vfprintf+0x312>
     f86:	fe 01       	movw	r30, r28
     f88:	e8 0d       	add	r30, r8
     f8a:	f1 1d       	adc	r31, r1
     f8c:	80 81       	ld	r24, Z
     f8e:	80 33       	cpi	r24, 0x30	; 48
     f90:	21 f4       	brne	.+8      	; 0xf9a <vfprintf+0x308>
     f92:	9a 2d       	mov	r25, r10
     f94:	99 7e       	andi	r25, 0xE9	; 233
     f96:	a9 2e       	mov	r10, r25
     f98:	09 c0       	rjmp	.+18     	; 0xfac <vfprintf+0x31a>
     f9a:	a2 fe       	sbrs	r10, 2
     f9c:	06 c0       	rjmp	.+12     	; 0xfaa <vfprintf+0x318>
     f9e:	b3 94       	inc	r11
     fa0:	b3 94       	inc	r11
     fa2:	04 c0       	rjmp	.+8      	; 0xfac <vfprintf+0x31a>
     fa4:	8a 2d       	mov	r24, r10
     fa6:	86 78       	andi	r24, 0x86	; 134
     fa8:	09 f0       	breq	.+2      	; 0xfac <vfprintf+0x31a>
     faa:	b3 94       	inc	r11
     fac:	a3 fc       	sbrc	r10, 3
     fae:	10 c0       	rjmp	.+32     	; 0xfd0 <vfprintf+0x33e>
     fb0:	a0 fe       	sbrs	r10, 0
     fb2:	06 c0       	rjmp	.+12     	; 0xfc0 <vfprintf+0x32e>
     fb4:	b2 14       	cp	r11, r2
     fb6:	80 f4       	brcc	.+32     	; 0xfd8 <vfprintf+0x346>
     fb8:	28 0c       	add	r2, r8
     fba:	92 2c       	mov	r9, r2
     fbc:	9b 18       	sub	r9, r11
     fbe:	0d c0       	rjmp	.+26     	; 0xfda <vfprintf+0x348>
     fc0:	b2 14       	cp	r11, r2
     fc2:	58 f4       	brcc	.+22     	; 0xfda <vfprintf+0x348>
     fc4:	b6 01       	movw	r22, r12
     fc6:	80 e2       	ldi	r24, 0x20	; 32
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	76 d0       	rcall	.+236    	; 0x10b8 <fputc>
     fcc:	b3 94       	inc	r11
     fce:	f8 cf       	rjmp	.-16     	; 0xfc0 <vfprintf+0x32e>
     fd0:	b2 14       	cp	r11, r2
     fd2:	18 f4       	brcc	.+6      	; 0xfda <vfprintf+0x348>
     fd4:	2b 18       	sub	r2, r11
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <vfprintf+0x34a>
     fd8:	98 2c       	mov	r9, r8
     fda:	21 2c       	mov	r2, r1
     fdc:	a4 fe       	sbrs	r10, 4
     fde:	0f c0       	rjmp	.+30     	; 0xffe <vfprintf+0x36c>
     fe0:	b6 01       	movw	r22, r12
     fe2:	80 e3       	ldi	r24, 0x30	; 48
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	68 d0       	rcall	.+208    	; 0x10b8 <fputc>
     fe8:	a2 fe       	sbrs	r10, 2
     fea:	16 c0       	rjmp	.+44     	; 0x1018 <vfprintf+0x386>
     fec:	a1 fc       	sbrc	r10, 1
     fee:	03 c0       	rjmp	.+6      	; 0xff6 <vfprintf+0x364>
     ff0:	88 e7       	ldi	r24, 0x78	; 120
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <vfprintf+0x368>
     ff6:	88 e5       	ldi	r24, 0x58	; 88
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	b6 01       	movw	r22, r12
     ffc:	0c c0       	rjmp	.+24     	; 0x1016 <vfprintf+0x384>
     ffe:	8a 2d       	mov	r24, r10
    1000:	86 78       	andi	r24, 0x86	; 134
    1002:	51 f0       	breq	.+20     	; 0x1018 <vfprintf+0x386>
    1004:	a1 fe       	sbrs	r10, 1
    1006:	02 c0       	rjmp	.+4      	; 0x100c <vfprintf+0x37a>
    1008:	8b e2       	ldi	r24, 0x2B	; 43
    100a:	01 c0       	rjmp	.+2      	; 0x100e <vfprintf+0x37c>
    100c:	80 e2       	ldi	r24, 0x20	; 32
    100e:	a7 fc       	sbrc	r10, 7
    1010:	8d e2       	ldi	r24, 0x2D	; 45
    1012:	b6 01       	movw	r22, r12
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	50 d0       	rcall	.+160    	; 0x10b8 <fputc>
    1018:	89 14       	cp	r8, r9
    101a:	30 f4       	brcc	.+12     	; 0x1028 <vfprintf+0x396>
    101c:	b6 01       	movw	r22, r12
    101e:	80 e3       	ldi	r24, 0x30	; 48
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	4a d0       	rcall	.+148    	; 0x10b8 <fputc>
    1024:	9a 94       	dec	r9
    1026:	f8 cf       	rjmp	.-16     	; 0x1018 <vfprintf+0x386>
    1028:	8a 94       	dec	r8
    102a:	f3 01       	movw	r30, r6
    102c:	e8 0d       	add	r30, r8
    102e:	f1 1d       	adc	r31, r1
    1030:	80 81       	ld	r24, Z
    1032:	b6 01       	movw	r22, r12
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	40 d0       	rcall	.+128    	; 0x10b8 <fputc>
    1038:	81 10       	cpse	r8, r1
    103a:	f6 cf       	rjmp	.-20     	; 0x1028 <vfprintf+0x396>
    103c:	22 20       	and	r2, r2
    103e:	09 f4       	brne	.+2      	; 0x1042 <vfprintf+0x3b0>
    1040:	4e ce       	rjmp	.-868    	; 0xcde <vfprintf+0x4c>
    1042:	b6 01       	movw	r22, r12
    1044:	80 e2       	ldi	r24, 0x20	; 32
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	37 d0       	rcall	.+110    	; 0x10b8 <fputc>
    104a:	2a 94       	dec	r2
    104c:	f7 cf       	rjmp	.-18     	; 0x103c <vfprintf+0x3aa>
    104e:	f6 01       	movw	r30, r12
    1050:	86 81       	ldd	r24, Z+6	; 0x06
    1052:	97 81       	ldd	r25, Z+7	; 0x07
    1054:	02 c0       	rjmp	.+4      	; 0x105a <vfprintf+0x3c8>
    1056:	8f ef       	ldi	r24, 0xFF	; 255
    1058:	9f ef       	ldi	r25, 0xFF	; 255
    105a:	2b 96       	adiw	r28, 0x0b	; 11
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	ff 90       	pop	r15
    1070:	ef 90       	pop	r14
    1072:	df 90       	pop	r13
    1074:	cf 90       	pop	r12
    1076:	bf 90       	pop	r11
    1078:	af 90       	pop	r10
    107a:	9f 90       	pop	r9
    107c:	8f 90       	pop	r8
    107e:	7f 90       	pop	r7
    1080:	6f 90       	pop	r6
    1082:	5f 90       	pop	r5
    1084:	4f 90       	pop	r4
    1086:	3f 90       	pop	r3
    1088:	2f 90       	pop	r2
    108a:	08 95       	ret

0000108c <strnlen_P>:
    108c:	fc 01       	movw	r30, r24
    108e:	05 90       	lpm	r0, Z+
    1090:	61 50       	subi	r22, 0x01	; 1
    1092:	70 40       	sbci	r23, 0x00	; 0
    1094:	01 10       	cpse	r0, r1
    1096:	d8 f7       	brcc	.-10     	; 0x108e <strnlen_P+0x2>
    1098:	80 95       	com	r24
    109a:	90 95       	com	r25
    109c:	8e 0f       	add	r24, r30
    109e:	9f 1f       	adc	r25, r31
    10a0:	08 95       	ret

000010a2 <strnlen>:
    10a2:	fc 01       	movw	r30, r24
    10a4:	61 50       	subi	r22, 0x01	; 1
    10a6:	70 40       	sbci	r23, 0x00	; 0
    10a8:	01 90       	ld	r0, Z+
    10aa:	01 10       	cpse	r0, r1
    10ac:	d8 f7       	brcc	.-10     	; 0x10a4 <strnlen+0x2>
    10ae:	80 95       	com	r24
    10b0:	90 95       	com	r25
    10b2:	8e 0f       	add	r24, r30
    10b4:	9f 1f       	adc	r25, r31
    10b6:	08 95       	ret

000010b8 <fputc>:
    10b8:	0f 93       	push	r16
    10ba:	1f 93       	push	r17
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	fb 01       	movw	r30, r22
    10c2:	23 81       	ldd	r18, Z+3	; 0x03
    10c4:	21 fd       	sbrc	r18, 1
    10c6:	03 c0       	rjmp	.+6      	; 0x10ce <fputc+0x16>
    10c8:	8f ef       	ldi	r24, 0xFF	; 255
    10ca:	9f ef       	ldi	r25, 0xFF	; 255
    10cc:	2c c0       	rjmp	.+88     	; 0x1126 <fputc+0x6e>
    10ce:	22 ff       	sbrs	r18, 2
    10d0:	16 c0       	rjmp	.+44     	; 0x10fe <fputc+0x46>
    10d2:	46 81       	ldd	r20, Z+6	; 0x06
    10d4:	57 81       	ldd	r21, Z+7	; 0x07
    10d6:	24 81       	ldd	r18, Z+4	; 0x04
    10d8:	35 81       	ldd	r19, Z+5	; 0x05
    10da:	42 17       	cp	r20, r18
    10dc:	53 07       	cpc	r21, r19
    10de:	44 f4       	brge	.+16     	; 0x10f0 <fputc+0x38>
    10e0:	a0 81       	ld	r26, Z
    10e2:	b1 81       	ldd	r27, Z+1	; 0x01
    10e4:	9d 01       	movw	r18, r26
    10e6:	2f 5f       	subi	r18, 0xFF	; 255
    10e8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ea:	31 83       	std	Z+1, r19	; 0x01
    10ec:	20 83       	st	Z, r18
    10ee:	8c 93       	st	X, r24
    10f0:	26 81       	ldd	r18, Z+6	; 0x06
    10f2:	37 81       	ldd	r19, Z+7	; 0x07
    10f4:	2f 5f       	subi	r18, 0xFF	; 255
    10f6:	3f 4f       	sbci	r19, 0xFF	; 255
    10f8:	37 83       	std	Z+7, r19	; 0x07
    10fa:	26 83       	std	Z+6, r18	; 0x06
    10fc:	14 c0       	rjmp	.+40     	; 0x1126 <fputc+0x6e>
    10fe:	8b 01       	movw	r16, r22
    1100:	ec 01       	movw	r28, r24
    1102:	fb 01       	movw	r30, r22
    1104:	00 84       	ldd	r0, Z+8	; 0x08
    1106:	f1 85       	ldd	r31, Z+9	; 0x09
    1108:	e0 2d       	mov	r30, r0
    110a:	09 95       	icall
    110c:	89 2b       	or	r24, r25
    110e:	e1 f6       	brne	.-72     	; 0x10c8 <fputc+0x10>
    1110:	d8 01       	movw	r26, r16
    1112:	16 96       	adiw	r26, 0x06	; 6
    1114:	8d 91       	ld	r24, X+
    1116:	9c 91       	ld	r25, X
    1118:	17 97       	sbiw	r26, 0x07	; 7
    111a:	01 96       	adiw	r24, 0x01	; 1
    111c:	17 96       	adiw	r26, 0x07	; 7
    111e:	9c 93       	st	X, r25
    1120:	8e 93       	st	-X, r24
    1122:	16 97       	sbiw	r26, 0x06	; 6
    1124:	ce 01       	movw	r24, r28
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	1f 91       	pop	r17
    112c:	0f 91       	pop	r16
    112e:	08 95       	ret

00001130 <__ultoa_invert>:
    1130:	fa 01       	movw	r30, r20
    1132:	aa 27       	eor	r26, r26
    1134:	28 30       	cpi	r18, 0x08	; 8
    1136:	51 f1       	breq	.+84     	; 0x118c <__ultoa_invert+0x5c>
    1138:	20 31       	cpi	r18, 0x10	; 16
    113a:	81 f1       	breq	.+96     	; 0x119c <__ultoa_invert+0x6c>
    113c:	e8 94       	clt
    113e:	6f 93       	push	r22
    1140:	6e 7f       	andi	r22, 0xFE	; 254
    1142:	6e 5f       	subi	r22, 0xFE	; 254
    1144:	7f 4f       	sbci	r23, 0xFF	; 255
    1146:	8f 4f       	sbci	r24, 0xFF	; 255
    1148:	9f 4f       	sbci	r25, 0xFF	; 255
    114a:	af 4f       	sbci	r26, 0xFF	; 255
    114c:	b1 e0       	ldi	r27, 0x01	; 1
    114e:	3e d0       	rcall	.+124    	; 0x11cc <__ultoa_invert+0x9c>
    1150:	b4 e0       	ldi	r27, 0x04	; 4
    1152:	3c d0       	rcall	.+120    	; 0x11cc <__ultoa_invert+0x9c>
    1154:	67 0f       	add	r22, r23
    1156:	78 1f       	adc	r23, r24
    1158:	89 1f       	adc	r24, r25
    115a:	9a 1f       	adc	r25, r26
    115c:	a1 1d       	adc	r26, r1
    115e:	68 0f       	add	r22, r24
    1160:	79 1f       	adc	r23, r25
    1162:	8a 1f       	adc	r24, r26
    1164:	91 1d       	adc	r25, r1
    1166:	a1 1d       	adc	r26, r1
    1168:	6a 0f       	add	r22, r26
    116a:	71 1d       	adc	r23, r1
    116c:	81 1d       	adc	r24, r1
    116e:	91 1d       	adc	r25, r1
    1170:	a1 1d       	adc	r26, r1
    1172:	20 d0       	rcall	.+64     	; 0x11b4 <__ultoa_invert+0x84>
    1174:	09 f4       	brne	.+2      	; 0x1178 <__ultoa_invert+0x48>
    1176:	68 94       	set
    1178:	3f 91       	pop	r19
    117a:	2a e0       	ldi	r18, 0x0A	; 10
    117c:	26 9f       	mul	r18, r22
    117e:	11 24       	eor	r1, r1
    1180:	30 19       	sub	r19, r0
    1182:	30 5d       	subi	r19, 0xD0	; 208
    1184:	31 93       	st	Z+, r19
    1186:	de f6       	brtc	.-74     	; 0x113e <__ultoa_invert+0xe>
    1188:	cf 01       	movw	r24, r30
    118a:	08 95       	ret
    118c:	46 2f       	mov	r20, r22
    118e:	47 70       	andi	r20, 0x07	; 7
    1190:	40 5d       	subi	r20, 0xD0	; 208
    1192:	41 93       	st	Z+, r20
    1194:	b3 e0       	ldi	r27, 0x03	; 3
    1196:	0f d0       	rcall	.+30     	; 0x11b6 <__ultoa_invert+0x86>
    1198:	c9 f7       	brne	.-14     	; 0x118c <__ultoa_invert+0x5c>
    119a:	f6 cf       	rjmp	.-20     	; 0x1188 <__ultoa_invert+0x58>
    119c:	46 2f       	mov	r20, r22
    119e:	4f 70       	andi	r20, 0x0F	; 15
    11a0:	40 5d       	subi	r20, 0xD0	; 208
    11a2:	4a 33       	cpi	r20, 0x3A	; 58
    11a4:	18 f0       	brcs	.+6      	; 0x11ac <__ultoa_invert+0x7c>
    11a6:	49 5d       	subi	r20, 0xD9	; 217
    11a8:	31 fd       	sbrc	r19, 1
    11aa:	40 52       	subi	r20, 0x20	; 32
    11ac:	41 93       	st	Z+, r20
    11ae:	02 d0       	rcall	.+4      	; 0x11b4 <__ultoa_invert+0x84>
    11b0:	a9 f7       	brne	.-22     	; 0x119c <__ultoa_invert+0x6c>
    11b2:	ea cf       	rjmp	.-44     	; 0x1188 <__ultoa_invert+0x58>
    11b4:	b4 e0       	ldi	r27, 0x04	; 4
    11b6:	a6 95       	lsr	r26
    11b8:	97 95       	ror	r25
    11ba:	87 95       	ror	r24
    11bc:	77 95       	ror	r23
    11be:	67 95       	ror	r22
    11c0:	ba 95       	dec	r27
    11c2:	c9 f7       	brne	.-14     	; 0x11b6 <__ultoa_invert+0x86>
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	61 05       	cpc	r22, r1
    11c8:	71 05       	cpc	r23, r1
    11ca:	08 95       	ret
    11cc:	9b 01       	movw	r18, r22
    11ce:	ac 01       	movw	r20, r24
    11d0:	0a 2e       	mov	r0, r26
    11d2:	06 94       	lsr	r0
    11d4:	57 95       	ror	r21
    11d6:	47 95       	ror	r20
    11d8:	37 95       	ror	r19
    11da:	27 95       	ror	r18
    11dc:	ba 95       	dec	r27
    11de:	c9 f7       	brne	.-14     	; 0x11d2 <__ultoa_invert+0xa2>
    11e0:	62 0f       	add	r22, r18
    11e2:	73 1f       	adc	r23, r19
    11e4:	84 1f       	adc	r24, r20
    11e6:	95 1f       	adc	r25, r21
    11e8:	a0 1d       	adc	r26, r0
    11ea:	08 95       	ret

000011ec <_exit>:
    11ec:	f8 94       	cli

000011ee <__stop_program>:
    11ee:	ff cf       	rjmp	.-2      	; 0x11ee <__stop_program>
