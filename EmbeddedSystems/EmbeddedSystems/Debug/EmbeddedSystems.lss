
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000bce  00000c62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000430  00800102  00800102  00000c64  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c64  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001612  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000da7  00000000  00000000  00002536  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010be  00000000  00000000  000032dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000838  00000000  00000000  0000439c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000801  00000000  00000000  00004bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000107a  00000000  00000000  000053d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  0000644f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	be c3       	rjmp	.+1916   	; 0x7a2 <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	90 c3       	rjmp	.+1824   	; 0x762 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	84 c5       	rjmp	.+2824   	; 0xb5a <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	41 c5       	rjmp	.+2690   	; 0xadc <__vector_22>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4d c0       	rjmp	.+154    	; 0xfc <__vector_24>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ec       	ldi	r30, 0xCE	; 206
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	25 e0       	ldi	r18, 0x05	; 5
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 33       	cpi	r26, 0x32	; 50
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	dd d1       	rcall	.+954    	; 0x47e <main>
  c4:	82 c5       	rjmp	.+2820   	; 0xbca <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <adc_init>:
    // Make average
    avg = avg / 8;
    
    // Return a 16 bit value
    return (avg & 0xffff);
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	8a e7       	ldi	r24, 0x7A	; 122
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	2a e7       	ldi	r18, 0x7A	; 122
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	f9 01       	movw	r30, r18
  da:	20 81       	ld	r18, Z
  dc:	27 60       	ori	r18, 0x07	; 7
  de:	fc 01       	movw	r30, r24
  e0:	20 83       	st	Z, r18
  e2:	8a e7       	ldi	r24, 0x7A	; 122
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	2a e7       	ldi	r18, 0x7A	; 122
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	f9 01       	movw	r30, r18
  ec:	20 81       	ld	r18, Z
  ee:	28 6c       	ori	r18, 0xC8	; 200
  f0:	fc 01       	movw	r30, r24
  f2:	20 83       	st	Z, r18
  f4:	00 00       	nop
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <__vector_24>:

ISR(ADC_vect){
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 10c:	0f 92       	push	r0
 10e:	2f 93       	push	r18
 110:	3f 93       	push	r19
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	00 d0       	rcall	.+0      	; 0x120 <__vector_24+0x24>
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
    // Pull data from AD conversion
    uint16_t res = ADC;
 124:	88 e7       	ldi	r24, 0x78	; 120
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	fc 01       	movw	r30, r24
 12a:	80 81       	ld	r24, Z
 12c:	91 81       	ldd	r25, Z+1	; 0x01
 12e:	9a 83       	std	Y+2, r25	; 0x02
 130:	89 83       	std	Y+1, r24	; 0x01
#ifdef DEBUG_LEDS_ADC
    Led3_Off();
#endif
    
    // Switch between LM35 and Poti
    switch (ADMUX & (1 << MUX0)) {
 132:	8c e7       	ldi	r24, 0x7C	; 124
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	fc 01       	movw	r30, r24
 138:	80 81       	ld	r24, Z
 13a:	88 2f       	mov	r24, r24
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	81 70       	andi	r24, 0x01	; 1
 140:	99 27       	eor	r25, r25
 142:	00 97       	sbiw	r24, 0x00	; 0
 144:	19 f0       	breq	.+6      	; 0x14c <__vector_24+0x50>
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	b9 f1       	breq	.+110    	; 0x1b8 <__vector_24+0xbc>
#endif
            }
            break;
            
        default:
            break;
 14a:	63 c0       	rjmp	.+198    	; 0x212 <__vector_24+0x116>
    
    // Switch between LM35 and Poti
    switch (ADMUX & (1 << MUX0)) {
        case 0: // LM35
            
            if (index_LM35 == 42) {
 14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 150:	8a 32       	cpi	r24, 0x2A	; 42
 152:	19 f4       	brne	.+6      	; 0x15a <__vector_24+0x5e>
                // Trash first conversion
                index_LM35 = 0;
 154:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
                
#ifdef DEBUG_LEDS_ADC
                Led4_Off();
#endif
            }
            break;
 158:	5c c0       	rjmp	.+184    	; 0x212 <__vector_24+0x116>
                // Trash first conversion
                index_LM35 = 0;
#ifdef DEBUG_LEDS_ADC
                Led4_On();
#endif
            }else if (index_LM35 >= 0 && index_LM35 <= 7) {
 15a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 15e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 162:	88 30       	cpi	r24, 0x08	; 8
 164:	98 f4       	brcc	.+38     	; 0x18c <__vector_24+0x90>
                // Store 8 AD conversions in the Array
                LM35_Array[index_LM35] = res;
 166:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 16a:	88 2f       	mov	r24, r24
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	8e 5f       	subi	r24, 0xFE	; 254
 174:	9e 4f       	sbci	r25, 0xFE	; 254
 176:	29 81       	ldd	r18, Y+1	; 0x01
 178:	3a 81       	ldd	r19, Y+2	; 0x02
 17a:	fc 01       	movw	r30, r24
 17c:	31 83       	std	Z+1, r19	; 0x01
 17e:	20 83       	st	Z, r18
                index_LM35++;
 180:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 184:	8f 5f       	subi	r24, 0xFF	; 255
 186:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
                
#ifdef DEBUG_LEDS_ADC
                Led4_Off();
#endif
            }
            break;
 18a:	43 c0       	rjmp	.+134    	; 0x212 <__vector_24+0x116>
                // Store 8 AD conversions in the Array
                LM35_Array[index_LM35] = res;
                index_LM35++;
            }else {
                // Switch to Poti
                ADMUX &= ~(30); // Set MUX1..4 to 0
 18c:	8c e7       	ldi	r24, 0x7C	; 124
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	2c e7       	ldi	r18, 0x7C	; 124
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	f9 01       	movw	r30, r18
 196:	20 81       	ld	r18, Z
 198:	21 7e       	andi	r18, 0xE1	; 225
 19a:	fc 01       	movw	r30, r24
 19c:	20 83       	st	Z, r18
                ADMUX |= (1 << MUX0);
 19e:	8c e7       	ldi	r24, 0x7C	; 124
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	2c e7       	ldi	r18, 0x7C	; 124
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	f9 01       	movw	r30, r18
 1a8:	20 81       	ld	r18, Z
 1aa:	21 60       	ori	r18, 0x01	; 1
 1ac:	fc 01       	movw	r30, r24
 1ae:	20 83       	st	Z, r18
                
                // Set index to default value, so that the first conversion will be trashed
                index_LM35 = 42;
 1b0:	8a e2       	ldi	r24, 0x2A	; 42
 1b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
                
#ifdef DEBUG_LEDS_ADC
                Led4_Off();
#endif
            }
            break;
 1b6:	2d c0       	rjmp	.+90     	; 0x212 <__vector_24+0x116>
            
        case 1: // Poti
            if (index_Poti == 42) { // Trash first conversion
 1b8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
 1bc:	8a 32       	cpi	r24, 0x2A	; 42
 1be:	19 f4       	brne	.+6      	; 0x1c6 <__vector_24+0xca>
#ifdef DEBUG_LEDS_ADC
                Led5_On();
#endif
                index_Poti = 0;
 1c0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <index_Poti>
                
#ifdef DEBUG_LEDS_ADC
                Led5_Off();
#endif
            }
            break;
 1c4:	25 c0       	rjmp	.+74     	; 0x210 <__vector_24+0x114>
            if (index_Poti == 42) { // Trash first conversion
#ifdef DEBUG_LEDS_ADC
                Led5_On();
#endif
                index_Poti = 0;
            }else if (index_Poti >= 0 && index_Poti <= 7) {
 1c6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
 1ca:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
 1ce:	88 30       	cpi	r24, 0x08	; 8
 1d0:	98 f4       	brcc	.+38     	; 0x1f8 <__vector_24+0xfc>
                // Store 8 AD conversions in the Array
                Poti_Array[index_Poti] = res;
 1d2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
 1d6:	88 2f       	mov	r24, r24
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	8e 5e       	subi	r24, 0xEE	; 238
 1e0:	9e 4f       	sbci	r25, 0xFE	; 254
 1e2:	29 81       	ldd	r18, Y+1	; 0x01
 1e4:	3a 81       	ldd	r19, Y+2	; 0x02
 1e6:	fc 01       	movw	r30, r24
 1e8:	31 83       	std	Z+1, r19	; 0x01
 1ea:	20 83       	st	Z, r18
                index_Poti++;
 1ec:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
 1f0:	8f 5f       	subi	r24, 0xFF	; 255
 1f2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <index_Poti>
                
#ifdef DEBUG_LEDS_ADC
                Led5_Off();
#endif
            }
            break;
 1f6:	0c c0       	rjmp	.+24     	; 0x210 <__vector_24+0x114>
                // Store 8 AD conversions in the Array
                Poti_Array[index_Poti] = res;
                index_Poti++;
            }else {
                // Switch to LM35
                ADMUX &= ~(31); // Set MUX0..4 to 0
 1f8:	8c e7       	ldi	r24, 0x7C	; 124
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	2c e7       	ldi	r18, 0x7C	; 124
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	f9 01       	movw	r30, r18
 202:	20 81       	ld	r18, Z
 204:	20 7e       	andi	r18, 0xE0	; 224
 206:	fc 01       	movw	r30, r24
 208:	20 83       	st	Z, r18
                
                // Set index to default value, so that the first conversion will be trashed
                index_Poti = 42;
 20a:	8a e2       	ldi	r24, 0x2A	; 42
 20c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <index_Poti>
                
#ifdef DEBUG_LEDS_ADC
                Led5_Off();
#endif
            }
            break;
 210:	00 00       	nop
#ifdef DEBUG_LEDS_ADC
    Led3_On();
#endif
    
    // Trigger next conversion
    ADCSRA |= (1 << ADSC) | (1 << ADIE);
 212:	8a e7       	ldi	r24, 0x7A	; 122
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	2a e7       	ldi	r18, 0x7A	; 122
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	f9 01       	movw	r30, r18
 21c:	20 81       	ld	r18, Z
 21e:	28 64       	ori	r18, 0x48	; 72
 220:	fc 01       	movw	r30, r24
 222:	20 83       	st	Z, r18
}
 224:	00 00       	nop
 226:	0f 90       	pop	r0
 228:	0f 90       	pop	r0
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	ff 91       	pop	r31
 230:	ef 91       	pop	r30
 232:	9f 91       	pop	r25
 234:	8f 91       	pop	r24
 236:	3f 91       	pop	r19
 238:	2f 91       	pop	r18
 23a:	0f 90       	pop	r0
 23c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 240:	0f 90       	pop	r0
 242:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <encoder_isr>:
  cli();
  val = enc_delta;
  enc_delta = val & 3;
  sei();
  return val >> 2;
}
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	00 d0       	rcall	.+0      	; 0x252 <encoder_isr+0x6>
 252:	00 d0       	rcall	.+0      	; 0x254 <encoder_isr+0x8>
 254:	cd b7       	in	r28, 0x3d	; 61
 256:	de b7       	in	r29, 0x3e	; 62
 258:	1a 82       	std	Y+2, r1	; 0x02
 25a:	19 82       	std	Y+1, r1	; 0x01
 25c:	86 e2       	ldi	r24, 0x26	; 38
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	fc 01       	movw	r30, r24
 262:	80 81       	ld	r24, Z
 264:	88 2f       	mov	r24, r24
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	80 74       	andi	r24, 0x40	; 64
 26a:	99 27       	eor	r25, r25
 26c:	89 2b       	or	r24, r25
 26e:	21 f0       	breq	.+8      	; 0x278 <encoder_isr+0x2c>
 270:	83 e0       	ldi	r24, 0x03	; 3
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	9a 83       	std	Y+2, r25	; 0x02
 276:	89 83       	std	Y+1, r24	; 0x01
 278:	86 e2       	ldi	r24, 0x26	; 38
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	fc 01       	movw	r30, r24
 27e:	80 81       	ld	r24, Z
 280:	88 23       	and	r24, r24
 282:	34 f4       	brge	.+12     	; 0x290 <encoder_isr+0x44>
 284:	89 81       	ldd	r24, Y+1	; 0x01
 286:	9a 81       	ldd	r25, Y+2	; 0x02
 288:	f1 e0       	ldi	r31, 0x01	; 1
 28a:	8f 27       	eor	r24, r31
 28c:	9a 83       	std	Y+2, r25	; 0x02
 28e:	89 83       	std	Y+1, r24	; 0x01
 290:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <last>
 294:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <last+0x1>
 298:	89 81       	ldd	r24, Y+1	; 0x01
 29a:	9a 81       	ldd	r25, Y+2	; 0x02
 29c:	a9 01       	movw	r20, r18
 29e:	48 1b       	sub	r20, r24
 2a0:	59 0b       	sbc	r21, r25
 2a2:	ca 01       	movw	r24, r20
 2a4:	9c 83       	std	Y+4, r25	; 0x04
 2a6:	8b 83       	std	Y+3, r24	; 0x03
 2a8:	8b 81       	ldd	r24, Y+3	; 0x03
 2aa:	9c 81       	ldd	r25, Y+4	; 0x04
 2ac:	81 70       	andi	r24, 0x01	; 1
 2ae:	99 27       	eor	r25, r25
 2b0:	89 2b       	or	r24, r25
 2b2:	b9 f0       	breq	.+46     	; 0x2e2 <encoder_isr+0x96>
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	9a 81       	ldd	r25, Y+2	; 0x02
 2b8:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <last+0x1>
 2bc:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <last>
 2c0:	8b 81       	ldd	r24, Y+3	; 0x03
 2c2:	9c 81       	ldd	r25, Y+4	; 0x04
 2c4:	82 70       	andi	r24, 0x02	; 2
 2c6:	99 27       	eor	r25, r25
 2c8:	9c 01       	movw	r18, r24
 2ca:	21 50       	subi	r18, 0x01	; 1
 2cc:	31 09       	sbc	r19, r1
 2ce:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <enc_delta>
 2d2:	90 91 2f 05 	lds	r25, 0x052F	; 0x80052f <enc_delta+0x1>
 2d6:	82 0f       	add	r24, r18
 2d8:	93 1f       	adc	r25, r19
 2da:	90 93 2f 05 	sts	0x052F, r25	; 0x80052f <enc_delta+0x1>
 2de:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <enc_delta>
 2e2:	00 00       	nop
 2e4:	0f 90       	pop	r0
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	0f 90       	pop	r0
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <encode_init>:
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	00 d0       	rcall	.+0      	; 0x2f8 <encode_init+0x6>
 2f8:	cd b7       	in	r28, 0x3d	; 61
 2fa:	de b7       	in	r29, 0x3e	; 62
 2fc:	66 e2       	ldi	r22, 0x26	; 38
 2fe:	71 e0       	ldi	r23, 0x01	; 1
 300:	80 e1       	ldi	r24, 0x10	; 16
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	6a d1       	rcall	.+724    	; 0x5da <Timer2_init>
 306:	1a 82       	std	Y+2, r1	; 0x02
 308:	19 82       	std	Y+1, r1	; 0x01
 30a:	86 e2       	ldi	r24, 0x26	; 38
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	fc 01       	movw	r30, r24
 310:	80 81       	ld	r24, Z
 312:	88 2f       	mov	r24, r24
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	80 74       	andi	r24, 0x40	; 64
 318:	99 27       	eor	r25, r25
 31a:	89 2b       	or	r24, r25
 31c:	21 f0       	breq	.+8      	; 0x326 <encode_init+0x34>
 31e:	83 e0       	ldi	r24, 0x03	; 3
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	9a 83       	std	Y+2, r25	; 0x02
 324:	89 83       	std	Y+1, r24	; 0x01
 326:	86 e2       	ldi	r24, 0x26	; 38
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	fc 01       	movw	r30, r24
 32c:	80 81       	ld	r24, Z
 32e:	88 23       	and	r24, r24
 330:	34 f4       	brge	.+12     	; 0x33e <encode_init+0x4c>
 332:	89 81       	ldd	r24, Y+1	; 0x01
 334:	9a 81       	ldd	r25, Y+2	; 0x02
 336:	f1 e0       	ldi	r31, 0x01	; 1
 338:	8f 27       	eor	r24, r31
 33a:	9a 83       	std	Y+2, r25	; 0x02
 33c:	89 83       	std	Y+1, r24	; 0x01
 33e:	89 81       	ldd	r24, Y+1	; 0x01
 340:	9a 81       	ldd	r25, Y+2	; 0x02
 342:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <last+0x1>
 346:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <last>
 34a:	10 92 2f 05 	sts	0x052F, r1	; 0x80052f <enc_delta+0x1>
 34e:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <enc_delta>
 352:	00 00       	nop
 354:	0f 90       	pop	r0
 356:	0f 90       	pop	r0
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	08 95       	ret

0000035e <encode_read1>:
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	00 d0       	rcall	.+0      	; 0x364 <encode_read1+0x6>
 364:	cd b7       	in	r28, 0x3d	; 61
 366:	de b7       	in	r29, 0x3e	; 62
 368:	f8 94       	cli
 36a:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <enc_delta>
 36e:	90 91 2f 05 	lds	r25, 0x052F	; 0x80052f <enc_delta+0x1>
 372:	9a 83       	std	Y+2, r25	; 0x02
 374:	89 83       	std	Y+1, r24	; 0x01
 376:	10 92 2f 05 	sts	0x052F, r1	; 0x80052f <enc_delta+0x1>
 37a:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <enc_delta>
 37e:	78 94       	sei
 380:	89 81       	ldd	r24, Y+1	; 0x01
 382:	9a 81       	ldd	r25, Y+2	; 0x02
 384:	0f 90       	pop	r0
 386:	0f 90       	pop	r0
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	08 95       	ret

0000038e <loop>:


int loop( void )
{
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	00 d0       	rcall	.+0      	; 0x394 <loop+0x6>
 394:	00 d0       	rcall	.+0      	; 0x396 <loop+0x8>
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
  int32_t val = 0;
 39a:	19 82       	std	Y+1, r1	; 0x01
 39c:	1a 82       	std	Y+2, r1	; 0x02
 39e:	1b 82       	std	Y+3, r1	; 0x03
 3a0:	1c 82       	std	Y+4, r1	; 0x04

  encode_init();
 3a2:	a7 df       	rcall	.-178    	; 0x2f2 <encode_init>
  sei();

  for(;;){
    val += encode_read1();          // read a single step encoder
 3a4:	78 94       	sei
 3a6:	db df       	rcall	.-74     	; 0x35e <encode_read1>
 3a8:	09 2e       	mov	r0, r25
 3aa:	00 0c       	add	r0, r0
 3ac:	aa 0b       	sbc	r26, r26
 3ae:	bb 0b       	sbc	r27, r27
 3b0:	29 81       	ldd	r18, Y+1	; 0x01
 3b2:	3a 81       	ldd	r19, Y+2	; 0x02
 3b4:	4b 81       	ldd	r20, Y+3	; 0x03
 3b6:	5c 81       	ldd	r21, Y+4	; 0x04
 3b8:	82 0f       	add	r24, r18
 3ba:	93 1f       	adc	r25, r19
 3bc:	a4 1f       	adc	r26, r20
 3be:	b5 1f       	adc	r27, r21
 3c0:	89 83       	std	Y+1, r24	; 0x01
 3c2:	9a 83       	std	Y+2, r25	; 0x02
 3c4:	ab 83       	std	Y+3, r26	; 0x03
 3c6:	bc 83       	std	Y+4, r27	; 0x04
    PORTB = val;
 3c8:	85 e2       	ldi	r24, 0x25	; 37
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	29 81       	ldd	r18, Y+1	; 0x01
 3ce:	fc 01       	movw	r30, r24
 3d0:	20 83       	st	Z, r18
  }
 3d2:	e9 cf       	rjmp	.-46     	; 0x3a6 <loop+0x18>

000003d4 <Led_init>:

#include "Led.h"

void Led_init(uint8_t initD) {
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
 3d8:	1f 92       	push	r1
 3da:	cd b7       	in	r28, 0x3d	; 61
 3dc:	de b7       	in	r29, 0x3e	; 62
 3de:	89 83       	std	Y+1, r24	; 0x01
    // Set PORTB to outputs
    DDRB = 0xFF;
 3e0:	84 e2       	ldi	r24, 0x24	; 36
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	2f ef       	ldi	r18, 0xFF	; 255
 3e6:	fc 01       	movw	r30, r24
 3e8:	20 83       	st	Z, r18
    PORTB = 0x00;
 3ea:	85 e2       	ldi	r24, 0x25	; 37
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	fc 01       	movw	r30, r24
 3f0:	10 82       	st	Z, r1
    
    if (initD) {
 3f2:	89 81       	ldd	r24, Y+1	; 0x01
 3f4:	88 23       	and	r24, r24
 3f6:	91 f0       	breq	.+36     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
        // Set PORTD 0..4 to outputs
        DDRD |= ( (1 << 4) | (1 << 3) | (1 << 2) | (1 << 1) | (1 << 0));
 3f8:	8a e2       	ldi	r24, 0x2A	; 42
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	2a e2       	ldi	r18, 0x2A	; 42
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	f9 01       	movw	r30, r18
 402:	20 81       	ld	r18, Z
 404:	2f 61       	ori	r18, 0x1F	; 31
 406:	fc 01       	movw	r30, r24
 408:	20 83       	st	Z, r18
        PORTD &= ~( (1 << 4) | (1 << 3) | (1 << 2) | (1 << 1) | (1 << 0));
 40a:	8b e2       	ldi	r24, 0x2B	; 43
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	2b e2       	ldi	r18, 0x2B	; 43
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	f9 01       	movw	r30, r18
 414:	20 81       	ld	r18, Z
 416:	20 7e       	andi	r18, 0xE0	; 224
 418:	fc 01       	movw	r30, r24
 41a:	20 83       	st	Z, r18
    }
}
 41c:	00 00       	nop
 41e:	0f 90       	pop	r0
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	08 95       	ret

00000426 <Taster_init>:
 ---------------------
 - DDR Reg has to be set to 0
 - PORT Reg has to be set to 1
 -> Pin is input with pull-up
 */
void Taster_init() {
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	cd b7       	in	r28, 0x3d	; 61
 42c:	de b7       	in	r29, 0x3e	; 62
    
    // set to inputs
    DDRC &= ~(1 << 2);
 42e:	87 e2       	ldi	r24, 0x27	; 39
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	27 e2       	ldi	r18, 0x27	; 39
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	f9 01       	movw	r30, r18
 438:	20 81       	ld	r18, Z
 43a:	2b 7f       	andi	r18, 0xFB	; 251
 43c:	fc 01       	movw	r30, r24
 43e:	20 83       	st	Z, r18
    DDRD &= ~( (1 << 7) | (1 << 6) | (1 << 5) );
 440:	8a e2       	ldi	r24, 0x2A	; 42
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	2a e2       	ldi	r18, 0x2A	; 42
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	f9 01       	movw	r30, r18
 44a:	20 81       	ld	r18, Z
 44c:	2f 71       	andi	r18, 0x1F	; 31
 44e:	fc 01       	movw	r30, r24
 450:	20 83       	st	Z, r18
    
    // enable pull-up
    PORTC |= (1 << 2);
 452:	88 e2       	ldi	r24, 0x28	; 40
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	28 e2       	ldi	r18, 0x28	; 40
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	f9 01       	movw	r30, r18
 45c:	20 81       	ld	r18, Z
 45e:	24 60       	ori	r18, 0x04	; 4
 460:	fc 01       	movw	r30, r24
 462:	20 83       	st	Z, r18
    PORTD |= (1 << 7) | (1 << 6) | (1 << 5);
 464:	8b e2       	ldi	r24, 0x2B	; 43
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	2b e2       	ldi	r18, 0x2B	; 43
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	f9 01       	movw	r30, r18
 46e:	20 81       	ld	r18, Z
 470:	20 6e       	ori	r18, 0xE0	; 224
 472:	fc 01       	movw	r30, r24
 474:	20 83       	st	Z, r18
}
 476:	00 00       	nop
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	08 95       	ret

0000047e <main>:
#define CLK_F_MHZ 16

uint8_t iahsdfoads = 0;
uint16_t afdsfasdf = 0;

int main(void) {
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	cd b7       	in	r28, 0x3d	; 61
 484:	de b7       	in	r29, 0x3e	; 62
 486:	c9 57       	subi	r28, 0x79	; 121
 488:	d1 09       	sbc	r29, r1
 48a:	0f b6       	in	r0, 0x3f	; 63
 48c:	f8 94       	cli
 48e:	de bf       	out	0x3e, r29	; 62
 490:	0f be       	out	0x3f, r0	; 63
 492:	cd bf       	out	0x3d, r28	; 61
	
    cli();
 494:	f8 94       	cli
    Led_init(0);	// Don't set LEDs at PORTD
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	9d df       	rcall	.-198    	; 0x3d4 <Led_init>
	Taster_init();
 49a:	c5 df       	rcall	.-118    	; 0x426 <Taster_init>
    Timer_init(CLK_F_MHZ); // Init timer with 16MHZ clock
 49c:	80 e1       	ldi	r24, 0x10	; 16
	uart_init_isr();
 49e:	30 d1       	rcall	.+608    	; 0x700 <Timer_init>
    adc_init();
 4a0:	02 d3       	rcall	.+1540   	; 0xaa6 <uart_init_isr>
 4a2:	12 de       	rcall	.-988    	; 0xc8 <adc_init>
    encode_init();
 4a4:	26 df       	rcall	.-436    	; 0x2f2 <encode_init>
 4a6:	78 94       	sei
	sei();
 4a8:	38 d1       	rcall	.+624    	; 0x71a <Timer_getTick>
    
    uint16_t timeVarMain = Timer_getTick();
 4aa:	9a 83       	std	Y+2, r25	; 0x02
 4ac:	89 83       	std	Y+1, r24	; 0x01
 4ae:	22 e3       	ldi	r18, 0x32	; 50
 4b0:	ce 01       	movw	r24, r28
    char data_s;
    char data[50] = {0};
 4b2:	07 96       	adiw	r24, 0x07	; 7
 4b4:	fc 01       	movw	r30, r24
 4b6:	32 2f       	mov	r19, r18
 4b8:	11 92       	st	Z+, r1
 4ba:	3a 95       	dec	r19
 4bc:	e9 f7       	brne	.-6      	; 0x4b8 <main+0x3a>
 4be:	1c 82       	std	Y+4, r1	; 0x04
    int isafd = 0;
 4c0:	1b 82       	std	Y+3, r1	; 0x03
 4c2:	1e 82       	std	Y+6, r1	; 0x06
	char str[65];
    uint16_t Poti = 0;
 4c4:	1d 82       	std	Y+5, r1	; 0x05
 4c6:	63 df       	rcall	.-314    	; 0x38e <loop>
	
    while (1) {
        loop();
 4c8:	fe cf       	rjmp	.-4      	; 0x4c6 <main+0x48>

000004ca <Timer_init_withoutStruct>:
 4ca:	cf 93       	push	r28
            }
        }*/
        
        //trafficLight(0);
        //playground();
    }
 4cc:	df 93       	push	r29
    TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
}

void Timer_init_withoutStruct(uint8_t clockFreqMhz) {
 4ce:	1f 92       	push	r1
 4d0:	cd b7       	in	r28, 0x3d	; 61
 4d2:	de b7       	in	r29, 0x3e	; 62
 4d4:	89 83       	std	Y+1, r24	; 0x01
    // datasheet page 97
    // set mode to clear timer on compare (CTC)
    TCCR0B &= ~(1 << WGM02);
 4d6:	85 e4       	ldi	r24, 0x45	; 69
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	25 e4       	ldi	r18, 0x45	; 69
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	f9 01       	movw	r30, r18
 4e0:	20 81       	ld	r18, Z
 4e2:	27 7f       	andi	r18, 0xF7	; 247
 4e4:	fc 01       	movw	r30, r24
 4e6:	20 83       	st	Z, r18
    TCCR0A |= (1 << WGM01);
 4e8:	84 e4       	ldi	r24, 0x44	; 68
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	24 e4       	ldi	r18, 0x44	; 68
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	f9 01       	movw	r30, r18
 4f2:	20 81       	ld	r18, Z
 4f4:	22 60       	ori	r18, 0x02	; 2
 4f6:	fc 01       	movw	r30, r24
 4f8:	20 83       	st	Z, r18
    TCCR0A &= ~(1 << WGM00);
 4fa:	84 e4       	ldi	r24, 0x44	; 68
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	24 e4       	ldi	r18, 0x44	; 68
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	f9 01       	movw	r30, r18
 504:	20 81       	ld	r18, Z
 506:	2e 7f       	andi	r18, 0xFE	; 254
 508:	fc 01       	movw	r30, r24
 50a:	20 83       	st	Z, r18
    
    
    switch (clockFreqMhz) {
 50c:	89 81       	ldd	r24, Y+1	; 0x01
 50e:	88 2f       	mov	r24, r24
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	40 97       	sbiw	r24, 0x10	; 16
 514:	09 f5       	brne	.+66     	; 0x558 <Timer_init_withoutStruct+0x8e>
        case 16:
            // extern osc (16 MHZ)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = COMPA_VAL-1;   // dez 249; range 0 - 249 -> 250 cycles till interrupt
 516:	87 e4       	ldi	r24, 0x47	; 71
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	29 ef       	ldi	r18, 0xF9	; 249
 51c:	fc 01       	movw	r30, r24
 51e:	20 83       	st	Z, r18
            
            // set prescaler to 1/64
            TCCR0B &= ~(1 << CS02);
 520:	85 e4       	ldi	r24, 0x45	; 69
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	25 e4       	ldi	r18, 0x45	; 69
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	f9 01       	movw	r30, r18
 52a:	20 81       	ld	r18, Z
 52c:	2b 7f       	andi	r18, 0xFB	; 251
 52e:	fc 01       	movw	r30, r24
 530:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
 532:	85 e4       	ldi	r24, 0x45	; 69
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	25 e4       	ldi	r18, 0x45	; 69
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	f9 01       	movw	r30, r18
 53c:	20 81       	ld	r18, Z
 53e:	22 60       	ori	r18, 0x02	; 2
 540:	fc 01       	movw	r30, r24
 542:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS00);
 544:	85 e4       	ldi	r24, 0x45	; 69
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	25 e4       	ldi	r18, 0x45	; 69
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	f9 01       	movw	r30, r18
 54e:	20 81       	ld	r18, Z
 550:	21 60       	ori	r18, 0x01	; 1
 552:	fc 01       	movw	r30, r24
 554:	20 83       	st	Z, r18
            break;
 556:	21 c0       	rjmp	.+66     	; 0x59a <Timer_init_withoutStruct+0xd0>
            
        default:
            // inter osc (8 MHZ divided by 8 -> 1 MHZ clock)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = COMPA_VAL_8MHZ-1;   // dez 124; range 0 - 124 -> 125 cycles till interrupt
 558:	87 e4       	ldi	r24, 0x47	; 71
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	2c e7       	ldi	r18, 0x7C	; 124
 55e:	fc 01       	movw	r30, r24
 560:	20 83       	st	Z, r18
            
            // set prescaler to 1/8
            TCCR0B &= ~(1 << CS02);
 562:	85 e4       	ldi	r24, 0x45	; 69
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	25 e4       	ldi	r18, 0x45	; 69
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	f9 01       	movw	r30, r18
 56c:	20 81       	ld	r18, Z
 56e:	2b 7f       	andi	r18, 0xFB	; 251
 570:	fc 01       	movw	r30, r24
 572:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
 574:	85 e4       	ldi	r24, 0x45	; 69
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	25 e4       	ldi	r18, 0x45	; 69
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	f9 01       	movw	r30, r18
 57e:	20 81       	ld	r18, Z
 580:	22 60       	ori	r18, 0x02	; 2
 582:	fc 01       	movw	r30, r24
 584:	20 83       	st	Z, r18
            TCCR0B &= ~(1 << CS00);
 586:	85 e4       	ldi	r24, 0x45	; 69
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	25 e4       	ldi	r18, 0x45	; 69
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	f9 01       	movw	r30, r18
 590:	20 81       	ld	r18, Z
 592:	2e 7f       	andi	r18, 0xFE	; 254
 594:	fc 01       	movw	r30, r24
 596:	20 83       	st	Z, r18
            break;
 598:	00 00       	nop
    }
    
    TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
 59a:	8e e6       	ldi	r24, 0x6E	; 110
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	2e e6       	ldi	r18, 0x6E	; 110
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	f9 01       	movw	r30, r18
 5a4:	20 81       	ld	r18, Z
 5a6:	2b 7f       	andi	r18, 0xFB	; 251
 5a8:	fc 01       	movw	r30, r24
 5aa:	20 83       	st	Z, r18
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
 5ac:	8e e6       	ldi	r24, 0x6E	; 110
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	2e e6       	ldi	r18, 0x6E	; 110
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	f9 01       	movw	r30, r18
 5b6:	20 81       	ld	r18, Z
 5b8:	22 60       	ori	r18, 0x02	; 2
 5ba:	fc 01       	movw	r30, r24
 5bc:	20 83       	st	Z, r18
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
 5be:	8e e6       	ldi	r24, 0x6E	; 110
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	2e e6       	ldi	r18, 0x6E	; 110
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	f9 01       	movw	r30, r18
 5c8:	20 81       	ld	r18, Z
 5ca:	2e 7f       	andi	r18, 0xFE	; 254
 5cc:	fc 01       	movw	r30, r24
 5ce:	20 83       	st	Z, r18
}
 5d0:	00 00       	nop
 5d2:	0f 90       	pop	r0
 5d4:	df 91       	pop	r29
 5d6:	cf 91       	pop	r28
 5d8:	08 95       	ret

000005da <Timer2_init>:

void Timer2_init(uint8_t clockFreqMhz, volatile void (*f)(void)) {
 5da:	cf 93       	push	r28
 5dc:	df 93       	push	r29
 5de:	00 d0       	rcall	.+0      	; 0x5e0 <Timer2_init+0x6>
 5e0:	1f 92       	push	r1
 5e2:	cd b7       	in	r28, 0x3d	; 61
 5e4:	de b7       	in	r29, 0x3e	; 62
 5e6:	89 83       	std	Y+1, r24	; 0x01
 5e8:	7b 83       	std	Y+3, r23	; 0x03
 5ea:	6a 83       	std	Y+2, r22	; 0x02
    timer2_func = f;
 5ec:	8a 81       	ldd	r24, Y+2	; 0x02
 5ee:	9b 81       	ldd	r25, Y+3	; 0x03
 5f0:	90 93 31 05 	sts	0x0531, r25	; 0x800531 <timer2_func+0x1>
 5f4:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <timer2_func>
    // datasheet page 97
    // set mode to clear timer on compare (CTC)
    TCCR2B &= ~(1 << WGM02);
 5f8:	81 eb       	ldi	r24, 0xB1	; 177
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	21 eb       	ldi	r18, 0xB1	; 177
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	f9 01       	movw	r30, r18
 602:	20 81       	ld	r18, Z
 604:	27 7f       	andi	r18, 0xF7	; 247
 606:	fc 01       	movw	r30, r24
 608:	20 83       	st	Z, r18
    TCCR2A |= (1 << WGM01);
 60a:	80 eb       	ldi	r24, 0xB0	; 176
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	20 eb       	ldi	r18, 0xB0	; 176
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	f9 01       	movw	r30, r18
 614:	20 81       	ld	r18, Z
 616:	22 60       	ori	r18, 0x02	; 2
 618:	fc 01       	movw	r30, r24
 61a:	20 83       	st	Z, r18
    TCCR2A &= ~(1 << WGM00);
 61c:	80 eb       	ldi	r24, 0xB0	; 176
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	20 eb       	ldi	r18, 0xB0	; 176
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	f9 01       	movw	r30, r18
 626:	20 81       	ld	r18, Z
 628:	2e 7f       	andi	r18, 0xFE	; 254
 62a:	fc 01       	movw	r30, r24
 62c:	20 83       	st	Z, r18
    
    
    switch (clockFreqMhz) {
 62e:	89 81       	ldd	r24, Y+1	; 0x01
 630:	88 2f       	mov	r24, r24
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	40 97       	sbiw	r24, 0x10	; 16
 636:	09 f5       	brne	.+66     	; 0x67a <Timer2_init+0xa0>
        case 16:
            // extern osc (16 MHZ)
            
            // set OCR0A-reg (top value of timer)
            OCR2A = T2_COMPA_VAL-1;   // dez 249; range 0 - 249 -> 250 cycles till interrupt
 638:	83 eb       	ldi	r24, 0xB3	; 179
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	29 ef       	ldi	r18, 0xF9	; 249
 63e:	fc 01       	movw	r30, r24
 640:	20 83       	st	Z, r18
            
            // set prescaler to 1/64
            TCCR2B &= ~(1 << CS02);
 642:	81 eb       	ldi	r24, 0xB1	; 177
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	21 eb       	ldi	r18, 0xB1	; 177
 648:	30 e0       	ldi	r19, 0x00	; 0
 64a:	f9 01       	movw	r30, r18
 64c:	20 81       	ld	r18, Z
 64e:	2b 7f       	andi	r18, 0xFB	; 251
 650:	fc 01       	movw	r30, r24
 652:	20 83       	st	Z, r18
            TCCR2B |= (1 << CS01);
 654:	81 eb       	ldi	r24, 0xB1	; 177
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	21 eb       	ldi	r18, 0xB1	; 177
 65a:	30 e0       	ldi	r19, 0x00	; 0
 65c:	f9 01       	movw	r30, r18
 65e:	20 81       	ld	r18, Z
 660:	22 60       	ori	r18, 0x02	; 2
 662:	fc 01       	movw	r30, r24
 664:	20 83       	st	Z, r18
            TCCR2B |= (1 << CS00);
 666:	81 eb       	ldi	r24, 0xB1	; 177
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	21 eb       	ldi	r18, 0xB1	; 177
 66c:	30 e0       	ldi	r19, 0x00	; 0
 66e:	f9 01       	movw	r30, r18
 670:	20 81       	ld	r18, Z
 672:	21 60       	ori	r18, 0x01	; 1
 674:	fc 01       	movw	r30, r24
 676:	20 83       	st	Z, r18
            break;
 678:	21 c0       	rjmp	.+66     	; 0x6bc <Timer2_init+0xe2>
            
        default:
            // inter osc (8 MHZ divided by 8 -> 1 MHZ clock)
            
            // set OCR0A-reg (top value of timer)
            OCR2A = T2_COMPA_VAL_8MHZ-1;   // dez 124; range 0 - 124 -> 125 cycles till interrupt
 67a:	83 eb       	ldi	r24, 0xB3	; 179
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	2c e7       	ldi	r18, 0x7C	; 124
 680:	fc 01       	movw	r30, r24
 682:	20 83       	st	Z, r18
            
            // set prescaler to 1/8
            TCCR2B &= ~(1 << CS02);
 684:	81 eb       	ldi	r24, 0xB1	; 177
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	21 eb       	ldi	r18, 0xB1	; 177
 68a:	30 e0       	ldi	r19, 0x00	; 0
 68c:	f9 01       	movw	r30, r18
 68e:	20 81       	ld	r18, Z
 690:	2b 7f       	andi	r18, 0xFB	; 251
 692:	fc 01       	movw	r30, r24
 694:	20 83       	st	Z, r18
            TCCR2B |= (1 << CS01);
 696:	81 eb       	ldi	r24, 0xB1	; 177
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	21 eb       	ldi	r18, 0xB1	; 177
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	f9 01       	movw	r30, r18
 6a0:	20 81       	ld	r18, Z
 6a2:	22 60       	ori	r18, 0x02	; 2
 6a4:	fc 01       	movw	r30, r24
 6a6:	20 83       	st	Z, r18
            TCCR2B &= ~(1 << CS00);
 6a8:	81 eb       	ldi	r24, 0xB1	; 177
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	21 eb       	ldi	r18, 0xB1	; 177
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	f9 01       	movw	r30, r18
 6b2:	20 81       	ld	r18, Z
 6b4:	2e 7f       	andi	r18, 0xFE	; 254
 6b6:	fc 01       	movw	r30, r24
 6b8:	20 83       	st	Z, r18
            break;
 6ba:	00 00       	nop
    }
    
    TIMSK2 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
 6bc:	80 e7       	ldi	r24, 0x70	; 112
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	20 e7       	ldi	r18, 0x70	; 112
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	f9 01       	movw	r30, r18
 6c6:	20 81       	ld	r18, Z
 6c8:	2b 7f       	andi	r18, 0xFB	; 251
 6ca:	fc 01       	movw	r30, r24
 6cc:	20 83       	st	Z, r18
    TIMSK2 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
 6ce:	80 e7       	ldi	r24, 0x70	; 112
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	20 e7       	ldi	r18, 0x70	; 112
 6d4:	30 e0       	ldi	r19, 0x00	; 0
 6d6:	f9 01       	movw	r30, r18
 6d8:	20 81       	ld	r18, Z
 6da:	22 60       	ori	r18, 0x02	; 2
 6dc:	fc 01       	movw	r30, r24
 6de:	20 83       	st	Z, r18
    TIMSK2 &= ~(1 << TOIE0);    // disable timer overflow interrupt
 6e0:	80 e7       	ldi	r24, 0x70	; 112
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	20 e7       	ldi	r18, 0x70	; 112
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	f9 01       	movw	r30, r18
 6ea:	20 81       	ld	r18, Z
 6ec:	2e 7f       	andi	r18, 0xFE	; 254
 6ee:	fc 01       	movw	r30, r24
 6f0:	20 83       	st	Z, r18
}
 6f2:	00 00       	nop
 6f4:	0f 90       	pop	r0
 6f6:	0f 90       	pop	r0
 6f8:	0f 90       	pop	r0
 6fa:	df 91       	pop	r29
 6fc:	cf 91       	pop	r28
 6fe:	08 95       	ret

00000700 <Timer_init>:

void Timer_init(uint8_t clockFreqMhz) {
 700:	cf 93       	push	r28
 702:	df 93       	push	r29
 704:	1f 92       	push	r1
 706:	cd b7       	in	r28, 0x3d	; 61
 708:	de b7       	in	r29, 0x3e	; 62
 70a:	89 83       	std	Y+1, r24	; 0x01
    Timer_init_withoutStruct(clockFreqMhz);
 70c:	89 81       	ldd	r24, Y+1	; 0x01
 70e:	dd de       	rcall	.-582    	; 0x4ca <Timer_init_withoutStruct>
}
 710:	00 00       	nop
 712:	0f 90       	pop	r0
 714:	df 91       	pop	r29
 716:	cf 91       	pop	r28
 718:	08 95       	ret

0000071a <Timer_getTick>:

uint16_t Timer_getTick() {
 71a:	cf 93       	push	r28
 71c:	df 93       	push	r29
 71e:	00 d0       	rcall	.+0      	; 0x720 <Timer_getTick+0x6>
 720:	cd b7       	in	r28, 0x3d	; 61
 722:	de b7       	in	r29, 0x3e	; 62
    // disable Output Compare Match A Interrupt
    TIMSK0 &= ~(1 << OCIE0A);
 724:	8e e6       	ldi	r24, 0x6E	; 110
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	2e e6       	ldi	r18, 0x6E	; 110
 72a:	30 e0       	ldi	r19, 0x00	; 0
 72c:	f9 01       	movw	r30, r18
 72e:	20 81       	ld	r18, Z
 730:	2d 7f       	andi	r18, 0xFD	; 253
 732:	fc 01       	movw	r30, r24
 734:	20 83       	st	Z, r18
    
    // store timer_count in a temp int that can't get changed by ISR
    uint16_t temp_timer_count = timer_count;
 736:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <timer_count>
 73a:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <timer_count+0x1>
 73e:	9a 83       	std	Y+2, r25	; 0x02
 740:	89 83       	std	Y+1, r24	; 0x01
    
    // enable Output Compare Match A Interrupt
    TIMSK0 |= (1 << OCIE0A);
 742:	8e e6       	ldi	r24, 0x6E	; 110
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	2e e6       	ldi	r18, 0x6E	; 110
 748:	30 e0       	ldi	r19, 0x00	; 0
 74a:	f9 01       	movw	r30, r18
 74c:	20 81       	ld	r18, Z
 74e:	22 60       	ori	r18, 0x02	; 2
 750:	fc 01       	movw	r30, r24
 752:	20 83       	st	Z, r18

    return temp_timer_count;
 754:	89 81       	ldd	r24, Y+1	; 0x01
 756:	9a 81       	ldd	r25, Y+2	; 0x02
}
 758:	0f 90       	pop	r0
 75a:	0f 90       	pop	r0
 75c:	df 91       	pop	r29
 75e:	cf 91       	pop	r28
 760:	08 95       	ret

00000762 <__vector_16>:
/**
 Timer compare A interrput:
 - increase timer_count
 - if timer_count is at max of uint16, set it to 0
 */
ISR(TIMER0_COMPA_vect){
 762:	1f 92       	push	r1
 764:	0f 92       	push	r0
 766:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 76a:	0f 92       	push	r0
 76c:	11 24       	eor	r1, r1
 76e:	8f 93       	push	r24
 770:	9f 93       	push	r25
 772:	cf 93       	push	r28
 774:	df 93       	push	r29
 776:	cd b7       	in	r28, 0x3d	; 61
 778:	de b7       	in	r29, 0x3e	; 62
    timer_count++;
 77a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <timer_count>
 77e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <timer_count+0x1>
 782:	01 96       	adiw	r24, 0x01	; 1
 784:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <timer_count+0x1>
 788:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <timer_count>
}
 78c:	00 00       	nop
 78e:	df 91       	pop	r29
 790:	cf 91       	pop	r28
 792:	9f 91       	pop	r25
 794:	8f 91       	pop	r24
 796:	0f 90       	pop	r0
 798:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 79c:	0f 90       	pop	r0
 79e:	1f 90       	pop	r1
 7a0:	18 95       	reti

000007a2 <__vector_9>:

ISR(TIMER2_COMPA_vect){
 7a2:	1f 92       	push	r1
 7a4:	0f 92       	push	r0
 7a6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 7aa:	0f 92       	push	r0
 7ac:	11 24       	eor	r1, r1
 7ae:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 7b2:	0f 92       	push	r0
 7b4:	2f 93       	push	r18
 7b6:	3f 93       	push	r19
 7b8:	4f 93       	push	r20
 7ba:	5f 93       	push	r21
 7bc:	6f 93       	push	r22
 7be:	7f 93       	push	r23
 7c0:	8f 93       	push	r24
 7c2:	9f 93       	push	r25
 7c4:	af 93       	push	r26
 7c6:	bf 93       	push	r27
 7c8:	ef 93       	push	r30
 7ca:	ff 93       	push	r31
 7cc:	cf 93       	push	r28
 7ce:	df 93       	push	r29
 7d0:	cd b7       	in	r28, 0x3d	; 61
 7d2:	de b7       	in	r29, 0x3e	; 62
    (*timer2_func)();
 7d4:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <timer2_func>
 7d8:	90 91 31 05 	lds	r25, 0x0531	; 0x800531 <timer2_func+0x1>
 7dc:	fc 01       	movw	r30, r24
 7de:	09 95       	icall
}
 7e0:	00 00       	nop
 7e2:	df 91       	pop	r29
 7e4:	cf 91       	pop	r28
 7e6:	ff 91       	pop	r31
 7e8:	ef 91       	pop	r30
 7ea:	bf 91       	pop	r27
 7ec:	af 91       	pop	r26
 7ee:	9f 91       	pop	r25
 7f0:	8f 91       	pop	r24
 7f2:	7f 91       	pop	r23
 7f4:	6f 91       	pop	r22
 7f6:	5f 91       	pop	r21
 7f8:	4f 91       	pop	r20
 7fa:	3f 91       	pop	r19
 7fc:	2f 91       	pop	r18
 7fe:	0f 90       	pop	r0
 800:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 804:	0f 90       	pop	r0
 806:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 80a:	0f 90       	pop	r0
 80c:	1f 90       	pop	r1
 80e:	18 95       	reti

00000810 <buff_put>:
        // Return byte
        return pByte;
    }else {
        return 0;
    }
}
 810:	cf 93       	push	r28
 812:	df 93       	push	r29
 814:	00 d0       	rcall	.+0      	; 0x816 <buff_put+0x6>
 816:	1f 92       	push	r1
 818:	cd b7       	in	r28, 0x3d	; 61
 81a:	de b7       	in	r29, 0x3e	; 62
 81c:	89 83       	std	Y+1, r24	; 0x01
 81e:	7b 83       	std	Y+3, r23	; 0x03
 820:	6a 83       	std	Y+2, r22	; 0x02
 822:	81 ec       	ldi	r24, 0xC1	; 193
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	21 ec       	ldi	r18, 0xC1	; 193
 828:	30 e0       	ldi	r19, 0x00	; 0
 82a:	f9 01       	movw	r30, r18
 82c:	20 81       	ld	r18, Z
 82e:	2f 7b       	andi	r18, 0xBF	; 191
 830:	fc 01       	movw	r30, r24
 832:	20 83       	st	Z, r18
 834:	81 ec       	ldi	r24, 0xC1	; 193
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	21 ec       	ldi	r18, 0xC1	; 193
 83a:	30 e0       	ldi	r19, 0x00	; 0
 83c:	f9 01       	movw	r30, r18
 83e:	20 81       	ld	r18, Z
 840:	2f 77       	andi	r18, 0x7F	; 127
 842:	fc 01       	movw	r30, r24
 844:	20 83       	st	Z, r18
 846:	8a 81       	ldd	r24, Y+2	; 0x02
 848:	9b 81       	ldd	r25, Y+3	; 0x03
 84a:	8e 5f       	subi	r24, 0xFE	; 254
 84c:	9d 4f       	sbci	r25, 0xFD	; 253
 84e:	fc 01       	movw	r30, r24
 850:	80 81       	ld	r24, Z
 852:	91 81       	ldd	r25, Z+1	; 0x01
 854:	9c 01       	movw	r18, r24
 856:	2f 5f       	subi	r18, 0xFF	; 255
 858:	3f 4f       	sbci	r19, 0xFF	; 255
 85a:	8a 81       	ldd	r24, Y+2	; 0x02
 85c:	9b 81       	ldd	r25, Y+3	; 0x03
 85e:	9e 5f       	subi	r25, 0xFE	; 254
 860:	fc 01       	movw	r30, r24
 862:	80 81       	ld	r24, Z
 864:	91 81       	ldd	r25, Z+1	; 0x01
 866:	28 17       	cp	r18, r24
 868:	39 07       	cpc	r19, r25
 86a:	91 f0       	breq	.+36     	; 0x890 <buff_put+0x80>
 86c:	8a 81       	ldd	r24, Y+2	; 0x02
 86e:	9b 81       	ldd	r25, Y+3	; 0x03
 870:	9e 5f       	subi	r25, 0xFE	; 254
 872:	fc 01       	movw	r30, r24
 874:	80 81       	ld	r24, Z
 876:	91 81       	ldd	r25, Z+1	; 0x01
 878:	89 2b       	or	r24, r25
 87a:	f1 f4       	brne	.+60     	; 0x8b8 <buff_put+0xa8>
 87c:	8a 81       	ldd	r24, Y+2	; 0x02
 87e:	9b 81       	ldd	r25, Y+3	; 0x03
 880:	8e 5f       	subi	r24, 0xFE	; 254
 882:	9d 4f       	sbci	r25, 0xFD	; 253
 884:	fc 01       	movw	r30, r24
 886:	80 81       	ld	r24, Z
 888:	91 81       	ldd	r25, Z+1	; 0x01
 88a:	8f 3f       	cpi	r24, 0xFF	; 255
 88c:	91 40       	sbci	r25, 0x01	; 1
 88e:	a1 f4       	brne	.+40     	; 0x8b8 <buff_put+0xa8>
 890:	81 ec       	ldi	r24, 0xC1	; 193
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	21 ec       	ldi	r18, 0xC1	; 193
 896:	30 e0       	ldi	r19, 0x00	; 0
 898:	f9 01       	movw	r30, r18
 89a:	20 81       	ld	r18, Z
 89c:	20 64       	ori	r18, 0x40	; 64
 89e:	fc 01       	movw	r30, r24
 8a0:	20 83       	st	Z, r18
 8a2:	81 ec       	ldi	r24, 0xC1	; 193
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	21 ec       	ldi	r18, 0xC1	; 193
 8a8:	30 e0       	ldi	r19, 0x00	; 0
 8aa:	f9 01       	movw	r30, r18
 8ac:	20 81       	ld	r18, Z
 8ae:	20 68       	ori	r18, 0x80	; 128
 8b0:	fc 01       	movw	r30, r24
 8b2:	20 83       	st	Z, r18
 8b4:	81 e0       	ldi	r24, 0x01	; 1
 8b6:	43 c0       	rjmp	.+134    	; 0x93e <buff_put+0x12e>
 8b8:	8a 81       	ldd	r24, Y+2	; 0x02
 8ba:	9b 81       	ldd	r25, Y+3	; 0x03
 8bc:	8e 5f       	subi	r24, 0xFE	; 254
 8be:	9d 4f       	sbci	r25, 0xFD	; 253
 8c0:	fc 01       	movw	r30, r24
 8c2:	80 81       	ld	r24, Z
 8c4:	91 81       	ldd	r25, Z+1	; 0x01
 8c6:	2a 81       	ldd	r18, Y+2	; 0x02
 8c8:	3b 81       	ldd	r19, Y+3	; 0x03
 8ca:	82 0f       	add	r24, r18
 8cc:	93 1f       	adc	r25, r19
 8ce:	29 81       	ldd	r18, Y+1	; 0x01
 8d0:	fc 01       	movw	r30, r24
 8d2:	20 83       	st	Z, r18
 8d4:	8a 81       	ldd	r24, Y+2	; 0x02
 8d6:	9b 81       	ldd	r25, Y+3	; 0x03
 8d8:	8e 5f       	subi	r24, 0xFE	; 254
 8da:	9d 4f       	sbci	r25, 0xFD	; 253
 8dc:	fc 01       	movw	r30, r24
 8de:	80 81       	ld	r24, Z
 8e0:	91 81       	ldd	r25, Z+1	; 0x01
 8e2:	9c 01       	movw	r18, r24
 8e4:	2f 5f       	subi	r18, 0xFF	; 255
 8e6:	3f 4f       	sbci	r19, 0xFF	; 255
 8e8:	8a 81       	ldd	r24, Y+2	; 0x02
 8ea:	9b 81       	ldd	r25, Y+3	; 0x03
 8ec:	8e 5f       	subi	r24, 0xFE	; 254
 8ee:	9d 4f       	sbci	r25, 0xFD	; 253
 8f0:	fc 01       	movw	r30, r24
 8f2:	31 83       	std	Z+1, r19	; 0x01
 8f4:	20 83       	st	Z, r18
 8f6:	8a 81       	ldd	r24, Y+2	; 0x02
 8f8:	9b 81       	ldd	r25, Y+3	; 0x03
 8fa:	8e 5f       	subi	r24, 0xFE	; 254
 8fc:	9d 4f       	sbci	r25, 0xFD	; 253
 8fe:	fc 01       	movw	r30, r24
 900:	80 81       	ld	r24, Z
 902:	91 81       	ldd	r25, Z+1	; 0x01
 904:	81 15       	cp	r24, r1
 906:	92 40       	sbci	r25, 0x02	; 2
 908:	38 f0       	brcs	.+14     	; 0x918 <buff_put+0x108>
 90a:	8a 81       	ldd	r24, Y+2	; 0x02
 90c:	9b 81       	ldd	r25, Y+3	; 0x03
 90e:	8e 5f       	subi	r24, 0xFE	; 254
 910:	9d 4f       	sbci	r25, 0xFD	; 253
 912:	fc 01       	movw	r30, r24
 914:	11 82       	std	Z+1, r1	; 0x01
 916:	10 82       	st	Z, r1
 918:	81 ec       	ldi	r24, 0xC1	; 193
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	21 ec       	ldi	r18, 0xC1	; 193
 91e:	30 e0       	ldi	r19, 0x00	; 0
 920:	f9 01       	movw	r30, r18
 922:	20 81       	ld	r18, Z
 924:	20 64       	ori	r18, 0x40	; 64
 926:	fc 01       	movw	r30, r24
 928:	20 83       	st	Z, r18
 92a:	81 ec       	ldi	r24, 0xC1	; 193
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	21 ec       	ldi	r18, 0xC1	; 193
 930:	30 e0       	ldi	r19, 0x00	; 0
 932:	f9 01       	movw	r30, r18
 934:	20 81       	ld	r18, Z
 936:	20 68       	ori	r18, 0x80	; 128
 938:	fc 01       	movw	r30, r24
 93a:	20 83       	st	Z, r18
 93c:	80 e0       	ldi	r24, 0x00	; 0
 93e:	0f 90       	pop	r0
 940:	0f 90       	pop	r0
 942:	0f 90       	pop	r0
 944:	df 91       	pop	r29
 946:	cf 91       	pop	r28
 948:	08 95       	ret

0000094a <buff_get>:
 94a:	cf 93       	push	r28
 94c:	df 93       	push	r29
 94e:	00 d0       	rcall	.+0      	; 0x950 <buff_get+0x6>
 950:	00 d0       	rcall	.+0      	; 0x952 <buff_get+0x8>
 952:	cd b7       	in	r28, 0x3d	; 61
 954:	de b7       	in	r29, 0x3e	; 62
 956:	9a 83       	std	Y+2, r25	; 0x02
 958:	89 83       	std	Y+1, r24	; 0x01
 95a:	7c 83       	std	Y+4, r23	; 0x04
 95c:	6b 83       	std	Y+3, r22	; 0x03
 95e:	81 ec       	ldi	r24, 0xC1	; 193
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	21 ec       	ldi	r18, 0xC1	; 193
 964:	30 e0       	ldi	r19, 0x00	; 0
 966:	f9 01       	movw	r30, r18
 968:	20 81       	ld	r18, Z
 96a:	2f 7b       	andi	r18, 0xBF	; 191
 96c:	fc 01       	movw	r30, r24
 96e:	20 83       	st	Z, r18
 970:	81 ec       	ldi	r24, 0xC1	; 193
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	21 ec       	ldi	r18, 0xC1	; 193
 976:	30 e0       	ldi	r19, 0x00	; 0
 978:	f9 01       	movw	r30, r18
 97a:	20 81       	ld	r18, Z
 97c:	2f 77       	andi	r18, 0x7F	; 127
 97e:	fc 01       	movw	r30, r24
 980:	20 83       	st	Z, r18
 982:	8b 81       	ldd	r24, Y+3	; 0x03
 984:	9c 81       	ldd	r25, Y+4	; 0x04
 986:	9e 5f       	subi	r25, 0xFE	; 254
 988:	fc 01       	movw	r30, r24
 98a:	20 81       	ld	r18, Z
 98c:	31 81       	ldd	r19, Z+1	; 0x01
 98e:	8b 81       	ldd	r24, Y+3	; 0x03
 990:	9c 81       	ldd	r25, Y+4	; 0x04
 992:	8e 5f       	subi	r24, 0xFE	; 254
 994:	9d 4f       	sbci	r25, 0xFD	; 253
 996:	fc 01       	movw	r30, r24
 998:	80 81       	ld	r24, Z
 99a:	91 81       	ldd	r25, Z+1	; 0x01
 99c:	28 17       	cp	r18, r24
 99e:	39 07       	cpc	r19, r25
 9a0:	a1 f4       	brne	.+40     	; 0x9ca <buff_get+0x80>
 9a2:	81 ec       	ldi	r24, 0xC1	; 193
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	21 ec       	ldi	r18, 0xC1	; 193
 9a8:	30 e0       	ldi	r19, 0x00	; 0
 9aa:	f9 01       	movw	r30, r18
 9ac:	20 81       	ld	r18, Z
 9ae:	20 64       	ori	r18, 0x40	; 64
 9b0:	fc 01       	movw	r30, r24
 9b2:	20 83       	st	Z, r18
 9b4:	81 ec       	ldi	r24, 0xC1	; 193
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	21 ec       	ldi	r18, 0xC1	; 193
 9ba:	30 e0       	ldi	r19, 0x00	; 0
 9bc:	f9 01       	movw	r30, r18
 9be:	20 81       	ld	r18, Z
 9c0:	20 68       	ori	r18, 0x80	; 128
 9c2:	fc 01       	movw	r30, r24
 9c4:	20 83       	st	Z, r18
 9c6:	81 e0       	ldi	r24, 0x01	; 1
 9c8:	41 c0       	rjmp	.+130    	; 0xa4c <buff_get+0x102>
 9ca:	8b 81       	ldd	r24, Y+3	; 0x03
 9cc:	9c 81       	ldd	r25, Y+4	; 0x04
 9ce:	9e 5f       	subi	r25, 0xFE	; 254
 9d0:	fc 01       	movw	r30, r24
 9d2:	80 81       	ld	r24, Z
 9d4:	91 81       	ldd	r25, Z+1	; 0x01
 9d6:	2b 81       	ldd	r18, Y+3	; 0x03
 9d8:	3c 81       	ldd	r19, Y+4	; 0x04
 9da:	82 0f       	add	r24, r18
 9dc:	93 1f       	adc	r25, r19
 9de:	fc 01       	movw	r30, r24
 9e0:	20 81       	ld	r18, Z
 9e2:	89 81       	ldd	r24, Y+1	; 0x01
 9e4:	9a 81       	ldd	r25, Y+2	; 0x02
 9e6:	fc 01       	movw	r30, r24
 9e8:	20 83       	st	Z, r18
 9ea:	8b 81       	ldd	r24, Y+3	; 0x03
 9ec:	9c 81       	ldd	r25, Y+4	; 0x04
 9ee:	9e 5f       	subi	r25, 0xFE	; 254
 9f0:	fc 01       	movw	r30, r24
 9f2:	80 81       	ld	r24, Z
 9f4:	91 81       	ldd	r25, Z+1	; 0x01
 9f6:	9c 01       	movw	r18, r24
 9f8:	2f 5f       	subi	r18, 0xFF	; 255
 9fa:	3f 4f       	sbci	r19, 0xFF	; 255
 9fc:	8b 81       	ldd	r24, Y+3	; 0x03
 9fe:	9c 81       	ldd	r25, Y+4	; 0x04
 a00:	9e 5f       	subi	r25, 0xFE	; 254
 a02:	fc 01       	movw	r30, r24
 a04:	31 83       	std	Z+1, r19	; 0x01
 a06:	20 83       	st	Z, r18
 a08:	8b 81       	ldd	r24, Y+3	; 0x03
 a0a:	9c 81       	ldd	r25, Y+4	; 0x04
 a0c:	9e 5f       	subi	r25, 0xFE	; 254
 a0e:	fc 01       	movw	r30, r24
 a10:	80 81       	ld	r24, Z
 a12:	91 81       	ldd	r25, Z+1	; 0x01
 a14:	81 15       	cp	r24, r1
 a16:	92 40       	sbci	r25, 0x02	; 2
 a18:	30 f0       	brcs	.+12     	; 0xa26 <buff_get+0xdc>
 a1a:	8b 81       	ldd	r24, Y+3	; 0x03
 a1c:	9c 81       	ldd	r25, Y+4	; 0x04
 a1e:	9e 5f       	subi	r25, 0xFE	; 254
 a20:	fc 01       	movw	r30, r24
 a22:	11 82       	std	Z+1, r1	; 0x01
 a24:	10 82       	st	Z, r1
 a26:	81 ec       	ldi	r24, 0xC1	; 193
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	21 ec       	ldi	r18, 0xC1	; 193
 a2c:	30 e0       	ldi	r19, 0x00	; 0
 a2e:	f9 01       	movw	r30, r18
 a30:	20 81       	ld	r18, Z
 a32:	20 64       	ori	r18, 0x40	; 64
 a34:	fc 01       	movw	r30, r24
 a36:	20 83       	st	Z, r18
 a38:	81 ec       	ldi	r24, 0xC1	; 193
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	21 ec       	ldi	r18, 0xC1	; 193
 a3e:	30 e0       	ldi	r19, 0x00	; 0
 a40:	f9 01       	movw	r30, r18
 a42:	20 81       	ld	r18, Z
 a44:	20 68       	ori	r18, 0x80	; 128
 a46:	fc 01       	movw	r30, r24
 a48:	20 83       	st	Z, r18
 a4a:	80 e0       	ldi	r24, 0x00	; 0
 a4c:	0f 90       	pop	r0
 a4e:	0f 90       	pop	r0
 a50:	0f 90       	pop	r0
 a52:	0f 90       	pop	r0
 a54:	df 91       	pop	r29
 a56:	cf 91       	pop	r28
 a58:	08 95       	ret

00000a5a <uart_init>:
 a5a:	cf 93       	push	r28
 a5c:	df 93       	push	r29
 a5e:	00 d0       	rcall	.+0      	; 0xa60 <uart_init+0x6>
 a60:	cd b7       	in	r28, 0x3d	; 61
 a62:	de b7       	in	r29, 0x3e	; 62
 a64:	87 e6       	ldi	r24, 0x67	; 103
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	9a 83       	std	Y+2, r25	; 0x02
 a6a:	89 83       	std	Y+1, r24	; 0x01
 a6c:	85 ec       	ldi	r24, 0xC5	; 197
 a6e:	90 e0       	ldi	r25, 0x00	; 0
 a70:	29 81       	ldd	r18, Y+1	; 0x01
 a72:	3a 81       	ldd	r19, Y+2	; 0x02
 a74:	23 2f       	mov	r18, r19
 a76:	33 27       	eor	r19, r19
 a78:	fc 01       	movw	r30, r24
 a7a:	20 83       	st	Z, r18
 a7c:	84 ec       	ldi	r24, 0xC4	; 196
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	29 81       	ldd	r18, Y+1	; 0x01
 a82:	fc 01       	movw	r30, r24
 a84:	20 83       	st	Z, r18
 a86:	81 ec       	ldi	r24, 0xC1	; 193
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	28 e1       	ldi	r18, 0x18	; 24
 a8c:	fc 01       	movw	r30, r24
 a8e:	20 83       	st	Z, r18
 a90:	82 ec       	ldi	r24, 0xC2	; 194
 a92:	90 e0       	ldi	r25, 0x00	; 0
 a94:	26 e0       	ldi	r18, 0x06	; 6
 a96:	fc 01       	movw	r30, r24
 a98:	20 83       	st	Z, r18
 a9a:	00 00       	nop
 a9c:	0f 90       	pop	r0
 a9e:	0f 90       	pop	r0
 aa0:	df 91       	pop	r29
 aa2:	cf 91       	pop	r28
 aa4:	08 95       	ret

00000aa6 <uart_init_isr>:
 aa6:	cf 93       	push	r28
 aa8:	df 93       	push	r29
 aaa:	cd b7       	in	r28, 0x3d	; 61
 aac:	de b7       	in	r29, 0x3e	; 62
 aae:	d5 df       	rcall	.-86     	; 0xa5a <uart_init>
 ab0:	81 ec       	ldi	r24, 0xC1	; 193
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	21 ec       	ldi	r18, 0xC1	; 193
 ab6:	30 e0       	ldi	r19, 0x00	; 0
 ab8:	f9 01       	movw	r30, r18
 aba:	20 81       	ld	r18, Z
 abc:	20 64       	ori	r18, 0x40	; 64
 abe:	fc 01       	movw	r30, r24
 ac0:	20 83       	st	Z, r18
 ac2:	81 ec       	ldi	r24, 0xC1	; 193
 ac4:	90 e0       	ldi	r25, 0x00	; 0
 ac6:	21 ec       	ldi	r18, 0xC1	; 193
 ac8:	30 e0       	ldi	r19, 0x00	; 0
 aca:	f9 01       	movw	r30, r18
 acc:	20 81       	ld	r18, Z
 ace:	20 68       	ori	r18, 0x80	; 128
 ad0:	fc 01       	movw	r30, r24
 ad2:	20 83       	st	Z, r18
 ad4:	00 00       	nop
 ad6:	df 91       	pop	r29
 ad8:	cf 91       	pop	r28
 ada:	08 95       	ret

00000adc <__vector_22>:

/**
 ISR for USART Transmit Complete flag
 */
ISR(USART0_TX_vect){
 adc:	1f 92       	push	r1
 ade:	0f 92       	push	r0
 ae0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 ae4:	0f 92       	push	r0
 ae6:	11 24       	eor	r1, r1
 ae8:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 aec:	0f 92       	push	r0
 aee:	2f 93       	push	r18
 af0:	3f 93       	push	r19
 af2:	4f 93       	push	r20
 af4:	5f 93       	push	r21
 af6:	6f 93       	push	r22
 af8:	7f 93       	push	r23
 afa:	8f 93       	push	r24
 afc:	9f 93       	push	r25
 afe:	af 93       	push	r26
 b00:	bf 93       	push	r27
 b02:	ef 93       	push	r30
 b04:	ff 93       	push	r31
 b06:	cf 93       	push	r28
 b08:	df 93       	push	r29
 b0a:	1f 92       	push	r1
 b0c:	cd b7       	in	r28, 0x3d	; 61
 b0e:	de b7       	in	r29, 0x3e	; 62
    unsigned char pByte;
    // Pull one byte from buffer and store it in pByte
    if (buff_get(&pByte, &bufferSend) == 0) {
 b10:	66 e2       	ldi	r22, 0x26	; 38
 b12:	71 e0       	ldi	r23, 0x01	; 1
 b14:	ce 01       	movw	r24, r28
 b16:	01 96       	adiw	r24, 0x01	; 1
 b18:	18 df       	rcall	.-464    	; 0x94a <buff_get>
 b1a:	88 23       	and	r24, r24
 b1c:	29 f4       	brne	.+10     	; 0xb28 <__vector_22+0x4c>
        // Send byte
        UDR0 = pByte;
 b1e:	86 ec       	ldi	r24, 0xC6	; 198
 b20:	90 e0       	ldi	r25, 0x00	; 0
 b22:	29 81       	ldd	r18, Y+1	; 0x01
 b24:	fc 01       	movw	r30, r24
 b26:	20 83       	st	Z, r18
    }
}
 b28:	00 00       	nop
 b2a:	0f 90       	pop	r0
 b2c:	df 91       	pop	r29
 b2e:	cf 91       	pop	r28
 b30:	ff 91       	pop	r31
 b32:	ef 91       	pop	r30
 b34:	bf 91       	pop	r27
 b36:	af 91       	pop	r26
 b38:	9f 91       	pop	r25
 b3a:	8f 91       	pop	r24
 b3c:	7f 91       	pop	r23
 b3e:	6f 91       	pop	r22
 b40:	5f 91       	pop	r21
 b42:	4f 91       	pop	r20
 b44:	3f 91       	pop	r19
 b46:	2f 91       	pop	r18
 b48:	0f 90       	pop	r0
 b4a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 b4e:	0f 90       	pop	r0
 b50:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 b54:	0f 90       	pop	r0
 b56:	1f 90       	pop	r1
 b58:	18 95       	reti

00000b5a <__vector_20>:

ISR(USART0_RX_vect){
 b5a:	1f 92       	push	r1
 b5c:	0f 92       	push	r0
 b5e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 b62:	0f 92       	push	r0
 b64:	11 24       	eor	r1, r1
 b66:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 b6a:	0f 92       	push	r0
 b6c:	2f 93       	push	r18
 b6e:	3f 93       	push	r19
 b70:	4f 93       	push	r20
 b72:	5f 93       	push	r21
 b74:	6f 93       	push	r22
 b76:	7f 93       	push	r23
 b78:	8f 93       	push	r24
 b7a:	9f 93       	push	r25
 b7c:	af 93       	push	r26
 b7e:	bf 93       	push	r27
 b80:	ef 93       	push	r30
 b82:	ff 93       	push	r31
 b84:	cf 93       	push	r28
 b86:	df 93       	push	r29
 b88:	cd b7       	in	r28, 0x3d	; 61
 b8a:	de b7       	in	r29, 0x3e	; 62
    // Put received byte to bufferRecv (will read but don't save the value if buffer overflows)
    buff_put(UDR0, &bufferRecv);
 b8c:	86 ec       	ldi	r24, 0xC6	; 198
 b8e:	90 e0       	ldi	r25, 0x00	; 0
 b90:	fc 01       	movw	r30, r24
 b92:	80 81       	ld	r24, Z
 b94:	6a e2       	ldi	r22, 0x2A	; 42
 b96:	73 e0       	ldi	r23, 0x03	; 3
 b98:	3b de       	rcall	.-906    	; 0x810 <buff_put>
}
 b9a:	00 00       	nop
 b9c:	df 91       	pop	r29
 b9e:	cf 91       	pop	r28
 ba0:	ff 91       	pop	r31
 ba2:	ef 91       	pop	r30
 ba4:	bf 91       	pop	r27
 ba6:	af 91       	pop	r26
 ba8:	9f 91       	pop	r25
 baa:	8f 91       	pop	r24
 bac:	7f 91       	pop	r23
 bae:	6f 91       	pop	r22
 bb0:	5f 91       	pop	r21
 bb2:	4f 91       	pop	r20
 bb4:	3f 91       	pop	r19
 bb6:	2f 91       	pop	r18
 bb8:	0f 90       	pop	r0
 bba:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 bbe:	0f 90       	pop	r0
 bc0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 bc4:	0f 90       	pop	r0
 bc6:	1f 90       	pop	r1
 bc8:	18 95       	reti

00000bca <_exit>:
 bca:	f8 94       	cli

00000bcc <__stop_program>:
 bcc:	ff cf       	rjmp	.-2      	; 0xbcc <__stop_program>
