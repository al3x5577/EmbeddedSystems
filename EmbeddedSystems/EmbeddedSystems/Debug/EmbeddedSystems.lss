
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  000007aa  0000083e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000206  00800142  00800142  00000880  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010a5  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b57  00000000  00000000  00001b45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b2f  00000000  00000000  0000269c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005a8  00000000  00000000  000031cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c7  00000000  00000000  00003774  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aeb  00000000  00000000  00003e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00004926  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	b9 c1       	rjmp	.+882    	; 0x3b4 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	8e c3       	rjmp	.+1820   	; 0x76e <__vector_20>
  52:	00 00       	nop
  54:	20 c3       	rjmp	.+1600   	; 0x696 <__vector_21>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ea       	ldi	r30, 0xAA	; 170
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 34       	cpi	r26, 0x42	; 66
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	23 e0       	ldi	r18, 0x03	; 3
  b4:	a2 e4       	ldi	r26, 0x42	; 66
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 34       	cpi	r26, 0x48	; 72
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	9b d0       	rcall	.+310    	; 0x1fa <main>
  c4:	70 c3       	rjmp	.+1760   	; 0x7a6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Led_init>:
void Led5_On(void) {
    PORTB |= (1 << 3);
}
void Led5_Off(void) {
    PORTB &= ~(1 << 3);
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	1f 92       	push	r1
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	89 83       	std	Y+1, r24	; 0x01
  d4:	84 e2       	ldi	r24, 0x24	; 36
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	fc 01       	movw	r30, r24
  dc:	20 83       	st	Z, r18
  de:	85 e2       	ldi	r24, 0x25	; 37
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	10 82       	st	Z, r1
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	88 23       	and	r24, r24
  ea:	91 f0       	breq	.+36     	; 0x110 <Led_init+0x48>
  ec:	8a e2       	ldi	r24, 0x2A	; 42
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	2a e2       	ldi	r18, 0x2A	; 42
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	f9 01       	movw	r30, r18
  f6:	20 81       	ld	r18, Z
  f8:	2f 61       	ori	r18, 0x1F	; 31
  fa:	fc 01       	movw	r30, r24
  fc:	20 83       	st	Z, r18
  fe:	8b e2       	ldi	r24, 0x2B	; 43
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	2b e2       	ldi	r18, 0x2B	; 43
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	f9 01       	movw	r30, r18
 108:	20 81       	ld	r18, Z
 10a:	20 7e       	andi	r18, 0xE0	; 224
 10c:	fc 01       	movw	r30, r24
 10e:	20 83       	st	Z, r18
 110:	00 00       	nop
 112:	0f 90       	pop	r0
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <Led1_On>:
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
 122:	85 e2       	ldi	r24, 0x25	; 37
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	25 e2       	ldi	r18, 0x25	; 37
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	f9 01       	movw	r30, r18
 12c:	20 81       	ld	r18, Z
 12e:	20 68       	ori	r18, 0x80	; 128
 130:	fc 01       	movw	r30, r24
 132:	20 83       	st	Z, r18
 134:	00 00       	nop
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <Led1_Off>:
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	85 e2       	ldi	r24, 0x25	; 37
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	25 e2       	ldi	r18, 0x25	; 37
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	f9 01       	movw	r30, r18
 14e:	20 81       	ld	r18, Z
 150:	2f 77       	andi	r18, 0x7F	; 127
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
 156:	00 00       	nop
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <Led6_On>:

/**
led6 - ioB2
*/
void Led6_On(void) {
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 2);
 166:	85 e2       	ldi	r24, 0x25	; 37
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	25 e2       	ldi	r18, 0x25	; 37
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	f9 01       	movw	r30, r18
 170:	20 81       	ld	r18, Z
 172:	24 60       	ori	r18, 0x04	; 4
 174:	fc 01       	movw	r30, r24
 176:	20 83       	st	Z, r18
}
 178:	00 00       	nop
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <Led6_Off>:
void Led6_Off(void) {
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 2);
 188:	85 e2       	ldi	r24, 0x25	; 37
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	25 e2       	ldi	r18, 0x25	; 37
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	f9 01       	movw	r30, r18
 192:	20 81       	ld	r18, Z
 194:	2b 7f       	andi	r18, 0xFB	; 251
 196:	fc 01       	movw	r30, r24
 198:	20 83       	st	Z, r18
}
 19a:	00 00       	nop
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <Taster_init>:
 ---------------------
 - DDR Reg has to be set to 0
 - PORT Reg has to be set to 1
 -> Pin is input with pull-up
 */
void Taster_init() {
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	cd b7       	in	r28, 0x3d	; 61
 1a8:	de b7       	in	r29, 0x3e	; 62
    
    // set to inputs
    DDRC &= ~(1 << 2);
 1aa:	87 e2       	ldi	r24, 0x27	; 39
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	27 e2       	ldi	r18, 0x27	; 39
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	f9 01       	movw	r30, r18
 1b4:	20 81       	ld	r18, Z
 1b6:	2b 7f       	andi	r18, 0xFB	; 251
 1b8:	fc 01       	movw	r30, r24
 1ba:	20 83       	st	Z, r18
    DDRD &= ~( (1 << 7) | (1 << 6) | (1 << 5) );
 1bc:	8a e2       	ldi	r24, 0x2A	; 42
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	2a e2       	ldi	r18, 0x2A	; 42
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	f9 01       	movw	r30, r18
 1c6:	20 81       	ld	r18, Z
 1c8:	2f 71       	andi	r18, 0x1F	; 31
 1ca:	fc 01       	movw	r30, r24
 1cc:	20 83       	st	Z, r18
    
    // enable pull-up
    PORTC |= (1 << 2);
 1ce:	88 e2       	ldi	r24, 0x28	; 40
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	28 e2       	ldi	r18, 0x28	; 40
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	f9 01       	movw	r30, r18
 1d8:	20 81       	ld	r18, Z
 1da:	24 60       	ori	r18, 0x04	; 4
 1dc:	fc 01       	movw	r30, r24
 1de:	20 83       	st	Z, r18
    PORTD |= (1 << 7) | (1 << 6) | (1 << 5);
 1e0:	8b e2       	ldi	r24, 0x2B	; 43
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	2b e2       	ldi	r18, 0x2B	; 43
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	f9 01       	movw	r30, r18
 1ea:	20 81       	ld	r18, Z
 1ec:	20 6e       	ori	r18, 0xE0	; 224
 1ee:	fc 01       	movw	r30, r24
 1f0:	20 83       	st	Z, r18
}
 1f2:	00 00       	nop
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <main>:
#include "uart/Uart.h"
#include <avr/interrupt.h>

#define CLK_F_MHZ 16

int main(void) {
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	00 d0       	rcall	.+0      	; 0x200 <main+0x6>
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
	
    cli();
 204:	f8 94       	cli
    Led_init(0);	// Don't set LEDs at PORTD
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	5f df       	rcall	.-322    	; 0xc8 <Led_init>
	Taster_init();
 20a:	cb df       	rcall	.-106    	; 0x1a2 <Taster_init>
    Timer_init(CLK_F_MHZ); // Init timer with 16MHZ clock
 20c:	80 e1       	ldi	r24, 0x10	; 16
 20e:	27 d0       	rcall	.+78     	; 0x25e <Timer_init>
	uart_init_isr();
 210:	c2 d1       	rcall	.+900    	; 0x596 <uart_init_isr>
	sei();
 212:	78 94       	sei
    
    uint16_t timeVarMain = 0;
 214:	1a 82       	std	Y+2, r1	; 0x02
 216:	19 82       	std	Y+1, r1	; 0x01
    while (1) {
        
        if((Timer_getTick() - timeVarMain) >= 100){
 218:	b9 d0       	rcall	.+370    	; 0x38c <Timer_getTick>
 21a:	9c 01       	movw	r18, r24
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	9a 81       	ldd	r25, Y+2	; 0x02
 220:	a9 01       	movw	r20, r18
 222:	48 1b       	sub	r20, r24
 224:	59 0b       	sbc	r21, r25
 226:	ca 01       	movw	r24, r20
 228:	84 36       	cpi	r24, 0x64	; 100
 22a:	91 05       	cpc	r25, r1
 22c:	a8 f3       	brcs	.-22     	; 0x218 <main+0x1e>
            timeVarMain = Timer_getTick();
 22e:	ae d0       	rcall	.+348    	; 0x38c <Timer_getTick>
 230:	9a 83       	std	Y+2, r25	; 0x02
 232:	89 83       	std	Y+1, r24	; 0x01
            
            if (uart_send_isr("Hallo Welt!\n") == 0 && uart_send_isr("Kannst du mich hoeren?\n") == 0 && uart_send_isr("Das sieht sehr gut aus!!!!\n") == 0 ) {
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	c0 d1       	rcall	.+896    	; 0x5ba <uart_send_isr>
 23a:	89 2b       	or	r24, r25
 23c:	69 f4       	brne	.+26     	; 0x258 <main+0x5e>
 23e:	8d e0       	ldi	r24, 0x0D	; 13
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	bb d1       	rcall	.+886    	; 0x5ba <uart_send_isr>
 244:	89 2b       	or	r24, r25
 246:	41 f4       	brne	.+16     	; 0x258 <main+0x5e>
 248:	85 e2       	ldi	r24, 0x25	; 37
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	b6 d1       	rcall	.+876    	; 0x5ba <uart_send_isr>
                Led6_On();
 24e:	89 2b       	or	r24, r25
 250:	19 f4       	brne	.+6      	; 0x258 <main+0x5e>
                Led1_Off();
 252:	85 df       	rcall	.-246    	; 0x15e <Led6_On>
 254:	73 df       	rcall	.-282    	; 0x13c <Led1_Off>
 256:	02 c0       	rjmp	.+4      	; 0x25c <main+0x62>
            }else {
                Led6_Off();
 258:	93 df       	rcall	.-218    	; 0x180 <Led6_Off>
 25a:	5f df       	rcall	.-322    	; 0x11a <Led1_On>
                Led1_On();
 25c:	dd cf       	rjmp	.-70     	; 0x218 <main+0x1e>

0000025e <Timer_init>:
 25e:	cf 93       	push	r28
            }
        }
        
        //trafficLight(0);
        //playground();
    }
 260:	df 93       	push	r29
    }
    
    TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
}
 262:	1f 92       	push	r1
 264:	cd b7       	in	r28, 0x3d	; 61
 266:	de b7       	in	r29, 0x3e	; 62
 268:	89 83       	std	Y+1, r24	; 0x01
 26a:	89 81       	ldd	r24, Y+1	; 0x01
 26c:	88 2f       	mov	r24, r24
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	05 d0       	rcall	.+10     	; 0x27c <Timer_init_withoutStruct>
 272:	00 00       	nop
 274:	0f 90       	pop	r0
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <Timer_init_withoutStruct>:

void Timer_init_withoutStruct(uint8_t clockFreqMhz) {
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	1f 92       	push	r1
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
 286:	89 83       	std	Y+1, r24	; 0x01
    // datasheet page 97
    // set mode to clear timer on compare (CTC)
    TCCR0B &= ~(1 << WGM02);
 288:	85 e4       	ldi	r24, 0x45	; 69
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	25 e4       	ldi	r18, 0x45	; 69
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	f9 01       	movw	r30, r18
 292:	20 81       	ld	r18, Z
 294:	27 7f       	andi	r18, 0xF7	; 247
 296:	fc 01       	movw	r30, r24
 298:	20 83       	st	Z, r18
    TCCR0A |= (1 << WGM01);
 29a:	84 e4       	ldi	r24, 0x44	; 68
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	24 e4       	ldi	r18, 0x44	; 68
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	f9 01       	movw	r30, r18
 2a4:	20 81       	ld	r18, Z
 2a6:	22 60       	ori	r18, 0x02	; 2
 2a8:	fc 01       	movw	r30, r24
 2aa:	20 83       	st	Z, r18
    TCCR0A &= ~(1 << WGM00);
 2ac:	84 e4       	ldi	r24, 0x44	; 68
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	24 e4       	ldi	r18, 0x44	; 68
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	f9 01       	movw	r30, r18
 2b6:	20 81       	ld	r18, Z
 2b8:	2e 7f       	andi	r18, 0xFE	; 254
 2ba:	fc 01       	movw	r30, r24
 2bc:	20 83       	st	Z, r18
    
    
    switch (clockFreqMhz) {
 2be:	89 81       	ldd	r24, Y+1	; 0x01
 2c0:	88 2f       	mov	r24, r24
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	40 97       	sbiw	r24, 0x10	; 16
 2c6:	09 f5       	brne	.+66     	; 0x30a <Timer_init_withoutStruct+0x8e>
        case 16:
            // extern osc (16 MHZ)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = 249;   // dez 249; range 0 - 249 -> 250 cycles till interrupt
 2c8:	87 e4       	ldi	r24, 0x47	; 71
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	29 ef       	ldi	r18, 0xF9	; 249
 2ce:	fc 01       	movw	r30, r24
 2d0:	20 83       	st	Z, r18
            
            // set prescaler to 1/64
            TCCR0B &= ~(1 << CS02);
 2d2:	85 e4       	ldi	r24, 0x45	; 69
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	25 e4       	ldi	r18, 0x45	; 69
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	f9 01       	movw	r30, r18
 2dc:	20 81       	ld	r18, Z
 2de:	2b 7f       	andi	r18, 0xFB	; 251
 2e0:	fc 01       	movw	r30, r24
 2e2:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
 2e4:	85 e4       	ldi	r24, 0x45	; 69
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	25 e4       	ldi	r18, 0x45	; 69
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	f9 01       	movw	r30, r18
 2ee:	20 81       	ld	r18, Z
 2f0:	22 60       	ori	r18, 0x02	; 2
 2f2:	fc 01       	movw	r30, r24
 2f4:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS00);
 2f6:	85 e4       	ldi	r24, 0x45	; 69
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	25 e4       	ldi	r18, 0x45	; 69
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	f9 01       	movw	r30, r18
 300:	20 81       	ld	r18, Z
 302:	21 60       	ori	r18, 0x01	; 1
 304:	fc 01       	movw	r30, r24
 306:	20 83       	st	Z, r18
            break;
 308:	21 c0       	rjmp	.+66     	; 0x34c <Timer_init_withoutStruct+0xd0>
            
        default:
            // inter osc (8 MHZ divided by 8 -> 1 MHZ clock)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = 0x7C;   // dez 124; range 0 - 124 -> 125 cycles till interrupt
 30a:	87 e4       	ldi	r24, 0x47	; 71
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	2c e7       	ldi	r18, 0x7C	; 124
 310:	fc 01       	movw	r30, r24
 312:	20 83       	st	Z, r18
            
            // set prescaler to 1/8
            TCCR0B &= ~(1 << CS02);
 314:	85 e4       	ldi	r24, 0x45	; 69
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	25 e4       	ldi	r18, 0x45	; 69
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	f9 01       	movw	r30, r18
 31e:	20 81       	ld	r18, Z
 320:	2b 7f       	andi	r18, 0xFB	; 251
 322:	fc 01       	movw	r30, r24
 324:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
 326:	85 e4       	ldi	r24, 0x45	; 69
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	25 e4       	ldi	r18, 0x45	; 69
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	f9 01       	movw	r30, r18
 330:	20 81       	ld	r18, Z
 332:	22 60       	ori	r18, 0x02	; 2
 334:	fc 01       	movw	r30, r24
 336:	20 83       	st	Z, r18
            TCCR0B &= ~(1 << CS00);
 338:	85 e4       	ldi	r24, 0x45	; 69
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	25 e4       	ldi	r18, 0x45	; 69
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	f9 01       	movw	r30, r18
 342:	20 81       	ld	r18, Z
 344:	2e 7f       	andi	r18, 0xFE	; 254
 346:	fc 01       	movw	r30, r24
 348:	20 83       	st	Z, r18
            break;
 34a:	00 00       	nop
    }
    
    TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
 34c:	8e e6       	ldi	r24, 0x6E	; 110
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	2e e6       	ldi	r18, 0x6E	; 110
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	f9 01       	movw	r30, r18
 356:	20 81       	ld	r18, Z
 358:	2b 7f       	andi	r18, 0xFB	; 251
 35a:	fc 01       	movw	r30, r24
 35c:	20 83       	st	Z, r18
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
 35e:	8e e6       	ldi	r24, 0x6E	; 110
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	2e e6       	ldi	r18, 0x6E	; 110
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	f9 01       	movw	r30, r18
 368:	20 81       	ld	r18, Z
 36a:	22 60       	ori	r18, 0x02	; 2
 36c:	fc 01       	movw	r30, r24
 36e:	20 83       	st	Z, r18
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
 370:	8e e6       	ldi	r24, 0x6E	; 110
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	2e e6       	ldi	r18, 0x6E	; 110
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	f9 01       	movw	r30, r18
 37a:	20 81       	ld	r18, Z
 37c:	2e 7f       	andi	r18, 0xFE	; 254
 37e:	fc 01       	movw	r30, r24
 380:	20 83       	st	Z, r18
}
 382:	00 00       	nop
 384:	0f 90       	pop	r0
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <Timer_getTick>:

uint16_t Timer_getTick() {
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	00 d0       	rcall	.+0      	; 0x392 <Timer_getTick+0x6>
 392:	cd b7       	in	r28, 0x3d	; 61
 394:	de b7       	in	r29, 0x3e	; 62
    // disable global interrupt
    cli();
 396:	f8 94       	cli
    
    // store timer_count in a temp int that can't get changed by ISR
    uint16_t temp_timer_count = timer_count;
 398:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
 39c:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
 3a0:	9a 83       	std	Y+2, r25	; 0x02
 3a2:	89 83       	std	Y+1, r24	; 0x01
    
    // enable global interrupt
    sei();
 3a4:	78 94       	sei

    return temp_timer_count;
 3a6:	89 81       	ldd	r24, Y+1	; 0x01
 3a8:	9a 81       	ldd	r25, Y+2	; 0x02
}
 3aa:	0f 90       	pop	r0
 3ac:	0f 90       	pop	r0
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	08 95       	ret

000003b4 <__vector_16>:
 ( not used atm)
 Timer compare A interrput:
 - increase timer_count
 - if timer_count is at max of uint16, set it to 0
 */
ISR(TIMER0_COMPA_vect){
 3b4:	1f 92       	push	r1
 3b6:	0f 92       	push	r0
 3b8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3bc:	0f 92       	push	r0
 3be:	11 24       	eor	r1, r1
 3c0:	8f 93       	push	r24
 3c2:	9f 93       	push	r25
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	cd b7       	in	r28, 0x3d	; 61
 3ca:	de b7       	in	r29, 0x3e	; 62
    timer_count++;
 3cc:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
 3d0:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
 3d4:	01 96       	adiw	r24, 0x01	; 1
 3d6:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__data_end+0x1>
 3da:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
}
 3de:	00 00       	nop
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	9f 91       	pop	r25
 3e6:	8f 91       	pop	r24
 3e8:	0f 90       	pop	r0
 3ea:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3ee:	0f 90       	pop	r0
 3f0:	1f 90       	pop	r1
 3f2:	18 95       	reti

000003f4 <buff_put>:
    /* Wait for data to be received */
    while ( !(UCSR0A & (1<<RXC0)) )
        ;
    /* Get and return received data from buffer */
    return UDR0;
}
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
 3f8:	1f 92       	push	r1
 3fa:	cd b7       	in	r28, 0x3d	; 61
 3fc:	de b7       	in	r29, 0x3e	; 62
 3fe:	89 83       	std	Y+1, r24	; 0x01
 400:	ce 01       	movw	r24, r28
 402:	88 5f       	subi	r24, 0xF8	; 248
 404:	9d 4f       	sbci	r25, 0xFD	; 253
 406:	fc 01       	movw	r30, r24
 408:	80 81       	ld	r24, Z
 40a:	91 81       	ldd	r25, Z+1	; 0x01
 40c:	9c 01       	movw	r18, r24
 40e:	2f 5f       	subi	r18, 0xFF	; 255
 410:	3f 4f       	sbci	r19, 0xFF	; 255
 412:	ce 01       	movw	r24, r28
 414:	8a 5f       	subi	r24, 0xFA	; 250
 416:	9d 4f       	sbci	r25, 0xFD	; 253
 418:	fc 01       	movw	r30, r24
 41a:	80 81       	ld	r24, Z
 41c:	91 81       	ldd	r25, Z+1	; 0x01
 41e:	28 17       	cp	r18, r24
 420:	39 07       	cpc	r19, r25
 422:	89 f0       	breq	.+34     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 424:	ce 01       	movw	r24, r28
 426:	8a 5f       	subi	r24, 0xFA	; 250
 428:	9d 4f       	sbci	r25, 0xFD	; 253
 42a:	fc 01       	movw	r30, r24
 42c:	80 81       	ld	r24, Z
 42e:	91 81       	ldd	r25, Z+1	; 0x01
 430:	89 2b       	or	r24, r25
 432:	59 f4       	brne	.+22     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 434:	ce 01       	movw	r24, r28
 436:	88 5f       	subi	r24, 0xF8	; 248
 438:	9d 4f       	sbci	r25, 0xFD	; 253
 43a:	fc 01       	movw	r30, r24
 43c:	80 81       	ld	r24, Z
 43e:	91 81       	ldd	r25, Z+1	; 0x01
 440:	8f 3f       	cpi	r24, 0xFF	; 255
 442:	91 40       	sbci	r25, 0x01	; 1
 444:	11 f4       	brne	.+4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	2e c0       	rjmp	.+92     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 44a:	ce 01       	movw	r24, r28
 44c:	88 5f       	subi	r24, 0xF8	; 248
 44e:	9d 4f       	sbci	r25, 0xFD	; 253
 450:	fc 01       	movw	r30, r24
 452:	80 81       	ld	r24, Z
 454:	91 81       	ldd	r25, Z+1	; 0x01
 456:	26 e0       	ldi	r18, 0x06	; 6
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	2c 0f       	add	r18, r28
 45c:	3d 1f       	adc	r19, r29
 45e:	82 0f       	add	r24, r18
 460:	93 1f       	adc	r25, r19
 462:	29 81       	ldd	r18, Y+1	; 0x01
 464:	fc 01       	movw	r30, r24
 466:	20 83       	st	Z, r18
 468:	ce 01       	movw	r24, r28
 46a:	88 5f       	subi	r24, 0xF8	; 248
 46c:	9d 4f       	sbci	r25, 0xFD	; 253
 46e:	fc 01       	movw	r30, r24
 470:	80 81       	ld	r24, Z
 472:	91 81       	ldd	r25, Z+1	; 0x01
 474:	9c 01       	movw	r18, r24
 476:	2f 5f       	subi	r18, 0xFF	; 255
 478:	3f 4f       	sbci	r19, 0xFF	; 255
 47a:	ce 01       	movw	r24, r28
 47c:	88 5f       	subi	r24, 0xF8	; 248
 47e:	9d 4f       	sbci	r25, 0xFD	; 253
 480:	fc 01       	movw	r30, r24
 482:	31 83       	std	Z+1, r19	; 0x01
 484:	20 83       	st	Z, r18
 486:	ce 01       	movw	r24, r28
 488:	88 5f       	subi	r24, 0xF8	; 248
 48a:	9d 4f       	sbci	r25, 0xFD	; 253
 48c:	fc 01       	movw	r30, r24
 48e:	80 81       	ld	r24, Z
 490:	91 81       	ldd	r25, Z+1	; 0x01
 492:	81 15       	cp	r24, r1
 494:	92 40       	sbci	r25, 0x02	; 2
 496:	30 f0       	brcs	.+12     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 498:	ce 01       	movw	r24, r28
 49a:	88 5f       	subi	r24, 0xF8	; 248
 49c:	9d 4f       	sbci	r25, 0xFD	; 253
 49e:	fc 01       	movw	r30, r24
 4a0:	11 82       	std	Z+1, r1	; 0x01
 4a2:	10 82       	st	Z, r1
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	0f 90       	pop	r0
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	08 95       	ret

000004ae <buff_get>:
 4ae:	cf 93       	push	r28
 4b0:	df 93       	push	r29
 4b2:	00 d0       	rcall	.+0      	; 0x4b4 <buff_get+0x6>
 4b4:	cd b7       	in	r28, 0x3d	; 61
 4b6:	de b7       	in	r29, 0x3e	; 62
 4b8:	9a 83       	std	Y+2, r25	; 0x02
 4ba:	89 83       	std	Y+1, r24	; 0x01
 4bc:	ce 01       	movw	r24, r28
 4be:	89 5f       	subi	r24, 0xF9	; 249
 4c0:	9d 4f       	sbci	r25, 0xFD	; 253
 4c2:	fc 01       	movw	r30, r24
 4c4:	20 81       	ld	r18, Z
 4c6:	31 81       	ldd	r19, Z+1	; 0x01
 4c8:	ce 01       	movw	r24, r28
 4ca:	87 5f       	subi	r24, 0xF7	; 247
 4cc:	9d 4f       	sbci	r25, 0xFD	; 253
 4ce:	fc 01       	movw	r30, r24
 4d0:	80 81       	ld	r24, Z
 4d2:	91 81       	ldd	r25, Z+1	; 0x01
 4d4:	28 17       	cp	r18, r24
 4d6:	39 07       	cpc	r19, r25
 4d8:	11 f4       	brne	.+4      	; 0x4de <buff_get+0x30>
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	31 c0       	rjmp	.+98     	; 0x540 <buff_get+0x92>
 4de:	ce 01       	movw	r24, r28
 4e0:	89 5f       	subi	r24, 0xF9	; 249
 4e2:	9d 4f       	sbci	r25, 0xFD	; 253
 4e4:	fc 01       	movw	r30, r24
 4e6:	80 81       	ld	r24, Z
 4e8:	91 81       	ldd	r25, Z+1	; 0x01
 4ea:	27 e0       	ldi	r18, 0x07	; 7
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	2c 0f       	add	r18, r28
 4f0:	3d 1f       	adc	r19, r29
 4f2:	82 0f       	add	r24, r18
 4f4:	93 1f       	adc	r25, r19
 4f6:	fc 01       	movw	r30, r24
 4f8:	20 81       	ld	r18, Z
 4fa:	89 81       	ldd	r24, Y+1	; 0x01
 4fc:	9a 81       	ldd	r25, Y+2	; 0x02
 4fe:	fc 01       	movw	r30, r24
 500:	20 83       	st	Z, r18
 502:	ce 01       	movw	r24, r28
 504:	89 5f       	subi	r24, 0xF9	; 249
 506:	9d 4f       	sbci	r25, 0xFD	; 253
 508:	fc 01       	movw	r30, r24
 50a:	80 81       	ld	r24, Z
 50c:	91 81       	ldd	r25, Z+1	; 0x01
 50e:	9c 01       	movw	r18, r24
 510:	2f 5f       	subi	r18, 0xFF	; 255
 512:	3f 4f       	sbci	r19, 0xFF	; 255
 514:	ce 01       	movw	r24, r28
 516:	89 5f       	subi	r24, 0xF9	; 249
 518:	9d 4f       	sbci	r25, 0xFD	; 253
 51a:	fc 01       	movw	r30, r24
 51c:	31 83       	std	Z+1, r19	; 0x01
 51e:	20 83       	st	Z, r18
 520:	ce 01       	movw	r24, r28
 522:	89 5f       	subi	r24, 0xF9	; 249
 524:	9d 4f       	sbci	r25, 0xFD	; 253
 526:	fc 01       	movw	r30, r24
 528:	80 81       	ld	r24, Z
 52a:	91 81       	ldd	r25, Z+1	; 0x01
 52c:	81 15       	cp	r24, r1
 52e:	92 40       	sbci	r25, 0x02	; 2
 530:	30 f0       	brcs	.+12     	; 0x53e <buff_get+0x90>
 532:	ce 01       	movw	r24, r28
 534:	89 5f       	subi	r24, 0xF9	; 249
 536:	9d 4f       	sbci	r25, 0xFD	; 253
 538:	fc 01       	movw	r30, r24
 53a:	11 82       	std	Z+1, r1	; 0x01
 53c:	10 82       	st	Z, r1
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	0f 90       	pop	r0
 542:	0f 90       	pop	r0
 544:	df 91       	pop	r29
 546:	cf 91       	pop	r28
 548:	08 95       	ret

0000054a <uart_init>:
 54a:	cf 93       	push	r28
 54c:	df 93       	push	r29
 54e:	00 d0       	rcall	.+0      	; 0x550 <uart_init+0x6>
 550:	cd b7       	in	r28, 0x3d	; 61
 552:	de b7       	in	r29, 0x3e	; 62
 554:	87 e6       	ldi	r24, 0x67	; 103
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	9a 83       	std	Y+2, r25	; 0x02
 55a:	89 83       	std	Y+1, r24	; 0x01
 55c:	85 ec       	ldi	r24, 0xC5	; 197
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	29 81       	ldd	r18, Y+1	; 0x01
 562:	3a 81       	ldd	r19, Y+2	; 0x02
 564:	23 2f       	mov	r18, r19
 566:	33 27       	eor	r19, r19
 568:	fc 01       	movw	r30, r24
 56a:	20 83       	st	Z, r18
 56c:	84 ec       	ldi	r24, 0xC4	; 196
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	29 81       	ldd	r18, Y+1	; 0x01
 572:	fc 01       	movw	r30, r24
 574:	20 83       	st	Z, r18
 576:	81 ec       	ldi	r24, 0xC1	; 193
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	28 e1       	ldi	r18, 0x18	; 24
 57c:	fc 01       	movw	r30, r24
 57e:	20 83       	st	Z, r18
 580:	82 ec       	ldi	r24, 0xC2	; 194
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	26 e0       	ldi	r18, 0x06	; 6
 586:	fc 01       	movw	r30, r24
 588:	20 83       	st	Z, r18
 58a:	00 00       	nop
 58c:	0f 90       	pop	r0
 58e:	0f 90       	pop	r0
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	08 95       	ret

00000596 <uart_init_isr>:
 596:	cf 93       	push	r28
 598:	df 93       	push	r29
 59a:	cd b7       	in	r28, 0x3d	; 61
 59c:	de b7       	in	r29, 0x3e	; 62
 59e:	d5 df       	rcall	.-86     	; 0x54a <uart_init>
 5a0:	81 ec       	ldi	r24, 0xC1	; 193
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	21 ec       	ldi	r18, 0xC1	; 193
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	f9 01       	movw	r30, r18
 5aa:	20 81       	ld	r18, Z
 5ac:	20 62       	ori	r18, 0x20	; 32
 5ae:	fc 01       	movw	r30, r24
 5b0:	20 83       	st	Z, r18
 5b2:	00 00       	nop
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	08 95       	ret

000005ba <uart_send_isr>:
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
 5be:	00 d0       	rcall	.+0      	; 0x5c0 <uart_send_isr+0x6>
 5c0:	00 d0       	rcall	.+0      	; 0x5c2 <uart_send_isr+0x8>
 5c2:	00 d0       	rcall	.+0      	; 0x5c4 <uart_send_isr+0xa>
 5c4:	cd b7       	in	r28, 0x3d	; 61
 5c6:	de b7       	in	r29, 0x3e	; 62
 5c8:	9e 83       	std	Y+6, r25	; 0x06
 5ca:	8d 83       	std	Y+5, r24	; 0x05
 5cc:	8d 81       	ldd	r24, Y+5	; 0x05
 5ce:	9e 81       	ldd	r25, Y+6	; 0x06
 5d0:	e1 d0       	rcall	.+450    	; 0x794 <strlen>
 5d2:	9c 83       	std	Y+4, r25	; 0x04
 5d4:	8b 83       	std	Y+3, r24	; 0x03
 5d6:	1a 82       	std	Y+2, r1	; 0x02
 5d8:	19 82       	std	Y+1, r1	; 0x01
 5da:	41 c0       	rjmp	.+130    	; 0x65e <uart_send_isr+0xa4>
 5dc:	89 81       	ldd	r24, Y+1	; 0x01
 5de:	9a 81       	ldd	r25, Y+2	; 0x02
 5e0:	2d 81       	ldd	r18, Y+5	; 0x05
 5e2:	3e 81       	ldd	r19, Y+6	; 0x06
 5e4:	82 0f       	add	r24, r18
 5e6:	93 1f       	adc	r25, r19
 5e8:	fc 01       	movw	r30, r24
 5ea:	40 81       	ld	r20, Z
 5ec:	2d b7       	in	r18, 0x3d	; 61
 5ee:	3e b7       	in	r19, 0x3e	; 62
 5f0:	24 50       	subi	r18, 0x04	; 4
 5f2:	32 40       	sbci	r19, 0x02	; 2
 5f4:	0f b6       	in	r0, 0x3f	; 63
 5f6:	f8 94       	cli
 5f8:	3e bf       	out	0x3e, r19	; 62
 5fa:	0f be       	out	0x3f, r0	; 63
 5fc:	2d bf       	out	0x3d, r18	; 61
 5fe:	2d b7       	in	r18, 0x3d	; 61
 600:	3e b7       	in	r19, 0x3e	; 62
 602:	2f 5f       	subi	r18, 0xFF	; 255
 604:	3f 4f       	sbci	r19, 0xFF	; 255
 606:	84 e0       	ldi	r24, 0x04	; 4
 608:	92 e0       	ldi	r25, 0x02	; 2
 60a:	e4 e4       	ldi	r30, 0x44	; 68
 60c:	f1 e0       	ldi	r31, 0x01	; 1
 60e:	d9 01       	movw	r26, r18
 610:	01 90       	ld	r0, Z+
 612:	0d 92       	st	X+, r0
 614:	01 97       	sbiw	r24, 0x01	; 1
 616:	e1 f7       	brne	.-8      	; 0x610 <uart_send_isr+0x56>
 618:	84 2f       	mov	r24, r20
 61a:	ec de       	rcall	.-552    	; 0x3f4 <buff_put>
 61c:	ed b7       	in	r30, 0x3d	; 61
 61e:	fe b7       	in	r31, 0x3e	; 62
 620:	ec 5f       	subi	r30, 0xFC	; 252
 622:	fd 4f       	sbci	r31, 0xFD	; 253
 624:	0f b6       	in	r0, 0x3f	; 63
 626:	f8 94       	cli
 628:	de bf       	out	0x3e, r29	; 62
 62a:	0f be       	out	0x3f, r0	; 63
 62c:	cd bf       	out	0x3d, r28	; 61
 62e:	81 30       	cpi	r24, 0x01	; 1
 630:	89 f4       	brne	.+34     	; 0x654 <uart_send_isr+0x9a>
 632:	80 ec       	ldi	r24, 0xC0	; 192
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	20 ec       	ldi	r18, 0xC0	; 192
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	f9 01       	movw	r30, r18
 63c:	20 81       	ld	r18, Z
 63e:	20 62       	ori	r18, 0x20	; 32
 640:	fc 01       	movw	r30, r24
 642:	20 83       	st	Z, r18
 644:	89 81       	ldd	r24, Y+1	; 0x01
 646:	9a 81       	ldd	r25, Y+2	; 0x02
 648:	9c 01       	movw	r18, r24
 64a:	2f 5f       	subi	r18, 0xFF	; 255
 64c:	3f 4f       	sbci	r19, 0xFF	; 255
 64e:	3a 83       	std	Y+2, r19	; 0x02
 650:	29 83       	std	Y+1, r18	; 0x01
 652:	18 c0       	rjmp	.+48     	; 0x684 <uart_send_isr+0xca>
 654:	89 81       	ldd	r24, Y+1	; 0x01
 656:	9a 81       	ldd	r25, Y+2	; 0x02
 658:	01 96       	adiw	r24, 0x01	; 1
 65a:	9a 83       	std	Y+2, r25	; 0x02
 65c:	89 83       	std	Y+1, r24	; 0x01
 65e:	29 81       	ldd	r18, Y+1	; 0x01
 660:	3a 81       	ldd	r19, Y+2	; 0x02
 662:	8b 81       	ldd	r24, Y+3	; 0x03
 664:	9c 81       	ldd	r25, Y+4	; 0x04
 666:	28 17       	cp	r18, r24
 668:	39 07       	cpc	r19, r25
 66a:	0c f4       	brge	.+2      	; 0x66e <uart_send_isr+0xb4>
 66c:	b7 cf       	rjmp	.-146    	; 0x5dc <uart_send_isr+0x22>
 66e:	80 ec       	ldi	r24, 0xC0	; 192
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	20 ec       	ldi	r18, 0xC0	; 192
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	f9 01       	movw	r30, r18
 678:	20 81       	ld	r18, Z
 67a:	20 62       	ori	r18, 0x20	; 32
 67c:	fc 01       	movw	r30, r24
 67e:	20 83       	st	Z, r18
 680:	80 e0       	ldi	r24, 0x00	; 0
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	26 96       	adiw	r28, 0x06	; 6
 686:	0f b6       	in	r0, 0x3f	; 63
 688:	f8 94       	cli
 68a:	de bf       	out	0x3e, r29	; 62
 68c:	0f be       	out	0x3f, r0	; 63
 68e:	cd bf       	out	0x3d, r28	; 61
 690:	df 91       	pop	r29
 692:	cf 91       	pop	r28
 694:	08 95       	ret

00000696 <__vector_21>:

/**
 ISR for USART Data Register Empty flag
 */
ISR(USART0_UDRE_vect){
 696:	1f 92       	push	r1
 698:	0f 92       	push	r0
 69a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 69e:	0f 92       	push	r0
 6a0:	11 24       	eor	r1, r1
 6a2:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 6a6:	0f 92       	push	r0
 6a8:	2f 93       	push	r18
 6aa:	3f 93       	push	r19
 6ac:	4f 93       	push	r20
 6ae:	5f 93       	push	r21
 6b0:	6f 93       	push	r22
 6b2:	7f 93       	push	r23
 6b4:	8f 93       	push	r24
 6b6:	9f 93       	push	r25
 6b8:	af 93       	push	r26
 6ba:	bf 93       	push	r27
 6bc:	ef 93       	push	r30
 6be:	ff 93       	push	r31
 6c0:	cf 93       	push	r28
 6c2:	df 93       	push	r29
 6c4:	1f 92       	push	r1
 6c6:	cd b7       	in	r28, 0x3d	; 61
 6c8:	de b7       	in	r29, 0x3e	; 62
    unsigned char pByte;
    // Pull one byte from buffer and store it in pByte
    if (UDR0 == 0 && buff_get(&pByte, bufferSend) == 0) {
 6ca:	86 ec       	ldi	r24, 0xC6	; 198
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	fc 01       	movw	r30, r24
 6d0:	80 81       	ld	r24, Z
 6d2:	88 23       	and	r24, r24
 6d4:	51 f5       	brne	.+84     	; 0x72a <__vector_21+0x94>
 6d6:	2d b7       	in	r18, 0x3d	; 61
 6d8:	3e b7       	in	r19, 0x3e	; 62
 6da:	24 50       	subi	r18, 0x04	; 4
 6dc:	32 40       	sbci	r19, 0x02	; 2
 6de:	0f b6       	in	r0, 0x3f	; 63
 6e0:	f8 94       	cli
 6e2:	3e bf       	out	0x3e, r19	; 62
 6e4:	0f be       	out	0x3f, r0	; 63
 6e6:	2d bf       	out	0x3d, r18	; 61
 6e8:	2d b7       	in	r18, 0x3d	; 61
 6ea:	3e b7       	in	r19, 0x3e	; 62
 6ec:	2f 5f       	subi	r18, 0xFF	; 255
 6ee:	3f 4f       	sbci	r19, 0xFF	; 255
 6f0:	84 e0       	ldi	r24, 0x04	; 4
 6f2:	92 e0       	ldi	r25, 0x02	; 2
 6f4:	e4 e4       	ldi	r30, 0x44	; 68
 6f6:	f1 e0       	ldi	r31, 0x01	; 1
 6f8:	d9 01       	movw	r26, r18
 6fa:	01 90       	ld	r0, Z+
 6fc:	0d 92       	st	X+, r0
 6fe:	01 97       	sbiw	r24, 0x01	; 1
 700:	e1 f7       	brne	.-8      	; 0x6fa <__vector_21+0x64>
 702:	ce 01       	movw	r24, r28
 704:	01 96       	adiw	r24, 0x01	; 1
 706:	d3 de       	rcall	.-602    	; 0x4ae <buff_get>
 708:	ed b7       	in	r30, 0x3d	; 61
 70a:	fe b7       	in	r31, 0x3e	; 62
 70c:	ec 5f       	subi	r30, 0xFC	; 252
 70e:	fd 4f       	sbci	r31, 0xFD	; 253
 710:	0f b6       	in	r0, 0x3f	; 63
 712:	f8 94       	cli
 714:	de bf       	out	0x3e, r29	; 62
 716:	0f be       	out	0x3f, r0	; 63
 718:	cd bf       	out	0x3d, r28	; 61
 71a:	88 23       	and	r24, r24
 71c:	31 f4       	brne	.+12     	; 0x72a <__vector_21+0x94>
        // Send byte
        UDR0 = pByte;
 71e:	86 ec       	ldi	r24, 0xC6	; 198
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	29 81       	ldd	r18, Y+1	; 0x01
 724:	fc 01       	movw	r30, r24
 726:	20 83       	st	Z, r18
 728:	09 c0       	rjmp	.+18     	; 0x73c <__vector_21+0xa6>
    }else {
        // Buffer empty: disable interrupt
        UCSR0A &= ~(1 << UDRE0);
 72a:	80 ec       	ldi	r24, 0xC0	; 192
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	20 ec       	ldi	r18, 0xC0	; 192
 730:	30 e0       	ldi	r19, 0x00	; 0
 732:	f9 01       	movw	r30, r18
 734:	20 81       	ld	r18, Z
 736:	2f 7d       	andi	r18, 0xDF	; 223
 738:	fc 01       	movw	r30, r24
 73a:	20 83       	st	Z, r18
    }
}
 73c:	00 00       	nop
 73e:	0f 90       	pop	r0
 740:	df 91       	pop	r29
 742:	cf 91       	pop	r28
 744:	ff 91       	pop	r31
 746:	ef 91       	pop	r30
 748:	bf 91       	pop	r27
 74a:	af 91       	pop	r26
 74c:	9f 91       	pop	r25
 74e:	8f 91       	pop	r24
 750:	7f 91       	pop	r23
 752:	6f 91       	pop	r22
 754:	5f 91       	pop	r21
 756:	4f 91       	pop	r20
 758:	3f 91       	pop	r19
 75a:	2f 91       	pop	r18
 75c:	0f 90       	pop	r0
 75e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 762:	0f 90       	pop	r0
 764:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 768:	0f 90       	pop	r0
 76a:	1f 90       	pop	r1
 76c:	18 95       	reti

0000076e <__vector_20>:

ISR(USART0_RX_vect){
 76e:	1f 92       	push	r1
 770:	0f 92       	push	r0
 772:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 776:	0f 92       	push	r0
 778:	11 24       	eor	r1, r1
 77a:	cf 93       	push	r28
 77c:	df 93       	push	r29
 77e:	cd b7       	in	r28, 0x3d	; 61
 780:	de b7       	in	r29, 0x3e	; 62
    
}
 782:	00 00       	nop
 784:	df 91       	pop	r29
 786:	cf 91       	pop	r28
 788:	0f 90       	pop	r0
 78a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 78e:	0f 90       	pop	r0
 790:	1f 90       	pop	r1
 792:	18 95       	reti

00000794 <strlen>:
 794:	fc 01       	movw	r30, r24
 796:	01 90       	ld	r0, Z+
 798:	00 20       	and	r0, r0
 79a:	e9 f7       	brne	.-6      	; 0x796 <strlen+0x2>
 79c:	80 95       	com	r24
 79e:	90 95       	com	r25
 7a0:	8e 0f       	add	r24, r30
 7a2:	9f 1f       	adc	r25, r31
 7a4:	08 95       	ret

000007a6 <_exit>:
 7a6:	f8 94       	cli

000007a8 <__stop_program>:
 7a8:	ff cf       	rjmp	.-2      	; 0x7a8 <__stop_program>
