
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000013e6  0000147a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000042a  00800116  00800116  00001490  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001490  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013df  00000000  00000000  00001724  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ca7  00000000  00000000  00002b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e56  00000000  00000000  000037aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006e0  00000000  00000000  00004600  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000075c  00000000  00000000  00004ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d91  00000000  00000000  0000543c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  000061cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	78 c3       	rjmp	.+1776   	; 0x732 <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8f c5       	rjmp	.+2846   	; 0xb70 <__vector_20>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	4c c5       	rjmp	.+2712   	; 0xaf2 <__vector_22>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	ff c0       	rjmp	.+510    	; 0x260 <__vector_24>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 ee       	ldi	r30, 0xE6	; 230
      a0:	f3 e1       	ldi	r31, 0x13	; 19
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 31       	cpi	r26, 0x16	; 22
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	25 e0       	ldi	r18, 0x05	; 5
      b4:	a6 e1       	ldi	r26, 0x16	; 22
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 34       	cpi	r26, 0x40	; 64
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0f d2       	rcall	.+1054   	; 0x4e2 <main>
      c4:	0c 94 f1 09 	jmp	0x13e2	; 0x13e2 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <adc_init>:
// Poti data
volatile uint16_t Poti_Array[8] = {0};
volatile uint8_t index_Poti = 42;


void adc_init() {
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	cd b7       	in	r28, 0x3d	; 61
      d0:	de b7       	in	r29, 0x3e	; 62
    // Set prescaler to 128
    ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
      d2:	8a e7       	ldi	r24, 0x7A	; 122
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	2a e7       	ldi	r18, 0x7A	; 122
      d8:	30 e0       	ldi	r19, 0x00	; 0
      da:	f9 01       	movw	r30, r18
      dc:	20 81       	ld	r18, Z
      de:	27 60       	ori	r18, 0x07	; 7
      e0:	fc 01       	movw	r30, r24
      e2:	20 83       	st	Z, r18
    
    // Set ADC enable, start conversion, set ADC interrupt
    ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADIE);
      e4:	8a e7       	ldi	r24, 0x7A	; 122
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	2a e7       	ldi	r18, 0x7A	; 122
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	f9 01       	movw	r30, r18
      ee:	20 81       	ld	r18, Z
      f0:	28 6c       	ori	r18, 0xC8	; 200
      f2:	fc 01       	movw	r30, r24
      f4:	20 83       	st	Z, r18
    
#ifdef DEBUG_LEDS_ADC
    uart_send_isr("ADC init complete\n");
    Led6_On();
#endif
}
      f6:	00 00       	nop
      f8:	df 91       	pop	r29
      fa:	cf 91       	pop	r28
      fc:	08 95       	ret

000000fe <adc_get_LM35>:

uint16_t adc_get_LM35() {
      fe:	cf 93       	push	r28
     100:	df 93       	push	r29
     102:	00 d0       	rcall	.+0      	; 0x104 <adc_get_LM35+0x6>
     104:	00 d0       	rcall	.+0      	; 0x106 <adc_get_LM35+0x8>
     106:	00 d0       	rcall	.+0      	; 0x108 <adc_get_LM35+0xa>
     108:	cd b7       	in	r28, 0x3d	; 61
     10a:	de b7       	in	r29, 0x3e	; 62
    uint32_t avg = 0;
     10c:	19 82       	std	Y+1, r1	; 0x01
     10e:	1a 82       	std	Y+2, r1	; 0x02
     110:	1b 82       	std	Y+3, r1	; 0x03
     112:	1c 82       	std	Y+4, r1	; 0x04
    
    // Make sum
    for (int i = 0; i < 8; i++) {
     114:	1e 82       	std	Y+6, r1	; 0x06
     116:	1d 82       	std	Y+5, r1	; 0x05
     118:	1d c0       	rjmp	.+58     	; 0x154 <adc_get_LM35+0x56>
        avg += LM35_Array[i];
     11a:	8d 81       	ldd	r24, Y+5	; 0x05
     11c:	9e 81       	ldd	r25, Y+6	; 0x06
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	8a 5e       	subi	r24, 0xEA	; 234
     124:	9e 4f       	sbci	r25, 0xFE	; 254
     126:	fc 01       	movw	r30, r24
     128:	80 81       	ld	r24, Z
     12a:	91 81       	ldd	r25, Z+1	; 0x01
     12c:	cc 01       	movw	r24, r24
     12e:	a0 e0       	ldi	r26, 0x00	; 0
     130:	b0 e0       	ldi	r27, 0x00	; 0
     132:	29 81       	ldd	r18, Y+1	; 0x01
     134:	3a 81       	ldd	r19, Y+2	; 0x02
     136:	4b 81       	ldd	r20, Y+3	; 0x03
     138:	5c 81       	ldd	r21, Y+4	; 0x04
     13a:	82 0f       	add	r24, r18
     13c:	93 1f       	adc	r25, r19
     13e:	a4 1f       	adc	r26, r20
     140:	b5 1f       	adc	r27, r21
     142:	89 83       	std	Y+1, r24	; 0x01
     144:	9a 83       	std	Y+2, r25	; 0x02
     146:	ab 83       	std	Y+3, r26	; 0x03
     148:	bc 83       	std	Y+4, r27	; 0x04

uint16_t adc_get_LM35() {
    uint32_t avg = 0;
    
    // Make sum
    for (int i = 0; i < 8; i++) {
     14a:	8d 81       	ldd	r24, Y+5	; 0x05
     14c:	9e 81       	ldd	r25, Y+6	; 0x06
     14e:	01 96       	adiw	r24, 0x01	; 1
     150:	9e 83       	std	Y+6, r25	; 0x06
     152:	8d 83       	std	Y+5, r24	; 0x05
     154:	8d 81       	ldd	r24, Y+5	; 0x05
     156:	9e 81       	ldd	r25, Y+6	; 0x06
     158:	08 97       	sbiw	r24, 0x08	; 8
     15a:	fc f2       	brlt	.-66     	; 0x11a <adc_get_LM35+0x1c>
        avg += LM35_Array[i];
    }
    // Make average
    avg = avg / 8;
     15c:	89 81       	ldd	r24, Y+1	; 0x01
     15e:	9a 81       	ldd	r25, Y+2	; 0x02
     160:	ab 81       	ldd	r26, Y+3	; 0x03
     162:	bc 81       	ldd	r27, Y+4	; 0x04
     164:	68 94       	set
     166:	12 f8       	bld	r1, 2
     168:	b6 95       	lsr	r27
     16a:	a7 95       	ror	r26
     16c:	97 95       	ror	r25
     16e:	87 95       	ror	r24
     170:	16 94       	lsr	r1
     172:	d1 f7       	brne	.-12     	; 0x168 <adc_get_LM35+0x6a>
     174:	89 83       	std	Y+1, r24	; 0x01
     176:	9a 83       	std	Y+2, r25	; 0x02
     178:	ab 83       	std	Y+3, r26	; 0x03
     17a:	bc 83       	std	Y+4, r27	; 0x04
    
    // Convert to Degree Celsius
    avg = (int) avg * 0.4883;   // convert to mV, divide by factor of LM35-DZ
     17c:	89 81       	ldd	r24, Y+1	; 0x01
     17e:	9a 81       	ldd	r25, Y+2	; 0x02
     180:	09 2e       	mov	r0, r25
     182:	00 0c       	add	r0, r0
     184:	aa 0b       	sbc	r26, r26
     186:	bb 0b       	sbc	r27, r27
     188:	bc 01       	movw	r22, r24
     18a:	cd 01       	movw	r24, r26
     18c:	57 d5       	rcall	.+2734   	; 0xc3c <__floatsisf>
     18e:	dc 01       	movw	r26, r24
     190:	cb 01       	movw	r24, r22
     192:	25 e7       	ldi	r18, 0x75	; 117
     194:	32 e0       	ldi	r19, 0x02	; 2
     196:	4a ef       	ldi	r20, 0xFA	; 250
     198:	5e e3       	ldi	r21, 0x3E	; 62
     19a:	bc 01       	movw	r22, r24
     19c:	cd 01       	movw	r24, r26
     19e:	b2 d5       	rcall	.+2916   	; 0xd04 <__mulsf3>
     1a0:	dc 01       	movw	r26, r24
     1a2:	cb 01       	movw	r24, r22
     1a4:	bc 01       	movw	r22, r24
     1a6:	cd 01       	movw	r24, r26
     1a8:	1b d5       	rcall	.+2614   	; 0xbe0 <__fixunssfsi>
     1aa:	dc 01       	movw	r26, r24
     1ac:	cb 01       	movw	r24, r22
     1ae:	89 83       	std	Y+1, r24	; 0x01
     1b0:	9a 83       	std	Y+2, r25	; 0x02
     1b2:	ab 83       	std	Y+3, r26	; 0x03
     1b4:	bc 83       	std	Y+4, r27	; 0x04
    
    // Return a 16 bit value
    return (avg & 0xffff);
     1b6:	89 81       	ldd	r24, Y+1	; 0x01
     1b8:	9a 81       	ldd	r25, Y+2	; 0x02
}
     1ba:	26 96       	adiw	r28, 0x06	; 6
     1bc:	0f b6       	in	r0, 0x3f	; 63
     1be:	f8 94       	cli
     1c0:	de bf       	out	0x3e, r29	; 62
     1c2:	0f be       	out	0x3f, r0	; 63
     1c4:	cd bf       	out	0x3d, r28	; 61
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	08 95       	ret

000001cc <adc_get_Poti>:

uint16_t adc_get_Poti() {
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	00 d0       	rcall	.+0      	; 0x1d2 <adc_get_Poti+0x6>
     1d2:	00 d0       	rcall	.+0      	; 0x1d4 <adc_get_Poti+0x8>
     1d4:	00 d0       	rcall	.+0      	; 0x1d6 <adc_get_Poti+0xa>
     1d6:	cd b7       	in	r28, 0x3d	; 61
     1d8:	de b7       	in	r29, 0x3e	; 62
    uint32_t avg = 0;
     1da:	19 82       	std	Y+1, r1	; 0x01
     1dc:	1a 82       	std	Y+2, r1	; 0x02
     1de:	1b 82       	std	Y+3, r1	; 0x03
     1e0:	1c 82       	std	Y+4, r1	; 0x04
    
    // Make sum
    for (int i = 0; i < 8; i++) {
     1e2:	1e 82       	std	Y+6, r1	; 0x06
     1e4:	1d 82       	std	Y+5, r1	; 0x05
     1e6:	1d c0       	rjmp	.+58     	; 0x222 <adc_get_Poti+0x56>
        avg += Poti_Array[i];
     1e8:	8d 81       	ldd	r24, Y+5	; 0x05
     1ea:	9e 81       	ldd	r25, Y+6	; 0x06
     1ec:	88 0f       	add	r24, r24
     1ee:	99 1f       	adc	r25, r25
     1f0:	8a 5d       	subi	r24, 0xDA	; 218
     1f2:	9e 4f       	sbci	r25, 0xFE	; 254
     1f4:	fc 01       	movw	r30, r24
     1f6:	80 81       	ld	r24, Z
     1f8:	91 81       	ldd	r25, Z+1	; 0x01
     1fa:	cc 01       	movw	r24, r24
     1fc:	a0 e0       	ldi	r26, 0x00	; 0
     1fe:	b0 e0       	ldi	r27, 0x00	; 0
     200:	29 81       	ldd	r18, Y+1	; 0x01
     202:	3a 81       	ldd	r19, Y+2	; 0x02
     204:	4b 81       	ldd	r20, Y+3	; 0x03
     206:	5c 81       	ldd	r21, Y+4	; 0x04
     208:	82 0f       	add	r24, r18
     20a:	93 1f       	adc	r25, r19
     20c:	a4 1f       	adc	r26, r20
     20e:	b5 1f       	adc	r27, r21
     210:	89 83       	std	Y+1, r24	; 0x01
     212:	9a 83       	std	Y+2, r25	; 0x02
     214:	ab 83       	std	Y+3, r26	; 0x03
     216:	bc 83       	std	Y+4, r27	; 0x04

uint16_t adc_get_Poti() {
    uint32_t avg = 0;
    
    // Make sum
    for (int i = 0; i < 8; i++) {
     218:	8d 81       	ldd	r24, Y+5	; 0x05
     21a:	9e 81       	ldd	r25, Y+6	; 0x06
     21c:	01 96       	adiw	r24, 0x01	; 1
     21e:	9e 83       	std	Y+6, r25	; 0x06
     220:	8d 83       	std	Y+5, r24	; 0x05
     222:	8d 81       	ldd	r24, Y+5	; 0x05
     224:	9e 81       	ldd	r25, Y+6	; 0x06
     226:	08 97       	sbiw	r24, 0x08	; 8
     228:	fc f2       	brlt	.-66     	; 0x1e8 <adc_get_Poti+0x1c>
        avg += Poti_Array[i];
    }
    // Make average
    avg = avg / 8;
     22a:	89 81       	ldd	r24, Y+1	; 0x01
     22c:	9a 81       	ldd	r25, Y+2	; 0x02
     22e:	ab 81       	ldd	r26, Y+3	; 0x03
     230:	bc 81       	ldd	r27, Y+4	; 0x04
     232:	68 94       	set
     234:	12 f8       	bld	r1, 2
     236:	b6 95       	lsr	r27
     238:	a7 95       	ror	r26
     23a:	97 95       	ror	r25
     23c:	87 95       	ror	r24
     23e:	16 94       	lsr	r1
     240:	d1 f7       	brne	.-12     	; 0x236 <adc_get_Poti+0x6a>
     242:	89 83       	std	Y+1, r24	; 0x01
     244:	9a 83       	std	Y+2, r25	; 0x02
     246:	ab 83       	std	Y+3, r26	; 0x03
     248:	bc 83       	std	Y+4, r27	; 0x04
    
    // Return a 16 bit value
    return (avg & 0xffff);
     24a:	89 81       	ldd	r24, Y+1	; 0x01
     24c:	9a 81       	ldd	r25, Y+2	; 0x02
}
     24e:	26 96       	adiw	r28, 0x06	; 6
     250:	0f b6       	in	r0, 0x3f	; 63
     252:	f8 94       	cli
     254:	de bf       	out	0x3e, r29	; 62
     256:	0f be       	out	0x3f, r0	; 63
     258:	cd bf       	out	0x3d, r28	; 61
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	08 95       	ret

00000260 <__vector_24>:

ISR(ADC_vect){
     260:	1f 92       	push	r1
     262:	0f 92       	push	r0
     264:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     268:	0f 92       	push	r0
     26a:	11 24       	eor	r1, r1
     26c:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     270:	0f 92       	push	r0
     272:	2f 93       	push	r18
     274:	3f 93       	push	r19
     276:	8f 93       	push	r24
     278:	9f 93       	push	r25
     27a:	ef 93       	push	r30
     27c:	ff 93       	push	r31
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
     282:	00 d0       	rcall	.+0      	; 0x284 <__vector_24+0x24>
     284:	cd b7       	in	r28, 0x3d	; 61
     286:	de b7       	in	r29, 0x3e	; 62
    // Pull data from AD conversion
    uint16_t res = ADC;
     288:	88 e7       	ldi	r24, 0x78	; 120
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	fc 01       	movw	r30, r24
     28e:	80 81       	ld	r24, Z
     290:	91 81       	ldd	r25, Z+1	; 0x01
     292:	9a 83       	std	Y+2, r25	; 0x02
     294:	89 83       	std	Y+1, r24	; 0x01
#ifdef DEBUG_LEDS_ADC
    Led3_Off();
#endif
    
    // Switch between LM35 and Poti
    switch (ADMUX & (1 << MUX0)) {
     296:	8c e7       	ldi	r24, 0x7C	; 124
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	fc 01       	movw	r30, r24
     29c:	80 81       	ld	r24, Z
     29e:	88 2f       	mov	r24, r24
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	81 70       	andi	r24, 0x01	; 1
     2a4:	99 27       	eor	r25, r25
     2a6:	00 97       	sbiw	r24, 0x00	; 0
     2a8:	19 f0       	breq	.+6      	; 0x2b0 <__vector_24+0x50>
     2aa:	01 97       	sbiw	r24, 0x01	; 1
     2ac:	b9 f1       	breq	.+110    	; 0x31c <__vector_24+0xbc>
#endif
            }
            break;
            
        default:
            break;
     2ae:	63 c0       	rjmp	.+198    	; 0x376 <__vector_24+0x116>
    
    // Switch between LM35 and Poti
    switch (ADMUX & (1 << MUX0)) {
        case 0: // LM35
            
            if (index_LM35 == 42) {
     2b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2b4:	8a 32       	cpi	r24, 0x2A	; 42
     2b6:	19 f4       	brne	.+6      	; 0x2be <__vector_24+0x5e>
                // Trash first conversion
                index_LM35 = 0;
     2b8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
                
#ifdef DEBUG_LEDS_ADC
                Led4_Off();
#endif
            }
            break;
     2bc:	5c c0       	rjmp	.+184    	; 0x376 <__vector_24+0x116>
                // Trash first conversion
                index_LM35 = 0;
#ifdef DEBUG_LEDS_ADC
                Led4_On();
#endif
            }else if (index_LM35 >= 0 && index_LM35 <= 7) {
     2be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2c6:	88 30       	cpi	r24, 0x08	; 8
     2c8:	98 f4       	brcc	.+38     	; 0x2f0 <__vector_24+0x90>
                // Store 8 AD conversions in the Array
                LM35_Array[index_LM35] = res;
     2ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2ce:	88 2f       	mov	r24, r24
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	88 0f       	add	r24, r24
     2d4:	99 1f       	adc	r25, r25
     2d6:	8a 5e       	subi	r24, 0xEA	; 234
     2d8:	9e 4f       	sbci	r25, 0xFE	; 254
     2da:	29 81       	ldd	r18, Y+1	; 0x01
     2dc:	3a 81       	ldd	r19, Y+2	; 0x02
     2de:	fc 01       	movw	r30, r24
     2e0:	31 83       	std	Z+1, r19	; 0x01
     2e2:	20 83       	st	Z, r18
                index_LM35++;
     2e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2e8:	8f 5f       	subi	r24, 0xFF	; 255
     2ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
                
#ifdef DEBUG_LEDS_ADC
                Led4_Off();
#endif
            }
            break;
     2ee:	43 c0       	rjmp	.+134    	; 0x376 <__vector_24+0x116>
                // Store 8 AD conversions in the Array
                LM35_Array[index_LM35] = res;
                index_LM35++;
            }else {
                // Switch to Poti
                ADMUX &= ~(30); // Set MUX1..4 to 0
     2f0:	8c e7       	ldi	r24, 0x7C	; 124
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	2c e7       	ldi	r18, 0x7C	; 124
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	f9 01       	movw	r30, r18
     2fa:	20 81       	ld	r18, Z
     2fc:	21 7e       	andi	r18, 0xE1	; 225
     2fe:	fc 01       	movw	r30, r24
     300:	20 83       	st	Z, r18
                ADMUX |= (1 << MUX0);
     302:	8c e7       	ldi	r24, 0x7C	; 124
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	2c e7       	ldi	r18, 0x7C	; 124
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	f9 01       	movw	r30, r18
     30c:	20 81       	ld	r18, Z
     30e:	21 60       	ori	r18, 0x01	; 1
     310:	fc 01       	movw	r30, r24
     312:	20 83       	st	Z, r18
                
                // Set index to default value, so that the first conversion will be trashed
                index_LM35 = 42;
     314:	8a e2       	ldi	r24, 0x2A	; 42
     316:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
                
#ifdef DEBUG_LEDS_ADC
                Led4_Off();
#endif
            }
            break;
     31a:	2d c0       	rjmp	.+90     	; 0x376 <__vector_24+0x116>
            
        case 1: // Poti
            if (index_Poti == 42) { // Trash first conversion
     31c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
     320:	8a 32       	cpi	r24, 0x2A	; 42
     322:	19 f4       	brne	.+6      	; 0x32a <__vector_24+0xca>
#ifdef DEBUG_LEDS_ADC
                Led5_On();
#endif
                index_Poti = 0;
     324:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <index_Poti>
                
#ifdef DEBUG_LEDS_ADC
                Led5_Off();
#endif
            }
            break;
     328:	25 c0       	rjmp	.+74     	; 0x374 <__vector_24+0x114>
            if (index_Poti == 42) { // Trash first conversion
#ifdef DEBUG_LEDS_ADC
                Led5_On();
#endif
                index_Poti = 0;
            }else if (index_Poti >= 0 && index_Poti <= 7) {
     32a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
     32e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
     332:	88 30       	cpi	r24, 0x08	; 8
     334:	98 f4       	brcc	.+38     	; 0x35c <__vector_24+0xfc>
                // Store 8 AD conversions in the Array
                Poti_Array[index_Poti] = res;
     336:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
     33a:	88 2f       	mov	r24, r24
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	88 0f       	add	r24, r24
     340:	99 1f       	adc	r25, r25
     342:	8a 5d       	subi	r24, 0xDA	; 218
     344:	9e 4f       	sbci	r25, 0xFE	; 254
     346:	29 81       	ldd	r18, Y+1	; 0x01
     348:	3a 81       	ldd	r19, Y+2	; 0x02
     34a:	fc 01       	movw	r30, r24
     34c:	31 83       	std	Z+1, r19	; 0x01
     34e:	20 83       	st	Z, r18
                index_Poti++;
     350:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
     354:	8f 5f       	subi	r24, 0xFF	; 255
     356:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <index_Poti>
                
#ifdef DEBUG_LEDS_ADC
                Led5_Off();
#endif
            }
            break;
     35a:	0c c0       	rjmp	.+24     	; 0x374 <__vector_24+0x114>
                // Store 8 AD conversions in the Array
                Poti_Array[index_Poti] = res;
                index_Poti++;
            }else {
                // Switch to LM35
                ADMUX &= ~(31); // Set MUX0..4 to 0
     35c:	8c e7       	ldi	r24, 0x7C	; 124
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	2c e7       	ldi	r18, 0x7C	; 124
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	f9 01       	movw	r30, r18
     366:	20 81       	ld	r18, Z
     368:	20 7e       	andi	r18, 0xE0	; 224
     36a:	fc 01       	movw	r30, r24
     36c:	20 83       	st	Z, r18
                
                // Set index to default value, so that the first conversion will be trashed
                index_Poti = 42;
     36e:	8a e2       	ldi	r24, 0x2A	; 42
     370:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <index_Poti>
                
#ifdef DEBUG_LEDS_ADC
                Led5_Off();
#endif
            }
            break;
     374:	00 00       	nop
#ifdef DEBUG_LEDS_ADC
    Led3_On();
#endif
    
    // Trigger next conversion
    ADCSRA |= (1 << ADSC) | (1 << ADIE);
     376:	8a e7       	ldi	r24, 0x7A	; 122
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	2a e7       	ldi	r18, 0x7A	; 122
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	f9 01       	movw	r30, r18
     380:	20 81       	ld	r18, Z
     382:	28 64       	ori	r18, 0x48	; 72
     384:	fc 01       	movw	r30, r24
     386:	20 83       	st	Z, r18
}
     388:	00 00       	nop
     38a:	0f 90       	pop	r0
     38c:	0f 90       	pop	r0
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	ff 91       	pop	r31
     394:	ef 91       	pop	r30
     396:	9f 91       	pop	r25
     398:	8f 91       	pop	r24
     39a:	3f 91       	pop	r19
     39c:	2f 91       	pop	r18
     39e:	0f 90       	pop	r0
     3a0:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     3a4:	0f 90       	pop	r0
     3a6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     3aa:	0f 90       	pop	r0
     3ac:	1f 90       	pop	r1
     3ae:	18 95       	reti

000003b0 <Led_init>:
void turnOnD(uint8_t bit) {
    PORTD |= (1 << bit);
}
void turnOffD(uint8_t bit) {
    PORTD &= ~(1 << bit);
}
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	1f 92       	push	r1
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
     3ba:	89 83       	std	Y+1, r24	; 0x01
     3bc:	84 e2       	ldi	r24, 0x24	; 36
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	2f ef       	ldi	r18, 0xFF	; 255
     3c2:	fc 01       	movw	r30, r24
     3c4:	20 83       	st	Z, r18
     3c6:	85 e2       	ldi	r24, 0x25	; 37
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	fc 01       	movw	r30, r24
     3cc:	10 82       	st	Z, r1
     3ce:	89 81       	ldd	r24, Y+1	; 0x01
     3d0:	88 23       	and	r24, r24
     3d2:	91 f0       	breq	.+36     	; 0x3f8 <Led_init+0x48>
     3d4:	8a e2       	ldi	r24, 0x2A	; 42
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	2a e2       	ldi	r18, 0x2A	; 42
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	f9 01       	movw	r30, r18
     3de:	20 81       	ld	r18, Z
     3e0:	2f 61       	ori	r18, 0x1F	; 31
     3e2:	fc 01       	movw	r30, r24
     3e4:	20 83       	st	Z, r18
     3e6:	8b e2       	ldi	r24, 0x2B	; 43
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	2b e2       	ldi	r18, 0x2B	; 43
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	f9 01       	movw	r30, r18
     3f0:	20 81       	ld	r18, Z
     3f2:	20 7e       	andi	r18, 0xE0	; 224
     3f4:	fc 01       	movw	r30, r24
     3f6:	20 83       	st	Z, r18
     3f8:	00 00       	nop
     3fa:	0f 90       	pop	r0
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	08 95       	ret

00000402 <Led1_On>:

/**
 led1 - ioB7
 */
void Led1_On(void) {
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	cd b7       	in	r28, 0x3d	; 61
     408:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 7);
     40a:	85 e2       	ldi	r24, 0x25	; 37
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	25 e2       	ldi	r18, 0x25	; 37
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	f9 01       	movw	r30, r18
     414:	20 81       	ld	r18, Z
     416:	20 68       	ori	r18, 0x80	; 128
     418:	fc 01       	movw	r30, r24
     41a:	20 83       	st	Z, r18
}
     41c:	00 00       	nop
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	08 95       	ret

00000424 <Led1_Off>:
void Led1_Off(void) {
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	cd b7       	in	r28, 0x3d	; 61
     42a:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 7);
     42c:	85 e2       	ldi	r24, 0x25	; 37
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	25 e2       	ldi	r18, 0x25	; 37
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	f9 01       	movw	r30, r18
     436:	20 81       	ld	r18, Z
     438:	2f 77       	andi	r18, 0x7F	; 127
     43a:	fc 01       	movw	r30, r24
     43c:	20 83       	st	Z, r18
}
     43e:	00 00       	nop
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	08 95       	ret

00000446 <Led2_On>:

/**
led2 - ioB6
*/
void Led2_On(void) {
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 6);
     44e:	85 e2       	ldi	r24, 0x25	; 37
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	25 e2       	ldi	r18, 0x25	; 37
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	f9 01       	movw	r30, r18
     458:	20 81       	ld	r18, Z
     45a:	20 64       	ori	r18, 0x40	; 64
     45c:	fc 01       	movw	r30, r24
     45e:	20 83       	st	Z, r18
}
     460:	00 00       	nop
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	08 95       	ret

00000468 <Led2_Off>:
void Led2_Off(void) {
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	cd b7       	in	r28, 0x3d	; 61
     46e:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 6);
     470:	85 e2       	ldi	r24, 0x25	; 37
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	25 e2       	ldi	r18, 0x25	; 37
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	f9 01       	movw	r30, r18
     47a:	20 81       	ld	r18, Z
     47c:	2f 7b       	andi	r18, 0xBF	; 191
     47e:	fc 01       	movw	r30, r24
     480:	20 83       	st	Z, r18
}
     482:	00 00       	nop
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	08 95       	ret

0000048a <Taster_init>:
 ---------------------
 - DDR Reg has to be set to 0
 - PORT Reg has to be set to 1
 -> Pin is input with pull-up
 */
void Taster_init() {
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
    
    // set to inputs
    DDRC &= ~(1 << 2);
     492:	87 e2       	ldi	r24, 0x27	; 39
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	27 e2       	ldi	r18, 0x27	; 39
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	f9 01       	movw	r30, r18
     49c:	20 81       	ld	r18, Z
     49e:	2b 7f       	andi	r18, 0xFB	; 251
     4a0:	fc 01       	movw	r30, r24
     4a2:	20 83       	st	Z, r18
    DDRD &= ~( (1 << 7) | (1 << 6) | (1 << 5) );
     4a4:	8a e2       	ldi	r24, 0x2A	; 42
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	2a e2       	ldi	r18, 0x2A	; 42
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	f9 01       	movw	r30, r18
     4ae:	20 81       	ld	r18, Z
     4b0:	2f 71       	andi	r18, 0x1F	; 31
     4b2:	fc 01       	movw	r30, r24
     4b4:	20 83       	st	Z, r18
    
    // enable pull-up
    PORTC |= (1 << 2);
     4b6:	88 e2       	ldi	r24, 0x28	; 40
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	28 e2       	ldi	r18, 0x28	; 40
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	f9 01       	movw	r30, r18
     4c0:	20 81       	ld	r18, Z
     4c2:	24 60       	ori	r18, 0x04	; 4
     4c4:	fc 01       	movw	r30, r24
     4c6:	20 83       	st	Z, r18
    PORTD |= (1 << 7) | (1 << 6) | (1 << 5);
     4c8:	8b e2       	ldi	r24, 0x2B	; 43
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	2b e2       	ldi	r18, 0x2B	; 43
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	f9 01       	movw	r30, r18
     4d2:	20 81       	ld	r18, Z
     4d4:	20 6e       	ori	r18, 0xE0	; 224
     4d6:	fc 01       	movw	r30, r24
     4d8:	20 83       	st	Z, r18
}
     4da:	00 00       	nop
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	08 95       	ret

000004e2 <main>:
#include <avr/interrupt.h>
#include "adc/adc.h"

#define CLK_F_MHZ 16

int main(void) {
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
     4ea:	cb 57       	subi	r28, 0x7B	; 123
     4ec:	d1 09       	sbc	r29, r1
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	f8 94       	cli
     4f2:	de bf       	out	0x3e, r29	; 62
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	cd bf       	out	0x3d, r28	; 61
	
    cli();
     4f8:	f8 94       	cli
    Led_init(0);	// Don't set LEDs at PORTD
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	59 df       	rcall	.-334    	; 0x3b0 <Led_init>
	Taster_init();
     4fe:	c5 df       	rcall	.-118    	; 0x48a <Taster_init>
    Timer_init(CLK_F_MHZ); // Init timer with 16MHZ clock
     500:	80 e1       	ldi	r24, 0x10	; 16
	uart_init_isr();
     502:	6c d0       	rcall	.+216    	; 0x5dc <Timer_init>
    adc_init();
     504:	81 d2       	rcall	.+1282   	; 0xa08 <uart_init_isr>
     506:	e1 dd       	rcall	.-1086   	; 0xca <adc_init>
	sei();
     508:	78 94       	sei
    
    uint16_t timeVarMain = Timer_getTick();
     50a:	ff d0       	rcall	.+510    	; 0x70a <Timer_getTick>
     50c:	9a 83       	std	Y+2, r25	; 0x02
     50e:	89 83       	std	Y+1, r24	; 0x01
     510:	22 e3       	ldi	r18, 0x32	; 50
    char data_s;
    char data[50] = {0};
     512:	ce 01       	movw	r24, r28
     514:	09 96       	adiw	r24, 0x09	; 9
     516:	fc 01       	movw	r30, r24
     518:	32 2f       	mov	r19, r18
     51a:	11 92       	st	Z+, r1
     51c:	3a 95       	dec	r19
     51e:	e9 f7       	brne	.-6      	; 0x51a <main+0x38>
    int isafd = 0;
     520:	1c 82       	std	Y+4, r1	; 0x04
     522:	1b 82       	std	Y+3, r1	; 0x03
	char str[65];
    uint16_t Poti = 0;
     524:	1e 82       	std	Y+6, r1	; 0x06
     526:	1d 82       	std	Y+5, r1	; 0x05
	
    while (1) {
        
        if((Timer_getTick() - timeVarMain) >= 500){
     528:	f0 d0       	rcall	.+480    	; 0x70a <Timer_getTick>
     52a:	9c 01       	movw	r18, r24
     52c:	89 81       	ldd	r24, Y+1	; 0x01
     52e:	9a 81       	ldd	r25, Y+2	; 0x02
     530:	a9 01       	movw	r20, r18
     532:	48 1b       	sub	r20, r24
     534:	59 0b       	sbc	r21, r25
     536:	ca 01       	movw	r24, r20
     538:	84 3f       	cpi	r24, 0xF4	; 244
     53a:	91 40       	sbci	r25, 0x01	; 1
     53c:	a8 f3       	brcs	.-22     	; 0x528 <main+0x46>
            timeVarMain = Timer_getTick();
     53e:	e5 d0       	rcall	.+458    	; 0x70a <Timer_getTick>
     540:	9a 83       	std	Y+2, r25	; 0x02
            
            if ( isafd == 0){
     542:	89 83       	std	Y+1, r24	; 0x01
     544:	8b 81       	ldd	r24, Y+3	; 0x03
     546:	9c 81       	ldd	r25, Y+4	; 0x04
                Led1_On();
     548:	89 2b       	or	r24, r25
                Led2_Off();
     54a:	39 f4       	brne	.+14     	; 0x55a <main+0x78>
                isafd = 1;
     54c:	5a df       	rcall	.-332    	; 0x402 <Led1_On>
     54e:	8c df       	rcall	.-232    	; 0x468 <Led2_Off>
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	90 e0       	ldi	r25, 0x00	; 0
            }else  {
                Led1_Off();
     554:	9c 83       	std	Y+4, r25	; 0x04
     556:	8b 83       	std	Y+3, r24	; 0x03
                Led2_On();
     558:	04 c0       	rjmp	.+8      	; 0x562 <main+0x80>
     55a:	64 df       	rcall	.-312    	; 0x424 <Led1_Off>
                isafd = 0;
     55c:	74 df       	rcall	.-280    	; 0x446 <Led2_On>
     55e:	1c 82       	std	Y+4, r1	; 0x04
            }
            
            uint16_t LM35 = adc_get_LM35();
     560:	1b 82       	std	Y+3, r1	; 0x03
     562:	cd dd       	rcall	.-1126   	; 0xfe <adc_get_LM35>
     564:	98 87       	std	Y+8, r25	; 0x08
     566:	8f 83       	std	Y+7, r24	; 0x07
            Poti = adc_get_Poti();
     568:	31 de       	rcall	.-926    	; 0x1cc <adc_get_Poti>
     56a:	9e 83       	std	Y+6, r25	; 0x06
     56c:	8d 83       	std	Y+5, r24	; 0x05
     56e:	f8 94       	cli
            
            
            cli();
     570:	88 85       	ldd	r24, Y+8	; 0x08
            sprintf(str, "Temp: %d\n", LM35);
     572:	8f 93       	push	r24
     574:	8f 81       	ldd	r24, Y+7	; 0x07
     576:	8f 93       	push	r24
     578:	82 e0       	ldi	r24, 0x02	; 2
     57a:	91 e0       	ldi	r25, 0x01	; 1
     57c:	89 2f       	mov	r24, r25
     57e:	8f 93       	push	r24
     580:	82 e0       	ldi	r24, 0x02	; 2
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	8f 93       	push	r24
     586:	ce 01       	movw	r24, r28
     588:	cb 96       	adiw	r24, 0x3b	; 59
     58a:	29 2f       	mov	r18, r25
     58c:	2f 93       	push	r18
     58e:	8f 93       	push	r24
     590:	4d d4       	rcall	.+2202   	; 0xe2c <sprintf>
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
            uart_send_isr(str);
     59e:	ce 01       	movw	r24, r28
     5a0:	cb 96       	adiw	r24, 0x3b	; 59
     5a2:	4d d2       	rcall	.+1178   	; 0xa3e <uart_send_isr>
     5a4:	8e 81       	ldd	r24, Y+6	; 0x06
            sprintf(str, "Poti: %d\n", Poti);
     5a6:	8f 93       	push	r24
     5a8:	8d 81       	ldd	r24, Y+5	; 0x05
     5aa:	8f 93       	push	r24
     5ac:	8c e0       	ldi	r24, 0x0C	; 12
     5ae:	91 e0       	ldi	r25, 0x01	; 1
     5b0:	89 2f       	mov	r24, r25
     5b2:	8f 93       	push	r24
     5b4:	8c e0       	ldi	r24, 0x0C	; 12
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	8f 93       	push	r24
     5ba:	ce 01       	movw	r24, r28
     5bc:	cb 96       	adiw	r24, 0x3b	; 59
     5be:	29 2f       	mov	r18, r25
     5c0:	2f 93       	push	r18
     5c2:	8f 93       	push	r24
     5c4:	33 d4       	rcall	.+2150   	; 0xe2c <sprintf>
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
            uart_send_isr(str);
     5d2:	ce 01       	movw	r24, r28
     5d4:	cb 96       	adiw	r24, 0x3b	; 59
     5d6:	33 d2       	rcall	.+1126   	; 0xa3e <uart_send_isr>
     5d8:	78 94       	sei
            sei();
     5da:	a6 cf       	rjmp	.-180    	; 0x528 <main+0x46>

000005dc <Timer_init>:
            }
        }*/
        
        //trafficLight(0);
        //playground();
    }
     5dc:	cf 93       	push	r28
    }
    
    TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
}
     5de:	df 93       	push	r29
     5e0:	1f 92       	push	r1
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
     5e6:	89 83       	std	Y+1, r24	; 0x01
     5e8:	89 81       	ldd	r24, Y+1	; 0x01
     5ea:	88 2f       	mov	r24, r24
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	05 d0       	rcall	.+10     	; 0x5fa <Timer_init_withoutStruct>
     5f0:	00 00       	nop
     5f2:	0f 90       	pop	r0
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	08 95       	ret

000005fa <Timer_init_withoutStruct>:

void Timer_init_withoutStruct(uint8_t clockFreqMhz) {
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
     5fe:	1f 92       	push	r1
     600:	cd b7       	in	r28, 0x3d	; 61
     602:	de b7       	in	r29, 0x3e	; 62
     604:	89 83       	std	Y+1, r24	; 0x01
    // datasheet page 97
    // set mode to clear timer on compare (CTC)
    TCCR0B &= ~(1 << WGM02);
     606:	85 e4       	ldi	r24, 0x45	; 69
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	25 e4       	ldi	r18, 0x45	; 69
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	f9 01       	movw	r30, r18
     610:	20 81       	ld	r18, Z
     612:	27 7f       	andi	r18, 0xF7	; 247
     614:	fc 01       	movw	r30, r24
     616:	20 83       	st	Z, r18
    TCCR0A |= (1 << WGM01);
     618:	84 e4       	ldi	r24, 0x44	; 68
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	24 e4       	ldi	r18, 0x44	; 68
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	f9 01       	movw	r30, r18
     622:	20 81       	ld	r18, Z
     624:	22 60       	ori	r18, 0x02	; 2
     626:	fc 01       	movw	r30, r24
     628:	20 83       	st	Z, r18
    TCCR0A &= ~(1 << WGM00);
     62a:	84 e4       	ldi	r24, 0x44	; 68
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	24 e4       	ldi	r18, 0x44	; 68
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	f9 01       	movw	r30, r18
     634:	20 81       	ld	r18, Z
     636:	2e 7f       	andi	r18, 0xFE	; 254
     638:	fc 01       	movw	r30, r24
     63a:	20 83       	st	Z, r18
    
    
    switch (clockFreqMhz) {
     63c:	89 81       	ldd	r24, Y+1	; 0x01
     63e:	88 2f       	mov	r24, r24
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	40 97       	sbiw	r24, 0x10	; 16
     644:	09 f5       	brne	.+66     	; 0x688 <Timer_init_withoutStruct+0x8e>
        case 16:
            // extern osc (16 MHZ)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = 249;   // dez 249; range 0 - 249 -> 250 cycles till interrupt
     646:	87 e4       	ldi	r24, 0x47	; 71
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	29 ef       	ldi	r18, 0xF9	; 249
     64c:	fc 01       	movw	r30, r24
     64e:	20 83       	st	Z, r18
            
            // set prescaler to 1/64
            TCCR0B &= ~(1 << CS02);
     650:	85 e4       	ldi	r24, 0x45	; 69
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	25 e4       	ldi	r18, 0x45	; 69
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	f9 01       	movw	r30, r18
     65a:	20 81       	ld	r18, Z
     65c:	2b 7f       	andi	r18, 0xFB	; 251
     65e:	fc 01       	movw	r30, r24
     660:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
     662:	85 e4       	ldi	r24, 0x45	; 69
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	25 e4       	ldi	r18, 0x45	; 69
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	f9 01       	movw	r30, r18
     66c:	20 81       	ld	r18, Z
     66e:	22 60       	ori	r18, 0x02	; 2
     670:	fc 01       	movw	r30, r24
     672:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS00);
     674:	85 e4       	ldi	r24, 0x45	; 69
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	25 e4       	ldi	r18, 0x45	; 69
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	f9 01       	movw	r30, r18
     67e:	20 81       	ld	r18, Z
     680:	21 60       	ori	r18, 0x01	; 1
     682:	fc 01       	movw	r30, r24
     684:	20 83       	st	Z, r18
            break;
     686:	21 c0       	rjmp	.+66     	; 0x6ca <Timer_init_withoutStruct+0xd0>
            
        default:
            // inter osc (8 MHZ divided by 8 -> 1 MHZ clock)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = 0x7C;   // dez 124; range 0 - 124 -> 125 cycles till interrupt
     688:	87 e4       	ldi	r24, 0x47	; 71
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	2c e7       	ldi	r18, 0x7C	; 124
     68e:	fc 01       	movw	r30, r24
     690:	20 83       	st	Z, r18
            
            // set prescaler to 1/8
            TCCR0B &= ~(1 << CS02);
     692:	85 e4       	ldi	r24, 0x45	; 69
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	25 e4       	ldi	r18, 0x45	; 69
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	f9 01       	movw	r30, r18
     69c:	20 81       	ld	r18, Z
     69e:	2b 7f       	andi	r18, 0xFB	; 251
     6a0:	fc 01       	movw	r30, r24
     6a2:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
     6a4:	85 e4       	ldi	r24, 0x45	; 69
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	25 e4       	ldi	r18, 0x45	; 69
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	f9 01       	movw	r30, r18
     6ae:	20 81       	ld	r18, Z
     6b0:	22 60       	ori	r18, 0x02	; 2
     6b2:	fc 01       	movw	r30, r24
     6b4:	20 83       	st	Z, r18
            TCCR0B &= ~(1 << CS00);
     6b6:	85 e4       	ldi	r24, 0x45	; 69
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	25 e4       	ldi	r18, 0x45	; 69
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	f9 01       	movw	r30, r18
     6c0:	20 81       	ld	r18, Z
     6c2:	2e 7f       	andi	r18, 0xFE	; 254
     6c4:	fc 01       	movw	r30, r24
     6c6:	20 83       	st	Z, r18
            break;
     6c8:	00 00       	nop
    }
    
    TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
     6ca:	8e e6       	ldi	r24, 0x6E	; 110
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	2e e6       	ldi	r18, 0x6E	; 110
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	f9 01       	movw	r30, r18
     6d4:	20 81       	ld	r18, Z
     6d6:	2b 7f       	andi	r18, 0xFB	; 251
     6d8:	fc 01       	movw	r30, r24
     6da:	20 83       	st	Z, r18
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
     6dc:	8e e6       	ldi	r24, 0x6E	; 110
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	2e e6       	ldi	r18, 0x6E	; 110
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	f9 01       	movw	r30, r18
     6e6:	20 81       	ld	r18, Z
     6e8:	22 60       	ori	r18, 0x02	; 2
     6ea:	fc 01       	movw	r30, r24
     6ec:	20 83       	st	Z, r18
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
     6ee:	8e e6       	ldi	r24, 0x6E	; 110
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	2e e6       	ldi	r18, 0x6E	; 110
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	f9 01       	movw	r30, r18
     6f8:	20 81       	ld	r18, Z
     6fa:	2e 7f       	andi	r18, 0xFE	; 254
     6fc:	fc 01       	movw	r30, r24
     6fe:	20 83       	st	Z, r18
}
     700:	00 00       	nop
     702:	0f 90       	pop	r0
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	08 95       	ret

0000070a <Timer_getTick>:

uint16_t Timer_getTick() {
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	00 d0       	rcall	.+0      	; 0x710 <Timer_getTick+0x6>
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
    // disable global interrupt
    cli();
     714:	f8 94       	cli
    
    // store timer_count in a temp int that can't get changed by ISR
    uint16_t temp_timer_count = timer_count;
     716:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <timer_count>
     71a:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <timer_count+0x1>
     71e:	9a 83       	std	Y+2, r25	; 0x02
     720:	89 83       	std	Y+1, r24	; 0x01
    
    // enable global interrupt
    sei();
     722:	78 94       	sei

    return temp_timer_count;
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	9a 81       	ldd	r25, Y+2	; 0x02
}
     728:	0f 90       	pop	r0
     72a:	0f 90       	pop	r0
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	08 95       	ret

00000732 <__vector_16>:
 ( not used atm)
 Timer compare A interrput:
 - increase timer_count
 - if timer_count is at max of uint16, set it to 0
 */
ISR(TIMER0_COMPA_vect){
     732:	1f 92       	push	r1
     734:	0f 92       	push	r0
     736:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     73a:	0f 92       	push	r0
     73c:	11 24       	eor	r1, r1
     73e:	8f 93       	push	r24
     740:	9f 93       	push	r25
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	cd b7       	in	r28, 0x3d	; 61
     748:	de b7       	in	r29, 0x3e	; 62
    timer_count++;
     74a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <timer_count>
     74e:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <timer_count+0x1>
     752:	01 96       	adiw	r24, 0x01	; 1
     754:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timer_count+0x1>
     758:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timer_count>
}
     75c:	00 00       	nop
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	9f 91       	pop	r25
     764:	8f 91       	pop	r24
     766:	0f 90       	pop	r0
     768:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     76c:	0f 90       	pop	r0
     76e:	1f 90       	pop	r1
     770:	18 95       	reti

00000772 <buff_put>:
        // Return byte
        return pByte;
    }else {
        return 0;
    }
}
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	00 d0       	rcall	.+0      	; 0x778 <buff_put+0x6>
     778:	1f 92       	push	r1
     77a:	cd b7       	in	r28, 0x3d	; 61
     77c:	de b7       	in	r29, 0x3e	; 62
     77e:	89 83       	std	Y+1, r24	; 0x01
     780:	7b 83       	std	Y+3, r23	; 0x03
     782:	6a 83       	std	Y+2, r22	; 0x02
     784:	81 ec       	ldi	r24, 0xC1	; 193
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	21 ec       	ldi	r18, 0xC1	; 193
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	f9 01       	movw	r30, r18
     78e:	20 81       	ld	r18, Z
     790:	2f 7b       	andi	r18, 0xBF	; 191
     792:	fc 01       	movw	r30, r24
     794:	20 83       	st	Z, r18
     796:	81 ec       	ldi	r24, 0xC1	; 193
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	21 ec       	ldi	r18, 0xC1	; 193
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	f9 01       	movw	r30, r18
     7a0:	20 81       	ld	r18, Z
     7a2:	2f 77       	andi	r18, 0x7F	; 127
     7a4:	fc 01       	movw	r30, r24
     7a6:	20 83       	st	Z, r18
     7a8:	8a 81       	ldd	r24, Y+2	; 0x02
     7aa:	9b 81       	ldd	r25, Y+3	; 0x03
     7ac:	8e 5f       	subi	r24, 0xFE	; 254
     7ae:	9d 4f       	sbci	r25, 0xFD	; 253
     7b0:	fc 01       	movw	r30, r24
     7b2:	80 81       	ld	r24, Z
     7b4:	91 81       	ldd	r25, Z+1	; 0x01
     7b6:	9c 01       	movw	r18, r24
     7b8:	2f 5f       	subi	r18, 0xFF	; 255
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	8a 81       	ldd	r24, Y+2	; 0x02
     7be:	9b 81       	ldd	r25, Y+3	; 0x03
     7c0:	9e 5f       	subi	r25, 0xFE	; 254
     7c2:	fc 01       	movw	r30, r24
     7c4:	80 81       	ld	r24, Z
     7c6:	91 81       	ldd	r25, Z+1	; 0x01
     7c8:	28 17       	cp	r18, r24
     7ca:	39 07       	cpc	r19, r25
     7cc:	91 f0       	breq	.+36     	; 0x7f2 <buff_put+0x80>
     7ce:	8a 81       	ldd	r24, Y+2	; 0x02
     7d0:	9b 81       	ldd	r25, Y+3	; 0x03
     7d2:	9e 5f       	subi	r25, 0xFE	; 254
     7d4:	fc 01       	movw	r30, r24
     7d6:	80 81       	ld	r24, Z
     7d8:	91 81       	ldd	r25, Z+1	; 0x01
     7da:	89 2b       	or	r24, r25
     7dc:	f1 f4       	brne	.+60     	; 0x81a <buff_put+0xa8>
     7de:	8a 81       	ldd	r24, Y+2	; 0x02
     7e0:	9b 81       	ldd	r25, Y+3	; 0x03
     7e2:	8e 5f       	subi	r24, 0xFE	; 254
     7e4:	9d 4f       	sbci	r25, 0xFD	; 253
     7e6:	fc 01       	movw	r30, r24
     7e8:	80 81       	ld	r24, Z
     7ea:	91 81       	ldd	r25, Z+1	; 0x01
     7ec:	8f 3f       	cpi	r24, 0xFF	; 255
     7ee:	91 40       	sbci	r25, 0x01	; 1
     7f0:	a1 f4       	brne	.+40     	; 0x81a <buff_put+0xa8>
     7f2:	81 ec       	ldi	r24, 0xC1	; 193
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	21 ec       	ldi	r18, 0xC1	; 193
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	f9 01       	movw	r30, r18
     7fc:	20 81       	ld	r18, Z
     7fe:	20 64       	ori	r18, 0x40	; 64
     800:	fc 01       	movw	r30, r24
     802:	20 83       	st	Z, r18
     804:	81 ec       	ldi	r24, 0xC1	; 193
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	21 ec       	ldi	r18, 0xC1	; 193
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	f9 01       	movw	r30, r18
     80e:	20 81       	ld	r18, Z
     810:	20 68       	ori	r18, 0x80	; 128
     812:	fc 01       	movw	r30, r24
     814:	20 83       	st	Z, r18
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	43 c0       	rjmp	.+134    	; 0x8a0 <buff_put+0x12e>
     81a:	8a 81       	ldd	r24, Y+2	; 0x02
     81c:	9b 81       	ldd	r25, Y+3	; 0x03
     81e:	8e 5f       	subi	r24, 0xFE	; 254
     820:	9d 4f       	sbci	r25, 0xFD	; 253
     822:	fc 01       	movw	r30, r24
     824:	80 81       	ld	r24, Z
     826:	91 81       	ldd	r25, Z+1	; 0x01
     828:	2a 81       	ldd	r18, Y+2	; 0x02
     82a:	3b 81       	ldd	r19, Y+3	; 0x03
     82c:	82 0f       	add	r24, r18
     82e:	93 1f       	adc	r25, r19
     830:	29 81       	ldd	r18, Y+1	; 0x01
     832:	fc 01       	movw	r30, r24
     834:	20 83       	st	Z, r18
     836:	8a 81       	ldd	r24, Y+2	; 0x02
     838:	9b 81       	ldd	r25, Y+3	; 0x03
     83a:	8e 5f       	subi	r24, 0xFE	; 254
     83c:	9d 4f       	sbci	r25, 0xFD	; 253
     83e:	fc 01       	movw	r30, r24
     840:	80 81       	ld	r24, Z
     842:	91 81       	ldd	r25, Z+1	; 0x01
     844:	9c 01       	movw	r18, r24
     846:	2f 5f       	subi	r18, 0xFF	; 255
     848:	3f 4f       	sbci	r19, 0xFF	; 255
     84a:	8a 81       	ldd	r24, Y+2	; 0x02
     84c:	9b 81       	ldd	r25, Y+3	; 0x03
     84e:	8e 5f       	subi	r24, 0xFE	; 254
     850:	9d 4f       	sbci	r25, 0xFD	; 253
     852:	fc 01       	movw	r30, r24
     854:	31 83       	std	Z+1, r19	; 0x01
     856:	20 83       	st	Z, r18
     858:	8a 81       	ldd	r24, Y+2	; 0x02
     85a:	9b 81       	ldd	r25, Y+3	; 0x03
     85c:	8e 5f       	subi	r24, 0xFE	; 254
     85e:	9d 4f       	sbci	r25, 0xFD	; 253
     860:	fc 01       	movw	r30, r24
     862:	80 81       	ld	r24, Z
     864:	91 81       	ldd	r25, Z+1	; 0x01
     866:	81 15       	cp	r24, r1
     868:	92 40       	sbci	r25, 0x02	; 2
     86a:	38 f0       	brcs	.+14     	; 0x87a <buff_put+0x108>
     86c:	8a 81       	ldd	r24, Y+2	; 0x02
     86e:	9b 81       	ldd	r25, Y+3	; 0x03
     870:	8e 5f       	subi	r24, 0xFE	; 254
     872:	9d 4f       	sbci	r25, 0xFD	; 253
     874:	fc 01       	movw	r30, r24
     876:	11 82       	std	Z+1, r1	; 0x01
     878:	10 82       	st	Z, r1
     87a:	81 ec       	ldi	r24, 0xC1	; 193
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	21 ec       	ldi	r18, 0xC1	; 193
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	f9 01       	movw	r30, r18
     884:	20 81       	ld	r18, Z
     886:	20 64       	ori	r18, 0x40	; 64
     888:	fc 01       	movw	r30, r24
     88a:	20 83       	st	Z, r18
     88c:	81 ec       	ldi	r24, 0xC1	; 193
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	21 ec       	ldi	r18, 0xC1	; 193
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	f9 01       	movw	r30, r18
     896:	20 81       	ld	r18, Z
     898:	20 68       	ori	r18, 0x80	; 128
     89a:	fc 01       	movw	r30, r24
     89c:	20 83       	st	Z, r18
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	0f 90       	pop	r0
     8a2:	0f 90       	pop	r0
     8a4:	0f 90       	pop	r0
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <buff_get>:
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	00 d0       	rcall	.+0      	; 0x8b2 <buff_get+0x6>
     8b2:	00 d0       	rcall	.+0      	; 0x8b4 <buff_get+0x8>
     8b4:	cd b7       	in	r28, 0x3d	; 61
     8b6:	de b7       	in	r29, 0x3e	; 62
     8b8:	9a 83       	std	Y+2, r25	; 0x02
     8ba:	89 83       	std	Y+1, r24	; 0x01
     8bc:	7c 83       	std	Y+4, r23	; 0x04
     8be:	6b 83       	std	Y+3, r22	; 0x03
     8c0:	81 ec       	ldi	r24, 0xC1	; 193
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	21 ec       	ldi	r18, 0xC1	; 193
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	f9 01       	movw	r30, r18
     8ca:	20 81       	ld	r18, Z
     8cc:	2f 7b       	andi	r18, 0xBF	; 191
     8ce:	fc 01       	movw	r30, r24
     8d0:	20 83       	st	Z, r18
     8d2:	81 ec       	ldi	r24, 0xC1	; 193
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	21 ec       	ldi	r18, 0xC1	; 193
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	f9 01       	movw	r30, r18
     8dc:	20 81       	ld	r18, Z
     8de:	2f 77       	andi	r18, 0x7F	; 127
     8e0:	fc 01       	movw	r30, r24
     8e2:	20 83       	st	Z, r18
     8e4:	8b 81       	ldd	r24, Y+3	; 0x03
     8e6:	9c 81       	ldd	r25, Y+4	; 0x04
     8e8:	9e 5f       	subi	r25, 0xFE	; 254
     8ea:	fc 01       	movw	r30, r24
     8ec:	20 81       	ld	r18, Z
     8ee:	31 81       	ldd	r19, Z+1	; 0x01
     8f0:	8b 81       	ldd	r24, Y+3	; 0x03
     8f2:	9c 81       	ldd	r25, Y+4	; 0x04
     8f4:	8e 5f       	subi	r24, 0xFE	; 254
     8f6:	9d 4f       	sbci	r25, 0xFD	; 253
     8f8:	fc 01       	movw	r30, r24
     8fa:	80 81       	ld	r24, Z
     8fc:	91 81       	ldd	r25, Z+1	; 0x01
     8fe:	28 17       	cp	r18, r24
     900:	39 07       	cpc	r19, r25
     902:	a1 f4       	brne	.+40     	; 0x92c <buff_get+0x80>
     904:	81 ec       	ldi	r24, 0xC1	; 193
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	21 ec       	ldi	r18, 0xC1	; 193
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	f9 01       	movw	r30, r18
     90e:	20 81       	ld	r18, Z
     910:	20 64       	ori	r18, 0x40	; 64
     912:	fc 01       	movw	r30, r24
     914:	20 83       	st	Z, r18
     916:	81 ec       	ldi	r24, 0xC1	; 193
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	21 ec       	ldi	r18, 0xC1	; 193
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	f9 01       	movw	r30, r18
     920:	20 81       	ld	r18, Z
     922:	20 68       	ori	r18, 0x80	; 128
     924:	fc 01       	movw	r30, r24
     926:	20 83       	st	Z, r18
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	41 c0       	rjmp	.+130    	; 0x9ae <buff_get+0x102>
     92c:	8b 81       	ldd	r24, Y+3	; 0x03
     92e:	9c 81       	ldd	r25, Y+4	; 0x04
     930:	9e 5f       	subi	r25, 0xFE	; 254
     932:	fc 01       	movw	r30, r24
     934:	80 81       	ld	r24, Z
     936:	91 81       	ldd	r25, Z+1	; 0x01
     938:	2b 81       	ldd	r18, Y+3	; 0x03
     93a:	3c 81       	ldd	r19, Y+4	; 0x04
     93c:	82 0f       	add	r24, r18
     93e:	93 1f       	adc	r25, r19
     940:	fc 01       	movw	r30, r24
     942:	20 81       	ld	r18, Z
     944:	89 81       	ldd	r24, Y+1	; 0x01
     946:	9a 81       	ldd	r25, Y+2	; 0x02
     948:	fc 01       	movw	r30, r24
     94a:	20 83       	st	Z, r18
     94c:	8b 81       	ldd	r24, Y+3	; 0x03
     94e:	9c 81       	ldd	r25, Y+4	; 0x04
     950:	9e 5f       	subi	r25, 0xFE	; 254
     952:	fc 01       	movw	r30, r24
     954:	80 81       	ld	r24, Z
     956:	91 81       	ldd	r25, Z+1	; 0x01
     958:	9c 01       	movw	r18, r24
     95a:	2f 5f       	subi	r18, 0xFF	; 255
     95c:	3f 4f       	sbci	r19, 0xFF	; 255
     95e:	8b 81       	ldd	r24, Y+3	; 0x03
     960:	9c 81       	ldd	r25, Y+4	; 0x04
     962:	9e 5f       	subi	r25, 0xFE	; 254
     964:	fc 01       	movw	r30, r24
     966:	31 83       	std	Z+1, r19	; 0x01
     968:	20 83       	st	Z, r18
     96a:	8b 81       	ldd	r24, Y+3	; 0x03
     96c:	9c 81       	ldd	r25, Y+4	; 0x04
     96e:	9e 5f       	subi	r25, 0xFE	; 254
     970:	fc 01       	movw	r30, r24
     972:	80 81       	ld	r24, Z
     974:	91 81       	ldd	r25, Z+1	; 0x01
     976:	81 15       	cp	r24, r1
     978:	92 40       	sbci	r25, 0x02	; 2
     97a:	30 f0       	brcs	.+12     	; 0x988 <buff_get+0xdc>
     97c:	8b 81       	ldd	r24, Y+3	; 0x03
     97e:	9c 81       	ldd	r25, Y+4	; 0x04
     980:	9e 5f       	subi	r25, 0xFE	; 254
     982:	fc 01       	movw	r30, r24
     984:	11 82       	std	Z+1, r1	; 0x01
     986:	10 82       	st	Z, r1
     988:	81 ec       	ldi	r24, 0xC1	; 193
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	21 ec       	ldi	r18, 0xC1	; 193
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	f9 01       	movw	r30, r18
     992:	20 81       	ld	r18, Z
     994:	20 64       	ori	r18, 0x40	; 64
     996:	fc 01       	movw	r30, r24
     998:	20 83       	st	Z, r18
     99a:	81 ec       	ldi	r24, 0xC1	; 193
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	21 ec       	ldi	r18, 0xC1	; 193
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	f9 01       	movw	r30, r18
     9a4:	20 81       	ld	r18, Z
     9a6:	20 68       	ori	r18, 0x80	; 128
     9a8:	fc 01       	movw	r30, r24
     9aa:	20 83       	st	Z, r18
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	0f 90       	pop	r0
     9b0:	0f 90       	pop	r0
     9b2:	0f 90       	pop	r0
     9b4:	0f 90       	pop	r0
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	08 95       	ret

000009bc <uart_init>:
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	00 d0       	rcall	.+0      	; 0x9c2 <uart_init+0x6>
     9c2:	cd b7       	in	r28, 0x3d	; 61
     9c4:	de b7       	in	r29, 0x3e	; 62
     9c6:	87 e6       	ldi	r24, 0x67	; 103
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	9a 83       	std	Y+2, r25	; 0x02
     9cc:	89 83       	std	Y+1, r24	; 0x01
     9ce:	85 ec       	ldi	r24, 0xC5	; 197
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	29 81       	ldd	r18, Y+1	; 0x01
     9d4:	3a 81       	ldd	r19, Y+2	; 0x02
     9d6:	23 2f       	mov	r18, r19
     9d8:	33 27       	eor	r19, r19
     9da:	fc 01       	movw	r30, r24
     9dc:	20 83       	st	Z, r18
     9de:	84 ec       	ldi	r24, 0xC4	; 196
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	29 81       	ldd	r18, Y+1	; 0x01
     9e4:	fc 01       	movw	r30, r24
     9e6:	20 83       	st	Z, r18
     9e8:	81 ec       	ldi	r24, 0xC1	; 193
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	28 e1       	ldi	r18, 0x18	; 24
     9ee:	fc 01       	movw	r30, r24
     9f0:	20 83       	st	Z, r18
     9f2:	82 ec       	ldi	r24, 0xC2	; 194
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	26 e0       	ldi	r18, 0x06	; 6
     9f8:	fc 01       	movw	r30, r24
     9fa:	20 83       	st	Z, r18
     9fc:	00 00       	nop
     9fe:	0f 90       	pop	r0
     a00:	0f 90       	pop	r0
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	08 95       	ret

00000a08 <uart_init_isr>:
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
     a0c:	cd b7       	in	r28, 0x3d	; 61
     a0e:	de b7       	in	r29, 0x3e	; 62
     a10:	d5 df       	rcall	.-86     	; 0x9bc <uart_init>
     a12:	81 ec       	ldi	r24, 0xC1	; 193
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	21 ec       	ldi	r18, 0xC1	; 193
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	f9 01       	movw	r30, r18
     a1c:	20 81       	ld	r18, Z
     a1e:	20 64       	ori	r18, 0x40	; 64
     a20:	fc 01       	movw	r30, r24
     a22:	20 83       	st	Z, r18
     a24:	81 ec       	ldi	r24, 0xC1	; 193
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	21 ec       	ldi	r18, 0xC1	; 193
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	f9 01       	movw	r30, r18
     a2e:	20 81       	ld	r18, Z
     a30:	20 68       	ori	r18, 0x80	; 128
     a32:	fc 01       	movw	r30, r24
     a34:	20 83       	st	Z, r18
     a36:	00 00       	nop
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	08 95       	ret

00000a3e <uart_send_isr>:
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	cd b7       	in	r28, 0x3d	; 61
     a44:	de b7       	in	r29, 0x3e	; 62
     a46:	29 97       	sbiw	r28, 0x09	; 9
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	f8 94       	cli
     a4c:	de bf       	out	0x3e, r29	; 62
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	cd bf       	out	0x3d, r28	; 61
     a52:	99 87       	std	Y+9, r25	; 0x09
     a54:	88 87       	std	Y+8, r24	; 0x08
     a56:	88 85       	ldd	r24, Y+8	; 0x08
     a58:	99 85       	ldd	r25, Y+9	; 0x09
     a5a:	df d1       	rcall	.+958    	; 0xe1a <strlen>
     a5c:	9e 83       	std	Y+6, r25	; 0x06
     a5e:	8d 83       	std	Y+5, r24	; 0x05
     a60:	1a 82       	std	Y+2, r1	; 0x02
     a62:	19 82       	std	Y+1, r1	; 0x01
     a64:	1c 82       	std	Y+4, r1	; 0x04
     a66:	1b 82       	std	Y+3, r1	; 0x03
     a68:	1c c0       	rjmp	.+56     	; 0xaa2 <uart_send_isr+0x64>
     a6a:	8b 81       	ldd	r24, Y+3	; 0x03
     a6c:	9c 81       	ldd	r25, Y+4	; 0x04
     a6e:	28 85       	ldd	r18, Y+8	; 0x08
     a70:	39 85       	ldd	r19, Y+9	; 0x09
     a72:	82 0f       	add	r24, r18
     a74:	93 1f       	adc	r25, r19
     a76:	fc 01       	movw	r30, r24
     a78:	80 81       	ld	r24, Z
     a7a:	68 e3       	ldi	r22, 0x38	; 56
     a7c:	71 e0       	ldi	r23, 0x01	; 1
     a7e:	79 de       	rcall	.-782    	; 0x772 <buff_put>
     a80:	81 30       	cpi	r24, 0x01	; 1
     a82:	51 f4       	brne	.+20     	; 0xa98 <uart_send_isr+0x5a>
     a84:	8b 81       	ldd	r24, Y+3	; 0x03
     a86:	9c 81       	ldd	r25, Y+4	; 0x04
     a88:	9c 01       	movw	r18, r24
     a8a:	2f 5f       	subi	r18, 0xFF	; 255
     a8c:	3f 4f       	sbci	r19, 0xFF	; 255
     a8e:	3c 83       	std	Y+4, r19	; 0x04
     a90:	2b 83       	std	Y+3, r18	; 0x03
     a92:	9a 83       	std	Y+2, r25	; 0x02
     a94:	89 83       	std	Y+1, r24	; 0x01
     a96:	0c c0       	rjmp	.+24     	; 0xab0 <uart_send_isr+0x72>
     a98:	8b 81       	ldd	r24, Y+3	; 0x03
     a9a:	9c 81       	ldd	r25, Y+4	; 0x04
     a9c:	01 96       	adiw	r24, 0x01	; 1
     a9e:	9c 83       	std	Y+4, r25	; 0x04
     aa0:	8b 83       	std	Y+3, r24	; 0x03
     aa2:	2b 81       	ldd	r18, Y+3	; 0x03
     aa4:	3c 81       	ldd	r19, Y+4	; 0x04
     aa6:	8d 81       	ldd	r24, Y+5	; 0x05
     aa8:	9e 81       	ldd	r25, Y+6	; 0x06
     aaa:	28 17       	cp	r18, r24
     aac:	39 07       	cpc	r19, r25
     aae:	ec f2       	brlt	.-70     	; 0xa6a <uart_send_isr+0x2c>
     ab0:	80 ec       	ldi	r24, 0xC0	; 192
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	fc 01       	movw	r30, r24
     ab6:	80 81       	ld	r24, Z
     ab8:	88 2f       	mov	r24, r24
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	80 72       	andi	r24, 0x20	; 32
     abe:	99 27       	eor	r25, r25
     ac0:	89 2b       	or	r24, r25
     ac2:	61 f0       	breq	.+24     	; 0xadc <uart_send_isr+0x9e>
     ac4:	ce 01       	movw	r24, r28
     ac6:	07 96       	adiw	r24, 0x07	; 7
     ac8:	68 e3       	ldi	r22, 0x38	; 56
     aca:	71 e0       	ldi	r23, 0x01	; 1
     acc:	ef de       	rcall	.-546    	; 0x8ac <buff_get>
     ace:	88 23       	and	r24, r24
     ad0:	29 f4       	brne	.+10     	; 0xadc <uart_send_isr+0x9e>
     ad2:	86 ec       	ldi	r24, 0xC6	; 198
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	2f 81       	ldd	r18, Y+7	; 0x07
     ad8:	fc 01       	movw	r30, r24
     ada:	20 83       	st	Z, r18
     adc:	89 81       	ldd	r24, Y+1	; 0x01
     ade:	9a 81       	ldd	r25, Y+2	; 0x02
     ae0:	29 96       	adiw	r28, 0x09	; 9
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	f8 94       	cli
     ae6:	de bf       	out	0x3e, r29	; 62
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	cd bf       	out	0x3d, r28	; 61
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	08 95       	ret

00000af2 <__vector_22>:

/**
 ISR for USART Transmit Complete flag
 */
ISR(USART0_TX_vect){
     af2:	1f 92       	push	r1
     af4:	0f 92       	push	r0
     af6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     afa:	0f 92       	push	r0
     afc:	11 24       	eor	r1, r1
     afe:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     b02:	0f 92       	push	r0
     b04:	2f 93       	push	r18
     b06:	3f 93       	push	r19
     b08:	4f 93       	push	r20
     b0a:	5f 93       	push	r21
     b0c:	6f 93       	push	r22
     b0e:	7f 93       	push	r23
     b10:	8f 93       	push	r24
     b12:	9f 93       	push	r25
     b14:	af 93       	push	r26
     b16:	bf 93       	push	r27
     b18:	ef 93       	push	r30
     b1a:	ff 93       	push	r31
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	1f 92       	push	r1
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
    unsigned char pByte;
    // Pull one byte from buffer and store it in pByte
    if (buff_get(&pByte, &bufferSend) == 0) {
     b26:	68 e3       	ldi	r22, 0x38	; 56
     b28:	71 e0       	ldi	r23, 0x01	; 1
     b2a:	ce 01       	movw	r24, r28
     b2c:	01 96       	adiw	r24, 0x01	; 1
     b2e:	be de       	rcall	.-644    	; 0x8ac <buff_get>
     b30:	88 23       	and	r24, r24
     b32:	29 f4       	brne	.+10     	; 0xb3e <__vector_22+0x4c>
        // Send byte
        UDR0 = pByte;
     b34:	86 ec       	ldi	r24, 0xC6	; 198
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	29 81       	ldd	r18, Y+1	; 0x01
     b3a:	fc 01       	movw	r30, r24
     b3c:	20 83       	st	Z, r18
    }
}
     b3e:	00 00       	nop
     b40:	0f 90       	pop	r0
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	ff 91       	pop	r31
     b48:	ef 91       	pop	r30
     b4a:	bf 91       	pop	r27
     b4c:	af 91       	pop	r26
     b4e:	9f 91       	pop	r25
     b50:	8f 91       	pop	r24
     b52:	7f 91       	pop	r23
     b54:	6f 91       	pop	r22
     b56:	5f 91       	pop	r21
     b58:	4f 91       	pop	r20
     b5a:	3f 91       	pop	r19
     b5c:	2f 91       	pop	r18
     b5e:	0f 90       	pop	r0
     b60:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     b64:	0f 90       	pop	r0
     b66:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b6a:	0f 90       	pop	r0
     b6c:	1f 90       	pop	r1
     b6e:	18 95       	reti

00000b70 <__vector_20>:

ISR(USART0_RX_vect){
     b70:	1f 92       	push	r1
     b72:	0f 92       	push	r0
     b74:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b78:	0f 92       	push	r0
     b7a:	11 24       	eor	r1, r1
     b7c:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     b80:	0f 92       	push	r0
     b82:	2f 93       	push	r18
     b84:	3f 93       	push	r19
     b86:	4f 93       	push	r20
     b88:	5f 93       	push	r21
     b8a:	6f 93       	push	r22
     b8c:	7f 93       	push	r23
     b8e:	8f 93       	push	r24
     b90:	9f 93       	push	r25
     b92:	af 93       	push	r26
     b94:	bf 93       	push	r27
     b96:	ef 93       	push	r30
     b98:	ff 93       	push	r31
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	cd b7       	in	r28, 0x3d	; 61
     ba0:	de b7       	in	r29, 0x3e	; 62
    // Put received byte to bufferRecv (will read but don't save the value if buffer overflows)
    buff_put(UDR0, &bufferRecv);
     ba2:	86 ec       	ldi	r24, 0xC6	; 198
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	fc 01       	movw	r30, r24
     ba8:	80 81       	ld	r24, Z
     baa:	6c e3       	ldi	r22, 0x3C	; 60
     bac:	73 e0       	ldi	r23, 0x03	; 3
     bae:	e1 dd       	rcall	.-1086   	; 0x772 <buff_put>
}
     bb0:	00 00       	nop
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	ff 91       	pop	r31
     bb8:	ef 91       	pop	r30
     bba:	bf 91       	pop	r27
     bbc:	af 91       	pop	r26
     bbe:	9f 91       	pop	r25
     bc0:	8f 91       	pop	r24
     bc2:	7f 91       	pop	r23
     bc4:	6f 91       	pop	r22
     bc6:	5f 91       	pop	r21
     bc8:	4f 91       	pop	r20
     bca:	3f 91       	pop	r19
     bcc:	2f 91       	pop	r18
     bce:	0f 90       	pop	r0
     bd0:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     bd4:	0f 90       	pop	r0
     bd6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     bda:	0f 90       	pop	r0
     bdc:	1f 90       	pop	r1
     bde:	18 95       	reti

00000be0 <__fixunssfsi>:
     be0:	70 d0       	rcall	.+224    	; 0xcc2 <__fp_splitA>
     be2:	88 f0       	brcs	.+34     	; 0xc06 <__fixunssfsi+0x26>
     be4:	9f 57       	subi	r25, 0x7F	; 127
     be6:	90 f0       	brcs	.+36     	; 0xc0c <__fixunssfsi+0x2c>
     be8:	b9 2f       	mov	r27, r25
     bea:	99 27       	eor	r25, r25
     bec:	b7 51       	subi	r27, 0x17	; 23
     bee:	a0 f0       	brcs	.+40     	; 0xc18 <__fixunssfsi+0x38>
     bf0:	d1 f0       	breq	.+52     	; 0xc26 <__fixunssfsi+0x46>
     bf2:	66 0f       	add	r22, r22
     bf4:	77 1f       	adc	r23, r23
     bf6:	88 1f       	adc	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	1a f0       	brmi	.+6      	; 0xc02 <__fixunssfsi+0x22>
     bfc:	ba 95       	dec	r27
     bfe:	c9 f7       	brne	.-14     	; 0xbf2 <__fixunssfsi+0x12>
     c00:	12 c0       	rjmp	.+36     	; 0xc26 <__fixunssfsi+0x46>
     c02:	b1 30       	cpi	r27, 0x01	; 1
     c04:	81 f0       	breq	.+32     	; 0xc26 <__fixunssfsi+0x46>
     c06:	77 d0       	rcall	.+238    	; 0xcf6 <__fp_zero>
     c08:	b1 e0       	ldi	r27, 0x01	; 1
     c0a:	08 95       	ret
     c0c:	74 c0       	rjmp	.+232    	; 0xcf6 <__fp_zero>
     c0e:	67 2f       	mov	r22, r23
     c10:	78 2f       	mov	r23, r24
     c12:	88 27       	eor	r24, r24
     c14:	b8 5f       	subi	r27, 0xF8	; 248
     c16:	39 f0       	breq	.+14     	; 0xc26 <__fixunssfsi+0x46>
     c18:	b9 3f       	cpi	r27, 0xF9	; 249
     c1a:	cc f3       	brlt	.-14     	; 0xc0e <__fixunssfsi+0x2e>
     c1c:	86 95       	lsr	r24
     c1e:	77 95       	ror	r23
     c20:	67 95       	ror	r22
     c22:	b3 95       	inc	r27
     c24:	d9 f7       	brne	.-10     	; 0xc1c <__fixunssfsi+0x3c>
     c26:	3e f4       	brtc	.+14     	; 0xc36 <__fixunssfsi+0x56>
     c28:	90 95       	com	r25
     c2a:	80 95       	com	r24
     c2c:	70 95       	com	r23
     c2e:	61 95       	neg	r22
     c30:	7f 4f       	sbci	r23, 0xFF	; 255
     c32:	8f 4f       	sbci	r24, 0xFF	; 255
     c34:	9f 4f       	sbci	r25, 0xFF	; 255
     c36:	08 95       	ret

00000c38 <__floatunsisf>:
     c38:	e8 94       	clt
     c3a:	09 c0       	rjmp	.+18     	; 0xc4e <__floatsisf+0x12>

00000c3c <__floatsisf>:
     c3c:	97 fb       	bst	r25, 7
     c3e:	3e f4       	brtc	.+14     	; 0xc4e <__floatsisf+0x12>
     c40:	90 95       	com	r25
     c42:	80 95       	com	r24
     c44:	70 95       	com	r23
     c46:	61 95       	neg	r22
     c48:	7f 4f       	sbci	r23, 0xFF	; 255
     c4a:	8f 4f       	sbci	r24, 0xFF	; 255
     c4c:	9f 4f       	sbci	r25, 0xFF	; 255
     c4e:	99 23       	and	r25, r25
     c50:	a9 f0       	breq	.+42     	; 0xc7c <__floatsisf+0x40>
     c52:	f9 2f       	mov	r31, r25
     c54:	96 e9       	ldi	r25, 0x96	; 150
     c56:	bb 27       	eor	r27, r27
     c58:	93 95       	inc	r25
     c5a:	f6 95       	lsr	r31
     c5c:	87 95       	ror	r24
     c5e:	77 95       	ror	r23
     c60:	67 95       	ror	r22
     c62:	b7 95       	ror	r27
     c64:	f1 11       	cpse	r31, r1
     c66:	f8 cf       	rjmp	.-16     	; 0xc58 <__floatsisf+0x1c>
     c68:	fa f4       	brpl	.+62     	; 0xca8 <__floatsisf+0x6c>
     c6a:	bb 0f       	add	r27, r27
     c6c:	11 f4       	brne	.+4      	; 0xc72 <__floatsisf+0x36>
     c6e:	60 ff       	sbrs	r22, 0
     c70:	1b c0       	rjmp	.+54     	; 0xca8 <__floatsisf+0x6c>
     c72:	6f 5f       	subi	r22, 0xFF	; 255
     c74:	7f 4f       	sbci	r23, 0xFF	; 255
     c76:	8f 4f       	sbci	r24, 0xFF	; 255
     c78:	9f 4f       	sbci	r25, 0xFF	; 255
     c7a:	16 c0       	rjmp	.+44     	; 0xca8 <__floatsisf+0x6c>
     c7c:	88 23       	and	r24, r24
     c7e:	11 f0       	breq	.+4      	; 0xc84 <__floatsisf+0x48>
     c80:	96 e9       	ldi	r25, 0x96	; 150
     c82:	11 c0       	rjmp	.+34     	; 0xca6 <__floatsisf+0x6a>
     c84:	77 23       	and	r23, r23
     c86:	21 f0       	breq	.+8      	; 0xc90 <__floatsisf+0x54>
     c88:	9e e8       	ldi	r25, 0x8E	; 142
     c8a:	87 2f       	mov	r24, r23
     c8c:	76 2f       	mov	r23, r22
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__floatsisf+0x5e>
     c90:	66 23       	and	r22, r22
     c92:	71 f0       	breq	.+28     	; 0xcb0 <__floatsisf+0x74>
     c94:	96 e8       	ldi	r25, 0x86	; 134
     c96:	86 2f       	mov	r24, r22
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	2a f0       	brmi	.+10     	; 0xca8 <__floatsisf+0x6c>
     c9e:	9a 95       	dec	r25
     ca0:	66 0f       	add	r22, r22
     ca2:	77 1f       	adc	r23, r23
     ca4:	88 1f       	adc	r24, r24
     ca6:	da f7       	brpl	.-10     	; 0xc9e <__floatsisf+0x62>
     ca8:	88 0f       	add	r24, r24
     caa:	96 95       	lsr	r25
     cac:	87 95       	ror	r24
     cae:	97 f9       	bld	r25, 7
     cb0:	08 95       	ret

00000cb2 <__fp_split3>:
     cb2:	57 fd       	sbrc	r21, 7
     cb4:	90 58       	subi	r25, 0x80	; 128
     cb6:	44 0f       	add	r20, r20
     cb8:	55 1f       	adc	r21, r21
     cba:	59 f0       	breq	.+22     	; 0xcd2 <__fp_splitA+0x10>
     cbc:	5f 3f       	cpi	r21, 0xFF	; 255
     cbe:	71 f0       	breq	.+28     	; 0xcdc <__fp_splitA+0x1a>
     cc0:	47 95       	ror	r20

00000cc2 <__fp_splitA>:
     cc2:	88 0f       	add	r24, r24
     cc4:	97 fb       	bst	r25, 7
     cc6:	99 1f       	adc	r25, r25
     cc8:	61 f0       	breq	.+24     	; 0xce2 <__fp_splitA+0x20>
     cca:	9f 3f       	cpi	r25, 0xFF	; 255
     ccc:	79 f0       	breq	.+30     	; 0xcec <__fp_splitA+0x2a>
     cce:	87 95       	ror	r24
     cd0:	08 95       	ret
     cd2:	12 16       	cp	r1, r18
     cd4:	13 06       	cpc	r1, r19
     cd6:	14 06       	cpc	r1, r20
     cd8:	55 1f       	adc	r21, r21
     cda:	f2 cf       	rjmp	.-28     	; 0xcc0 <__fp_split3+0xe>
     cdc:	46 95       	lsr	r20
     cde:	f1 df       	rcall	.-30     	; 0xcc2 <__fp_splitA>
     ce0:	08 c0       	rjmp	.+16     	; 0xcf2 <__fp_splitA+0x30>
     ce2:	16 16       	cp	r1, r22
     ce4:	17 06       	cpc	r1, r23
     ce6:	18 06       	cpc	r1, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	f1 cf       	rjmp	.-30     	; 0xcce <__fp_splitA+0xc>
     cec:	86 95       	lsr	r24
     cee:	71 05       	cpc	r23, r1
     cf0:	61 05       	cpc	r22, r1
     cf2:	08 94       	sec
     cf4:	08 95       	ret

00000cf6 <__fp_zero>:
     cf6:	e8 94       	clt

00000cf8 <__fp_szero>:
     cf8:	bb 27       	eor	r27, r27
     cfa:	66 27       	eor	r22, r22
     cfc:	77 27       	eor	r23, r23
     cfe:	cb 01       	movw	r24, r22
     d00:	97 f9       	bld	r25, 7
     d02:	08 95       	ret

00000d04 <__mulsf3>:
     d04:	0b d0       	rcall	.+22     	; 0xd1c <__mulsf3x>
     d06:	78 c0       	rjmp	.+240    	; 0xdf8 <__fp_round>
     d08:	69 d0       	rcall	.+210    	; 0xddc <__fp_pscA>
     d0a:	28 f0       	brcs	.+10     	; 0xd16 <__mulsf3+0x12>
     d0c:	6e d0       	rcall	.+220    	; 0xdea <__fp_pscB>
     d0e:	18 f0       	brcs	.+6      	; 0xd16 <__mulsf3+0x12>
     d10:	95 23       	and	r25, r21
     d12:	09 f0       	breq	.+2      	; 0xd16 <__mulsf3+0x12>
     d14:	5a c0       	rjmp	.+180    	; 0xdca <__fp_inf>
     d16:	5f c0       	rjmp	.+190    	; 0xdd6 <__fp_nan>
     d18:	11 24       	eor	r1, r1
     d1a:	ee cf       	rjmp	.-36     	; 0xcf8 <__fp_szero>

00000d1c <__mulsf3x>:
     d1c:	ca df       	rcall	.-108    	; 0xcb2 <__fp_split3>
     d1e:	a0 f3       	brcs	.-24     	; 0xd08 <__mulsf3+0x4>

00000d20 <__mulsf3_pse>:
     d20:	95 9f       	mul	r25, r21
     d22:	d1 f3       	breq	.-12     	; 0xd18 <__mulsf3+0x14>
     d24:	95 0f       	add	r25, r21
     d26:	50 e0       	ldi	r21, 0x00	; 0
     d28:	55 1f       	adc	r21, r21
     d2a:	62 9f       	mul	r22, r18
     d2c:	f0 01       	movw	r30, r0
     d2e:	72 9f       	mul	r23, r18
     d30:	bb 27       	eor	r27, r27
     d32:	f0 0d       	add	r31, r0
     d34:	b1 1d       	adc	r27, r1
     d36:	63 9f       	mul	r22, r19
     d38:	aa 27       	eor	r26, r26
     d3a:	f0 0d       	add	r31, r0
     d3c:	b1 1d       	adc	r27, r1
     d3e:	aa 1f       	adc	r26, r26
     d40:	64 9f       	mul	r22, r20
     d42:	66 27       	eor	r22, r22
     d44:	b0 0d       	add	r27, r0
     d46:	a1 1d       	adc	r26, r1
     d48:	66 1f       	adc	r22, r22
     d4a:	82 9f       	mul	r24, r18
     d4c:	22 27       	eor	r18, r18
     d4e:	b0 0d       	add	r27, r0
     d50:	a1 1d       	adc	r26, r1
     d52:	62 1f       	adc	r22, r18
     d54:	73 9f       	mul	r23, r19
     d56:	b0 0d       	add	r27, r0
     d58:	a1 1d       	adc	r26, r1
     d5a:	62 1f       	adc	r22, r18
     d5c:	83 9f       	mul	r24, r19
     d5e:	a0 0d       	add	r26, r0
     d60:	61 1d       	adc	r22, r1
     d62:	22 1f       	adc	r18, r18
     d64:	74 9f       	mul	r23, r20
     d66:	33 27       	eor	r19, r19
     d68:	a0 0d       	add	r26, r0
     d6a:	61 1d       	adc	r22, r1
     d6c:	23 1f       	adc	r18, r19
     d6e:	84 9f       	mul	r24, r20
     d70:	60 0d       	add	r22, r0
     d72:	21 1d       	adc	r18, r1
     d74:	82 2f       	mov	r24, r18
     d76:	76 2f       	mov	r23, r22
     d78:	6a 2f       	mov	r22, r26
     d7a:	11 24       	eor	r1, r1
     d7c:	9f 57       	subi	r25, 0x7F	; 127
     d7e:	50 40       	sbci	r21, 0x00	; 0
     d80:	8a f0       	brmi	.+34     	; 0xda4 <__mulsf3_pse+0x84>
     d82:	e1 f0       	breq	.+56     	; 0xdbc <__mulsf3_pse+0x9c>
     d84:	88 23       	and	r24, r24
     d86:	4a f0       	brmi	.+18     	; 0xd9a <__mulsf3_pse+0x7a>
     d88:	ee 0f       	add	r30, r30
     d8a:	ff 1f       	adc	r31, r31
     d8c:	bb 1f       	adc	r27, r27
     d8e:	66 1f       	adc	r22, r22
     d90:	77 1f       	adc	r23, r23
     d92:	88 1f       	adc	r24, r24
     d94:	91 50       	subi	r25, 0x01	; 1
     d96:	50 40       	sbci	r21, 0x00	; 0
     d98:	a9 f7       	brne	.-22     	; 0xd84 <__mulsf3_pse+0x64>
     d9a:	9e 3f       	cpi	r25, 0xFE	; 254
     d9c:	51 05       	cpc	r21, r1
     d9e:	70 f0       	brcs	.+28     	; 0xdbc <__mulsf3_pse+0x9c>
     da0:	14 c0       	rjmp	.+40     	; 0xdca <__fp_inf>
     da2:	aa cf       	rjmp	.-172    	; 0xcf8 <__fp_szero>
     da4:	5f 3f       	cpi	r21, 0xFF	; 255
     da6:	ec f3       	brlt	.-6      	; 0xda2 <__mulsf3_pse+0x82>
     da8:	98 3e       	cpi	r25, 0xE8	; 232
     daa:	dc f3       	brlt	.-10     	; 0xda2 <__mulsf3_pse+0x82>
     dac:	86 95       	lsr	r24
     dae:	77 95       	ror	r23
     db0:	67 95       	ror	r22
     db2:	b7 95       	ror	r27
     db4:	f7 95       	ror	r31
     db6:	e7 95       	ror	r30
     db8:	9f 5f       	subi	r25, 0xFF	; 255
     dba:	c1 f7       	brne	.-16     	; 0xdac <__mulsf3_pse+0x8c>
     dbc:	fe 2b       	or	r31, r30
     dbe:	88 0f       	add	r24, r24
     dc0:	91 1d       	adc	r25, r1
     dc2:	96 95       	lsr	r25
     dc4:	87 95       	ror	r24
     dc6:	97 f9       	bld	r25, 7
     dc8:	08 95       	ret

00000dca <__fp_inf>:
     dca:	97 f9       	bld	r25, 7
     dcc:	9f 67       	ori	r25, 0x7F	; 127
     dce:	80 e8       	ldi	r24, 0x80	; 128
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	08 95       	ret

00000dd6 <__fp_nan>:
     dd6:	9f ef       	ldi	r25, 0xFF	; 255
     dd8:	80 ec       	ldi	r24, 0xC0	; 192
     dda:	08 95       	ret

00000ddc <__fp_pscA>:
     ddc:	00 24       	eor	r0, r0
     dde:	0a 94       	dec	r0
     de0:	16 16       	cp	r1, r22
     de2:	17 06       	cpc	r1, r23
     de4:	18 06       	cpc	r1, r24
     de6:	09 06       	cpc	r0, r25
     de8:	08 95       	ret

00000dea <__fp_pscB>:
     dea:	00 24       	eor	r0, r0
     dec:	0a 94       	dec	r0
     dee:	12 16       	cp	r1, r18
     df0:	13 06       	cpc	r1, r19
     df2:	14 06       	cpc	r1, r20
     df4:	05 06       	cpc	r0, r21
     df6:	08 95       	ret

00000df8 <__fp_round>:
     df8:	09 2e       	mov	r0, r25
     dfa:	03 94       	inc	r0
     dfc:	00 0c       	add	r0, r0
     dfe:	11 f4       	brne	.+4      	; 0xe04 <__fp_round+0xc>
     e00:	88 23       	and	r24, r24
     e02:	52 f0       	brmi	.+20     	; 0xe18 <__fp_round+0x20>
     e04:	bb 0f       	add	r27, r27
     e06:	40 f4       	brcc	.+16     	; 0xe18 <__fp_round+0x20>
     e08:	bf 2b       	or	r27, r31
     e0a:	11 f4       	brne	.+4      	; 0xe10 <__fp_round+0x18>
     e0c:	60 ff       	sbrs	r22, 0
     e0e:	04 c0       	rjmp	.+8      	; 0xe18 <__fp_round+0x20>
     e10:	6f 5f       	subi	r22, 0xFF	; 255
     e12:	7f 4f       	sbci	r23, 0xFF	; 255
     e14:	8f 4f       	sbci	r24, 0xFF	; 255
     e16:	9f 4f       	sbci	r25, 0xFF	; 255
     e18:	08 95       	ret

00000e1a <strlen>:
     e1a:	fc 01       	movw	r30, r24
     e1c:	01 90       	ld	r0, Z+
     e1e:	00 20       	and	r0, r0
     e20:	e9 f7       	brne	.-6      	; 0xe1c <strlen+0x2>
     e22:	80 95       	com	r24
     e24:	90 95       	com	r25
     e26:	8e 0f       	add	r24, r30
     e28:	9f 1f       	adc	r25, r31
     e2a:	08 95       	ret

00000e2c <sprintf>:
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	2e 97       	sbiw	r28, 0x0e	; 14
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	de bf       	out	0x3e, r29	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	cd bf       	out	0x3d, r28	; 61
     e44:	0d 89       	ldd	r16, Y+21	; 0x15
     e46:	1e 89       	ldd	r17, Y+22	; 0x16
     e48:	86 e0       	ldi	r24, 0x06	; 6
     e4a:	8c 83       	std	Y+4, r24	; 0x04
     e4c:	1a 83       	std	Y+2, r17	; 0x02
     e4e:	09 83       	std	Y+1, r16	; 0x01
     e50:	8f ef       	ldi	r24, 0xFF	; 255
     e52:	9f e7       	ldi	r25, 0x7F	; 127
     e54:	9e 83       	std	Y+6, r25	; 0x06
     e56:	8d 83       	std	Y+5, r24	; 0x05
     e58:	ae 01       	movw	r20, r28
     e5a:	47 5e       	subi	r20, 0xE7	; 231
     e5c:	5f 4f       	sbci	r21, 0xFF	; 255
     e5e:	6f 89       	ldd	r22, Y+23	; 0x17
     e60:	78 8d       	ldd	r23, Y+24	; 0x18
     e62:	ce 01       	movw	r24, r28
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	10 d0       	rcall	.+32     	; 0xe88 <vfprintf>
     e68:	ef 81       	ldd	r30, Y+7	; 0x07
     e6a:	f8 85       	ldd	r31, Y+8	; 0x08
     e6c:	e0 0f       	add	r30, r16
     e6e:	f1 1f       	adc	r31, r17
     e70:	10 82       	st	Z, r1
     e72:	2e 96       	adiw	r28, 0x0e	; 14
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	de bf       	out	0x3e, r29	; 62
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	cd bf       	out	0x3d, r28	; 61
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	1f 91       	pop	r17
     e84:	0f 91       	pop	r16
     e86:	08 95       	ret

00000e88 <vfprintf>:
     e88:	2f 92       	push	r2
     e8a:	3f 92       	push	r3
     e8c:	4f 92       	push	r4
     e8e:	5f 92       	push	r5
     e90:	6f 92       	push	r6
     e92:	7f 92       	push	r7
     e94:	8f 92       	push	r8
     e96:	9f 92       	push	r9
     e98:	af 92       	push	r10
     e9a:	bf 92       	push	r11
     e9c:	cf 92       	push	r12
     e9e:	df 92       	push	r13
     ea0:	ef 92       	push	r14
     ea2:	ff 92       	push	r15
     ea4:	0f 93       	push	r16
     ea6:	1f 93       	push	r17
     ea8:	cf 93       	push	r28
     eaa:	df 93       	push	r29
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	2b 97       	sbiw	r28, 0x0b	; 11
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	de bf       	out	0x3e, r29	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	cd bf       	out	0x3d, r28	; 61
     ebc:	6c 01       	movw	r12, r24
     ebe:	7b 01       	movw	r14, r22
     ec0:	8a 01       	movw	r16, r20
     ec2:	fc 01       	movw	r30, r24
     ec4:	17 82       	std	Z+7, r1	; 0x07
     ec6:	16 82       	std	Z+6, r1	; 0x06
     ec8:	83 81       	ldd	r24, Z+3	; 0x03
     eca:	81 ff       	sbrs	r24, 1
     ecc:	bf c1       	rjmp	.+894    	; 0x124c <vfprintf+0x3c4>
     ece:	ce 01       	movw	r24, r28
     ed0:	01 96       	adiw	r24, 0x01	; 1
     ed2:	3c 01       	movw	r6, r24
     ed4:	f6 01       	movw	r30, r12
     ed6:	93 81       	ldd	r25, Z+3	; 0x03
     ed8:	f7 01       	movw	r30, r14
     eda:	93 fd       	sbrc	r25, 3
     edc:	85 91       	lpm	r24, Z+
     ede:	93 ff       	sbrs	r25, 3
     ee0:	81 91       	ld	r24, Z+
     ee2:	7f 01       	movw	r14, r30
     ee4:	88 23       	and	r24, r24
     ee6:	09 f4       	brne	.+2      	; 0xeea <vfprintf+0x62>
     ee8:	ad c1       	rjmp	.+858    	; 0x1244 <vfprintf+0x3bc>
     eea:	85 32       	cpi	r24, 0x25	; 37
     eec:	39 f4       	brne	.+14     	; 0xefc <vfprintf+0x74>
     eee:	93 fd       	sbrc	r25, 3
     ef0:	85 91       	lpm	r24, Z+
     ef2:	93 ff       	sbrs	r25, 3
     ef4:	81 91       	ld	r24, Z+
     ef6:	7f 01       	movw	r14, r30
     ef8:	85 32       	cpi	r24, 0x25	; 37
     efa:	21 f4       	brne	.+8      	; 0xf04 <vfprintf+0x7c>
     efc:	b6 01       	movw	r22, r12
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	d6 d1       	rcall	.+940    	; 0x12ae <fputc>
     f02:	e8 cf       	rjmp	.-48     	; 0xed4 <vfprintf+0x4c>
     f04:	91 2c       	mov	r9, r1
     f06:	21 2c       	mov	r2, r1
     f08:	31 2c       	mov	r3, r1
     f0a:	ff e1       	ldi	r31, 0x1F	; 31
     f0c:	f3 15       	cp	r31, r3
     f0e:	d8 f0       	brcs	.+54     	; 0xf46 <vfprintf+0xbe>
     f10:	8b 32       	cpi	r24, 0x2B	; 43
     f12:	79 f0       	breq	.+30     	; 0xf32 <vfprintf+0xaa>
     f14:	38 f4       	brcc	.+14     	; 0xf24 <vfprintf+0x9c>
     f16:	80 32       	cpi	r24, 0x20	; 32
     f18:	79 f0       	breq	.+30     	; 0xf38 <vfprintf+0xb0>
     f1a:	83 32       	cpi	r24, 0x23	; 35
     f1c:	a1 f4       	brne	.+40     	; 0xf46 <vfprintf+0xbe>
     f1e:	23 2d       	mov	r18, r3
     f20:	20 61       	ori	r18, 0x10	; 16
     f22:	1d c0       	rjmp	.+58     	; 0xf5e <vfprintf+0xd6>
     f24:	8d 32       	cpi	r24, 0x2D	; 45
     f26:	61 f0       	breq	.+24     	; 0xf40 <vfprintf+0xb8>
     f28:	80 33       	cpi	r24, 0x30	; 48
     f2a:	69 f4       	brne	.+26     	; 0xf46 <vfprintf+0xbe>
     f2c:	23 2d       	mov	r18, r3
     f2e:	21 60       	ori	r18, 0x01	; 1
     f30:	16 c0       	rjmp	.+44     	; 0xf5e <vfprintf+0xd6>
     f32:	83 2d       	mov	r24, r3
     f34:	82 60       	ori	r24, 0x02	; 2
     f36:	38 2e       	mov	r3, r24
     f38:	e3 2d       	mov	r30, r3
     f3a:	e4 60       	ori	r30, 0x04	; 4
     f3c:	3e 2e       	mov	r3, r30
     f3e:	2a c0       	rjmp	.+84     	; 0xf94 <vfprintf+0x10c>
     f40:	f3 2d       	mov	r31, r3
     f42:	f8 60       	ori	r31, 0x08	; 8
     f44:	1d c0       	rjmp	.+58     	; 0xf80 <vfprintf+0xf8>
     f46:	37 fc       	sbrc	r3, 7
     f48:	2d c0       	rjmp	.+90     	; 0xfa4 <vfprintf+0x11c>
     f4a:	20 ed       	ldi	r18, 0xD0	; 208
     f4c:	28 0f       	add	r18, r24
     f4e:	2a 30       	cpi	r18, 0x0A	; 10
     f50:	40 f0       	brcs	.+16     	; 0xf62 <vfprintf+0xda>
     f52:	8e 32       	cpi	r24, 0x2E	; 46
     f54:	b9 f4       	brne	.+46     	; 0xf84 <vfprintf+0xfc>
     f56:	36 fc       	sbrc	r3, 6
     f58:	75 c1       	rjmp	.+746    	; 0x1244 <vfprintf+0x3bc>
     f5a:	23 2d       	mov	r18, r3
     f5c:	20 64       	ori	r18, 0x40	; 64
     f5e:	32 2e       	mov	r3, r18
     f60:	19 c0       	rjmp	.+50     	; 0xf94 <vfprintf+0x10c>
     f62:	36 fe       	sbrs	r3, 6
     f64:	06 c0       	rjmp	.+12     	; 0xf72 <vfprintf+0xea>
     f66:	8a e0       	ldi	r24, 0x0A	; 10
     f68:	98 9e       	mul	r9, r24
     f6a:	20 0d       	add	r18, r0
     f6c:	11 24       	eor	r1, r1
     f6e:	92 2e       	mov	r9, r18
     f70:	11 c0       	rjmp	.+34     	; 0xf94 <vfprintf+0x10c>
     f72:	ea e0       	ldi	r30, 0x0A	; 10
     f74:	2e 9e       	mul	r2, r30
     f76:	20 0d       	add	r18, r0
     f78:	11 24       	eor	r1, r1
     f7a:	22 2e       	mov	r2, r18
     f7c:	f3 2d       	mov	r31, r3
     f7e:	f0 62       	ori	r31, 0x20	; 32
     f80:	3f 2e       	mov	r3, r31
     f82:	08 c0       	rjmp	.+16     	; 0xf94 <vfprintf+0x10c>
     f84:	8c 36       	cpi	r24, 0x6C	; 108
     f86:	21 f4       	brne	.+8      	; 0xf90 <vfprintf+0x108>
     f88:	83 2d       	mov	r24, r3
     f8a:	80 68       	ori	r24, 0x80	; 128
     f8c:	38 2e       	mov	r3, r24
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <vfprintf+0x10c>
     f90:	88 36       	cpi	r24, 0x68	; 104
     f92:	41 f4       	brne	.+16     	; 0xfa4 <vfprintf+0x11c>
     f94:	f7 01       	movw	r30, r14
     f96:	93 fd       	sbrc	r25, 3
     f98:	85 91       	lpm	r24, Z+
     f9a:	93 ff       	sbrs	r25, 3
     f9c:	81 91       	ld	r24, Z+
     f9e:	7f 01       	movw	r14, r30
     fa0:	81 11       	cpse	r24, r1
     fa2:	b3 cf       	rjmp	.-154    	; 0xf0a <vfprintf+0x82>
     fa4:	98 2f       	mov	r25, r24
     fa6:	9f 7d       	andi	r25, 0xDF	; 223
     fa8:	95 54       	subi	r25, 0x45	; 69
     faa:	93 30       	cpi	r25, 0x03	; 3
     fac:	28 f4       	brcc	.+10     	; 0xfb8 <vfprintf+0x130>
     fae:	0c 5f       	subi	r16, 0xFC	; 252
     fb0:	1f 4f       	sbci	r17, 0xFF	; 255
     fb2:	9f e3       	ldi	r25, 0x3F	; 63
     fb4:	99 83       	std	Y+1, r25	; 0x01
     fb6:	0d c0       	rjmp	.+26     	; 0xfd2 <vfprintf+0x14a>
     fb8:	83 36       	cpi	r24, 0x63	; 99
     fba:	31 f0       	breq	.+12     	; 0xfc8 <vfprintf+0x140>
     fbc:	83 37       	cpi	r24, 0x73	; 115
     fbe:	71 f0       	breq	.+28     	; 0xfdc <vfprintf+0x154>
     fc0:	83 35       	cpi	r24, 0x53	; 83
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <vfprintf+0x13e>
     fc4:	55 c0       	rjmp	.+170    	; 0x1070 <vfprintf+0x1e8>
     fc6:	20 c0       	rjmp	.+64     	; 0x1008 <vfprintf+0x180>
     fc8:	f8 01       	movw	r30, r16
     fca:	80 81       	ld	r24, Z
     fcc:	89 83       	std	Y+1, r24	; 0x01
     fce:	0e 5f       	subi	r16, 0xFE	; 254
     fd0:	1f 4f       	sbci	r17, 0xFF	; 255
     fd2:	88 24       	eor	r8, r8
     fd4:	83 94       	inc	r8
     fd6:	91 2c       	mov	r9, r1
     fd8:	53 01       	movw	r10, r6
     fda:	12 c0       	rjmp	.+36     	; 0x1000 <vfprintf+0x178>
     fdc:	28 01       	movw	r4, r16
     fde:	f2 e0       	ldi	r31, 0x02	; 2
     fe0:	4f 0e       	add	r4, r31
     fe2:	51 1c       	adc	r5, r1
     fe4:	f8 01       	movw	r30, r16
     fe6:	a0 80       	ld	r10, Z
     fe8:	b1 80       	ldd	r11, Z+1	; 0x01
     fea:	36 fe       	sbrs	r3, 6
     fec:	03 c0       	rjmp	.+6      	; 0xff4 <vfprintf+0x16c>
     fee:	69 2d       	mov	r22, r9
     ff0:	70 e0       	ldi	r23, 0x00	; 0
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <vfprintf+0x170>
     ff4:	6f ef       	ldi	r22, 0xFF	; 255
     ff6:	7f ef       	ldi	r23, 0xFF	; 255
     ff8:	c5 01       	movw	r24, r10
     ffa:	4e d1       	rcall	.+668    	; 0x1298 <strnlen>
     ffc:	4c 01       	movw	r8, r24
     ffe:	82 01       	movw	r16, r4
    1000:	f3 2d       	mov	r31, r3
    1002:	ff 77       	andi	r31, 0x7F	; 127
    1004:	3f 2e       	mov	r3, r31
    1006:	15 c0       	rjmp	.+42     	; 0x1032 <vfprintf+0x1aa>
    1008:	28 01       	movw	r4, r16
    100a:	22 e0       	ldi	r18, 0x02	; 2
    100c:	42 0e       	add	r4, r18
    100e:	51 1c       	adc	r5, r1
    1010:	f8 01       	movw	r30, r16
    1012:	a0 80       	ld	r10, Z
    1014:	b1 80       	ldd	r11, Z+1	; 0x01
    1016:	36 fe       	sbrs	r3, 6
    1018:	03 c0       	rjmp	.+6      	; 0x1020 <vfprintf+0x198>
    101a:	69 2d       	mov	r22, r9
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <vfprintf+0x19c>
    1020:	6f ef       	ldi	r22, 0xFF	; 255
    1022:	7f ef       	ldi	r23, 0xFF	; 255
    1024:	c5 01       	movw	r24, r10
    1026:	2d d1       	rcall	.+602    	; 0x1282 <strnlen_P>
    1028:	4c 01       	movw	r8, r24
    102a:	f3 2d       	mov	r31, r3
    102c:	f0 68       	ori	r31, 0x80	; 128
    102e:	3f 2e       	mov	r3, r31
    1030:	82 01       	movw	r16, r4
    1032:	33 fc       	sbrc	r3, 3
    1034:	19 c0       	rjmp	.+50     	; 0x1068 <vfprintf+0x1e0>
    1036:	82 2d       	mov	r24, r2
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	88 16       	cp	r8, r24
    103c:	99 06       	cpc	r9, r25
    103e:	a0 f4       	brcc	.+40     	; 0x1068 <vfprintf+0x1e0>
    1040:	b6 01       	movw	r22, r12
    1042:	80 e2       	ldi	r24, 0x20	; 32
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	33 d1       	rcall	.+614    	; 0x12ae <fputc>
    1048:	2a 94       	dec	r2
    104a:	f5 cf       	rjmp	.-22     	; 0x1036 <vfprintf+0x1ae>
    104c:	f5 01       	movw	r30, r10
    104e:	37 fc       	sbrc	r3, 7
    1050:	85 91       	lpm	r24, Z+
    1052:	37 fe       	sbrs	r3, 7
    1054:	81 91       	ld	r24, Z+
    1056:	5f 01       	movw	r10, r30
    1058:	b6 01       	movw	r22, r12
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	28 d1       	rcall	.+592    	; 0x12ae <fputc>
    105e:	21 10       	cpse	r2, r1
    1060:	2a 94       	dec	r2
    1062:	21 e0       	ldi	r18, 0x01	; 1
    1064:	82 1a       	sub	r8, r18
    1066:	91 08       	sbc	r9, r1
    1068:	81 14       	cp	r8, r1
    106a:	91 04       	cpc	r9, r1
    106c:	79 f7       	brne	.-34     	; 0x104c <vfprintf+0x1c4>
    106e:	e1 c0       	rjmp	.+450    	; 0x1232 <vfprintf+0x3aa>
    1070:	84 36       	cpi	r24, 0x64	; 100
    1072:	11 f0       	breq	.+4      	; 0x1078 <vfprintf+0x1f0>
    1074:	89 36       	cpi	r24, 0x69	; 105
    1076:	39 f5       	brne	.+78     	; 0x10c6 <vfprintf+0x23e>
    1078:	f8 01       	movw	r30, r16
    107a:	37 fe       	sbrs	r3, 7
    107c:	07 c0       	rjmp	.+14     	; 0x108c <vfprintf+0x204>
    107e:	60 81       	ld	r22, Z
    1080:	71 81       	ldd	r23, Z+1	; 0x01
    1082:	82 81       	ldd	r24, Z+2	; 0x02
    1084:	93 81       	ldd	r25, Z+3	; 0x03
    1086:	0c 5f       	subi	r16, 0xFC	; 252
    1088:	1f 4f       	sbci	r17, 0xFF	; 255
    108a:	08 c0       	rjmp	.+16     	; 0x109c <vfprintf+0x214>
    108c:	60 81       	ld	r22, Z
    108e:	71 81       	ldd	r23, Z+1	; 0x01
    1090:	07 2e       	mov	r0, r23
    1092:	00 0c       	add	r0, r0
    1094:	88 0b       	sbc	r24, r24
    1096:	99 0b       	sbc	r25, r25
    1098:	0e 5f       	subi	r16, 0xFE	; 254
    109a:	1f 4f       	sbci	r17, 0xFF	; 255
    109c:	f3 2d       	mov	r31, r3
    109e:	ff 76       	andi	r31, 0x6F	; 111
    10a0:	3f 2e       	mov	r3, r31
    10a2:	97 ff       	sbrs	r25, 7
    10a4:	09 c0       	rjmp	.+18     	; 0x10b8 <vfprintf+0x230>
    10a6:	90 95       	com	r25
    10a8:	80 95       	com	r24
    10aa:	70 95       	com	r23
    10ac:	61 95       	neg	r22
    10ae:	7f 4f       	sbci	r23, 0xFF	; 255
    10b0:	8f 4f       	sbci	r24, 0xFF	; 255
    10b2:	9f 4f       	sbci	r25, 0xFF	; 255
    10b4:	f0 68       	ori	r31, 0x80	; 128
    10b6:	3f 2e       	mov	r3, r31
    10b8:	2a e0       	ldi	r18, 0x0A	; 10
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	a3 01       	movw	r20, r6
    10be:	33 d1       	rcall	.+614    	; 0x1326 <__ultoa_invert>
    10c0:	88 2e       	mov	r8, r24
    10c2:	86 18       	sub	r8, r6
    10c4:	44 c0       	rjmp	.+136    	; 0x114e <vfprintf+0x2c6>
    10c6:	85 37       	cpi	r24, 0x75	; 117
    10c8:	31 f4       	brne	.+12     	; 0x10d6 <vfprintf+0x24e>
    10ca:	23 2d       	mov	r18, r3
    10cc:	2f 7e       	andi	r18, 0xEF	; 239
    10ce:	b2 2e       	mov	r11, r18
    10d0:	2a e0       	ldi	r18, 0x0A	; 10
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	25 c0       	rjmp	.+74     	; 0x1120 <vfprintf+0x298>
    10d6:	93 2d       	mov	r25, r3
    10d8:	99 7f       	andi	r25, 0xF9	; 249
    10da:	b9 2e       	mov	r11, r25
    10dc:	8f 36       	cpi	r24, 0x6F	; 111
    10de:	c1 f0       	breq	.+48     	; 0x1110 <vfprintf+0x288>
    10e0:	18 f4       	brcc	.+6      	; 0x10e8 <vfprintf+0x260>
    10e2:	88 35       	cpi	r24, 0x58	; 88
    10e4:	79 f0       	breq	.+30     	; 0x1104 <vfprintf+0x27c>
    10e6:	ae c0       	rjmp	.+348    	; 0x1244 <vfprintf+0x3bc>
    10e8:	80 37       	cpi	r24, 0x70	; 112
    10ea:	19 f0       	breq	.+6      	; 0x10f2 <vfprintf+0x26a>
    10ec:	88 37       	cpi	r24, 0x78	; 120
    10ee:	21 f0       	breq	.+8      	; 0x10f8 <vfprintf+0x270>
    10f0:	a9 c0       	rjmp	.+338    	; 0x1244 <vfprintf+0x3bc>
    10f2:	e9 2f       	mov	r30, r25
    10f4:	e0 61       	ori	r30, 0x10	; 16
    10f6:	be 2e       	mov	r11, r30
    10f8:	b4 fe       	sbrs	r11, 4
    10fa:	0d c0       	rjmp	.+26     	; 0x1116 <vfprintf+0x28e>
    10fc:	fb 2d       	mov	r31, r11
    10fe:	f4 60       	ori	r31, 0x04	; 4
    1100:	bf 2e       	mov	r11, r31
    1102:	09 c0       	rjmp	.+18     	; 0x1116 <vfprintf+0x28e>
    1104:	34 fe       	sbrs	r3, 4
    1106:	0a c0       	rjmp	.+20     	; 0x111c <vfprintf+0x294>
    1108:	29 2f       	mov	r18, r25
    110a:	26 60       	ori	r18, 0x06	; 6
    110c:	b2 2e       	mov	r11, r18
    110e:	06 c0       	rjmp	.+12     	; 0x111c <vfprintf+0x294>
    1110:	28 e0       	ldi	r18, 0x08	; 8
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	05 c0       	rjmp	.+10     	; 0x1120 <vfprintf+0x298>
    1116:	20 e1       	ldi	r18, 0x10	; 16
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <vfprintf+0x298>
    111c:	20 e1       	ldi	r18, 0x10	; 16
    111e:	32 e0       	ldi	r19, 0x02	; 2
    1120:	f8 01       	movw	r30, r16
    1122:	b7 fe       	sbrs	r11, 7
    1124:	07 c0       	rjmp	.+14     	; 0x1134 <vfprintf+0x2ac>
    1126:	60 81       	ld	r22, Z
    1128:	71 81       	ldd	r23, Z+1	; 0x01
    112a:	82 81       	ldd	r24, Z+2	; 0x02
    112c:	93 81       	ldd	r25, Z+3	; 0x03
    112e:	0c 5f       	subi	r16, 0xFC	; 252
    1130:	1f 4f       	sbci	r17, 0xFF	; 255
    1132:	06 c0       	rjmp	.+12     	; 0x1140 <vfprintf+0x2b8>
    1134:	60 81       	ld	r22, Z
    1136:	71 81       	ldd	r23, Z+1	; 0x01
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	0e 5f       	subi	r16, 0xFE	; 254
    113e:	1f 4f       	sbci	r17, 0xFF	; 255
    1140:	a3 01       	movw	r20, r6
    1142:	f1 d0       	rcall	.+482    	; 0x1326 <__ultoa_invert>
    1144:	88 2e       	mov	r8, r24
    1146:	86 18       	sub	r8, r6
    1148:	fb 2d       	mov	r31, r11
    114a:	ff 77       	andi	r31, 0x7F	; 127
    114c:	3f 2e       	mov	r3, r31
    114e:	36 fe       	sbrs	r3, 6
    1150:	0d c0       	rjmp	.+26     	; 0x116c <vfprintf+0x2e4>
    1152:	23 2d       	mov	r18, r3
    1154:	2e 7f       	andi	r18, 0xFE	; 254
    1156:	a2 2e       	mov	r10, r18
    1158:	89 14       	cp	r8, r9
    115a:	58 f4       	brcc	.+22     	; 0x1172 <vfprintf+0x2ea>
    115c:	34 fe       	sbrs	r3, 4
    115e:	0b c0       	rjmp	.+22     	; 0x1176 <vfprintf+0x2ee>
    1160:	32 fc       	sbrc	r3, 2
    1162:	09 c0       	rjmp	.+18     	; 0x1176 <vfprintf+0x2ee>
    1164:	83 2d       	mov	r24, r3
    1166:	8e 7e       	andi	r24, 0xEE	; 238
    1168:	a8 2e       	mov	r10, r24
    116a:	05 c0       	rjmp	.+10     	; 0x1176 <vfprintf+0x2ee>
    116c:	b8 2c       	mov	r11, r8
    116e:	a3 2c       	mov	r10, r3
    1170:	03 c0       	rjmp	.+6      	; 0x1178 <vfprintf+0x2f0>
    1172:	b8 2c       	mov	r11, r8
    1174:	01 c0       	rjmp	.+2      	; 0x1178 <vfprintf+0x2f0>
    1176:	b9 2c       	mov	r11, r9
    1178:	a4 fe       	sbrs	r10, 4
    117a:	0f c0       	rjmp	.+30     	; 0x119a <vfprintf+0x312>
    117c:	fe 01       	movw	r30, r28
    117e:	e8 0d       	add	r30, r8
    1180:	f1 1d       	adc	r31, r1
    1182:	80 81       	ld	r24, Z
    1184:	80 33       	cpi	r24, 0x30	; 48
    1186:	21 f4       	brne	.+8      	; 0x1190 <vfprintf+0x308>
    1188:	9a 2d       	mov	r25, r10
    118a:	99 7e       	andi	r25, 0xE9	; 233
    118c:	a9 2e       	mov	r10, r25
    118e:	09 c0       	rjmp	.+18     	; 0x11a2 <vfprintf+0x31a>
    1190:	a2 fe       	sbrs	r10, 2
    1192:	06 c0       	rjmp	.+12     	; 0x11a0 <vfprintf+0x318>
    1194:	b3 94       	inc	r11
    1196:	b3 94       	inc	r11
    1198:	04 c0       	rjmp	.+8      	; 0x11a2 <vfprintf+0x31a>
    119a:	8a 2d       	mov	r24, r10
    119c:	86 78       	andi	r24, 0x86	; 134
    119e:	09 f0       	breq	.+2      	; 0x11a2 <vfprintf+0x31a>
    11a0:	b3 94       	inc	r11
    11a2:	a3 fc       	sbrc	r10, 3
    11a4:	10 c0       	rjmp	.+32     	; 0x11c6 <vfprintf+0x33e>
    11a6:	a0 fe       	sbrs	r10, 0
    11a8:	06 c0       	rjmp	.+12     	; 0x11b6 <vfprintf+0x32e>
    11aa:	b2 14       	cp	r11, r2
    11ac:	80 f4       	brcc	.+32     	; 0x11ce <vfprintf+0x346>
    11ae:	28 0c       	add	r2, r8
    11b0:	92 2c       	mov	r9, r2
    11b2:	9b 18       	sub	r9, r11
    11b4:	0d c0       	rjmp	.+26     	; 0x11d0 <vfprintf+0x348>
    11b6:	b2 14       	cp	r11, r2
    11b8:	58 f4       	brcc	.+22     	; 0x11d0 <vfprintf+0x348>
    11ba:	b6 01       	movw	r22, r12
    11bc:	80 e2       	ldi	r24, 0x20	; 32
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	76 d0       	rcall	.+236    	; 0x12ae <fputc>
    11c2:	b3 94       	inc	r11
    11c4:	f8 cf       	rjmp	.-16     	; 0x11b6 <vfprintf+0x32e>
    11c6:	b2 14       	cp	r11, r2
    11c8:	18 f4       	brcc	.+6      	; 0x11d0 <vfprintf+0x348>
    11ca:	2b 18       	sub	r2, r11
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <vfprintf+0x34a>
    11ce:	98 2c       	mov	r9, r8
    11d0:	21 2c       	mov	r2, r1
    11d2:	a4 fe       	sbrs	r10, 4
    11d4:	0f c0       	rjmp	.+30     	; 0x11f4 <vfprintf+0x36c>
    11d6:	b6 01       	movw	r22, r12
    11d8:	80 e3       	ldi	r24, 0x30	; 48
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	68 d0       	rcall	.+208    	; 0x12ae <fputc>
    11de:	a2 fe       	sbrs	r10, 2
    11e0:	16 c0       	rjmp	.+44     	; 0x120e <vfprintf+0x386>
    11e2:	a1 fc       	sbrc	r10, 1
    11e4:	03 c0       	rjmp	.+6      	; 0x11ec <vfprintf+0x364>
    11e6:	88 e7       	ldi	r24, 0x78	; 120
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <vfprintf+0x368>
    11ec:	88 e5       	ldi	r24, 0x58	; 88
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	b6 01       	movw	r22, r12
    11f2:	0c c0       	rjmp	.+24     	; 0x120c <vfprintf+0x384>
    11f4:	8a 2d       	mov	r24, r10
    11f6:	86 78       	andi	r24, 0x86	; 134
    11f8:	51 f0       	breq	.+20     	; 0x120e <vfprintf+0x386>
    11fa:	a1 fe       	sbrs	r10, 1
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <vfprintf+0x37a>
    11fe:	8b e2       	ldi	r24, 0x2B	; 43
    1200:	01 c0       	rjmp	.+2      	; 0x1204 <vfprintf+0x37c>
    1202:	80 e2       	ldi	r24, 0x20	; 32
    1204:	a7 fc       	sbrc	r10, 7
    1206:	8d e2       	ldi	r24, 0x2D	; 45
    1208:	b6 01       	movw	r22, r12
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	50 d0       	rcall	.+160    	; 0x12ae <fputc>
    120e:	89 14       	cp	r8, r9
    1210:	30 f4       	brcc	.+12     	; 0x121e <vfprintf+0x396>
    1212:	b6 01       	movw	r22, r12
    1214:	80 e3       	ldi	r24, 0x30	; 48
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	4a d0       	rcall	.+148    	; 0x12ae <fputc>
    121a:	9a 94       	dec	r9
    121c:	f8 cf       	rjmp	.-16     	; 0x120e <vfprintf+0x386>
    121e:	8a 94       	dec	r8
    1220:	f3 01       	movw	r30, r6
    1222:	e8 0d       	add	r30, r8
    1224:	f1 1d       	adc	r31, r1
    1226:	80 81       	ld	r24, Z
    1228:	b6 01       	movw	r22, r12
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	40 d0       	rcall	.+128    	; 0x12ae <fputc>
    122e:	81 10       	cpse	r8, r1
    1230:	f6 cf       	rjmp	.-20     	; 0x121e <vfprintf+0x396>
    1232:	22 20       	and	r2, r2
    1234:	09 f4       	brne	.+2      	; 0x1238 <vfprintf+0x3b0>
    1236:	4e ce       	rjmp	.-868    	; 0xed4 <vfprintf+0x4c>
    1238:	b6 01       	movw	r22, r12
    123a:	80 e2       	ldi	r24, 0x20	; 32
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	37 d0       	rcall	.+110    	; 0x12ae <fputc>
    1240:	2a 94       	dec	r2
    1242:	f7 cf       	rjmp	.-18     	; 0x1232 <vfprintf+0x3aa>
    1244:	f6 01       	movw	r30, r12
    1246:	86 81       	ldd	r24, Z+6	; 0x06
    1248:	97 81       	ldd	r25, Z+7	; 0x07
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <vfprintf+0x3c8>
    124c:	8f ef       	ldi	r24, 0xFF	; 255
    124e:	9f ef       	ldi	r25, 0xFF	; 255
    1250:	2b 96       	adiw	r28, 0x0b	; 11
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	f8 94       	cli
    1256:	de bf       	out	0x3e, r29	; 62
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	cd bf       	out	0x3d, r28	; 61
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	1f 91       	pop	r17
    1262:	0f 91       	pop	r16
    1264:	ff 90       	pop	r15
    1266:	ef 90       	pop	r14
    1268:	df 90       	pop	r13
    126a:	cf 90       	pop	r12
    126c:	bf 90       	pop	r11
    126e:	af 90       	pop	r10
    1270:	9f 90       	pop	r9
    1272:	8f 90       	pop	r8
    1274:	7f 90       	pop	r7
    1276:	6f 90       	pop	r6
    1278:	5f 90       	pop	r5
    127a:	4f 90       	pop	r4
    127c:	3f 90       	pop	r3
    127e:	2f 90       	pop	r2
    1280:	08 95       	ret

00001282 <strnlen_P>:
    1282:	fc 01       	movw	r30, r24
    1284:	05 90       	lpm	r0, Z+
    1286:	61 50       	subi	r22, 0x01	; 1
    1288:	70 40       	sbci	r23, 0x00	; 0
    128a:	01 10       	cpse	r0, r1
    128c:	d8 f7       	brcc	.-10     	; 0x1284 <strnlen_P+0x2>
    128e:	80 95       	com	r24
    1290:	90 95       	com	r25
    1292:	8e 0f       	add	r24, r30
    1294:	9f 1f       	adc	r25, r31
    1296:	08 95       	ret

00001298 <strnlen>:
    1298:	fc 01       	movw	r30, r24
    129a:	61 50       	subi	r22, 0x01	; 1
    129c:	70 40       	sbci	r23, 0x00	; 0
    129e:	01 90       	ld	r0, Z+
    12a0:	01 10       	cpse	r0, r1
    12a2:	d8 f7       	brcc	.-10     	; 0x129a <strnlen+0x2>
    12a4:	80 95       	com	r24
    12a6:	90 95       	com	r25
    12a8:	8e 0f       	add	r24, r30
    12aa:	9f 1f       	adc	r25, r31
    12ac:	08 95       	ret

000012ae <fputc>:
    12ae:	0f 93       	push	r16
    12b0:	1f 93       	push	r17
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	fb 01       	movw	r30, r22
    12b8:	23 81       	ldd	r18, Z+3	; 0x03
    12ba:	21 fd       	sbrc	r18, 1
    12bc:	03 c0       	rjmp	.+6      	; 0x12c4 <fputc+0x16>
    12be:	8f ef       	ldi	r24, 0xFF	; 255
    12c0:	9f ef       	ldi	r25, 0xFF	; 255
    12c2:	2c c0       	rjmp	.+88     	; 0x131c <fputc+0x6e>
    12c4:	22 ff       	sbrs	r18, 2
    12c6:	16 c0       	rjmp	.+44     	; 0x12f4 <fputc+0x46>
    12c8:	46 81       	ldd	r20, Z+6	; 0x06
    12ca:	57 81       	ldd	r21, Z+7	; 0x07
    12cc:	24 81       	ldd	r18, Z+4	; 0x04
    12ce:	35 81       	ldd	r19, Z+5	; 0x05
    12d0:	42 17       	cp	r20, r18
    12d2:	53 07       	cpc	r21, r19
    12d4:	44 f4       	brge	.+16     	; 0x12e6 <fputc+0x38>
    12d6:	a0 81       	ld	r26, Z
    12d8:	b1 81       	ldd	r27, Z+1	; 0x01
    12da:	9d 01       	movw	r18, r26
    12dc:	2f 5f       	subi	r18, 0xFF	; 255
    12de:	3f 4f       	sbci	r19, 0xFF	; 255
    12e0:	31 83       	std	Z+1, r19	; 0x01
    12e2:	20 83       	st	Z, r18
    12e4:	8c 93       	st	X, r24
    12e6:	26 81       	ldd	r18, Z+6	; 0x06
    12e8:	37 81       	ldd	r19, Z+7	; 0x07
    12ea:	2f 5f       	subi	r18, 0xFF	; 255
    12ec:	3f 4f       	sbci	r19, 0xFF	; 255
    12ee:	37 83       	std	Z+7, r19	; 0x07
    12f0:	26 83       	std	Z+6, r18	; 0x06
    12f2:	14 c0       	rjmp	.+40     	; 0x131c <fputc+0x6e>
    12f4:	8b 01       	movw	r16, r22
    12f6:	ec 01       	movw	r28, r24
    12f8:	fb 01       	movw	r30, r22
    12fa:	00 84       	ldd	r0, Z+8	; 0x08
    12fc:	f1 85       	ldd	r31, Z+9	; 0x09
    12fe:	e0 2d       	mov	r30, r0
    1300:	09 95       	icall
    1302:	89 2b       	or	r24, r25
    1304:	e1 f6       	brne	.-72     	; 0x12be <fputc+0x10>
    1306:	d8 01       	movw	r26, r16
    1308:	16 96       	adiw	r26, 0x06	; 6
    130a:	8d 91       	ld	r24, X+
    130c:	9c 91       	ld	r25, X
    130e:	17 97       	sbiw	r26, 0x07	; 7
    1310:	01 96       	adiw	r24, 0x01	; 1
    1312:	17 96       	adiw	r26, 0x07	; 7
    1314:	9c 93       	st	X, r25
    1316:	8e 93       	st	-X, r24
    1318:	16 97       	sbiw	r26, 0x06	; 6
    131a:	ce 01       	movw	r24, r28
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	1f 91       	pop	r17
    1322:	0f 91       	pop	r16
    1324:	08 95       	ret

00001326 <__ultoa_invert>:
    1326:	fa 01       	movw	r30, r20
    1328:	aa 27       	eor	r26, r26
    132a:	28 30       	cpi	r18, 0x08	; 8
    132c:	51 f1       	breq	.+84     	; 0x1382 <__ultoa_invert+0x5c>
    132e:	20 31       	cpi	r18, 0x10	; 16
    1330:	81 f1       	breq	.+96     	; 0x1392 <__ultoa_invert+0x6c>
    1332:	e8 94       	clt
    1334:	6f 93       	push	r22
    1336:	6e 7f       	andi	r22, 0xFE	; 254
    1338:	6e 5f       	subi	r22, 0xFE	; 254
    133a:	7f 4f       	sbci	r23, 0xFF	; 255
    133c:	8f 4f       	sbci	r24, 0xFF	; 255
    133e:	9f 4f       	sbci	r25, 0xFF	; 255
    1340:	af 4f       	sbci	r26, 0xFF	; 255
    1342:	b1 e0       	ldi	r27, 0x01	; 1
    1344:	3e d0       	rcall	.+124    	; 0x13c2 <__ultoa_invert+0x9c>
    1346:	b4 e0       	ldi	r27, 0x04	; 4
    1348:	3c d0       	rcall	.+120    	; 0x13c2 <__ultoa_invert+0x9c>
    134a:	67 0f       	add	r22, r23
    134c:	78 1f       	adc	r23, r24
    134e:	89 1f       	adc	r24, r25
    1350:	9a 1f       	adc	r25, r26
    1352:	a1 1d       	adc	r26, r1
    1354:	68 0f       	add	r22, r24
    1356:	79 1f       	adc	r23, r25
    1358:	8a 1f       	adc	r24, r26
    135a:	91 1d       	adc	r25, r1
    135c:	a1 1d       	adc	r26, r1
    135e:	6a 0f       	add	r22, r26
    1360:	71 1d       	adc	r23, r1
    1362:	81 1d       	adc	r24, r1
    1364:	91 1d       	adc	r25, r1
    1366:	a1 1d       	adc	r26, r1
    1368:	20 d0       	rcall	.+64     	; 0x13aa <__ultoa_invert+0x84>
    136a:	09 f4       	brne	.+2      	; 0x136e <__ultoa_invert+0x48>
    136c:	68 94       	set
    136e:	3f 91       	pop	r19
    1370:	2a e0       	ldi	r18, 0x0A	; 10
    1372:	26 9f       	mul	r18, r22
    1374:	11 24       	eor	r1, r1
    1376:	30 19       	sub	r19, r0
    1378:	30 5d       	subi	r19, 0xD0	; 208
    137a:	31 93       	st	Z+, r19
    137c:	de f6       	brtc	.-74     	; 0x1334 <__ultoa_invert+0xe>
    137e:	cf 01       	movw	r24, r30
    1380:	08 95       	ret
    1382:	46 2f       	mov	r20, r22
    1384:	47 70       	andi	r20, 0x07	; 7
    1386:	40 5d       	subi	r20, 0xD0	; 208
    1388:	41 93       	st	Z+, r20
    138a:	b3 e0       	ldi	r27, 0x03	; 3
    138c:	0f d0       	rcall	.+30     	; 0x13ac <__ultoa_invert+0x86>
    138e:	c9 f7       	brne	.-14     	; 0x1382 <__ultoa_invert+0x5c>
    1390:	f6 cf       	rjmp	.-20     	; 0x137e <__ultoa_invert+0x58>
    1392:	46 2f       	mov	r20, r22
    1394:	4f 70       	andi	r20, 0x0F	; 15
    1396:	40 5d       	subi	r20, 0xD0	; 208
    1398:	4a 33       	cpi	r20, 0x3A	; 58
    139a:	18 f0       	brcs	.+6      	; 0x13a2 <__ultoa_invert+0x7c>
    139c:	49 5d       	subi	r20, 0xD9	; 217
    139e:	31 fd       	sbrc	r19, 1
    13a0:	40 52       	subi	r20, 0x20	; 32
    13a2:	41 93       	st	Z+, r20
    13a4:	02 d0       	rcall	.+4      	; 0x13aa <__ultoa_invert+0x84>
    13a6:	a9 f7       	brne	.-22     	; 0x1392 <__ultoa_invert+0x6c>
    13a8:	ea cf       	rjmp	.-44     	; 0x137e <__ultoa_invert+0x58>
    13aa:	b4 e0       	ldi	r27, 0x04	; 4
    13ac:	a6 95       	lsr	r26
    13ae:	97 95       	ror	r25
    13b0:	87 95       	ror	r24
    13b2:	77 95       	ror	r23
    13b4:	67 95       	ror	r22
    13b6:	ba 95       	dec	r27
    13b8:	c9 f7       	brne	.-14     	; 0x13ac <__ultoa_invert+0x86>
    13ba:	00 97       	sbiw	r24, 0x00	; 0
    13bc:	61 05       	cpc	r22, r1
    13be:	71 05       	cpc	r23, r1
    13c0:	08 95       	ret
    13c2:	9b 01       	movw	r18, r22
    13c4:	ac 01       	movw	r20, r24
    13c6:	0a 2e       	mov	r0, r26
    13c8:	06 94       	lsr	r0
    13ca:	57 95       	ror	r21
    13cc:	47 95       	ror	r20
    13ce:	37 95       	ror	r19
    13d0:	27 95       	ror	r18
    13d2:	ba 95       	dec	r27
    13d4:	c9 f7       	brne	.-14     	; 0x13c8 <__ultoa_invert+0xa2>
    13d6:	62 0f       	add	r22, r18
    13d8:	73 1f       	adc	r23, r19
    13da:	84 1f       	adc	r24, r20
    13dc:	95 1f       	adc	r25, r21
    13de:	a0 1d       	adc	r26, r0
    13e0:	08 95       	ret

000013e2 <_exit>:
    13e2:	f8 94       	cli

000013e4 <__stop_program>:
    13e4:	ff cf       	rjmp	.-2      	; 0x13e4 <__stop_program>
