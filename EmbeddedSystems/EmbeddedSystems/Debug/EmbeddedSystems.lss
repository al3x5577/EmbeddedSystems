
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000011b4  00001248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000042a  0080011c  0080011c  00001264  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001391  00000000  00000000  000014f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c81  00000000  00000000  00002889  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e4c  00000000  00000000  0000350a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000700  00000000  00000000  00004358  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000075c  00000000  00000000  00004a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ded  00000000  00000000  000051b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00005fa1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7d c3       	rjmp	.+1786   	; 0x73c <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	93 c5       	rjmp	.+2854   	; 0xb78 <__vector_20>
      52:	00 00       	nop
      54:	48 c5       	rjmp	.+2704   	; 0xae6 <__vector_21>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c1       	rjmp	.+614    	; 0x2c8 <__vector_24>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 eb       	ldi	r30, 0xB4	; 180
      a0:	f1 e1       	ldi	r31, 0x11	; 17
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 31       	cpi	r26, 0x1C	; 28
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	25 e0       	ldi	r18, 0x05	; 5
      b4:	ac e1       	ldi	r26, 0x1C	; 28
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a6 34       	cpi	r26, 0x46	; 70
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	17 d2       	rcall	.+1070   	; 0x4f2 <main>
      c4:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <adc_init>:
uint16_t LM35_Array[8] = {0};
uint8_t index_LM35 = 110;
uint16_t Poti_Array[8] = {0};
uint8_t index_Poti = 110;

void adc_init() {
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	00 d0       	rcall	.+0      	; 0xd0 <adc_init+0x6>
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
    ADMUX = 0;  // AREF, Right Adjust, ADC0
      d4:	8c e7       	ldi	r24, 0x7C	; 124
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	fc 01       	movw	r30, r24
      da:	10 82       	st	Z, r1
    
    ADCSRB = 3; // Set trigger to Timer0 Compare Match
      dc:	8b e7       	ldi	r24, 0x7B	; 123
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	23 e0       	ldi	r18, 0x03	; 3
      e2:	fc 01       	movw	r30, r24
      e4:	20 83       	st	Z, r18
    
    ADCSRA = 7; // Set prescaler to 128
      e6:	8a e7       	ldi	r24, 0x7A	; 122
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	27 e0       	ldi	r18, 0x07	; 7
      ec:	fc 01       	movw	r30, r24
      ee:	20 83       	st	Z, r18
    ADCSRA |= (1 << ADEN) | (1 << ADSC); // Set ADC enable, no Auto trigger | (1 << ADATE)
      f0:	8a e7       	ldi	r24, 0x7A	; 122
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	2a e7       	ldi	r18, 0x7A	; 122
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	f9 01       	movw	r30, r18
      fa:	20 81       	ld	r18, Z
      fc:	20 6c       	ori	r18, 0xC0	; 192
      fe:	fc 01       	movw	r30, r24
     100:	20 83       	st	Z, r18
    
    while (ADCSRA & (1 << ADSC));   // wait till first conversion is finished
     102:	00 00       	nop
     104:	8a e7       	ldi	r24, 0x7A	; 122
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	fc 01       	movw	r30, r24
     10a:	80 81       	ld	r24, Z
     10c:	88 2f       	mov	r24, r24
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	80 74       	andi	r24, 0x40	; 64
     112:	99 27       	eor	r25, r25
     114:	89 2b       	or	r24, r25
     116:	b1 f7       	brne	.-20     	; 0x104 <adc_init+0x3a>
    uint16_t trash = ADC;
     118:	88 e7       	ldi	r24, 0x78	; 120
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	fc 01       	movw	r30, r24
     11e:	80 81       	ld	r24, Z
     120:	91 81       	ldd	r25, Z+1	; 0x01
     122:	9a 83       	std	Y+2, r25	; 0x02
     124:	89 83       	std	Y+1, r24	; 0x01
    
    ADCSRA |= (1 << ADIE) | (1 << ADSC); // ADC interrupt
     126:	8a e7       	ldi	r24, 0x7A	; 122
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	2a e7       	ldi	r18, 0x7A	; 122
     12c:	30 e0       	ldi	r19, 0x00	; 0
     12e:	f9 01       	movw	r30, r18
     130:	20 81       	ld	r18, Z
     132:	28 64       	ori	r18, 0x48	; 72
     134:	fc 01       	movw	r30, r24
     136:	20 83       	st	Z, r18
}
     138:	00 00       	nop
     13a:	0f 90       	pop	r0
     13c:	0f 90       	pop	r0
     13e:	df 91       	pop	r29
     140:	cf 91       	pop	r28
     142:	08 95       	ret

00000144 <adc_get_LM35>:

uint32_t adc_get_LM35() {
     144:	cf 93       	push	r28
     146:	df 93       	push	r29
     148:	00 d0       	rcall	.+0      	; 0x14a <adc_get_LM35+0x6>
     14a:	00 d0       	rcall	.+0      	; 0x14c <adc_get_LM35+0x8>
     14c:	00 d0       	rcall	.+0      	; 0x14e <adc_get_LM35+0xa>
     14e:	cd b7       	in	r28, 0x3d	; 61
     150:	de b7       	in	r29, 0x3e	; 62
    if (LM35_Array[7] == 0) {
     152:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end+0xe>
     156:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0xf>
     15a:	89 2b       	or	r24, r25
     15c:	21 f4       	brne	.+8      	; 0x166 <adc_get_LM35+0x22>
        return 0; // Not enoght data in Array
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	dc 01       	movw	r26, r24
     164:	3c c0       	rjmp	.+120    	; 0x1de <adc_get_LM35+0x9a>
    }
    
    uint32_t avg = 0;
     166:	19 82       	std	Y+1, r1	; 0x01
     168:	1a 82       	std	Y+2, r1	; 0x02
     16a:	1b 82       	std	Y+3, r1	; 0x03
     16c:	1c 82       	std	Y+4, r1	; 0x04
    
    for (int i = 0; i < 8; i++) {
     16e:	1e 82       	std	Y+6, r1	; 0x06
     170:	1d 82       	std	Y+5, r1	; 0x05
     172:	1d c0       	rjmp	.+58     	; 0x1ae <adc_get_LM35+0x6a>
        avg += LM35_Array[i];
     174:	8d 81       	ldd	r24, Y+5	; 0x05
     176:	9e 81       	ldd	r25, Y+6	; 0x06
     178:	88 0f       	add	r24, r24
     17a:	99 1f       	adc	r25, r25
     17c:	84 5e       	subi	r24, 0xE4	; 228
     17e:	9e 4f       	sbci	r25, 0xFE	; 254
     180:	fc 01       	movw	r30, r24
     182:	80 81       	ld	r24, Z
     184:	91 81       	ldd	r25, Z+1	; 0x01
     186:	cc 01       	movw	r24, r24
     188:	a0 e0       	ldi	r26, 0x00	; 0
     18a:	b0 e0       	ldi	r27, 0x00	; 0
     18c:	29 81       	ldd	r18, Y+1	; 0x01
     18e:	3a 81       	ldd	r19, Y+2	; 0x02
     190:	4b 81       	ldd	r20, Y+3	; 0x03
     192:	5c 81       	ldd	r21, Y+4	; 0x04
     194:	82 0f       	add	r24, r18
     196:	93 1f       	adc	r25, r19
     198:	a4 1f       	adc	r26, r20
     19a:	b5 1f       	adc	r27, r21
     19c:	89 83       	std	Y+1, r24	; 0x01
     19e:	9a 83       	std	Y+2, r25	; 0x02
     1a0:	ab 83       	std	Y+3, r26	; 0x03
     1a2:	bc 83       	std	Y+4, r27	; 0x04
        return 0; // Not enoght data in Array
    }
    
    uint32_t avg = 0;
    
    for (int i = 0; i < 8; i++) {
     1a4:	8d 81       	ldd	r24, Y+5	; 0x05
     1a6:	9e 81       	ldd	r25, Y+6	; 0x06
     1a8:	01 96       	adiw	r24, 0x01	; 1
     1aa:	9e 83       	std	Y+6, r25	; 0x06
     1ac:	8d 83       	std	Y+5, r24	; 0x05
     1ae:	8d 81       	ldd	r24, Y+5	; 0x05
     1b0:	9e 81       	ldd	r25, Y+6	; 0x06
     1b2:	08 97       	sbiw	r24, 0x08	; 8
     1b4:	fc f2       	brlt	.-66     	; 0x174 <adc_get_LM35+0x30>
        avg += LM35_Array[i];
    }
    avg = avg / 8;
     1b6:	89 81       	ldd	r24, Y+1	; 0x01
     1b8:	9a 81       	ldd	r25, Y+2	; 0x02
     1ba:	ab 81       	ldd	r26, Y+3	; 0x03
     1bc:	bc 81       	ldd	r27, Y+4	; 0x04
     1be:	68 94       	set
     1c0:	12 f8       	bld	r1, 2
     1c2:	b6 95       	lsr	r27
     1c4:	a7 95       	ror	r26
     1c6:	97 95       	ror	r25
     1c8:	87 95       	ror	r24
     1ca:	16 94       	lsr	r1
     1cc:	d1 f7       	brne	.-12     	; 0x1c2 <adc_get_LM35+0x7e>
     1ce:	89 83       	std	Y+1, r24	; 0x01
     1d0:	9a 83       	std	Y+2, r25	; 0x02
     1d2:	ab 83       	std	Y+3, r26	; 0x03
     1d4:	bc 83       	std	Y+4, r27	; 0x04
    
    return avg;
     1d6:	89 81       	ldd	r24, Y+1	; 0x01
     1d8:	9a 81       	ldd	r25, Y+2	; 0x02
     1da:	ab 81       	ldd	r26, Y+3	; 0x03
     1dc:	bc 81       	ldd	r27, Y+4	; 0x04
}
     1de:	bc 01       	movw	r22, r24
     1e0:	cd 01       	movw	r24, r26
     1e2:	26 96       	adiw	r28, 0x06	; 6
     1e4:	0f b6       	in	r0, 0x3f	; 63
     1e6:	f8 94       	cli
     1e8:	de bf       	out	0x3e, r29	; 62
     1ea:	0f be       	out	0x3f, r0	; 63
     1ec:	cd bf       	out	0x3d, r28	; 61
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	08 95       	ret

000001f4 <adc_get_Poti>:

uint32_t adc_get_Poti() {
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	00 d0       	rcall	.+0      	; 0x1fa <adc_get_Poti+0x6>
     1fa:	00 d0       	rcall	.+0      	; 0x1fc <adc_get_Poti+0x8>
     1fc:	00 d0       	rcall	.+0      	; 0x1fe <adc_get_Poti+0xa>
     1fe:	cd b7       	in	r28, 0x3d	; 61
     200:	de b7       	in	r29, 0x3e	; 62
    if (Poti_Array[7] == 0) {
     202:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <Poti_Array+0xe>
     206:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <Poti_Array+0xf>
     20a:	89 2b       	or	r24, r25
     20c:	21 f4       	brne	.+8      	; 0x216 <adc_get_Poti+0x22>
        return 0; // Not enoght data in Array
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	dc 01       	movw	r26, r24
     214:	4e c0       	rjmp	.+156    	; 0x2b2 <adc_get_Poti+0xbe>
    }
    
    uint32_t avg = 0;
     216:	19 82       	std	Y+1, r1	; 0x01
     218:	1a 82       	std	Y+2, r1	; 0x02
     21a:	1b 82       	std	Y+3, r1	; 0x03
     21c:	1c 82       	std	Y+4, r1	; 0x04
    
    for (int i = 0; i < 8; i++) {
     21e:	1e 82       	std	Y+6, r1	; 0x06
     220:	1d 82       	std	Y+5, r1	; 0x05
     222:	2f c0       	rjmp	.+94     	; 0x282 <adc_get_Poti+0x8e>
        ADCSRA &= (1 << ADIE);
     224:	8a e7       	ldi	r24, 0x7A	; 122
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	2a e7       	ldi	r18, 0x7A	; 122
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	f9 01       	movw	r30, r18
     22e:	20 81       	ld	r18, Z
     230:	28 70       	andi	r18, 0x08	; 8
     232:	fc 01       	movw	r30, r24
     234:	20 83       	st	Z, r18
        avg += Poti_Array[i];
     236:	8d 81       	ldd	r24, Y+5	; 0x05
     238:	9e 81       	ldd	r25, Y+6	; 0x06
     23a:	88 0f       	add	r24, r24
     23c:	99 1f       	adc	r25, r25
     23e:	84 5d       	subi	r24, 0xD4	; 212
     240:	9e 4f       	sbci	r25, 0xFE	; 254
     242:	fc 01       	movw	r30, r24
     244:	80 81       	ld	r24, Z
     246:	91 81       	ldd	r25, Z+1	; 0x01
     248:	cc 01       	movw	r24, r24
     24a:	a0 e0       	ldi	r26, 0x00	; 0
     24c:	b0 e0       	ldi	r27, 0x00	; 0
     24e:	29 81       	ldd	r18, Y+1	; 0x01
     250:	3a 81       	ldd	r19, Y+2	; 0x02
     252:	4b 81       	ldd	r20, Y+3	; 0x03
     254:	5c 81       	ldd	r21, Y+4	; 0x04
     256:	82 0f       	add	r24, r18
     258:	93 1f       	adc	r25, r19
     25a:	a4 1f       	adc	r26, r20
     25c:	b5 1f       	adc	r27, r21
     25e:	89 83       	std	Y+1, r24	; 0x01
     260:	9a 83       	std	Y+2, r25	; 0x02
     262:	ab 83       	std	Y+3, r26	; 0x03
     264:	bc 83       	std	Y+4, r27	; 0x04
        ADCSRA |= (1 << ADIE);
     266:	8a e7       	ldi	r24, 0x7A	; 122
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	2a e7       	ldi	r18, 0x7A	; 122
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	f9 01       	movw	r30, r18
     270:	20 81       	ld	r18, Z
     272:	28 60       	ori	r18, 0x08	; 8
     274:	fc 01       	movw	r30, r24
     276:	20 83       	st	Z, r18
        return 0; // Not enoght data in Array
    }
    
    uint32_t avg = 0;
    
    for (int i = 0; i < 8; i++) {
     278:	8d 81       	ldd	r24, Y+5	; 0x05
     27a:	9e 81       	ldd	r25, Y+6	; 0x06
     27c:	01 96       	adiw	r24, 0x01	; 1
     27e:	9e 83       	std	Y+6, r25	; 0x06
     280:	8d 83       	std	Y+5, r24	; 0x05
     282:	8d 81       	ldd	r24, Y+5	; 0x05
     284:	9e 81       	ldd	r25, Y+6	; 0x06
     286:	08 97       	sbiw	r24, 0x08	; 8
     288:	6c f2       	brlt	.-102    	; 0x224 <adc_get_Poti+0x30>
        ADCSRA &= (1 << ADIE);
        avg += Poti_Array[i];
        ADCSRA |= (1 << ADIE);
    }
    avg = avg / 8;
     28a:	89 81       	ldd	r24, Y+1	; 0x01
     28c:	9a 81       	ldd	r25, Y+2	; 0x02
     28e:	ab 81       	ldd	r26, Y+3	; 0x03
     290:	bc 81       	ldd	r27, Y+4	; 0x04
     292:	68 94       	set
     294:	12 f8       	bld	r1, 2
     296:	b6 95       	lsr	r27
     298:	a7 95       	ror	r26
     29a:	97 95       	ror	r25
     29c:	87 95       	ror	r24
     29e:	16 94       	lsr	r1
     2a0:	d1 f7       	brne	.-12     	; 0x296 <adc_get_Poti+0xa2>
     2a2:	89 83       	std	Y+1, r24	; 0x01
     2a4:	9a 83       	std	Y+2, r25	; 0x02
     2a6:	ab 83       	std	Y+3, r26	; 0x03
     2a8:	bc 83       	std	Y+4, r27	; 0x04
    
    return avg;
     2aa:	89 81       	ldd	r24, Y+1	; 0x01
     2ac:	9a 81       	ldd	r25, Y+2	; 0x02
     2ae:	ab 81       	ldd	r26, Y+3	; 0x03
     2b0:	bc 81       	ldd	r27, Y+4	; 0x04
}
     2b2:	bc 01       	movw	r22, r24
     2b4:	cd 01       	movw	r24, r26
     2b6:	26 96       	adiw	r28, 0x06	; 6
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	f8 94       	cli
     2bc:	de bf       	out	0x3e, r29	; 62
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	cd bf       	out	0x3d, r28	; 61
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	08 95       	ret

000002c8 <__vector_24>:

ISR(ADC_vect){
     2c8:	1f 92       	push	r1
     2ca:	0f 92       	push	r0
     2cc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     2d0:	0f 92       	push	r0
     2d2:	11 24       	eor	r1, r1
     2d4:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     2d8:	0f 92       	push	r0
     2da:	2f 93       	push	r18
     2dc:	3f 93       	push	r19
     2de:	4f 93       	push	r20
     2e0:	5f 93       	push	r21
     2e2:	6f 93       	push	r22
     2e4:	7f 93       	push	r23
     2e6:	8f 93       	push	r24
     2e8:	9f 93       	push	r25
     2ea:	af 93       	push	r26
     2ec:	bf 93       	push	r27
     2ee:	ef 93       	push	r30
     2f0:	ff 93       	push	r31
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	00 d0       	rcall	.+0      	; 0x2f8 <__vector_24+0x30>
     2f8:	cd b7       	in	r28, 0x3d	; 61
     2fa:	de b7       	in	r29, 0x3e	; 62
    volatile uint16_t res = ADC;
     2fc:	88 e7       	ldi	r24, 0x78	; 120
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	fc 01       	movw	r30, r24
     302:	80 81       	ld	r24, Z
     304:	91 81       	ldd	r25, Z+1	; 0x01
     306:	9a 83       	std	Y+2, r25	; 0x02
     308:	89 83       	std	Y+1, r24	; 0x01
    switch (ADMUX) {
     30a:	8c e7       	ldi	r24, 0x7C	; 124
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	fc 01       	movw	r30, r24
     310:	80 81       	ld	r24, Z
     312:	88 2f       	mov	r24, r24
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	00 97       	sbiw	r24, 0x00	; 0
     318:	19 f0       	breq	.+6      	; 0x320 <__vector_24+0x58>
     31a:	01 97       	sbiw	r24, 0x01	; 1
     31c:	49 f1       	breq	.+82     	; 0x370 <__vector_24+0xa8>
            
            ADMUX = 0;
            break;
            
        default:
            break;
     31e:	4f c0       	rjmp	.+158    	; 0x3be <__vector_24+0xf6>

ISR(ADC_vect){
    volatile uint16_t res = ADC;
    switch (ADMUX) {
        case 0:
			Led7_On();
     320:	9a d0       	rcall	.+308    	; 0x456 <Led7_On>
            if (index_LM35 == 42) {
     322:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     326:	8a 32       	cpi	r24, 0x2A	; 42
     328:	19 f4       	brne	.+6      	; 0x330 <__vector_24+0x68>
                index_LM35 = 0; // Trash first conversion
     32a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     32e:	1a c0       	rjmp	.+52     	; 0x364 <__vector_24+0x9c>
            }else if (index_LM35 >= 0 && index_LM35 <= 7) {
     330:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     334:	88 30       	cpi	r24, 0x08	; 8
     336:	98 f4       	brcc	.+38     	; 0x35e <__vector_24+0x96>
                LM35_Array[index_LM35] = res;
     338:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     33c:	88 2f       	mov	r24, r24
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	29 81       	ldd	r18, Y+1	; 0x01
     342:	3a 81       	ldd	r19, Y+2	; 0x02
     344:	88 0f       	add	r24, r24
     346:	99 1f       	adc	r25, r25
     348:	84 5e       	subi	r24, 0xE4	; 228
     34a:	9e 4f       	sbci	r25, 0xFE	; 254
     34c:	fc 01       	movw	r30, r24
     34e:	31 83       	std	Z+1, r19	; 0x01
     350:	20 83       	st	Z, r18
                index_LM35++;
     352:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     356:	8f 5f       	subi	r24, 0xFF	; 255
     358:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     35c:	03 c0       	rjmp	.+6      	; 0x364 <__vector_24+0x9c>
            }else {
                index_LM35 = 42;
     35e:	8a e2       	ldi	r24, 0x2A	; 42
     360:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
            }
            
            ADMUX = 1;
     364:	8c e7       	ldi	r24, 0x7C	; 124
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	21 e0       	ldi	r18, 0x01	; 1
     36a:	fc 01       	movw	r30, r24
     36c:	20 83       	st	Z, r18
            break;
            
        case 1:
            Led8_On();
     36e:	27 c0       	rjmp	.+78     	; 0x3be <__vector_24+0xf6>
     370:	83 d0       	rcall	.+262    	; 0x478 <Led8_On>
            if (index_Poti == 42) {
     372:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
     376:	8a 32       	cpi	r24, 0x2A	; 42
     378:	19 f4       	brne	.+6      	; 0x380 <__vector_24+0xb8>
                index_Poti = 0; // Trash first conversion
     37a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <index_Poti>
     37e:	1a c0       	rjmp	.+52     	; 0x3b4 <__vector_24+0xec>
            }else if (index_Poti >= 0 && index_Poti <= 7) {
     380:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
     384:	88 30       	cpi	r24, 0x08	; 8
     386:	98 f4       	brcc	.+38     	; 0x3ae <__vector_24+0xe6>
                Poti_Array[index_Poti] = res;
     388:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
     38c:	88 2f       	mov	r24, r24
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	29 81       	ldd	r18, Y+1	; 0x01
     392:	3a 81       	ldd	r19, Y+2	; 0x02
     394:	88 0f       	add	r24, r24
     396:	99 1f       	adc	r25, r25
     398:	84 5d       	subi	r24, 0xD4	; 212
     39a:	9e 4f       	sbci	r25, 0xFE	; 254
     39c:	fc 01       	movw	r30, r24
     39e:	31 83       	std	Z+1, r19	; 0x01
     3a0:	20 83       	st	Z, r18
                index_Poti++;
     3a2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
     3a6:	8f 5f       	subi	r24, 0xFF	; 255
     3a8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <index_Poti>
     3ac:	03 c0       	rjmp	.+6      	; 0x3b4 <__vector_24+0xec>
            }else {
                index_Poti = 42;
     3ae:	8a e2       	ldi	r24, 0x2A	; 42
     3b0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <index_Poti>
            }
            
            ADMUX = 0;
     3b4:	8c e7       	ldi	r24, 0x7C	; 124
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	fc 01       	movw	r30, r24
     3ba:	10 82       	st	Z, r1
            break;
     3bc:	00 00       	nop
            
        default:
            break;
    }
    
    ADCSRA |= (1 << ADSC);
     3be:	8a e7       	ldi	r24, 0x7A	; 122
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	2a e7       	ldi	r18, 0x7A	; 122
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	f9 01       	movw	r30, r18
     3c8:	20 81       	ld	r18, Z
     3ca:	20 64       	ori	r18, 0x40	; 64
     3cc:	fc 01       	movw	r30, r24
     3ce:	20 83       	st	Z, r18
}
     3d0:	00 00       	nop
     3d2:	0f 90       	pop	r0
     3d4:	0f 90       	pop	r0
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	ff 91       	pop	r31
     3dc:	ef 91       	pop	r30
     3de:	bf 91       	pop	r27
     3e0:	af 91       	pop	r26
     3e2:	9f 91       	pop	r25
     3e4:	8f 91       	pop	r24
     3e6:	7f 91       	pop	r23
     3e8:	6f 91       	pop	r22
     3ea:	5f 91       	pop	r21
     3ec:	4f 91       	pop	r20
     3ee:	3f 91       	pop	r19
     3f0:	2f 91       	pop	r18
     3f2:	0f 90       	pop	r0
     3f4:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     3f8:	0f 90       	pop	r0
     3fa:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     3fe:	0f 90       	pop	r0
     400:	1f 90       	pop	r1
     402:	18 95       	reti

00000404 <Led_init>:
void Led7_On(void) {
    PORTB |= (1 << 1);
}
void Led7_Off(void) {
    PORTB &= ~(1 << 1);
}
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	1f 92       	push	r1
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
     40e:	89 83       	std	Y+1, r24	; 0x01
     410:	84 e2       	ldi	r24, 0x24	; 36
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	2f ef       	ldi	r18, 0xFF	; 255
     416:	fc 01       	movw	r30, r24
     418:	20 83       	st	Z, r18
     41a:	85 e2       	ldi	r24, 0x25	; 37
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	fc 01       	movw	r30, r24
     420:	10 82       	st	Z, r1
     422:	89 81       	ldd	r24, Y+1	; 0x01
     424:	88 23       	and	r24, r24
     426:	91 f0       	breq	.+36     	; 0x44c <Led_init+0x48>
     428:	8a e2       	ldi	r24, 0x2A	; 42
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	2a e2       	ldi	r18, 0x2A	; 42
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	f9 01       	movw	r30, r18
     432:	20 81       	ld	r18, Z
     434:	2f 61       	ori	r18, 0x1F	; 31
     436:	fc 01       	movw	r30, r24
     438:	20 83       	st	Z, r18
     43a:	8b e2       	ldi	r24, 0x2B	; 43
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	2b e2       	ldi	r18, 0x2B	; 43
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	f9 01       	movw	r30, r18
     444:	20 81       	ld	r18, Z
     446:	20 7e       	andi	r18, 0xE0	; 224
     448:	fc 01       	movw	r30, r24
     44a:	20 83       	st	Z, r18
     44c:	00 00       	nop
     44e:	0f 90       	pop	r0
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <Led7_On>:
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	cd b7       	in	r28, 0x3d	; 61
     45c:	de b7       	in	r29, 0x3e	; 62
     45e:	85 e2       	ldi	r24, 0x25	; 37
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	25 e2       	ldi	r18, 0x25	; 37
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	f9 01       	movw	r30, r18
     468:	20 81       	ld	r18, Z
     46a:	22 60       	ori	r18, 0x02	; 2
     46c:	fc 01       	movw	r30, r24
     46e:	20 83       	st	Z, r18
     470:	00 00       	nop
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	08 95       	ret

00000478 <Led8_On>:

/**
led8 - ioB0
*/
void Led8_On(void) {
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	cd b7       	in	r28, 0x3d	; 61
     47e:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 0);
     480:	85 e2       	ldi	r24, 0x25	; 37
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	25 e2       	ldi	r18, 0x25	; 37
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	f9 01       	movw	r30, r18
     48a:	20 81       	ld	r18, Z
     48c:	21 60       	ori	r18, 0x01	; 1
     48e:	fc 01       	movw	r30, r24
     490:	20 83       	st	Z, r18
}
     492:	00 00       	nop
     494:	df 91       	pop	r29
     496:	cf 91       	pop	r28
     498:	08 95       	ret

0000049a <Taster_init>:
 ---------------------
 - DDR Reg has to be set to 0
 - PORT Reg has to be set to 1
 -> Pin is input with pull-up
 */
void Taster_init() {
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
    
    // set to inputs
    DDRC &= ~(1 << 2);
     4a2:	87 e2       	ldi	r24, 0x27	; 39
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	27 e2       	ldi	r18, 0x27	; 39
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	f9 01       	movw	r30, r18
     4ac:	20 81       	ld	r18, Z
     4ae:	2b 7f       	andi	r18, 0xFB	; 251
     4b0:	fc 01       	movw	r30, r24
     4b2:	20 83       	st	Z, r18
    DDRD &= ~( (1 << 7) | (1 << 6) | (1 << 5) );
     4b4:	8a e2       	ldi	r24, 0x2A	; 42
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	2a e2       	ldi	r18, 0x2A	; 42
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	f9 01       	movw	r30, r18
     4be:	20 81       	ld	r18, Z
     4c0:	2f 71       	andi	r18, 0x1F	; 31
     4c2:	fc 01       	movw	r30, r24
     4c4:	20 83       	st	Z, r18
    
    // enable pull-up
    PORTC |= (1 << 2);
     4c6:	88 e2       	ldi	r24, 0x28	; 40
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	28 e2       	ldi	r18, 0x28	; 40
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	f9 01       	movw	r30, r18
     4d0:	20 81       	ld	r18, Z
     4d2:	24 60       	ori	r18, 0x04	; 4
     4d4:	fc 01       	movw	r30, r24
     4d6:	20 83       	st	Z, r18
    PORTD |= (1 << 7) | (1 << 6) | (1 << 5);
     4d8:	8b e2       	ldi	r24, 0x2B	; 43
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	2b e2       	ldi	r18, 0x2B	; 43
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	f9 01       	movw	r30, r18
     4e2:	20 81       	ld	r18, Z
     4e4:	20 6e       	ori	r18, 0xE0	; 224
     4e6:	fc 01       	movw	r30, r24
     4e8:	20 83       	st	Z, r18
}
     4ea:	00 00       	nop
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	08 95       	ret

000004f2 <main>:
#include <avr/interrupt.h>
#include "adc/adc.h"

#define CLK_F_MHZ 16

int main(void) {
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	cd b7       	in	r28, 0x3d	; 61
     4f8:	de b7       	in	r29, 0x3e	; 62
     4fa:	c7 57       	subi	r28, 0x77	; 119
     4fc:	d1 09       	sbc	r29, r1
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	f8 94       	cli
     502:	de bf       	out	0x3e, r29	; 62
     504:	0f be       	out	0x3f, r0	; 63
     506:	cd bf       	out	0x3d, r28	; 61
	
    cli();
     508:	f8 94       	cli
    Led_init(0);	// Don't set LEDs at PORTD
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	7b df       	rcall	.-266    	; 0x404 <Led_init>
	Taster_init();
     50e:	c5 df       	rcall	.-118    	; 0x49a <Taster_init>
    Timer_init(CLK_F_MHZ); // Init timer with 16MHZ clock
     510:	80 e1       	ldi	r24, 0x10	; 16
	uart_init_isr();
     512:	69 d0       	rcall	.+210    	; 0x5e6 <Timer_init>
    adc_init();
     514:	7e d2       	rcall	.+1276   	; 0xa12 <uart_init_isr>
     516:	d9 dd       	rcall	.-1102   	; 0xca <adc_init>
	sei();
     518:	78 94       	sei
    
    uint16_t timeVarMain = Timer_getTick();
     51a:	fc d0       	rcall	.+504    	; 0x714 <Timer_getTick>
     51c:	9a 83       	std	Y+2, r25	; 0x02
     51e:	89 83       	std	Y+1, r24	; 0x01
     520:	22 e3       	ldi	r18, 0x32	; 50
    char data_s;
    char data[50] = {0};
     522:	ce 01       	movw	r24, r28
     524:	05 96       	adiw	r24, 0x05	; 5
     526:	fc 01       	movw	r30, r24
     528:	32 2f       	mov	r19, r18
     52a:	11 92       	st	Z+, r1
     52c:	3a 95       	dec	r19
     52e:	e9 f7       	brne	.-6      	; 0x52a <main+0x38>
    int i = 0;
     530:	1c 82       	std	Y+4, r1	; 0x04
     532:	1b 82       	std	Y+3, r1	; 0x03
	char str[65];
	
    while (1) {
        
        if((Timer_getTick() - timeVarMain) >= 5000){
     534:	ef d0       	rcall	.+478    	; 0x714 <Timer_getTick>
     536:	9c 01       	movw	r18, r24
     538:	89 81       	ldd	r24, Y+1	; 0x01
     53a:	9a 81       	ldd	r25, Y+2	; 0x02
     53c:	a9 01       	movw	r20, r18
     53e:	48 1b       	sub	r20, r24
     540:	59 0b       	sbc	r21, r25
     542:	ca 01       	movw	r24, r20
     544:	88 38       	cpi	r24, 0x88	; 136
     546:	93 41       	sbci	r25, 0x13	; 19
     548:	a8 f3       	brcs	.-22     	; 0x534 <main+0x42>
            timeVarMain = Timer_getTick();
     54a:	e4 d0       	rcall	.+456    	; 0x714 <Timer_getTick>
     54c:	9a 83       	std	Y+2, r25	; 0x02
     54e:	89 83       	std	Y+1, r24	; 0x01
            PORTB = 0;
     550:	85 e2       	ldi	r24, 0x25	; 37
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	fc 01       	movw	r30, r24
     556:	10 82       	st	Z, r1
            
            sprintf(str, "Temperatur: %d\n", adc_get_LM35());
     558:	f5 dd       	rcall	.-1046   	; 0x144 <adc_get_LM35>
     55a:	dc 01       	movw	r26, r24
     55c:	cb 01       	movw	r24, r22
     55e:	2b 2f       	mov	r18, r27
     560:	2f 93       	push	r18
     562:	2a 2f       	mov	r18, r26
     564:	2f 93       	push	r18
     566:	29 2f       	mov	r18, r25
     568:	2f 93       	push	r18
     56a:	8f 93       	push	r24
     56c:	82 e0       	ldi	r24, 0x02	; 2
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	89 2f       	mov	r24, r25
     572:	8f 93       	push	r24
     574:	82 e0       	ldi	r24, 0x02	; 2
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	8f 93       	push	r24
     57a:	ce 01       	movw	r24, r28
     57c:	c7 96       	adiw	r24, 0x37	; 55
     57e:	29 2f       	mov	r18, r25
     580:	2f 93       	push	r18
     582:	8f 93       	push	r24
     584:	3a d3       	rcall	.+1652   	; 0xbfa <sprintf>
     586:	2d b7       	in	r18, 0x3d	; 61
     588:	3e b7       	in	r19, 0x3e	; 62
     58a:	28 5f       	subi	r18, 0xF8	; 248
     58c:	3f 4f       	sbci	r19, 0xFF	; 255
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	f8 94       	cli
     592:	de bf       	out	0x3e, r29	; 62
     594:	0f be       	out	0x3f, r0	; 63
            uart_send_isr(str);
     596:	cd bf       	out	0x3d, r28	; 61
     598:	ce 01       	movw	r24, r28
     59a:	c7 96       	adiw	r24, 0x37	; 55
     59c:	55 d2       	rcall	.+1194   	; 0xa48 <uart_send_isr>
            
            sprintf(str, "Poti: %d\n", adc_get_Poti());
     59e:	2a de       	rcall	.-940    	; 0x1f4 <adc_get_Poti>
     5a0:	dc 01       	movw	r26, r24
     5a2:	cb 01       	movw	r24, r22
     5a4:	2b 2f       	mov	r18, r27
     5a6:	2f 93       	push	r18
     5a8:	2a 2f       	mov	r18, r26
     5aa:	2f 93       	push	r18
     5ac:	29 2f       	mov	r18, r25
     5ae:	2f 93       	push	r18
     5b0:	8f 93       	push	r24
     5b2:	82 e1       	ldi	r24, 0x12	; 18
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	89 2f       	mov	r24, r25
     5b8:	8f 93       	push	r24
     5ba:	82 e1       	ldi	r24, 0x12	; 18
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	8f 93       	push	r24
     5c0:	ce 01       	movw	r24, r28
     5c2:	c7 96       	adiw	r24, 0x37	; 55
     5c4:	29 2f       	mov	r18, r25
     5c6:	2f 93       	push	r18
     5c8:	8f 93       	push	r24
     5ca:	17 d3       	rcall	.+1582   	; 0xbfa <sprintf>
     5cc:	4d b7       	in	r20, 0x3d	; 61
     5ce:	5e b7       	in	r21, 0x3e	; 62
     5d0:	48 5f       	subi	r20, 0xF8	; 248
     5d2:	5f 4f       	sbci	r21, 0xFF	; 255
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	f8 94       	cli
     5d8:	de bf       	out	0x3e, r29	; 62
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	cd bf       	out	0x3d, r28	; 61
            uart_send_isr(str);
     5de:	ce 01       	movw	r24, r28
     5e0:	c7 96       	adiw	r24, 0x37	; 55
     5e2:	32 d2       	rcall	.+1124   	; 0xa48 <uart_send_isr>
     5e4:	a7 cf       	rjmp	.-178    	; 0x534 <main+0x42>

000005e6 <Timer_init>:
            }
        }*/
        
        //trafficLight(0);
        //playground();
    }
     5e6:	cf 93       	push	r28
    }
    
    TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
}
     5e8:	df 93       	push	r29
     5ea:	1f 92       	push	r1
     5ec:	cd b7       	in	r28, 0x3d	; 61
     5ee:	de b7       	in	r29, 0x3e	; 62
     5f0:	89 83       	std	Y+1, r24	; 0x01
     5f2:	89 81       	ldd	r24, Y+1	; 0x01
     5f4:	88 2f       	mov	r24, r24
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	05 d0       	rcall	.+10     	; 0x604 <Timer_init_withoutStruct>
     5fa:	00 00       	nop
     5fc:	0f 90       	pop	r0
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <Timer_init_withoutStruct>:

void Timer_init_withoutStruct(uint8_t clockFreqMhz) {
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	1f 92       	push	r1
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
     60e:	89 83       	std	Y+1, r24	; 0x01
    // datasheet page 97
    // set mode to clear timer on compare (CTC)
    TCCR0B &= ~(1 << WGM02);
     610:	85 e4       	ldi	r24, 0x45	; 69
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	25 e4       	ldi	r18, 0x45	; 69
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	f9 01       	movw	r30, r18
     61a:	20 81       	ld	r18, Z
     61c:	27 7f       	andi	r18, 0xF7	; 247
     61e:	fc 01       	movw	r30, r24
     620:	20 83       	st	Z, r18
    TCCR0A |= (1 << WGM01);
     622:	84 e4       	ldi	r24, 0x44	; 68
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	24 e4       	ldi	r18, 0x44	; 68
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	f9 01       	movw	r30, r18
     62c:	20 81       	ld	r18, Z
     62e:	22 60       	ori	r18, 0x02	; 2
     630:	fc 01       	movw	r30, r24
     632:	20 83       	st	Z, r18
    TCCR0A &= ~(1 << WGM00);
     634:	84 e4       	ldi	r24, 0x44	; 68
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	24 e4       	ldi	r18, 0x44	; 68
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	f9 01       	movw	r30, r18
     63e:	20 81       	ld	r18, Z
     640:	2e 7f       	andi	r18, 0xFE	; 254
     642:	fc 01       	movw	r30, r24
     644:	20 83       	st	Z, r18
    
    
    switch (clockFreqMhz) {
     646:	89 81       	ldd	r24, Y+1	; 0x01
     648:	88 2f       	mov	r24, r24
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	40 97       	sbiw	r24, 0x10	; 16
     64e:	09 f5       	brne	.+66     	; 0x692 <Timer_init_withoutStruct+0x8e>
        case 16:
            // extern osc (16 MHZ)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = 249;   // dez 249; range 0 - 249 -> 250 cycles till interrupt
     650:	87 e4       	ldi	r24, 0x47	; 71
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	29 ef       	ldi	r18, 0xF9	; 249
     656:	fc 01       	movw	r30, r24
     658:	20 83       	st	Z, r18
            
            // set prescaler to 1/64
            TCCR0B &= ~(1 << CS02);
     65a:	85 e4       	ldi	r24, 0x45	; 69
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	25 e4       	ldi	r18, 0x45	; 69
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	f9 01       	movw	r30, r18
     664:	20 81       	ld	r18, Z
     666:	2b 7f       	andi	r18, 0xFB	; 251
     668:	fc 01       	movw	r30, r24
     66a:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
     66c:	85 e4       	ldi	r24, 0x45	; 69
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	25 e4       	ldi	r18, 0x45	; 69
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	f9 01       	movw	r30, r18
     676:	20 81       	ld	r18, Z
     678:	22 60       	ori	r18, 0x02	; 2
     67a:	fc 01       	movw	r30, r24
     67c:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS00);
     67e:	85 e4       	ldi	r24, 0x45	; 69
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	25 e4       	ldi	r18, 0x45	; 69
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	f9 01       	movw	r30, r18
     688:	20 81       	ld	r18, Z
     68a:	21 60       	ori	r18, 0x01	; 1
     68c:	fc 01       	movw	r30, r24
     68e:	20 83       	st	Z, r18
            break;
     690:	21 c0       	rjmp	.+66     	; 0x6d4 <Timer_init_withoutStruct+0xd0>
            
        default:
            // inter osc (8 MHZ divided by 8 -> 1 MHZ clock)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = 0x7C;   // dez 124; range 0 - 124 -> 125 cycles till interrupt
     692:	87 e4       	ldi	r24, 0x47	; 71
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	2c e7       	ldi	r18, 0x7C	; 124
     698:	fc 01       	movw	r30, r24
     69a:	20 83       	st	Z, r18
            
            // set prescaler to 1/8
            TCCR0B &= ~(1 << CS02);
     69c:	85 e4       	ldi	r24, 0x45	; 69
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	25 e4       	ldi	r18, 0x45	; 69
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	f9 01       	movw	r30, r18
     6a6:	20 81       	ld	r18, Z
     6a8:	2b 7f       	andi	r18, 0xFB	; 251
     6aa:	fc 01       	movw	r30, r24
     6ac:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
     6ae:	85 e4       	ldi	r24, 0x45	; 69
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	25 e4       	ldi	r18, 0x45	; 69
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	f9 01       	movw	r30, r18
     6b8:	20 81       	ld	r18, Z
     6ba:	22 60       	ori	r18, 0x02	; 2
     6bc:	fc 01       	movw	r30, r24
     6be:	20 83       	st	Z, r18
            TCCR0B &= ~(1 << CS00);
     6c0:	85 e4       	ldi	r24, 0x45	; 69
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	25 e4       	ldi	r18, 0x45	; 69
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	f9 01       	movw	r30, r18
     6ca:	20 81       	ld	r18, Z
     6cc:	2e 7f       	andi	r18, 0xFE	; 254
     6ce:	fc 01       	movw	r30, r24
     6d0:	20 83       	st	Z, r18
            break;
     6d2:	00 00       	nop
    }
    
    TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
     6d4:	8e e6       	ldi	r24, 0x6E	; 110
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	2e e6       	ldi	r18, 0x6E	; 110
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	f9 01       	movw	r30, r18
     6de:	20 81       	ld	r18, Z
     6e0:	2b 7f       	andi	r18, 0xFB	; 251
     6e2:	fc 01       	movw	r30, r24
     6e4:	20 83       	st	Z, r18
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
     6e6:	8e e6       	ldi	r24, 0x6E	; 110
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	2e e6       	ldi	r18, 0x6E	; 110
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	f9 01       	movw	r30, r18
     6f0:	20 81       	ld	r18, Z
     6f2:	22 60       	ori	r18, 0x02	; 2
     6f4:	fc 01       	movw	r30, r24
     6f6:	20 83       	st	Z, r18
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
     6f8:	8e e6       	ldi	r24, 0x6E	; 110
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	2e e6       	ldi	r18, 0x6E	; 110
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	f9 01       	movw	r30, r18
     702:	20 81       	ld	r18, Z
     704:	2e 7f       	andi	r18, 0xFE	; 254
     706:	fc 01       	movw	r30, r24
     708:	20 83       	st	Z, r18
}
     70a:	00 00       	nop
     70c:	0f 90       	pop	r0
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	08 95       	ret

00000714 <Timer_getTick>:

uint16_t Timer_getTick() {
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	00 d0       	rcall	.+0      	; 0x71a <Timer_getTick+0x6>
     71a:	cd b7       	in	r28, 0x3d	; 61
     71c:	de b7       	in	r29, 0x3e	; 62
    // disable global interrupt
    cli();
     71e:	f8 94       	cli
    
    // store timer_count in a temp int that can't get changed by ISR
    uint16_t temp_timer_count = timer_count;
     720:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <timer_count>
     724:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <timer_count+0x1>
     728:	9a 83       	std	Y+2, r25	; 0x02
     72a:	89 83       	std	Y+1, r24	; 0x01
    
    // enable global interrupt
    sei();
     72c:	78 94       	sei

    return temp_timer_count;
     72e:	89 81       	ldd	r24, Y+1	; 0x01
     730:	9a 81       	ldd	r25, Y+2	; 0x02
}
     732:	0f 90       	pop	r0
     734:	0f 90       	pop	r0
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	08 95       	ret

0000073c <__vector_16>:
 ( not used atm)
 Timer compare A interrput:
 - increase timer_count
 - if timer_count is at max of uint16, set it to 0
 */
ISR(TIMER0_COMPA_vect){
     73c:	1f 92       	push	r1
     73e:	0f 92       	push	r0
     740:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     744:	0f 92       	push	r0
     746:	11 24       	eor	r1, r1
     748:	8f 93       	push	r24
     74a:	9f 93       	push	r25
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
    timer_count++;
     754:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <timer_count>
     758:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <timer_count+0x1>
     75c:	01 96       	adiw	r24, 0x01	; 1
     75e:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timer_count+0x1>
     762:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timer_count>
}
     766:	00 00       	nop
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	9f 91       	pop	r25
     76e:	8f 91       	pop	r24
     770:	0f 90       	pop	r0
     772:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     776:	0f 90       	pop	r0
     778:	1f 90       	pop	r1
     77a:	18 95       	reti

0000077c <buff_put>:
        // Return byte
        return pByte;
    }else {
        return 0;
    }
}
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	00 d0       	rcall	.+0      	; 0x782 <buff_put+0x6>
     782:	1f 92       	push	r1
     784:	cd b7       	in	r28, 0x3d	; 61
     786:	de b7       	in	r29, 0x3e	; 62
     788:	89 83       	std	Y+1, r24	; 0x01
     78a:	7b 83       	std	Y+3, r23	; 0x03
     78c:	6a 83       	std	Y+2, r22	; 0x02
     78e:	81 ec       	ldi	r24, 0xC1	; 193
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	21 ec       	ldi	r18, 0xC1	; 193
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	f9 01       	movw	r30, r18
     798:	20 81       	ld	r18, Z
     79a:	2f 7d       	andi	r18, 0xDF	; 223
     79c:	fc 01       	movw	r30, r24
     79e:	20 83       	st	Z, r18
     7a0:	81 ec       	ldi	r24, 0xC1	; 193
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	21 ec       	ldi	r18, 0xC1	; 193
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	f9 01       	movw	r30, r18
     7aa:	20 81       	ld	r18, Z
     7ac:	2f 77       	andi	r18, 0x7F	; 127
     7ae:	fc 01       	movw	r30, r24
     7b0:	20 83       	st	Z, r18
     7b2:	8a 81       	ldd	r24, Y+2	; 0x02
     7b4:	9b 81       	ldd	r25, Y+3	; 0x03
     7b6:	8e 5f       	subi	r24, 0xFE	; 254
     7b8:	9d 4f       	sbci	r25, 0xFD	; 253
     7ba:	fc 01       	movw	r30, r24
     7bc:	80 81       	ld	r24, Z
     7be:	91 81       	ldd	r25, Z+1	; 0x01
     7c0:	9c 01       	movw	r18, r24
     7c2:	2f 5f       	subi	r18, 0xFF	; 255
     7c4:	3f 4f       	sbci	r19, 0xFF	; 255
     7c6:	8a 81       	ldd	r24, Y+2	; 0x02
     7c8:	9b 81       	ldd	r25, Y+3	; 0x03
     7ca:	9e 5f       	subi	r25, 0xFE	; 254
     7cc:	fc 01       	movw	r30, r24
     7ce:	80 81       	ld	r24, Z
     7d0:	91 81       	ldd	r25, Z+1	; 0x01
     7d2:	28 17       	cp	r18, r24
     7d4:	39 07       	cpc	r19, r25
     7d6:	91 f0       	breq	.+36     	; 0x7fc <buff_put+0x80>
     7d8:	8a 81       	ldd	r24, Y+2	; 0x02
     7da:	9b 81       	ldd	r25, Y+3	; 0x03
     7dc:	9e 5f       	subi	r25, 0xFE	; 254
     7de:	fc 01       	movw	r30, r24
     7e0:	80 81       	ld	r24, Z
     7e2:	91 81       	ldd	r25, Z+1	; 0x01
     7e4:	89 2b       	or	r24, r25
     7e6:	f1 f4       	brne	.+60     	; 0x824 <buff_put+0xa8>
     7e8:	8a 81       	ldd	r24, Y+2	; 0x02
     7ea:	9b 81       	ldd	r25, Y+3	; 0x03
     7ec:	8e 5f       	subi	r24, 0xFE	; 254
     7ee:	9d 4f       	sbci	r25, 0xFD	; 253
     7f0:	fc 01       	movw	r30, r24
     7f2:	80 81       	ld	r24, Z
     7f4:	91 81       	ldd	r25, Z+1	; 0x01
     7f6:	8f 3f       	cpi	r24, 0xFF	; 255
     7f8:	91 40       	sbci	r25, 0x01	; 1
     7fa:	a1 f4       	brne	.+40     	; 0x824 <buff_put+0xa8>
     7fc:	81 ec       	ldi	r24, 0xC1	; 193
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	21 ec       	ldi	r18, 0xC1	; 193
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	f9 01       	movw	r30, r18
     806:	20 81       	ld	r18, Z
     808:	20 62       	ori	r18, 0x20	; 32
     80a:	fc 01       	movw	r30, r24
     80c:	20 83       	st	Z, r18
     80e:	81 ec       	ldi	r24, 0xC1	; 193
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	21 ec       	ldi	r18, 0xC1	; 193
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	f9 01       	movw	r30, r18
     818:	20 81       	ld	r18, Z
     81a:	20 68       	ori	r18, 0x80	; 128
     81c:	fc 01       	movw	r30, r24
     81e:	20 83       	st	Z, r18
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	43 c0       	rjmp	.+134    	; 0x8aa <buff_put+0x12e>
     824:	8a 81       	ldd	r24, Y+2	; 0x02
     826:	9b 81       	ldd	r25, Y+3	; 0x03
     828:	8e 5f       	subi	r24, 0xFE	; 254
     82a:	9d 4f       	sbci	r25, 0xFD	; 253
     82c:	fc 01       	movw	r30, r24
     82e:	80 81       	ld	r24, Z
     830:	91 81       	ldd	r25, Z+1	; 0x01
     832:	2a 81       	ldd	r18, Y+2	; 0x02
     834:	3b 81       	ldd	r19, Y+3	; 0x03
     836:	82 0f       	add	r24, r18
     838:	93 1f       	adc	r25, r19
     83a:	29 81       	ldd	r18, Y+1	; 0x01
     83c:	fc 01       	movw	r30, r24
     83e:	20 83       	st	Z, r18
     840:	8a 81       	ldd	r24, Y+2	; 0x02
     842:	9b 81       	ldd	r25, Y+3	; 0x03
     844:	8e 5f       	subi	r24, 0xFE	; 254
     846:	9d 4f       	sbci	r25, 0xFD	; 253
     848:	fc 01       	movw	r30, r24
     84a:	80 81       	ld	r24, Z
     84c:	91 81       	ldd	r25, Z+1	; 0x01
     84e:	9c 01       	movw	r18, r24
     850:	2f 5f       	subi	r18, 0xFF	; 255
     852:	3f 4f       	sbci	r19, 0xFF	; 255
     854:	8a 81       	ldd	r24, Y+2	; 0x02
     856:	9b 81       	ldd	r25, Y+3	; 0x03
     858:	8e 5f       	subi	r24, 0xFE	; 254
     85a:	9d 4f       	sbci	r25, 0xFD	; 253
     85c:	fc 01       	movw	r30, r24
     85e:	31 83       	std	Z+1, r19	; 0x01
     860:	20 83       	st	Z, r18
     862:	8a 81       	ldd	r24, Y+2	; 0x02
     864:	9b 81       	ldd	r25, Y+3	; 0x03
     866:	8e 5f       	subi	r24, 0xFE	; 254
     868:	9d 4f       	sbci	r25, 0xFD	; 253
     86a:	fc 01       	movw	r30, r24
     86c:	80 81       	ld	r24, Z
     86e:	91 81       	ldd	r25, Z+1	; 0x01
     870:	81 15       	cp	r24, r1
     872:	92 40       	sbci	r25, 0x02	; 2
     874:	38 f0       	brcs	.+14     	; 0x884 <buff_put+0x108>
     876:	8a 81       	ldd	r24, Y+2	; 0x02
     878:	9b 81       	ldd	r25, Y+3	; 0x03
     87a:	8e 5f       	subi	r24, 0xFE	; 254
     87c:	9d 4f       	sbci	r25, 0xFD	; 253
     87e:	fc 01       	movw	r30, r24
     880:	11 82       	std	Z+1, r1	; 0x01
     882:	10 82       	st	Z, r1
     884:	81 ec       	ldi	r24, 0xC1	; 193
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	21 ec       	ldi	r18, 0xC1	; 193
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	f9 01       	movw	r30, r18
     88e:	20 81       	ld	r18, Z
     890:	20 62       	ori	r18, 0x20	; 32
     892:	fc 01       	movw	r30, r24
     894:	20 83       	st	Z, r18
     896:	81 ec       	ldi	r24, 0xC1	; 193
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	21 ec       	ldi	r18, 0xC1	; 193
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	f9 01       	movw	r30, r18
     8a0:	20 81       	ld	r18, Z
     8a2:	20 68       	ori	r18, 0x80	; 128
     8a4:	fc 01       	movw	r30, r24
     8a6:	20 83       	st	Z, r18
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	08 95       	ret

000008b6 <buff_get>:
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	00 d0       	rcall	.+0      	; 0x8bc <buff_get+0x6>
     8bc:	00 d0       	rcall	.+0      	; 0x8be <buff_get+0x8>
     8be:	cd b7       	in	r28, 0x3d	; 61
     8c0:	de b7       	in	r29, 0x3e	; 62
     8c2:	9a 83       	std	Y+2, r25	; 0x02
     8c4:	89 83       	std	Y+1, r24	; 0x01
     8c6:	7c 83       	std	Y+4, r23	; 0x04
     8c8:	6b 83       	std	Y+3, r22	; 0x03
     8ca:	81 ec       	ldi	r24, 0xC1	; 193
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	21 ec       	ldi	r18, 0xC1	; 193
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	f9 01       	movw	r30, r18
     8d4:	20 81       	ld	r18, Z
     8d6:	2f 7d       	andi	r18, 0xDF	; 223
     8d8:	fc 01       	movw	r30, r24
     8da:	20 83       	st	Z, r18
     8dc:	81 ec       	ldi	r24, 0xC1	; 193
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	21 ec       	ldi	r18, 0xC1	; 193
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	f9 01       	movw	r30, r18
     8e6:	20 81       	ld	r18, Z
     8e8:	2f 77       	andi	r18, 0x7F	; 127
     8ea:	fc 01       	movw	r30, r24
     8ec:	20 83       	st	Z, r18
     8ee:	8b 81       	ldd	r24, Y+3	; 0x03
     8f0:	9c 81       	ldd	r25, Y+4	; 0x04
     8f2:	9e 5f       	subi	r25, 0xFE	; 254
     8f4:	fc 01       	movw	r30, r24
     8f6:	20 81       	ld	r18, Z
     8f8:	31 81       	ldd	r19, Z+1	; 0x01
     8fa:	8b 81       	ldd	r24, Y+3	; 0x03
     8fc:	9c 81       	ldd	r25, Y+4	; 0x04
     8fe:	8e 5f       	subi	r24, 0xFE	; 254
     900:	9d 4f       	sbci	r25, 0xFD	; 253
     902:	fc 01       	movw	r30, r24
     904:	80 81       	ld	r24, Z
     906:	91 81       	ldd	r25, Z+1	; 0x01
     908:	28 17       	cp	r18, r24
     90a:	39 07       	cpc	r19, r25
     90c:	a1 f4       	brne	.+40     	; 0x936 <buff_get+0x80>
     90e:	81 ec       	ldi	r24, 0xC1	; 193
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	21 ec       	ldi	r18, 0xC1	; 193
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	f9 01       	movw	r30, r18
     918:	20 81       	ld	r18, Z
     91a:	20 62       	ori	r18, 0x20	; 32
     91c:	fc 01       	movw	r30, r24
     91e:	20 83       	st	Z, r18
     920:	81 ec       	ldi	r24, 0xC1	; 193
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	21 ec       	ldi	r18, 0xC1	; 193
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	f9 01       	movw	r30, r18
     92a:	20 81       	ld	r18, Z
     92c:	20 68       	ori	r18, 0x80	; 128
     92e:	fc 01       	movw	r30, r24
     930:	20 83       	st	Z, r18
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	41 c0       	rjmp	.+130    	; 0x9b8 <buff_get+0x102>
     936:	8b 81       	ldd	r24, Y+3	; 0x03
     938:	9c 81       	ldd	r25, Y+4	; 0x04
     93a:	9e 5f       	subi	r25, 0xFE	; 254
     93c:	fc 01       	movw	r30, r24
     93e:	80 81       	ld	r24, Z
     940:	91 81       	ldd	r25, Z+1	; 0x01
     942:	2b 81       	ldd	r18, Y+3	; 0x03
     944:	3c 81       	ldd	r19, Y+4	; 0x04
     946:	82 0f       	add	r24, r18
     948:	93 1f       	adc	r25, r19
     94a:	fc 01       	movw	r30, r24
     94c:	20 81       	ld	r18, Z
     94e:	89 81       	ldd	r24, Y+1	; 0x01
     950:	9a 81       	ldd	r25, Y+2	; 0x02
     952:	fc 01       	movw	r30, r24
     954:	20 83       	st	Z, r18
     956:	8b 81       	ldd	r24, Y+3	; 0x03
     958:	9c 81       	ldd	r25, Y+4	; 0x04
     95a:	9e 5f       	subi	r25, 0xFE	; 254
     95c:	fc 01       	movw	r30, r24
     95e:	80 81       	ld	r24, Z
     960:	91 81       	ldd	r25, Z+1	; 0x01
     962:	9c 01       	movw	r18, r24
     964:	2f 5f       	subi	r18, 0xFF	; 255
     966:	3f 4f       	sbci	r19, 0xFF	; 255
     968:	8b 81       	ldd	r24, Y+3	; 0x03
     96a:	9c 81       	ldd	r25, Y+4	; 0x04
     96c:	9e 5f       	subi	r25, 0xFE	; 254
     96e:	fc 01       	movw	r30, r24
     970:	31 83       	std	Z+1, r19	; 0x01
     972:	20 83       	st	Z, r18
     974:	8b 81       	ldd	r24, Y+3	; 0x03
     976:	9c 81       	ldd	r25, Y+4	; 0x04
     978:	9e 5f       	subi	r25, 0xFE	; 254
     97a:	fc 01       	movw	r30, r24
     97c:	80 81       	ld	r24, Z
     97e:	91 81       	ldd	r25, Z+1	; 0x01
     980:	81 15       	cp	r24, r1
     982:	92 40       	sbci	r25, 0x02	; 2
     984:	30 f0       	brcs	.+12     	; 0x992 <buff_get+0xdc>
     986:	8b 81       	ldd	r24, Y+3	; 0x03
     988:	9c 81       	ldd	r25, Y+4	; 0x04
     98a:	9e 5f       	subi	r25, 0xFE	; 254
     98c:	fc 01       	movw	r30, r24
     98e:	11 82       	std	Z+1, r1	; 0x01
     990:	10 82       	st	Z, r1
     992:	81 ec       	ldi	r24, 0xC1	; 193
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	21 ec       	ldi	r18, 0xC1	; 193
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	f9 01       	movw	r30, r18
     99c:	20 81       	ld	r18, Z
     99e:	20 62       	ori	r18, 0x20	; 32
     9a0:	fc 01       	movw	r30, r24
     9a2:	20 83       	st	Z, r18
     9a4:	81 ec       	ldi	r24, 0xC1	; 193
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	21 ec       	ldi	r18, 0xC1	; 193
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	f9 01       	movw	r30, r18
     9ae:	20 81       	ld	r18, Z
     9b0:	20 68       	ori	r18, 0x80	; 128
     9b2:	fc 01       	movw	r30, r24
     9b4:	20 83       	st	Z, r18
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	08 95       	ret

000009c6 <uart_init>:
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	00 d0       	rcall	.+0      	; 0x9cc <uart_init+0x6>
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
     9d0:	87 e6       	ldi	r24, 0x67	; 103
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	9a 83       	std	Y+2, r25	; 0x02
     9d6:	89 83       	std	Y+1, r24	; 0x01
     9d8:	85 ec       	ldi	r24, 0xC5	; 197
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	29 81       	ldd	r18, Y+1	; 0x01
     9de:	3a 81       	ldd	r19, Y+2	; 0x02
     9e0:	23 2f       	mov	r18, r19
     9e2:	33 27       	eor	r19, r19
     9e4:	fc 01       	movw	r30, r24
     9e6:	20 83       	st	Z, r18
     9e8:	84 ec       	ldi	r24, 0xC4	; 196
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	29 81       	ldd	r18, Y+1	; 0x01
     9ee:	fc 01       	movw	r30, r24
     9f0:	20 83       	st	Z, r18
     9f2:	81 ec       	ldi	r24, 0xC1	; 193
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	28 e1       	ldi	r18, 0x18	; 24
     9f8:	fc 01       	movw	r30, r24
     9fa:	20 83       	st	Z, r18
     9fc:	82 ec       	ldi	r24, 0xC2	; 194
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	26 e0       	ldi	r18, 0x06	; 6
     a02:	fc 01       	movw	r30, r24
     a04:	20 83       	st	Z, r18
     a06:	00 00       	nop
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	08 95       	ret

00000a12 <uart_init_isr>:
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
     a1a:	d5 df       	rcall	.-86     	; 0x9c6 <uart_init>
     a1c:	81 ec       	ldi	r24, 0xC1	; 193
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	21 ec       	ldi	r18, 0xC1	; 193
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	f9 01       	movw	r30, r18
     a26:	20 81       	ld	r18, Z
     a28:	20 62       	ori	r18, 0x20	; 32
     a2a:	fc 01       	movw	r30, r24
     a2c:	20 83       	st	Z, r18
     a2e:	81 ec       	ldi	r24, 0xC1	; 193
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	21 ec       	ldi	r18, 0xC1	; 193
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	f9 01       	movw	r30, r18
     a38:	20 81       	ld	r18, Z
     a3a:	20 68       	ori	r18, 0x80	; 128
     a3c:	fc 01       	movw	r30, r24
     a3e:	20 83       	st	Z, r18
     a40:	00 00       	nop
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	08 95       	ret

00000a48 <uart_send_isr>:
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	00 d0       	rcall	.+0      	; 0xa4e <uart_send_isr+0x6>
     a4e:	00 d0       	rcall	.+0      	; 0xa50 <uart_send_isr+0x8>
     a50:	00 d0       	rcall	.+0      	; 0xa52 <uart_send_isr+0xa>
     a52:	cd b7       	in	r28, 0x3d	; 61
     a54:	de b7       	in	r29, 0x3e	; 62
     a56:	9e 83       	std	Y+6, r25	; 0x06
     a58:	8d 83       	std	Y+5, r24	; 0x05
     a5a:	8d 81       	ldd	r24, Y+5	; 0x05
     a5c:	9e 81       	ldd	r25, Y+6	; 0x06
     a5e:	c4 d0       	rcall	.+392    	; 0xbe8 <strlen>
     a60:	9c 83       	std	Y+4, r25	; 0x04
     a62:	8b 83       	std	Y+3, r24	; 0x03
     a64:	1a 82       	std	Y+2, r1	; 0x02
     a66:	19 82       	std	Y+1, r1	; 0x01
     a68:	23 c0       	rjmp	.+70     	; 0xab0 <uart_send_isr+0x68>
     a6a:	89 81       	ldd	r24, Y+1	; 0x01
     a6c:	9a 81       	ldd	r25, Y+2	; 0x02
     a6e:	2d 81       	ldd	r18, Y+5	; 0x05
     a70:	3e 81       	ldd	r19, Y+6	; 0x06
     a72:	82 0f       	add	r24, r18
     a74:	93 1f       	adc	r25, r19
     a76:	fc 01       	movw	r30, r24
     a78:	80 81       	ld	r24, Z
     a7a:	6e e3       	ldi	r22, 0x3E	; 62
     a7c:	71 e0       	ldi	r23, 0x01	; 1
     a7e:	7e de       	rcall	.-772    	; 0x77c <buff_put>
     a80:	81 30       	cpi	r24, 0x01	; 1
     a82:	89 f4       	brne	.+34     	; 0xaa6 <uart_send_isr+0x5e>
     a84:	80 ec       	ldi	r24, 0xC0	; 192
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	20 ec       	ldi	r18, 0xC0	; 192
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	f9 01       	movw	r30, r18
     a8e:	20 81       	ld	r18, Z
     a90:	20 62       	ori	r18, 0x20	; 32
     a92:	fc 01       	movw	r30, r24
     a94:	20 83       	st	Z, r18
     a96:	89 81       	ldd	r24, Y+1	; 0x01
     a98:	9a 81       	ldd	r25, Y+2	; 0x02
     a9a:	9c 01       	movw	r18, r24
     a9c:	2f 5f       	subi	r18, 0xFF	; 255
     a9e:	3f 4f       	sbci	r19, 0xFF	; 255
     aa0:	3a 83       	std	Y+2, r19	; 0x02
     aa2:	29 83       	std	Y+1, r18	; 0x01
     aa4:	17 c0       	rjmp	.+46     	; 0xad4 <uart_send_isr+0x8c>
     aa6:	89 81       	ldd	r24, Y+1	; 0x01
     aa8:	9a 81       	ldd	r25, Y+2	; 0x02
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	9a 83       	std	Y+2, r25	; 0x02
     aae:	89 83       	std	Y+1, r24	; 0x01
     ab0:	29 81       	ldd	r18, Y+1	; 0x01
     ab2:	3a 81       	ldd	r19, Y+2	; 0x02
     ab4:	8b 81       	ldd	r24, Y+3	; 0x03
     ab6:	9c 81       	ldd	r25, Y+4	; 0x04
     ab8:	28 17       	cp	r18, r24
     aba:	39 07       	cpc	r19, r25
     abc:	b4 f2       	brlt	.-84     	; 0xa6a <uart_send_isr+0x22>
     abe:	80 ec       	ldi	r24, 0xC0	; 192
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	20 ec       	ldi	r18, 0xC0	; 192
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	f9 01       	movw	r30, r18
     ac8:	20 81       	ld	r18, Z
     aca:	20 62       	ori	r18, 0x20	; 32
     acc:	fc 01       	movw	r30, r24
     ace:	20 83       	st	Z, r18
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	26 96       	adiw	r28, 0x06	; 6
     ad6:	0f b6       	in	r0, 0x3f	; 63
     ad8:	f8 94       	cli
     ada:	de bf       	out	0x3e, r29	; 62
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	cd bf       	out	0x3d, r28	; 61
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	08 95       	ret

00000ae6 <__vector_21>:

/**
 ISR for USART Data Register Empty flag
 */
ISR(USART0_UDRE_vect){
     ae6:	1f 92       	push	r1
     ae8:	0f 92       	push	r0
     aea:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     aee:	0f 92       	push	r0
     af0:	11 24       	eor	r1, r1
     af2:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     af6:	0f 92       	push	r0
     af8:	2f 93       	push	r18
     afa:	3f 93       	push	r19
     afc:	4f 93       	push	r20
     afe:	5f 93       	push	r21
     b00:	6f 93       	push	r22
     b02:	7f 93       	push	r23
     b04:	8f 93       	push	r24
     b06:	9f 93       	push	r25
     b08:	af 93       	push	r26
     b0a:	bf 93       	push	r27
     b0c:	ef 93       	push	r30
     b0e:	ff 93       	push	r31
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	1f 92       	push	r1
     b16:	cd b7       	in	r28, 0x3d	; 61
     b18:	de b7       	in	r29, 0x3e	; 62
    unsigned char pByte;
    // Pull one byte from buffer and store it in pByte
    if (buff_get(&pByte, &bufferSend) == 0) {
     b1a:	6e e3       	ldi	r22, 0x3E	; 62
     b1c:	71 e0       	ldi	r23, 0x01	; 1
     b1e:	ce 01       	movw	r24, r28
     b20:	01 96       	adiw	r24, 0x01	; 1
     b22:	c9 de       	rcall	.-622    	; 0x8b6 <buff_get>
     b24:	88 23       	and	r24, r24
     b26:	31 f4       	brne	.+12     	; 0xb34 <__vector_21+0x4e>
        // Send byte
        UDR0 = pByte;
     b28:	86 ec       	ldi	r24, 0xC6	; 198
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	29 81       	ldd	r18, Y+1	; 0x01
     b2e:	fc 01       	movw	r30, r24
     b30:	20 83       	st	Z, r18
    }else {
        // Buffer empty: disable interrupt
        UCSR0A &= ~(1 << UDRE0);
    }
}
     b32:	09 c0       	rjmp	.+18     	; 0xb46 <__vector_21+0x60>
    if (buff_get(&pByte, &bufferSend) == 0) {
        // Send byte
        UDR0 = pByte;
    }else {
        // Buffer empty: disable interrupt
        UCSR0A &= ~(1 << UDRE0);
     b34:	80 ec       	ldi	r24, 0xC0	; 192
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	20 ec       	ldi	r18, 0xC0	; 192
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	f9 01       	movw	r30, r18
     b3e:	20 81       	ld	r18, Z
     b40:	2f 7d       	andi	r18, 0xDF	; 223
     b42:	fc 01       	movw	r30, r24
     b44:	20 83       	st	Z, r18
    }
}
     b46:	00 00       	nop
     b48:	0f 90       	pop	r0
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	ff 91       	pop	r31
     b50:	ef 91       	pop	r30
     b52:	bf 91       	pop	r27
     b54:	af 91       	pop	r26
     b56:	9f 91       	pop	r25
     b58:	8f 91       	pop	r24
     b5a:	7f 91       	pop	r23
     b5c:	6f 91       	pop	r22
     b5e:	5f 91       	pop	r21
     b60:	4f 91       	pop	r20
     b62:	3f 91       	pop	r19
     b64:	2f 91       	pop	r18
     b66:	0f 90       	pop	r0
     b68:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     b6c:	0f 90       	pop	r0
     b6e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b72:	0f 90       	pop	r0
     b74:	1f 90       	pop	r1
     b76:	18 95       	reti

00000b78 <__vector_20>:

ISR(USART0_RX_vect){
     b78:	1f 92       	push	r1
     b7a:	0f 92       	push	r0
     b7c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b80:	0f 92       	push	r0
     b82:	11 24       	eor	r1, r1
     b84:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     b88:	0f 92       	push	r0
     b8a:	2f 93       	push	r18
     b8c:	3f 93       	push	r19
     b8e:	4f 93       	push	r20
     b90:	5f 93       	push	r21
     b92:	6f 93       	push	r22
     b94:	7f 93       	push	r23
     b96:	8f 93       	push	r24
     b98:	9f 93       	push	r25
     b9a:	af 93       	push	r26
     b9c:	bf 93       	push	r27
     b9e:	ef 93       	push	r30
     ba0:	ff 93       	push	r31
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
    // Put received byte to bufferRecv (will read but don't save the value if buffer overflows)
    buff_put(UDR0, &bufferRecv);
     baa:	86 ec       	ldi	r24, 0xC6	; 198
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	fc 01       	movw	r30, r24
     bb0:	80 81       	ld	r24, Z
     bb2:	62 e4       	ldi	r22, 0x42	; 66
     bb4:	73 e0       	ldi	r23, 0x03	; 3
     bb6:	e2 dd       	rcall	.-1084   	; 0x77c <buff_put>
}
     bb8:	00 00       	nop
     bba:	df 91       	pop	r29
     bbc:	cf 91       	pop	r28
     bbe:	ff 91       	pop	r31
     bc0:	ef 91       	pop	r30
     bc2:	bf 91       	pop	r27
     bc4:	af 91       	pop	r26
     bc6:	9f 91       	pop	r25
     bc8:	8f 91       	pop	r24
     bca:	7f 91       	pop	r23
     bcc:	6f 91       	pop	r22
     bce:	5f 91       	pop	r21
     bd0:	4f 91       	pop	r20
     bd2:	3f 91       	pop	r19
     bd4:	2f 91       	pop	r18
     bd6:	0f 90       	pop	r0
     bd8:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     bdc:	0f 90       	pop	r0
     bde:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     be2:	0f 90       	pop	r0
     be4:	1f 90       	pop	r1
     be6:	18 95       	reti

00000be8 <strlen>:
     be8:	fc 01       	movw	r30, r24
     bea:	01 90       	ld	r0, Z+
     bec:	00 20       	and	r0, r0
     bee:	e9 f7       	brne	.-6      	; 0xbea <strlen+0x2>
     bf0:	80 95       	com	r24
     bf2:	90 95       	com	r25
     bf4:	8e 0f       	add	r24, r30
     bf6:	9f 1f       	adc	r25, r31
     bf8:	08 95       	ret

00000bfa <sprintf>:
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	2e 97       	sbiw	r28, 0x0e	; 14
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	f8 94       	cli
     c0c:	de bf       	out	0x3e, r29	; 62
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	cd bf       	out	0x3d, r28	; 61
     c12:	0d 89       	ldd	r16, Y+21	; 0x15
     c14:	1e 89       	ldd	r17, Y+22	; 0x16
     c16:	86 e0       	ldi	r24, 0x06	; 6
     c18:	8c 83       	std	Y+4, r24	; 0x04
     c1a:	1a 83       	std	Y+2, r17	; 0x02
     c1c:	09 83       	std	Y+1, r16	; 0x01
     c1e:	8f ef       	ldi	r24, 0xFF	; 255
     c20:	9f e7       	ldi	r25, 0x7F	; 127
     c22:	9e 83       	std	Y+6, r25	; 0x06
     c24:	8d 83       	std	Y+5, r24	; 0x05
     c26:	ae 01       	movw	r20, r28
     c28:	47 5e       	subi	r20, 0xE7	; 231
     c2a:	5f 4f       	sbci	r21, 0xFF	; 255
     c2c:	6f 89       	ldd	r22, Y+23	; 0x17
     c2e:	78 8d       	ldd	r23, Y+24	; 0x18
     c30:	ce 01       	movw	r24, r28
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	10 d0       	rcall	.+32     	; 0xc56 <vfprintf>
     c36:	ef 81       	ldd	r30, Y+7	; 0x07
     c38:	f8 85       	ldd	r31, Y+8	; 0x08
     c3a:	e0 0f       	add	r30, r16
     c3c:	f1 1f       	adc	r31, r17
     c3e:	10 82       	st	Z, r1
     c40:	2e 96       	adiw	r28, 0x0e	; 14
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	f8 94       	cli
     c46:	de bf       	out	0x3e, r29	; 62
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	cd bf       	out	0x3d, r28	; 61
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	08 95       	ret

00000c56 <vfprintf>:
     c56:	2f 92       	push	r2
     c58:	3f 92       	push	r3
     c5a:	4f 92       	push	r4
     c5c:	5f 92       	push	r5
     c5e:	6f 92       	push	r6
     c60:	7f 92       	push	r7
     c62:	8f 92       	push	r8
     c64:	9f 92       	push	r9
     c66:	af 92       	push	r10
     c68:	bf 92       	push	r11
     c6a:	cf 92       	push	r12
     c6c:	df 92       	push	r13
     c6e:	ef 92       	push	r14
     c70:	ff 92       	push	r15
     c72:	0f 93       	push	r16
     c74:	1f 93       	push	r17
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62
     c7e:	2b 97       	sbiw	r28, 0x0b	; 11
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	f8 94       	cli
     c84:	de bf       	out	0x3e, r29	; 62
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	cd bf       	out	0x3d, r28	; 61
     c8a:	6c 01       	movw	r12, r24
     c8c:	7b 01       	movw	r14, r22
     c8e:	8a 01       	movw	r16, r20
     c90:	fc 01       	movw	r30, r24
     c92:	17 82       	std	Z+7, r1	; 0x07
     c94:	16 82       	std	Z+6, r1	; 0x06
     c96:	83 81       	ldd	r24, Z+3	; 0x03
     c98:	81 ff       	sbrs	r24, 1
     c9a:	bf c1       	rjmp	.+894    	; 0x101a <vfprintf+0x3c4>
     c9c:	ce 01       	movw	r24, r28
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	3c 01       	movw	r6, r24
     ca2:	f6 01       	movw	r30, r12
     ca4:	93 81       	ldd	r25, Z+3	; 0x03
     ca6:	f7 01       	movw	r30, r14
     ca8:	93 fd       	sbrc	r25, 3
     caa:	85 91       	lpm	r24, Z+
     cac:	93 ff       	sbrs	r25, 3
     cae:	81 91       	ld	r24, Z+
     cb0:	7f 01       	movw	r14, r30
     cb2:	88 23       	and	r24, r24
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <vfprintf+0x62>
     cb6:	ad c1       	rjmp	.+858    	; 0x1012 <vfprintf+0x3bc>
     cb8:	85 32       	cpi	r24, 0x25	; 37
     cba:	39 f4       	brne	.+14     	; 0xcca <vfprintf+0x74>
     cbc:	93 fd       	sbrc	r25, 3
     cbe:	85 91       	lpm	r24, Z+
     cc0:	93 ff       	sbrs	r25, 3
     cc2:	81 91       	ld	r24, Z+
     cc4:	7f 01       	movw	r14, r30
     cc6:	85 32       	cpi	r24, 0x25	; 37
     cc8:	21 f4       	brne	.+8      	; 0xcd2 <vfprintf+0x7c>
     cca:	b6 01       	movw	r22, r12
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	d6 d1       	rcall	.+940    	; 0x107c <fputc>
     cd0:	e8 cf       	rjmp	.-48     	; 0xca2 <vfprintf+0x4c>
     cd2:	91 2c       	mov	r9, r1
     cd4:	21 2c       	mov	r2, r1
     cd6:	31 2c       	mov	r3, r1
     cd8:	ff e1       	ldi	r31, 0x1F	; 31
     cda:	f3 15       	cp	r31, r3
     cdc:	d8 f0       	brcs	.+54     	; 0xd14 <vfprintf+0xbe>
     cde:	8b 32       	cpi	r24, 0x2B	; 43
     ce0:	79 f0       	breq	.+30     	; 0xd00 <vfprintf+0xaa>
     ce2:	38 f4       	brcc	.+14     	; 0xcf2 <vfprintf+0x9c>
     ce4:	80 32       	cpi	r24, 0x20	; 32
     ce6:	79 f0       	breq	.+30     	; 0xd06 <vfprintf+0xb0>
     ce8:	83 32       	cpi	r24, 0x23	; 35
     cea:	a1 f4       	brne	.+40     	; 0xd14 <vfprintf+0xbe>
     cec:	23 2d       	mov	r18, r3
     cee:	20 61       	ori	r18, 0x10	; 16
     cf0:	1d c0       	rjmp	.+58     	; 0xd2c <vfprintf+0xd6>
     cf2:	8d 32       	cpi	r24, 0x2D	; 45
     cf4:	61 f0       	breq	.+24     	; 0xd0e <vfprintf+0xb8>
     cf6:	80 33       	cpi	r24, 0x30	; 48
     cf8:	69 f4       	brne	.+26     	; 0xd14 <vfprintf+0xbe>
     cfa:	23 2d       	mov	r18, r3
     cfc:	21 60       	ori	r18, 0x01	; 1
     cfe:	16 c0       	rjmp	.+44     	; 0xd2c <vfprintf+0xd6>
     d00:	83 2d       	mov	r24, r3
     d02:	82 60       	ori	r24, 0x02	; 2
     d04:	38 2e       	mov	r3, r24
     d06:	e3 2d       	mov	r30, r3
     d08:	e4 60       	ori	r30, 0x04	; 4
     d0a:	3e 2e       	mov	r3, r30
     d0c:	2a c0       	rjmp	.+84     	; 0xd62 <vfprintf+0x10c>
     d0e:	f3 2d       	mov	r31, r3
     d10:	f8 60       	ori	r31, 0x08	; 8
     d12:	1d c0       	rjmp	.+58     	; 0xd4e <vfprintf+0xf8>
     d14:	37 fc       	sbrc	r3, 7
     d16:	2d c0       	rjmp	.+90     	; 0xd72 <vfprintf+0x11c>
     d18:	20 ed       	ldi	r18, 0xD0	; 208
     d1a:	28 0f       	add	r18, r24
     d1c:	2a 30       	cpi	r18, 0x0A	; 10
     d1e:	40 f0       	brcs	.+16     	; 0xd30 <vfprintf+0xda>
     d20:	8e 32       	cpi	r24, 0x2E	; 46
     d22:	b9 f4       	brne	.+46     	; 0xd52 <vfprintf+0xfc>
     d24:	36 fc       	sbrc	r3, 6
     d26:	75 c1       	rjmp	.+746    	; 0x1012 <vfprintf+0x3bc>
     d28:	23 2d       	mov	r18, r3
     d2a:	20 64       	ori	r18, 0x40	; 64
     d2c:	32 2e       	mov	r3, r18
     d2e:	19 c0       	rjmp	.+50     	; 0xd62 <vfprintf+0x10c>
     d30:	36 fe       	sbrs	r3, 6
     d32:	06 c0       	rjmp	.+12     	; 0xd40 <vfprintf+0xea>
     d34:	8a e0       	ldi	r24, 0x0A	; 10
     d36:	98 9e       	mul	r9, r24
     d38:	20 0d       	add	r18, r0
     d3a:	11 24       	eor	r1, r1
     d3c:	92 2e       	mov	r9, r18
     d3e:	11 c0       	rjmp	.+34     	; 0xd62 <vfprintf+0x10c>
     d40:	ea e0       	ldi	r30, 0x0A	; 10
     d42:	2e 9e       	mul	r2, r30
     d44:	20 0d       	add	r18, r0
     d46:	11 24       	eor	r1, r1
     d48:	22 2e       	mov	r2, r18
     d4a:	f3 2d       	mov	r31, r3
     d4c:	f0 62       	ori	r31, 0x20	; 32
     d4e:	3f 2e       	mov	r3, r31
     d50:	08 c0       	rjmp	.+16     	; 0xd62 <vfprintf+0x10c>
     d52:	8c 36       	cpi	r24, 0x6C	; 108
     d54:	21 f4       	brne	.+8      	; 0xd5e <vfprintf+0x108>
     d56:	83 2d       	mov	r24, r3
     d58:	80 68       	ori	r24, 0x80	; 128
     d5a:	38 2e       	mov	r3, r24
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <vfprintf+0x10c>
     d5e:	88 36       	cpi	r24, 0x68	; 104
     d60:	41 f4       	brne	.+16     	; 0xd72 <vfprintf+0x11c>
     d62:	f7 01       	movw	r30, r14
     d64:	93 fd       	sbrc	r25, 3
     d66:	85 91       	lpm	r24, Z+
     d68:	93 ff       	sbrs	r25, 3
     d6a:	81 91       	ld	r24, Z+
     d6c:	7f 01       	movw	r14, r30
     d6e:	81 11       	cpse	r24, r1
     d70:	b3 cf       	rjmp	.-154    	; 0xcd8 <vfprintf+0x82>
     d72:	98 2f       	mov	r25, r24
     d74:	9f 7d       	andi	r25, 0xDF	; 223
     d76:	95 54       	subi	r25, 0x45	; 69
     d78:	93 30       	cpi	r25, 0x03	; 3
     d7a:	28 f4       	brcc	.+10     	; 0xd86 <vfprintf+0x130>
     d7c:	0c 5f       	subi	r16, 0xFC	; 252
     d7e:	1f 4f       	sbci	r17, 0xFF	; 255
     d80:	9f e3       	ldi	r25, 0x3F	; 63
     d82:	99 83       	std	Y+1, r25	; 0x01
     d84:	0d c0       	rjmp	.+26     	; 0xda0 <vfprintf+0x14a>
     d86:	83 36       	cpi	r24, 0x63	; 99
     d88:	31 f0       	breq	.+12     	; 0xd96 <vfprintf+0x140>
     d8a:	83 37       	cpi	r24, 0x73	; 115
     d8c:	71 f0       	breq	.+28     	; 0xdaa <vfprintf+0x154>
     d8e:	83 35       	cpi	r24, 0x53	; 83
     d90:	09 f0       	breq	.+2      	; 0xd94 <vfprintf+0x13e>
     d92:	55 c0       	rjmp	.+170    	; 0xe3e <vfprintf+0x1e8>
     d94:	20 c0       	rjmp	.+64     	; 0xdd6 <vfprintf+0x180>
     d96:	f8 01       	movw	r30, r16
     d98:	80 81       	ld	r24, Z
     d9a:	89 83       	std	Y+1, r24	; 0x01
     d9c:	0e 5f       	subi	r16, 0xFE	; 254
     d9e:	1f 4f       	sbci	r17, 0xFF	; 255
     da0:	88 24       	eor	r8, r8
     da2:	83 94       	inc	r8
     da4:	91 2c       	mov	r9, r1
     da6:	53 01       	movw	r10, r6
     da8:	12 c0       	rjmp	.+36     	; 0xdce <vfprintf+0x178>
     daa:	28 01       	movw	r4, r16
     dac:	f2 e0       	ldi	r31, 0x02	; 2
     dae:	4f 0e       	add	r4, r31
     db0:	51 1c       	adc	r5, r1
     db2:	f8 01       	movw	r30, r16
     db4:	a0 80       	ld	r10, Z
     db6:	b1 80       	ldd	r11, Z+1	; 0x01
     db8:	36 fe       	sbrs	r3, 6
     dba:	03 c0       	rjmp	.+6      	; 0xdc2 <vfprintf+0x16c>
     dbc:	69 2d       	mov	r22, r9
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <vfprintf+0x170>
     dc2:	6f ef       	ldi	r22, 0xFF	; 255
     dc4:	7f ef       	ldi	r23, 0xFF	; 255
     dc6:	c5 01       	movw	r24, r10
     dc8:	4e d1       	rcall	.+668    	; 0x1066 <strnlen>
     dca:	4c 01       	movw	r8, r24
     dcc:	82 01       	movw	r16, r4
     dce:	f3 2d       	mov	r31, r3
     dd0:	ff 77       	andi	r31, 0x7F	; 127
     dd2:	3f 2e       	mov	r3, r31
     dd4:	15 c0       	rjmp	.+42     	; 0xe00 <vfprintf+0x1aa>
     dd6:	28 01       	movw	r4, r16
     dd8:	22 e0       	ldi	r18, 0x02	; 2
     dda:	42 0e       	add	r4, r18
     ddc:	51 1c       	adc	r5, r1
     dde:	f8 01       	movw	r30, r16
     de0:	a0 80       	ld	r10, Z
     de2:	b1 80       	ldd	r11, Z+1	; 0x01
     de4:	36 fe       	sbrs	r3, 6
     de6:	03 c0       	rjmp	.+6      	; 0xdee <vfprintf+0x198>
     de8:	69 2d       	mov	r22, r9
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <vfprintf+0x19c>
     dee:	6f ef       	ldi	r22, 0xFF	; 255
     df0:	7f ef       	ldi	r23, 0xFF	; 255
     df2:	c5 01       	movw	r24, r10
     df4:	2d d1       	rcall	.+602    	; 0x1050 <strnlen_P>
     df6:	4c 01       	movw	r8, r24
     df8:	f3 2d       	mov	r31, r3
     dfa:	f0 68       	ori	r31, 0x80	; 128
     dfc:	3f 2e       	mov	r3, r31
     dfe:	82 01       	movw	r16, r4
     e00:	33 fc       	sbrc	r3, 3
     e02:	19 c0       	rjmp	.+50     	; 0xe36 <vfprintf+0x1e0>
     e04:	82 2d       	mov	r24, r2
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	88 16       	cp	r8, r24
     e0a:	99 06       	cpc	r9, r25
     e0c:	a0 f4       	brcc	.+40     	; 0xe36 <vfprintf+0x1e0>
     e0e:	b6 01       	movw	r22, r12
     e10:	80 e2       	ldi	r24, 0x20	; 32
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	33 d1       	rcall	.+614    	; 0x107c <fputc>
     e16:	2a 94       	dec	r2
     e18:	f5 cf       	rjmp	.-22     	; 0xe04 <vfprintf+0x1ae>
     e1a:	f5 01       	movw	r30, r10
     e1c:	37 fc       	sbrc	r3, 7
     e1e:	85 91       	lpm	r24, Z+
     e20:	37 fe       	sbrs	r3, 7
     e22:	81 91       	ld	r24, Z+
     e24:	5f 01       	movw	r10, r30
     e26:	b6 01       	movw	r22, r12
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	28 d1       	rcall	.+592    	; 0x107c <fputc>
     e2c:	21 10       	cpse	r2, r1
     e2e:	2a 94       	dec	r2
     e30:	21 e0       	ldi	r18, 0x01	; 1
     e32:	82 1a       	sub	r8, r18
     e34:	91 08       	sbc	r9, r1
     e36:	81 14       	cp	r8, r1
     e38:	91 04       	cpc	r9, r1
     e3a:	79 f7       	brne	.-34     	; 0xe1a <vfprintf+0x1c4>
     e3c:	e1 c0       	rjmp	.+450    	; 0x1000 <vfprintf+0x3aa>
     e3e:	84 36       	cpi	r24, 0x64	; 100
     e40:	11 f0       	breq	.+4      	; 0xe46 <vfprintf+0x1f0>
     e42:	89 36       	cpi	r24, 0x69	; 105
     e44:	39 f5       	brne	.+78     	; 0xe94 <vfprintf+0x23e>
     e46:	f8 01       	movw	r30, r16
     e48:	37 fe       	sbrs	r3, 7
     e4a:	07 c0       	rjmp	.+14     	; 0xe5a <vfprintf+0x204>
     e4c:	60 81       	ld	r22, Z
     e4e:	71 81       	ldd	r23, Z+1	; 0x01
     e50:	82 81       	ldd	r24, Z+2	; 0x02
     e52:	93 81       	ldd	r25, Z+3	; 0x03
     e54:	0c 5f       	subi	r16, 0xFC	; 252
     e56:	1f 4f       	sbci	r17, 0xFF	; 255
     e58:	08 c0       	rjmp	.+16     	; 0xe6a <vfprintf+0x214>
     e5a:	60 81       	ld	r22, Z
     e5c:	71 81       	ldd	r23, Z+1	; 0x01
     e5e:	07 2e       	mov	r0, r23
     e60:	00 0c       	add	r0, r0
     e62:	88 0b       	sbc	r24, r24
     e64:	99 0b       	sbc	r25, r25
     e66:	0e 5f       	subi	r16, 0xFE	; 254
     e68:	1f 4f       	sbci	r17, 0xFF	; 255
     e6a:	f3 2d       	mov	r31, r3
     e6c:	ff 76       	andi	r31, 0x6F	; 111
     e6e:	3f 2e       	mov	r3, r31
     e70:	97 ff       	sbrs	r25, 7
     e72:	09 c0       	rjmp	.+18     	; 0xe86 <vfprintf+0x230>
     e74:	90 95       	com	r25
     e76:	80 95       	com	r24
     e78:	70 95       	com	r23
     e7a:	61 95       	neg	r22
     e7c:	7f 4f       	sbci	r23, 0xFF	; 255
     e7e:	8f 4f       	sbci	r24, 0xFF	; 255
     e80:	9f 4f       	sbci	r25, 0xFF	; 255
     e82:	f0 68       	ori	r31, 0x80	; 128
     e84:	3f 2e       	mov	r3, r31
     e86:	2a e0       	ldi	r18, 0x0A	; 10
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	a3 01       	movw	r20, r6
     e8c:	33 d1       	rcall	.+614    	; 0x10f4 <__ultoa_invert>
     e8e:	88 2e       	mov	r8, r24
     e90:	86 18       	sub	r8, r6
     e92:	44 c0       	rjmp	.+136    	; 0xf1c <vfprintf+0x2c6>
     e94:	85 37       	cpi	r24, 0x75	; 117
     e96:	31 f4       	brne	.+12     	; 0xea4 <vfprintf+0x24e>
     e98:	23 2d       	mov	r18, r3
     e9a:	2f 7e       	andi	r18, 0xEF	; 239
     e9c:	b2 2e       	mov	r11, r18
     e9e:	2a e0       	ldi	r18, 0x0A	; 10
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	25 c0       	rjmp	.+74     	; 0xeee <vfprintf+0x298>
     ea4:	93 2d       	mov	r25, r3
     ea6:	99 7f       	andi	r25, 0xF9	; 249
     ea8:	b9 2e       	mov	r11, r25
     eaa:	8f 36       	cpi	r24, 0x6F	; 111
     eac:	c1 f0       	breq	.+48     	; 0xede <vfprintf+0x288>
     eae:	18 f4       	brcc	.+6      	; 0xeb6 <vfprintf+0x260>
     eb0:	88 35       	cpi	r24, 0x58	; 88
     eb2:	79 f0       	breq	.+30     	; 0xed2 <vfprintf+0x27c>
     eb4:	ae c0       	rjmp	.+348    	; 0x1012 <vfprintf+0x3bc>
     eb6:	80 37       	cpi	r24, 0x70	; 112
     eb8:	19 f0       	breq	.+6      	; 0xec0 <vfprintf+0x26a>
     eba:	88 37       	cpi	r24, 0x78	; 120
     ebc:	21 f0       	breq	.+8      	; 0xec6 <vfprintf+0x270>
     ebe:	a9 c0       	rjmp	.+338    	; 0x1012 <vfprintf+0x3bc>
     ec0:	e9 2f       	mov	r30, r25
     ec2:	e0 61       	ori	r30, 0x10	; 16
     ec4:	be 2e       	mov	r11, r30
     ec6:	b4 fe       	sbrs	r11, 4
     ec8:	0d c0       	rjmp	.+26     	; 0xee4 <vfprintf+0x28e>
     eca:	fb 2d       	mov	r31, r11
     ecc:	f4 60       	ori	r31, 0x04	; 4
     ece:	bf 2e       	mov	r11, r31
     ed0:	09 c0       	rjmp	.+18     	; 0xee4 <vfprintf+0x28e>
     ed2:	34 fe       	sbrs	r3, 4
     ed4:	0a c0       	rjmp	.+20     	; 0xeea <vfprintf+0x294>
     ed6:	29 2f       	mov	r18, r25
     ed8:	26 60       	ori	r18, 0x06	; 6
     eda:	b2 2e       	mov	r11, r18
     edc:	06 c0       	rjmp	.+12     	; 0xeea <vfprintf+0x294>
     ede:	28 e0       	ldi	r18, 0x08	; 8
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	05 c0       	rjmp	.+10     	; 0xeee <vfprintf+0x298>
     ee4:	20 e1       	ldi	r18, 0x10	; 16
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <vfprintf+0x298>
     eea:	20 e1       	ldi	r18, 0x10	; 16
     eec:	32 e0       	ldi	r19, 0x02	; 2
     eee:	f8 01       	movw	r30, r16
     ef0:	b7 fe       	sbrs	r11, 7
     ef2:	07 c0       	rjmp	.+14     	; 0xf02 <vfprintf+0x2ac>
     ef4:	60 81       	ld	r22, Z
     ef6:	71 81       	ldd	r23, Z+1	; 0x01
     ef8:	82 81       	ldd	r24, Z+2	; 0x02
     efa:	93 81       	ldd	r25, Z+3	; 0x03
     efc:	0c 5f       	subi	r16, 0xFC	; 252
     efe:	1f 4f       	sbci	r17, 0xFF	; 255
     f00:	06 c0       	rjmp	.+12     	; 0xf0e <vfprintf+0x2b8>
     f02:	60 81       	ld	r22, Z
     f04:	71 81       	ldd	r23, Z+1	; 0x01
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	0e 5f       	subi	r16, 0xFE	; 254
     f0c:	1f 4f       	sbci	r17, 0xFF	; 255
     f0e:	a3 01       	movw	r20, r6
     f10:	f1 d0       	rcall	.+482    	; 0x10f4 <__ultoa_invert>
     f12:	88 2e       	mov	r8, r24
     f14:	86 18       	sub	r8, r6
     f16:	fb 2d       	mov	r31, r11
     f18:	ff 77       	andi	r31, 0x7F	; 127
     f1a:	3f 2e       	mov	r3, r31
     f1c:	36 fe       	sbrs	r3, 6
     f1e:	0d c0       	rjmp	.+26     	; 0xf3a <vfprintf+0x2e4>
     f20:	23 2d       	mov	r18, r3
     f22:	2e 7f       	andi	r18, 0xFE	; 254
     f24:	a2 2e       	mov	r10, r18
     f26:	89 14       	cp	r8, r9
     f28:	58 f4       	brcc	.+22     	; 0xf40 <vfprintf+0x2ea>
     f2a:	34 fe       	sbrs	r3, 4
     f2c:	0b c0       	rjmp	.+22     	; 0xf44 <vfprintf+0x2ee>
     f2e:	32 fc       	sbrc	r3, 2
     f30:	09 c0       	rjmp	.+18     	; 0xf44 <vfprintf+0x2ee>
     f32:	83 2d       	mov	r24, r3
     f34:	8e 7e       	andi	r24, 0xEE	; 238
     f36:	a8 2e       	mov	r10, r24
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <vfprintf+0x2ee>
     f3a:	b8 2c       	mov	r11, r8
     f3c:	a3 2c       	mov	r10, r3
     f3e:	03 c0       	rjmp	.+6      	; 0xf46 <vfprintf+0x2f0>
     f40:	b8 2c       	mov	r11, r8
     f42:	01 c0       	rjmp	.+2      	; 0xf46 <vfprintf+0x2f0>
     f44:	b9 2c       	mov	r11, r9
     f46:	a4 fe       	sbrs	r10, 4
     f48:	0f c0       	rjmp	.+30     	; 0xf68 <vfprintf+0x312>
     f4a:	fe 01       	movw	r30, r28
     f4c:	e8 0d       	add	r30, r8
     f4e:	f1 1d       	adc	r31, r1
     f50:	80 81       	ld	r24, Z
     f52:	80 33       	cpi	r24, 0x30	; 48
     f54:	21 f4       	brne	.+8      	; 0xf5e <vfprintf+0x308>
     f56:	9a 2d       	mov	r25, r10
     f58:	99 7e       	andi	r25, 0xE9	; 233
     f5a:	a9 2e       	mov	r10, r25
     f5c:	09 c0       	rjmp	.+18     	; 0xf70 <vfprintf+0x31a>
     f5e:	a2 fe       	sbrs	r10, 2
     f60:	06 c0       	rjmp	.+12     	; 0xf6e <vfprintf+0x318>
     f62:	b3 94       	inc	r11
     f64:	b3 94       	inc	r11
     f66:	04 c0       	rjmp	.+8      	; 0xf70 <vfprintf+0x31a>
     f68:	8a 2d       	mov	r24, r10
     f6a:	86 78       	andi	r24, 0x86	; 134
     f6c:	09 f0       	breq	.+2      	; 0xf70 <vfprintf+0x31a>
     f6e:	b3 94       	inc	r11
     f70:	a3 fc       	sbrc	r10, 3
     f72:	10 c0       	rjmp	.+32     	; 0xf94 <vfprintf+0x33e>
     f74:	a0 fe       	sbrs	r10, 0
     f76:	06 c0       	rjmp	.+12     	; 0xf84 <vfprintf+0x32e>
     f78:	b2 14       	cp	r11, r2
     f7a:	80 f4       	brcc	.+32     	; 0xf9c <vfprintf+0x346>
     f7c:	28 0c       	add	r2, r8
     f7e:	92 2c       	mov	r9, r2
     f80:	9b 18       	sub	r9, r11
     f82:	0d c0       	rjmp	.+26     	; 0xf9e <vfprintf+0x348>
     f84:	b2 14       	cp	r11, r2
     f86:	58 f4       	brcc	.+22     	; 0xf9e <vfprintf+0x348>
     f88:	b6 01       	movw	r22, r12
     f8a:	80 e2       	ldi	r24, 0x20	; 32
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	76 d0       	rcall	.+236    	; 0x107c <fputc>
     f90:	b3 94       	inc	r11
     f92:	f8 cf       	rjmp	.-16     	; 0xf84 <vfprintf+0x32e>
     f94:	b2 14       	cp	r11, r2
     f96:	18 f4       	brcc	.+6      	; 0xf9e <vfprintf+0x348>
     f98:	2b 18       	sub	r2, r11
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <vfprintf+0x34a>
     f9c:	98 2c       	mov	r9, r8
     f9e:	21 2c       	mov	r2, r1
     fa0:	a4 fe       	sbrs	r10, 4
     fa2:	0f c0       	rjmp	.+30     	; 0xfc2 <vfprintf+0x36c>
     fa4:	b6 01       	movw	r22, r12
     fa6:	80 e3       	ldi	r24, 0x30	; 48
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	68 d0       	rcall	.+208    	; 0x107c <fputc>
     fac:	a2 fe       	sbrs	r10, 2
     fae:	16 c0       	rjmp	.+44     	; 0xfdc <vfprintf+0x386>
     fb0:	a1 fc       	sbrc	r10, 1
     fb2:	03 c0       	rjmp	.+6      	; 0xfba <vfprintf+0x364>
     fb4:	88 e7       	ldi	r24, 0x78	; 120
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <vfprintf+0x368>
     fba:	88 e5       	ldi	r24, 0x58	; 88
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	b6 01       	movw	r22, r12
     fc0:	0c c0       	rjmp	.+24     	; 0xfda <vfprintf+0x384>
     fc2:	8a 2d       	mov	r24, r10
     fc4:	86 78       	andi	r24, 0x86	; 134
     fc6:	51 f0       	breq	.+20     	; 0xfdc <vfprintf+0x386>
     fc8:	a1 fe       	sbrs	r10, 1
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <vfprintf+0x37a>
     fcc:	8b e2       	ldi	r24, 0x2B	; 43
     fce:	01 c0       	rjmp	.+2      	; 0xfd2 <vfprintf+0x37c>
     fd0:	80 e2       	ldi	r24, 0x20	; 32
     fd2:	a7 fc       	sbrc	r10, 7
     fd4:	8d e2       	ldi	r24, 0x2D	; 45
     fd6:	b6 01       	movw	r22, r12
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	50 d0       	rcall	.+160    	; 0x107c <fputc>
     fdc:	89 14       	cp	r8, r9
     fde:	30 f4       	brcc	.+12     	; 0xfec <vfprintf+0x396>
     fe0:	b6 01       	movw	r22, r12
     fe2:	80 e3       	ldi	r24, 0x30	; 48
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	4a d0       	rcall	.+148    	; 0x107c <fputc>
     fe8:	9a 94       	dec	r9
     fea:	f8 cf       	rjmp	.-16     	; 0xfdc <vfprintf+0x386>
     fec:	8a 94       	dec	r8
     fee:	f3 01       	movw	r30, r6
     ff0:	e8 0d       	add	r30, r8
     ff2:	f1 1d       	adc	r31, r1
     ff4:	80 81       	ld	r24, Z
     ff6:	b6 01       	movw	r22, r12
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	40 d0       	rcall	.+128    	; 0x107c <fputc>
     ffc:	81 10       	cpse	r8, r1
     ffe:	f6 cf       	rjmp	.-20     	; 0xfec <vfprintf+0x396>
    1000:	22 20       	and	r2, r2
    1002:	09 f4       	brne	.+2      	; 0x1006 <vfprintf+0x3b0>
    1004:	4e ce       	rjmp	.-868    	; 0xca2 <vfprintf+0x4c>
    1006:	b6 01       	movw	r22, r12
    1008:	80 e2       	ldi	r24, 0x20	; 32
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	37 d0       	rcall	.+110    	; 0x107c <fputc>
    100e:	2a 94       	dec	r2
    1010:	f7 cf       	rjmp	.-18     	; 0x1000 <vfprintf+0x3aa>
    1012:	f6 01       	movw	r30, r12
    1014:	86 81       	ldd	r24, Z+6	; 0x06
    1016:	97 81       	ldd	r25, Z+7	; 0x07
    1018:	02 c0       	rjmp	.+4      	; 0x101e <vfprintf+0x3c8>
    101a:	8f ef       	ldi	r24, 0xFF	; 255
    101c:	9f ef       	ldi	r25, 0xFF	; 255
    101e:	2b 96       	adiw	r28, 0x0b	; 11
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	1f 91       	pop	r17
    1030:	0f 91       	pop	r16
    1032:	ff 90       	pop	r15
    1034:	ef 90       	pop	r14
    1036:	df 90       	pop	r13
    1038:	cf 90       	pop	r12
    103a:	bf 90       	pop	r11
    103c:	af 90       	pop	r10
    103e:	9f 90       	pop	r9
    1040:	8f 90       	pop	r8
    1042:	7f 90       	pop	r7
    1044:	6f 90       	pop	r6
    1046:	5f 90       	pop	r5
    1048:	4f 90       	pop	r4
    104a:	3f 90       	pop	r3
    104c:	2f 90       	pop	r2
    104e:	08 95       	ret

00001050 <strnlen_P>:
    1050:	fc 01       	movw	r30, r24
    1052:	05 90       	lpm	r0, Z+
    1054:	61 50       	subi	r22, 0x01	; 1
    1056:	70 40       	sbci	r23, 0x00	; 0
    1058:	01 10       	cpse	r0, r1
    105a:	d8 f7       	brcc	.-10     	; 0x1052 <strnlen_P+0x2>
    105c:	80 95       	com	r24
    105e:	90 95       	com	r25
    1060:	8e 0f       	add	r24, r30
    1062:	9f 1f       	adc	r25, r31
    1064:	08 95       	ret

00001066 <strnlen>:
    1066:	fc 01       	movw	r30, r24
    1068:	61 50       	subi	r22, 0x01	; 1
    106a:	70 40       	sbci	r23, 0x00	; 0
    106c:	01 90       	ld	r0, Z+
    106e:	01 10       	cpse	r0, r1
    1070:	d8 f7       	brcc	.-10     	; 0x1068 <strnlen+0x2>
    1072:	80 95       	com	r24
    1074:	90 95       	com	r25
    1076:	8e 0f       	add	r24, r30
    1078:	9f 1f       	adc	r25, r31
    107a:	08 95       	ret

0000107c <fputc>:
    107c:	0f 93       	push	r16
    107e:	1f 93       	push	r17
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	fb 01       	movw	r30, r22
    1086:	23 81       	ldd	r18, Z+3	; 0x03
    1088:	21 fd       	sbrc	r18, 1
    108a:	03 c0       	rjmp	.+6      	; 0x1092 <fputc+0x16>
    108c:	8f ef       	ldi	r24, 0xFF	; 255
    108e:	9f ef       	ldi	r25, 0xFF	; 255
    1090:	2c c0       	rjmp	.+88     	; 0x10ea <fputc+0x6e>
    1092:	22 ff       	sbrs	r18, 2
    1094:	16 c0       	rjmp	.+44     	; 0x10c2 <fputc+0x46>
    1096:	46 81       	ldd	r20, Z+6	; 0x06
    1098:	57 81       	ldd	r21, Z+7	; 0x07
    109a:	24 81       	ldd	r18, Z+4	; 0x04
    109c:	35 81       	ldd	r19, Z+5	; 0x05
    109e:	42 17       	cp	r20, r18
    10a0:	53 07       	cpc	r21, r19
    10a2:	44 f4       	brge	.+16     	; 0x10b4 <fputc+0x38>
    10a4:	a0 81       	ld	r26, Z
    10a6:	b1 81       	ldd	r27, Z+1	; 0x01
    10a8:	9d 01       	movw	r18, r26
    10aa:	2f 5f       	subi	r18, 0xFF	; 255
    10ac:	3f 4f       	sbci	r19, 0xFF	; 255
    10ae:	31 83       	std	Z+1, r19	; 0x01
    10b0:	20 83       	st	Z, r18
    10b2:	8c 93       	st	X, r24
    10b4:	26 81       	ldd	r18, Z+6	; 0x06
    10b6:	37 81       	ldd	r19, Z+7	; 0x07
    10b8:	2f 5f       	subi	r18, 0xFF	; 255
    10ba:	3f 4f       	sbci	r19, 0xFF	; 255
    10bc:	37 83       	std	Z+7, r19	; 0x07
    10be:	26 83       	std	Z+6, r18	; 0x06
    10c0:	14 c0       	rjmp	.+40     	; 0x10ea <fputc+0x6e>
    10c2:	8b 01       	movw	r16, r22
    10c4:	ec 01       	movw	r28, r24
    10c6:	fb 01       	movw	r30, r22
    10c8:	00 84       	ldd	r0, Z+8	; 0x08
    10ca:	f1 85       	ldd	r31, Z+9	; 0x09
    10cc:	e0 2d       	mov	r30, r0
    10ce:	09 95       	icall
    10d0:	89 2b       	or	r24, r25
    10d2:	e1 f6       	brne	.-72     	; 0x108c <fputc+0x10>
    10d4:	d8 01       	movw	r26, r16
    10d6:	16 96       	adiw	r26, 0x06	; 6
    10d8:	8d 91       	ld	r24, X+
    10da:	9c 91       	ld	r25, X
    10dc:	17 97       	sbiw	r26, 0x07	; 7
    10de:	01 96       	adiw	r24, 0x01	; 1
    10e0:	17 96       	adiw	r26, 0x07	; 7
    10e2:	9c 93       	st	X, r25
    10e4:	8e 93       	st	-X, r24
    10e6:	16 97       	sbiw	r26, 0x06	; 6
    10e8:	ce 01       	movw	r24, r28
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	1f 91       	pop	r17
    10f0:	0f 91       	pop	r16
    10f2:	08 95       	ret

000010f4 <__ultoa_invert>:
    10f4:	fa 01       	movw	r30, r20
    10f6:	aa 27       	eor	r26, r26
    10f8:	28 30       	cpi	r18, 0x08	; 8
    10fa:	51 f1       	breq	.+84     	; 0x1150 <__ultoa_invert+0x5c>
    10fc:	20 31       	cpi	r18, 0x10	; 16
    10fe:	81 f1       	breq	.+96     	; 0x1160 <__ultoa_invert+0x6c>
    1100:	e8 94       	clt
    1102:	6f 93       	push	r22
    1104:	6e 7f       	andi	r22, 0xFE	; 254
    1106:	6e 5f       	subi	r22, 0xFE	; 254
    1108:	7f 4f       	sbci	r23, 0xFF	; 255
    110a:	8f 4f       	sbci	r24, 0xFF	; 255
    110c:	9f 4f       	sbci	r25, 0xFF	; 255
    110e:	af 4f       	sbci	r26, 0xFF	; 255
    1110:	b1 e0       	ldi	r27, 0x01	; 1
    1112:	3e d0       	rcall	.+124    	; 0x1190 <__ultoa_invert+0x9c>
    1114:	b4 e0       	ldi	r27, 0x04	; 4
    1116:	3c d0       	rcall	.+120    	; 0x1190 <__ultoa_invert+0x9c>
    1118:	67 0f       	add	r22, r23
    111a:	78 1f       	adc	r23, r24
    111c:	89 1f       	adc	r24, r25
    111e:	9a 1f       	adc	r25, r26
    1120:	a1 1d       	adc	r26, r1
    1122:	68 0f       	add	r22, r24
    1124:	79 1f       	adc	r23, r25
    1126:	8a 1f       	adc	r24, r26
    1128:	91 1d       	adc	r25, r1
    112a:	a1 1d       	adc	r26, r1
    112c:	6a 0f       	add	r22, r26
    112e:	71 1d       	adc	r23, r1
    1130:	81 1d       	adc	r24, r1
    1132:	91 1d       	adc	r25, r1
    1134:	a1 1d       	adc	r26, r1
    1136:	20 d0       	rcall	.+64     	; 0x1178 <__ultoa_invert+0x84>
    1138:	09 f4       	brne	.+2      	; 0x113c <__ultoa_invert+0x48>
    113a:	68 94       	set
    113c:	3f 91       	pop	r19
    113e:	2a e0       	ldi	r18, 0x0A	; 10
    1140:	26 9f       	mul	r18, r22
    1142:	11 24       	eor	r1, r1
    1144:	30 19       	sub	r19, r0
    1146:	30 5d       	subi	r19, 0xD0	; 208
    1148:	31 93       	st	Z+, r19
    114a:	de f6       	brtc	.-74     	; 0x1102 <__ultoa_invert+0xe>
    114c:	cf 01       	movw	r24, r30
    114e:	08 95       	ret
    1150:	46 2f       	mov	r20, r22
    1152:	47 70       	andi	r20, 0x07	; 7
    1154:	40 5d       	subi	r20, 0xD0	; 208
    1156:	41 93       	st	Z+, r20
    1158:	b3 e0       	ldi	r27, 0x03	; 3
    115a:	0f d0       	rcall	.+30     	; 0x117a <__ultoa_invert+0x86>
    115c:	c9 f7       	brne	.-14     	; 0x1150 <__ultoa_invert+0x5c>
    115e:	f6 cf       	rjmp	.-20     	; 0x114c <__ultoa_invert+0x58>
    1160:	46 2f       	mov	r20, r22
    1162:	4f 70       	andi	r20, 0x0F	; 15
    1164:	40 5d       	subi	r20, 0xD0	; 208
    1166:	4a 33       	cpi	r20, 0x3A	; 58
    1168:	18 f0       	brcs	.+6      	; 0x1170 <__ultoa_invert+0x7c>
    116a:	49 5d       	subi	r20, 0xD9	; 217
    116c:	31 fd       	sbrc	r19, 1
    116e:	40 52       	subi	r20, 0x20	; 32
    1170:	41 93       	st	Z+, r20
    1172:	02 d0       	rcall	.+4      	; 0x1178 <__ultoa_invert+0x84>
    1174:	a9 f7       	brne	.-22     	; 0x1160 <__ultoa_invert+0x6c>
    1176:	ea cf       	rjmp	.-44     	; 0x114c <__ultoa_invert+0x58>
    1178:	b4 e0       	ldi	r27, 0x04	; 4
    117a:	a6 95       	lsr	r26
    117c:	97 95       	ror	r25
    117e:	87 95       	ror	r24
    1180:	77 95       	ror	r23
    1182:	67 95       	ror	r22
    1184:	ba 95       	dec	r27
    1186:	c9 f7       	brne	.-14     	; 0x117a <__ultoa_invert+0x86>
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	61 05       	cpc	r22, r1
    118c:	71 05       	cpc	r23, r1
    118e:	08 95       	ret
    1190:	9b 01       	movw	r18, r22
    1192:	ac 01       	movw	r20, r24
    1194:	0a 2e       	mov	r0, r26
    1196:	06 94       	lsr	r0
    1198:	57 95       	ror	r21
    119a:	47 95       	ror	r20
    119c:	37 95       	ror	r19
    119e:	27 95       	ror	r18
    11a0:	ba 95       	dec	r27
    11a2:	c9 f7       	brne	.-14     	; 0x1196 <__ultoa_invert+0xa2>
    11a4:	62 0f       	add	r22, r18
    11a6:	73 1f       	adc	r23, r19
    11a8:	84 1f       	adc	r24, r20
    11aa:	95 1f       	adc	r25, r21
    11ac:	a0 1d       	adc	r26, r0
    11ae:	08 95       	ret

000011b0 <_exit>:
    11b0:	f8 94       	cli

000011b2 <__stop_program>:
    11b2:	ff cf       	rjmp	.-2      	; 0x11b2 <__stop_program>
