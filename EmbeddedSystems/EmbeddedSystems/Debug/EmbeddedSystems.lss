
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000004d4  00000568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010e  0080010e  00000576  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000576  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000efd  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a76  00000000  00000000  0000165d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000998  00000000  00000000  000020d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000478  00000000  00000000  00002a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000644  00000000  00000000  00002ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000084a  00000000  00000000  00003528  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00003d72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	bc c1       	rjmp	.+888    	; 0x3ba <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ed       	ldi	r30, 0xD4	; 212
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 31       	cpi	r26, 0x10	; 16
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	9b d0       	rcall	.+310    	; 0x1fa <main>
  c4:	05 c2       	rjmp	.+1034   	; 0x4d0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Led_init>:
void Led6_On(void) {
    PORTB |= (1 << 2);
}
void Led6_Off(void) {
    PORTB &= ~(1 << 2);
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	1f 92       	push	r1
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	89 83       	std	Y+1, r24	; 0x01
  d4:	84 e2       	ldi	r24, 0x24	; 36
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	fc 01       	movw	r30, r24
  dc:	20 83       	st	Z, r18
  de:	85 e2       	ldi	r24, 0x25	; 37
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	10 82       	st	Z, r1
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	88 23       	and	r24, r24
  ea:	91 f0       	breq	.+36     	; 0x110 <Led_init+0x48>
  ec:	8a e2       	ldi	r24, 0x2A	; 42
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	2a e2       	ldi	r18, 0x2A	; 42
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	f9 01       	movw	r30, r18
  f6:	20 81       	ld	r18, Z
  f8:	2f 61       	ori	r18, 0x1F	; 31
  fa:	fc 01       	movw	r30, r24
  fc:	20 83       	st	Z, r18
  fe:	8b e2       	ldi	r24, 0x2B	; 43
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	2b e2       	ldi	r18, 0x2B	; 43
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	f9 01       	movw	r30, r18
 108:	20 81       	ld	r18, Z
 10a:	20 7e       	andi	r18, 0xE0	; 224
 10c:	fc 01       	movw	r30, r24
 10e:	20 83       	st	Z, r18
 110:	00 00       	nop
 112:	0f 90       	pop	r0
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <Led7_On>:

/**
led7 - ioB1
*/
void Led7_On(void) {
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 1);
 122:	85 e2       	ldi	r24, 0x25	; 37
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	25 e2       	ldi	r18, 0x25	; 37
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	f9 01       	movw	r30, r18
 12c:	20 81       	ld	r18, Z
 12e:	22 60       	ori	r18, 0x02	; 2
 130:	fc 01       	movw	r30, r24
 132:	20 83       	st	Z, r18
}
 134:	00 00       	nop
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <Led7_Off>:
void Led7_Off(void) {
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 1);
 144:	85 e2       	ldi	r24, 0x25	; 37
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	25 e2       	ldi	r18, 0x25	; 37
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	f9 01       	movw	r30, r18
 14e:	20 81       	ld	r18, Z
 150:	2d 7f       	andi	r18, 0xFD	; 253
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
}
 156:	00 00       	nop
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <Led8_On>:

/**
led8 - ioB0
*/
void Led8_On(void) {
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 0);
 166:	85 e2       	ldi	r24, 0x25	; 37
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	25 e2       	ldi	r18, 0x25	; 37
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	f9 01       	movw	r30, r18
 170:	20 81       	ld	r18, Z
 172:	21 60       	ori	r18, 0x01	; 1
 174:	fc 01       	movw	r30, r24
 176:	20 83       	st	Z, r18
}
 178:	00 00       	nop
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <Led8_Off>:
void Led8_Off(void) {
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 0);
 188:	85 e2       	ldi	r24, 0x25	; 37
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	25 e2       	ldi	r18, 0x25	; 37
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	f9 01       	movw	r30, r18
 192:	20 81       	ld	r18, Z
 194:	2e 7f       	andi	r18, 0xFE	; 254
 196:	fc 01       	movw	r30, r24
 198:	20 83       	st	Z, r18
}
 19a:	00 00       	nop
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <Taster_init>:
 ---------------------
 - DDR Reg has to be set to 0
 - PORT Reg has to be set to 1
 -> Pin is input with pull-up
 */
void Taster_init() {
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	cd b7       	in	r28, 0x3d	; 61
 1a8:	de b7       	in	r29, 0x3e	; 62
    
    // set to inputs
    DDRC &= ~(1 << 2);
 1aa:	87 e2       	ldi	r24, 0x27	; 39
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	27 e2       	ldi	r18, 0x27	; 39
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	f9 01       	movw	r30, r18
 1b4:	20 81       	ld	r18, Z
 1b6:	2b 7f       	andi	r18, 0xFB	; 251
 1b8:	fc 01       	movw	r30, r24
 1ba:	20 83       	st	Z, r18
    DDRD &= ~( (1 << 7) | (1 << 6) | (1 << 5) );
 1bc:	8a e2       	ldi	r24, 0x2A	; 42
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	2a e2       	ldi	r18, 0x2A	; 42
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	f9 01       	movw	r30, r18
 1c6:	20 81       	ld	r18, Z
 1c8:	2f 71       	andi	r18, 0x1F	; 31
 1ca:	fc 01       	movw	r30, r24
 1cc:	20 83       	st	Z, r18
    
    // enable pull-up
    PORTC |= (1 << 2);
 1ce:	88 e2       	ldi	r24, 0x28	; 40
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	28 e2       	ldi	r18, 0x28	; 40
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	f9 01       	movw	r30, r18
 1d8:	20 81       	ld	r18, Z
 1da:	24 60       	ori	r18, 0x04	; 4
 1dc:	fc 01       	movw	r30, r24
 1de:	20 83       	st	Z, r18
    PORTD |= (1 << 7) | (1 << 6) | (1 << 5);
 1e0:	8b e2       	ldi	r24, 0x2B	; 43
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	2b e2       	ldi	r18, 0x2B	; 43
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	f9 01       	movw	r30, r18
 1ea:	20 81       	ld	r18, Z
 1ec:	20 6e       	ori	r18, 0xE0	; 224
 1ee:	fc 01       	movw	r30, r24
 1f0:	20 83       	st	Z, r18
}
 1f2:	00 00       	nop
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <main>:
#include "stateMachine/TrafficLight.h"
#include "uart/Uart.h"
#include <avr/interrupt.h>


int main(void) {
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	00 d0       	rcall	.+0      	; 0x200 <main+0x6>
 200:	00 d0       	rcall	.+0      	; 0x202 <main+0x8>
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
	
    Led_init(0);	// Don't set LEDs at PORTD
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	5f df       	rcall	.-322    	; 0xc8 <Led_init>
	Taster_init();
 20a:	cb df       	rcall	.-106    	; 0x1a2 <Taster_init>
    Timer_init(16); // Init timer with 16MHZ clock
 20c:	80 e1       	ldi	r24, 0x10	; 16
 20e:	2a d0       	rcall	.+84     	; 0x264 <Timer_init>
	uart_init(9600);
 210:	80 e8       	ldi	r24, 0x80	; 128
 212:	95 e2       	ldi	r25, 0x25	; 37
 214:	f2 d0       	rcall	.+484    	; 0x3fa <uart_init>
 216:	78 94       	sei
	sei();
 218:	1b 82       	std	Y+3, r1	; 0x03
	
    uint8_t state_testBoard = 0;
 21a:	1a 82       	std	Y+2, r1	; 0x02
    uint16_t last_time = 0;
 21c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t  toggle_asdf = 1;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	8c 83       	std	Y+4, r24	; 0x04
		}else {
			PORTB = 0x00;
		}*/
        
        
        if ( (Timer_getTick() - last_time) >= 500 ) {
 222:	b7 d0       	rcall	.+366    	; 0x392 <Timer_getTick>
 224:	9c 01       	movw	r18, r24
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	9a 81       	ldd	r25, Y+2	; 0x02
 22a:	a9 01       	movw	r20, r18
 22c:	48 1b       	sub	r20, r24
 22e:	59 0b       	sbc	r21, r25
 230:	ca 01       	movw	r24, r20
 232:	84 3f       	cpi	r24, 0xF4	; 244
 234:	91 40       	sbci	r25, 0x01	; 1
            last_time = Timer_getTick();
 236:	a8 f3       	brcs	.-22     	; 0x222 <main+0x28>
 238:	ac d0       	rcall	.+344    	; 0x392 <Timer_getTick>
 23a:	9a 83       	std	Y+2, r25	; 0x02
            Led7_Off();
 23c:	89 83       	std	Y+1, r24	; 0x01
 23e:	7e df       	rcall	.-260    	; 0x13c <Led7_Off>
            Led8_Off();
 240:	9f df       	rcall	.-194    	; 0x180 <Led8_Off>
 242:	80 e0       	ldi	r24, 0x00	; 0
            
            uart_send("Hallo Welt!!");
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	fd d0       	rcall	.+506    	; 0x442 <uart_send>
 248:	00 00       	nop
 24a:	80 ec       	ldi	r24, 0xC0	; 192
            
            while ( !(UCSR0A & (1 << TXC0)) )
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	fc 01       	movw	r30, r24
 250:	80 81       	ld	r24, Z
 252:	88 2f       	mov	r24, r24
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	80 74       	andi	r24, 0x40	; 64
 258:	99 27       	eor	r25, r25
 25a:	89 2b       	or	r24, r25
 25c:	b1 f3       	breq	.-20     	; 0x24a <main+0x50>
                ;
            
            Led7_On();
 25e:	5d df       	rcall	.-326    	; 0x11a <Led7_On>
 260:	7e df       	rcall	.-260    	; 0x15e <Led8_On>
            Led8_On();
 262:	df cf       	rjmp	.-66     	; 0x222 <main+0x28>

00000264 <Timer_init>:
 264:	cf 93       	push	r28
            
        }
        
        //trafficLight(0);
        //playground();
    }
 266:	df 93       	push	r29
    }
    
    TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
}
 268:	1f 92       	push	r1
 26a:	cd b7       	in	r28, 0x3d	; 61
 26c:	de b7       	in	r29, 0x3e	; 62
 26e:	89 83       	std	Y+1, r24	; 0x01
 270:	89 81       	ldd	r24, Y+1	; 0x01
 272:	88 2f       	mov	r24, r24
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	05 d0       	rcall	.+10     	; 0x282 <Timer_init_withoutStruct>
 278:	00 00       	nop
 27a:	0f 90       	pop	r0
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <Timer_init_withoutStruct>:

void Timer_init_withoutStruct(uint8_t clockFreqMhz) {
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	1f 92       	push	r1
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
 28c:	89 83       	std	Y+1, r24	; 0x01
    // datasheet page 97
    // set mode to clear timer on compare (CTC)
    TCCR0B &= ~(1 << WGM02);
 28e:	85 e4       	ldi	r24, 0x45	; 69
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	25 e4       	ldi	r18, 0x45	; 69
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	f9 01       	movw	r30, r18
 298:	20 81       	ld	r18, Z
 29a:	27 7f       	andi	r18, 0xF7	; 247
 29c:	fc 01       	movw	r30, r24
 29e:	20 83       	st	Z, r18
    TCCR0A |= (1 << WGM01);
 2a0:	84 e4       	ldi	r24, 0x44	; 68
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	24 e4       	ldi	r18, 0x44	; 68
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	f9 01       	movw	r30, r18
 2aa:	20 81       	ld	r18, Z
 2ac:	22 60       	ori	r18, 0x02	; 2
 2ae:	fc 01       	movw	r30, r24
 2b0:	20 83       	st	Z, r18
    TCCR0A &= ~(1 << WGM00);
 2b2:	84 e4       	ldi	r24, 0x44	; 68
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	24 e4       	ldi	r18, 0x44	; 68
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	f9 01       	movw	r30, r18
 2bc:	20 81       	ld	r18, Z
 2be:	2e 7f       	andi	r18, 0xFE	; 254
 2c0:	fc 01       	movw	r30, r24
 2c2:	20 83       	st	Z, r18
    
    
    switch (clockFreqMhz) {
 2c4:	89 81       	ldd	r24, Y+1	; 0x01
 2c6:	88 2f       	mov	r24, r24
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	40 97       	sbiw	r24, 0x10	; 16
 2cc:	09 f5       	brne	.+66     	; 0x310 <Timer_init_withoutStruct+0x8e>
        case 16:
            // extern osc (16 MHZ)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = 249;   // dez 249; range 0 - 249 -> 250 cycles till interrupt
 2ce:	87 e4       	ldi	r24, 0x47	; 71
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	29 ef       	ldi	r18, 0xF9	; 249
 2d4:	fc 01       	movw	r30, r24
 2d6:	20 83       	st	Z, r18
            
            // set prescaler to 1/64
            TCCR0B &= ~(1 << CS02);
 2d8:	85 e4       	ldi	r24, 0x45	; 69
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	25 e4       	ldi	r18, 0x45	; 69
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	f9 01       	movw	r30, r18
 2e2:	20 81       	ld	r18, Z
 2e4:	2b 7f       	andi	r18, 0xFB	; 251
 2e6:	fc 01       	movw	r30, r24
 2e8:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
 2ea:	85 e4       	ldi	r24, 0x45	; 69
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	25 e4       	ldi	r18, 0x45	; 69
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	f9 01       	movw	r30, r18
 2f4:	20 81       	ld	r18, Z
 2f6:	22 60       	ori	r18, 0x02	; 2
 2f8:	fc 01       	movw	r30, r24
 2fa:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS00);
 2fc:	85 e4       	ldi	r24, 0x45	; 69
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	25 e4       	ldi	r18, 0x45	; 69
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	f9 01       	movw	r30, r18
 306:	20 81       	ld	r18, Z
 308:	21 60       	ori	r18, 0x01	; 1
 30a:	fc 01       	movw	r30, r24
 30c:	20 83       	st	Z, r18
            break;
 30e:	21 c0       	rjmp	.+66     	; 0x352 <Timer_init_withoutStruct+0xd0>
            
        default:
            // inter osc (8 MHZ divided by 8 -> 1 MHZ clock)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = 0x7C;   // dez 124; range 0 - 124 -> 125 cycles till interrupt
 310:	87 e4       	ldi	r24, 0x47	; 71
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	2c e7       	ldi	r18, 0x7C	; 124
 316:	fc 01       	movw	r30, r24
 318:	20 83       	st	Z, r18
            
            // set prescaler to 1/8
            TCCR0B &= ~(1 << CS02);
 31a:	85 e4       	ldi	r24, 0x45	; 69
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	25 e4       	ldi	r18, 0x45	; 69
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	f9 01       	movw	r30, r18
 324:	20 81       	ld	r18, Z
 326:	2b 7f       	andi	r18, 0xFB	; 251
 328:	fc 01       	movw	r30, r24
 32a:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
 32c:	85 e4       	ldi	r24, 0x45	; 69
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	25 e4       	ldi	r18, 0x45	; 69
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	f9 01       	movw	r30, r18
 336:	20 81       	ld	r18, Z
 338:	22 60       	ori	r18, 0x02	; 2
 33a:	fc 01       	movw	r30, r24
 33c:	20 83       	st	Z, r18
            TCCR0B &= ~(1 << CS00);
 33e:	85 e4       	ldi	r24, 0x45	; 69
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	25 e4       	ldi	r18, 0x45	; 69
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	f9 01       	movw	r30, r18
 348:	20 81       	ld	r18, Z
 34a:	2e 7f       	andi	r18, 0xFE	; 254
 34c:	fc 01       	movw	r30, r24
 34e:	20 83       	st	Z, r18
            break;
 350:	00 00       	nop
    }
    
    TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
 352:	8e e6       	ldi	r24, 0x6E	; 110
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	2e e6       	ldi	r18, 0x6E	; 110
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	f9 01       	movw	r30, r18
 35c:	20 81       	ld	r18, Z
 35e:	2b 7f       	andi	r18, 0xFB	; 251
 360:	fc 01       	movw	r30, r24
 362:	20 83       	st	Z, r18
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
 364:	8e e6       	ldi	r24, 0x6E	; 110
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	2e e6       	ldi	r18, 0x6E	; 110
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	f9 01       	movw	r30, r18
 36e:	20 81       	ld	r18, Z
 370:	22 60       	ori	r18, 0x02	; 2
 372:	fc 01       	movw	r30, r24
 374:	20 83       	st	Z, r18
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
 376:	8e e6       	ldi	r24, 0x6E	; 110
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	2e e6       	ldi	r18, 0x6E	; 110
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	f9 01       	movw	r30, r18
 380:	20 81       	ld	r18, Z
 382:	2e 7f       	andi	r18, 0xFE	; 254
 384:	fc 01       	movw	r30, r24
 386:	20 83       	st	Z, r18
}
 388:	00 00       	nop
 38a:	0f 90       	pop	r0
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <Timer_getTick>:

uint16_t Timer_getTick() {
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	00 d0       	rcall	.+0      	; 0x398 <Timer_getTick+0x6>
 398:	cd b7       	in	r28, 0x3d	; 61
 39a:	de b7       	in	r29, 0x3e	; 62
    // disable global interrupt
    cli();
 39c:	f8 94       	cli
    
    // store timer_count in a temp int that can't get changed by ISR
    uint16_t temp_timer_count = timer_count;
 39e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 3a2:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 3a6:	9a 83       	std	Y+2, r25	; 0x02
 3a8:	89 83       	std	Y+1, r24	; 0x01
    
    // enable global interrupt
    sei();
 3aa:	78 94       	sei

    return temp_timer_count;
 3ac:	89 81       	ldd	r24, Y+1	; 0x01
 3ae:	9a 81       	ldd	r25, Y+2	; 0x02
}
 3b0:	0f 90       	pop	r0
 3b2:	0f 90       	pop	r0
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	08 95       	ret

000003ba <__vector_16>:
 ( not used atm)
 Timer compare A interrput:
 - increase timer_count
 - if timer_count is at max of uint16, set it to 0
 */
ISR(TIMER0_COMPA_vect){
 3ba:	1f 92       	push	r1
 3bc:	0f 92       	push	r0
 3be:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3c2:	0f 92       	push	r0
 3c4:	11 24       	eor	r1, r1
 3c6:	8f 93       	push	r24
 3c8:	9f 93       	push	r25
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	cd b7       	in	r28, 0x3d	; 61
 3d0:	de b7       	in	r29, 0x3e	; 62
    timer_count++;
 3d2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 3d6:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 3da:	01 96       	adiw	r24, 0x01	; 1
 3dc:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
 3e0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
}
 3e4:	00 00       	nop
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	9f 91       	pop	r25
 3ec:	8f 91       	pop	r24
 3ee:	0f 90       	pop	r0
 3f0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3f4:	0f 90       	pop	r0
 3f6:	1f 90       	pop	r1
 3f8:	18 95       	reti

000003fa <uart_init>:

#include "Uart.h"

void uart_init(unsigned int baud) {
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	00 d0       	rcall	.+0      	; 0x400 <__LOCK_REGION_LENGTH__>
 400:	cd b7       	in	r28, 0x3d	; 61
 402:	de b7       	in	r29, 0x3e	; 62
 404:	9a 83       	std	Y+2, r25	; 0x02
 406:	89 83       	std	Y+1, r24	; 0x01
    
    // Set baud rate
    UBRR0H = (unsigned char) (baud >> 8);
 408:	85 ec       	ldi	r24, 0xC5	; 197
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	29 81       	ldd	r18, Y+1	; 0x01
 40e:	3a 81       	ldd	r19, Y+2	; 0x02
 410:	23 2f       	mov	r18, r19
 412:	33 27       	eor	r19, r19
 414:	fc 01       	movw	r30, r24
 416:	20 83       	st	Z, r18
    UBRR0L = (unsigned char) baud;
 418:	84 ec       	ldi	r24, 0xC4	; 196
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	29 81       	ldd	r18, Y+1	; 0x01
 41e:	fc 01       	movw	r30, r24
 420:	20 83       	st	Z, r18
	
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);   // set RX enable and TX enable
 422:	81 ec       	ldi	r24, 0xC1	; 193
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	28 e1       	ldi	r18, 0x18	; 24
 428:	fc 01       	movw	r30, r24
 42a:	20 83       	st	Z, r18
    
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // b00000110 -> async USART, no parity, 1 stop-bit, 8 bit (set UCSZn2 in UCSR0C to 0)
 42c:	82 ec       	ldi	r24, 0xC2	; 194
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	26 e0       	ldi	r18, 0x06	; 6
 432:	fc 01       	movw	r30, r24
 434:	20 83       	st	Z, r18
    
}
 436:	00 00       	nop
 438:	0f 90       	pop	r0
 43a:	0f 90       	pop	r0
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28
 440:	08 95       	ret

00000442 <uart_send>:

void uart_send(char* string) {
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	00 d0       	rcall	.+0      	; 0x448 <uart_send+0x6>
 448:	00 d0       	rcall	.+0      	; 0x44a <uart_send+0x8>
 44a:	00 d0       	rcall	.+0      	; 0x44c <uart_send+0xa>
 44c:	cd b7       	in	r28, 0x3d	; 61
 44e:	de b7       	in	r29, 0x3e	; 62
 450:	9e 83       	std	Y+6, r25	; 0x06
 452:	8d 83       	std	Y+5, r24	; 0x05
    
    int len = strlen(string);
 454:	8d 81       	ldd	r24, Y+5	; 0x05
 456:	9e 81       	ldd	r25, Y+6	; 0x06
 458:	32 d0       	rcall	.+100    	; 0x4be <strlen>
 45a:	9c 83       	std	Y+4, r25	; 0x04
 45c:	8b 83       	std	Y+3, r24	; 0x03
    
    // Iterate over string
    for (int i = 0; i < len; i++) {
 45e:	1a 82       	std	Y+2, r1	; 0x02
 460:	19 82       	std	Y+1, r1	; 0x01
 462:	1c c0       	rjmp	.+56     	; 0x49c <uart_send+0x5a>
        
        // Wait for transmit register to be empty
        while ( !(UCSR0A & (1 << UDRE0)) )
 464:	00 00       	nop
 466:	80 ec       	ldi	r24, 0xC0	; 192
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	fc 01       	movw	r30, r24
 46c:	80 81       	ld	r24, Z
 46e:	88 2f       	mov	r24, r24
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	80 72       	andi	r24, 0x20	; 32
 474:	99 27       	eor	r25, r25
 476:	89 2b       	or	r24, r25
 478:	b1 f3       	breq	.-20     	; 0x466 <uart_send+0x24>
            ;
        
        // Write byte to transmit register
        UDR0 = string[i];
 47a:	86 ec       	ldi	r24, 0xC6	; 198
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	29 81       	ldd	r18, Y+1	; 0x01
 480:	3a 81       	ldd	r19, Y+2	; 0x02
 482:	4d 81       	ldd	r20, Y+5	; 0x05
 484:	5e 81       	ldd	r21, Y+6	; 0x06
 486:	24 0f       	add	r18, r20
 488:	35 1f       	adc	r19, r21
 48a:	f9 01       	movw	r30, r18
 48c:	20 81       	ld	r18, Z
 48e:	fc 01       	movw	r30, r24
 490:	20 83       	st	Z, r18
void uart_send(char* string) {
    
    int len = strlen(string);
    
    // Iterate over string
    for (int i = 0; i < len; i++) {
 492:	89 81       	ldd	r24, Y+1	; 0x01
 494:	9a 81       	ldd	r25, Y+2	; 0x02
 496:	01 96       	adiw	r24, 0x01	; 1
 498:	9a 83       	std	Y+2, r25	; 0x02
 49a:	89 83       	std	Y+1, r24	; 0x01
 49c:	29 81       	ldd	r18, Y+1	; 0x01
 49e:	3a 81       	ldd	r19, Y+2	; 0x02
 4a0:	8b 81       	ldd	r24, Y+3	; 0x03
 4a2:	9c 81       	ldd	r25, Y+4	; 0x04
 4a4:	28 17       	cp	r18, r24
 4a6:	39 07       	cpc	r19, r25
 4a8:	ec f2       	brlt	.-70     	; 0x464 <uart_send+0x22>
        UDR0 = string[i];
    }
    
    
    
}
 4aa:	00 00       	nop
 4ac:	26 96       	adiw	r28, 0x06	; 6
 4ae:	0f b6       	in	r0, 0x3f	; 63
 4b0:	f8 94       	cli
 4b2:	de bf       	out	0x3e, r29	; 62
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	cd bf       	out	0x3d, r28	; 61
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	08 95       	ret

000004be <strlen>:
 4be:	fc 01       	movw	r30, r24
 4c0:	01 90       	ld	r0, Z+
 4c2:	00 20       	and	r0, r0
 4c4:	e9 f7       	brne	.-6      	; 0x4c0 <strlen+0x2>
 4c6:	80 95       	com	r24
 4c8:	90 95       	com	r25
 4ca:	8e 0f       	add	r24, r30
 4cc:	9f 1f       	adc	r25, r31
 4ce:	08 95       	ret

000004d0 <_exit>:
 4d0:	f8 94       	cli

000004d2 <__stop_program>:
 4d2:	ff cf       	rjmp	.-2      	; 0x4d2 <__stop_program>
