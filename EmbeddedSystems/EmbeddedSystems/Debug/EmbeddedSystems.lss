
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000059a  0000062e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000059a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000206  0080010e  0080010e  0000063c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000066c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001035  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b14  00000000  00000000  00001889  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a72  00000000  00000000  0000239d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000580  00000000  00000000  00002e10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000694  00000000  00000000  00003390  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a89  00000000  00000000  00003a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000044ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3f c1       	rjmp	.+638    	; 0x2c0 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	50 c2       	rjmp	.+1184   	; 0x4f6 <__vector_21>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e9       	ldi	r30, 0x9A	; 154
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	23 e0       	ldi	r18, 0x03	; 3
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	57 d0       	rcall	.+174    	; 0x172 <main>
  c4:	68 c2       	rjmp	.+1232   	; 0x596 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Led_init>:

#include "Led.h"

void Led_init(uint8_t initD) {
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	1f 92       	push	r1
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	89 83       	std	Y+1, r24	; 0x01
    // Set PORTB to outputs
    DDRB = 0xFF;
  d4:	84 e2       	ldi	r24, 0x24	; 36
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	fc 01       	movw	r30, r24
  dc:	20 83       	st	Z, r18
    PORTB = 0x00;
  de:	85 e2       	ldi	r24, 0x25	; 37
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	10 82       	st	Z, r1
    
    if (initD) {
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	88 23       	and	r24, r24
  ea:	91 f0       	breq	.+36     	; 0x110 <Led_init+0x48>
        // Set PORTD 0..4 to outputs
        DDRD |= ( (1 << 4) | (1 << 3) | (1 << 2) | (1 << 1) | (1 << 0));
  ec:	8a e2       	ldi	r24, 0x2A	; 42
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	2a e2       	ldi	r18, 0x2A	; 42
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	f9 01       	movw	r30, r18
  f6:	20 81       	ld	r18, Z
  f8:	2f 61       	ori	r18, 0x1F	; 31
  fa:	fc 01       	movw	r30, r24
  fc:	20 83       	st	Z, r18
        PORTD &= ~( (1 << 4) | (1 << 3) | (1 << 2) | (1 << 1) | (1 << 0));
  fe:	8b e2       	ldi	r24, 0x2B	; 43
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	2b e2       	ldi	r18, 0x2B	; 43
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	f9 01       	movw	r30, r18
 108:	20 81       	ld	r18, Z
 10a:	20 7e       	andi	r18, 0xE0	; 224
 10c:	fc 01       	movw	r30, r24
 10e:	20 83       	st	Z, r18
    }
}
 110:	00 00       	nop
 112:	0f 90       	pop	r0
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <Taster_init>:
 ---------------------
 - DDR Reg has to be set to 0
 - PORT Reg has to be set to 1
 -> Pin is input with pull-up
 */
void Taster_init() {
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
    
    // set to inputs
    DDRC &= ~(1 << 2);
 122:	87 e2       	ldi	r24, 0x27	; 39
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	27 e2       	ldi	r18, 0x27	; 39
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	f9 01       	movw	r30, r18
 12c:	20 81       	ld	r18, Z
 12e:	2b 7f       	andi	r18, 0xFB	; 251
 130:	fc 01       	movw	r30, r24
 132:	20 83       	st	Z, r18
    DDRD &= ~( (1 << 7) | (1 << 6) | (1 << 5) );
 134:	8a e2       	ldi	r24, 0x2A	; 42
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	2a e2       	ldi	r18, 0x2A	; 42
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	f9 01       	movw	r30, r18
 13e:	20 81       	ld	r18, Z
 140:	2f 71       	andi	r18, 0x1F	; 31
 142:	fc 01       	movw	r30, r24
 144:	20 83       	st	Z, r18
    
    // enable pull-up
    PORTC |= (1 << 2);
 146:	88 e2       	ldi	r24, 0x28	; 40
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	28 e2       	ldi	r18, 0x28	; 40
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	f9 01       	movw	r30, r18
 150:	20 81       	ld	r18, Z
 152:	24 60       	ori	r18, 0x04	; 4
 154:	fc 01       	movw	r30, r24
 156:	20 83       	st	Z, r18
    PORTD |= (1 << 7) | (1 << 6) | (1 << 5);
 158:	8b e2       	ldi	r24, 0x2B	; 43
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	2b e2       	ldi	r18, 0x2B	; 43
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	f9 01       	movw	r30, r18
 162:	20 81       	ld	r18, Z
 164:	20 6e       	ori	r18, 0xE0	; 224
 166:	fc 01       	movw	r30, r24
 168:	20 83       	st	Z, r18
}
 16a:	00 00       	nop
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <main>:
#include "uart/Uart.h"
#include <avr/interrupt.h>

#define CLK_F_MHZ 16

int main(void) {
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
	
    cli();
 17a:	f8 94       	cli
    Led_init(0);	// Don't set LEDs at PORTD
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	a4 df       	rcall	.-184    	; 0xc8 <Led_init>
	Taster_init();
 180:	cc df       	rcall	.-104    	; 0x11a <Taster_init>
    Timer_init(CLK_F_MHZ); // Init timer with 16MHZ clock
 182:	80 e1       	ldi	r24, 0x10	; 16
 184:	06 d0       	rcall	.+12     	; 0x192 <Timer_init>
	uart_init_isr();
 186:	61 d1       	rcall	.+706    	; 0x44a <uart_init_isr>
	sei();
 188:	78 94       	sei
	
    while (1) {
        
        uart_send_isr("Hallo Welt!\n");
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	6f d1       	rcall	.+734    	; 0x46e <uart_send_isr>
 190:	fc cf       	rjmp	.-8      	; 0x18a <main+0x18>

00000192 <Timer_init>:
        
        //trafficLight(0);
        //playground();
    }
 192:	cf 93       	push	r28
    
    // enable global interrupt
    sei();

    return temp_timer_count;
}
 194:	df 93       	push	r29
 196:	1f 92       	push	r1
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
 19c:	89 83       	std	Y+1, r24	; 0x01
 19e:	89 81       	ldd	r24, Y+1	; 0x01
 1a0:	88 2f       	mov	r24, r24
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	05 d0       	rcall	.+10     	; 0x1b0 <Timer_init_withoutStruct>
 1a6:	00 00       	nop
 1a8:	0f 90       	pop	r0
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <Timer_init_withoutStruct>:
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	1f 92       	push	r1
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
 1ba:	89 83       	std	Y+1, r24	; 0x01
 1bc:	85 e4       	ldi	r24, 0x45	; 69
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	25 e4       	ldi	r18, 0x45	; 69
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	f9 01       	movw	r30, r18
 1c6:	20 81       	ld	r18, Z
 1c8:	27 7f       	andi	r18, 0xF7	; 247
 1ca:	fc 01       	movw	r30, r24
 1cc:	20 83       	st	Z, r18
 1ce:	84 e4       	ldi	r24, 0x44	; 68
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	24 e4       	ldi	r18, 0x44	; 68
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	f9 01       	movw	r30, r18
 1d8:	20 81       	ld	r18, Z
 1da:	22 60       	ori	r18, 0x02	; 2
 1dc:	fc 01       	movw	r30, r24
 1de:	20 83       	st	Z, r18
 1e0:	84 e4       	ldi	r24, 0x44	; 68
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	24 e4       	ldi	r18, 0x44	; 68
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	f9 01       	movw	r30, r18
 1ea:	20 81       	ld	r18, Z
 1ec:	2e 7f       	andi	r18, 0xFE	; 254
 1ee:	fc 01       	movw	r30, r24
 1f0:	20 83       	st	Z, r18
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	88 2f       	mov	r24, r24
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	40 97       	sbiw	r24, 0x10	; 16
 1fa:	09 f5       	brne	.+66     	; 0x23e <Timer_init_withoutStruct+0x8e>
 1fc:	87 e4       	ldi	r24, 0x47	; 71
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	29 ef       	ldi	r18, 0xF9	; 249
 202:	fc 01       	movw	r30, r24
 204:	20 83       	st	Z, r18
 206:	85 e4       	ldi	r24, 0x45	; 69
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	25 e4       	ldi	r18, 0x45	; 69
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	f9 01       	movw	r30, r18
 210:	20 81       	ld	r18, Z
 212:	2b 7f       	andi	r18, 0xFB	; 251
 214:	fc 01       	movw	r30, r24
 216:	20 83       	st	Z, r18
 218:	85 e4       	ldi	r24, 0x45	; 69
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	25 e4       	ldi	r18, 0x45	; 69
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	f9 01       	movw	r30, r18
 222:	20 81       	ld	r18, Z
 224:	22 60       	ori	r18, 0x02	; 2
 226:	fc 01       	movw	r30, r24
 228:	20 83       	st	Z, r18
 22a:	85 e4       	ldi	r24, 0x45	; 69
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	25 e4       	ldi	r18, 0x45	; 69
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	f9 01       	movw	r30, r18
 234:	20 81       	ld	r18, Z
 236:	21 60       	ori	r18, 0x01	; 1
 238:	fc 01       	movw	r30, r24
 23a:	20 83       	st	Z, r18
 23c:	21 c0       	rjmp	.+66     	; 0x280 <Timer_init_withoutStruct+0xd0>
 23e:	87 e4       	ldi	r24, 0x47	; 71
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	2c e7       	ldi	r18, 0x7C	; 124
 244:	fc 01       	movw	r30, r24
 246:	20 83       	st	Z, r18
 248:	85 e4       	ldi	r24, 0x45	; 69
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	25 e4       	ldi	r18, 0x45	; 69
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	f9 01       	movw	r30, r18
 252:	20 81       	ld	r18, Z
 254:	2b 7f       	andi	r18, 0xFB	; 251
 256:	fc 01       	movw	r30, r24
 258:	20 83       	st	Z, r18
 25a:	85 e4       	ldi	r24, 0x45	; 69
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	25 e4       	ldi	r18, 0x45	; 69
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	f9 01       	movw	r30, r18
 264:	20 81       	ld	r18, Z
 266:	22 60       	ori	r18, 0x02	; 2
 268:	fc 01       	movw	r30, r24
 26a:	20 83       	st	Z, r18
 26c:	85 e4       	ldi	r24, 0x45	; 69
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	25 e4       	ldi	r18, 0x45	; 69
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	f9 01       	movw	r30, r18
 276:	20 81       	ld	r18, Z
 278:	2e 7f       	andi	r18, 0xFE	; 254
 27a:	fc 01       	movw	r30, r24
 27c:	20 83       	st	Z, r18
 27e:	00 00       	nop
 280:	8e e6       	ldi	r24, 0x6E	; 110
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	2e e6       	ldi	r18, 0x6E	; 110
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	f9 01       	movw	r30, r18
 28a:	20 81       	ld	r18, Z
 28c:	2b 7f       	andi	r18, 0xFB	; 251
 28e:	fc 01       	movw	r30, r24
 290:	20 83       	st	Z, r18
 292:	8e e6       	ldi	r24, 0x6E	; 110
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	2e e6       	ldi	r18, 0x6E	; 110
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	f9 01       	movw	r30, r18
 29c:	20 81       	ld	r18, Z
 29e:	22 60       	ori	r18, 0x02	; 2
 2a0:	fc 01       	movw	r30, r24
 2a2:	20 83       	st	Z, r18
 2a4:	8e e6       	ldi	r24, 0x6E	; 110
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	2e e6       	ldi	r18, 0x6E	; 110
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	f9 01       	movw	r30, r18
 2ae:	20 81       	ld	r18, Z
 2b0:	2e 7f       	andi	r18, 0xFE	; 254
 2b2:	fc 01       	movw	r30, r24
 2b4:	20 83       	st	Z, r18
 2b6:	00 00       	nop
 2b8:	0f 90       	pop	r0
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <__vector_16>:
 ( not used atm)
 Timer compare A interrput:
 - increase timer_count
 - if timer_count is at max of uint16, set it to 0
 */
ISR(TIMER0_COMPA_vect){
 2c0:	1f 92       	push	r1
 2c2:	0f 92       	push	r0
 2c4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1
 2cc:	8f 93       	push	r24
 2ce:	9f 93       	push	r25
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	cd b7       	in	r28, 0x3d	; 61
 2d6:	de b7       	in	r29, 0x3e	; 62
    timer_count++;
 2d8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 2dc:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 2e0:	01 96       	adiw	r24, 0x01	; 1
 2e2:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
 2e6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
}
 2ea:	00 00       	nop
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	9f 91       	pop	r25
 2f2:	8f 91       	pop	r24
 2f4:	0f 90       	pop	r0
 2f6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2fa:	0f 90       	pop	r0
 2fc:	1f 90       	pop	r1
 2fe:	18 95       	reti

00000300 <buff_put>:
    /* Wait for data to be received */
    while ( !(UCSR0A & (1<<RXC0)) )
        ;
    /* Get and return received data from buffer */
    return UDR0;
}
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	1f 92       	push	r1
 306:	cd b7       	in	r28, 0x3d	; 61
 308:	de b7       	in	r29, 0x3e	; 62
 30a:	89 83       	std	Y+1, r24	; 0x01
 30c:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <buffer+0x202>
 310:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <buffer+0x203>
 314:	9c 01       	movw	r18, r24
 316:	2f 5f       	subi	r18, 0xFF	; 255
 318:	3f 4f       	sbci	r19, 0xFF	; 255
 31a:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <buffer+0x200>
 31e:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <buffer+0x201>
 322:	28 17       	cp	r18, r24
 324:	39 07       	cpc	r19, r25
 326:	69 f0       	breq	.+26     	; 0x342 <buff_put+0x42>
 328:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <buffer+0x200>
 32c:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <buffer+0x201>
 330:	89 2b       	or	r24, r25
 332:	49 f4       	brne	.+18     	; 0x346 <buff_put+0x46>
 334:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <buffer+0x202>
 338:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <buffer+0x203>
 33c:	8f 3f       	cpi	r24, 0xFF	; 255
 33e:	91 40       	sbci	r25, 0x01	; 1
 340:	11 f4       	brne	.+4      	; 0x346 <buff_put+0x46>
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	1e c0       	rjmp	.+60     	; 0x382 <buff_put+0x82>
 346:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <buffer+0x202>
 34a:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <buffer+0x203>
 34e:	80 5f       	subi	r24, 0xF0	; 240
 350:	9e 4f       	sbci	r25, 0xFE	; 254
 352:	29 81       	ldd	r18, Y+1	; 0x01
 354:	fc 01       	movw	r30, r24
 356:	20 83       	st	Z, r18
 358:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <buffer+0x202>
 35c:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <buffer+0x203>
 360:	01 96       	adiw	r24, 0x01	; 1
 362:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <buffer+0x203>
 366:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <buffer+0x202>
 36a:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <buffer+0x202>
 36e:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <buffer+0x203>
 372:	81 15       	cp	r24, r1
 374:	92 40       	sbci	r25, 0x02	; 2
 376:	20 f0       	brcs	.+8      	; 0x380 <buff_put+0x80>
 378:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <buffer+0x203>
 37c:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <buffer+0x202>
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	0f 90       	pop	r0
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	08 95       	ret

0000038a <buff_get>:
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	00 d0       	rcall	.+0      	; 0x390 <buff_get+0x6>
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
 394:	9a 83       	std	Y+2, r25	; 0x02
 396:	89 83       	std	Y+1, r24	; 0x01
 398:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <buffer+0x200>
 39c:	30 91 11 03 	lds	r19, 0x0311	; 0x800311 <buffer+0x201>
 3a0:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <buffer+0x202>
 3a4:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <buffer+0x203>
 3a8:	28 17       	cp	r18, r24
 3aa:	39 07       	cpc	r19, r25
 3ac:	11 f4       	brne	.+4      	; 0x3b2 <buff_get+0x28>
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	21 c0       	rjmp	.+66     	; 0x3f4 <buff_get+0x6a>
 3b2:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <buffer+0x200>
 3b6:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <buffer+0x201>
 3ba:	80 5f       	subi	r24, 0xF0	; 240
 3bc:	9e 4f       	sbci	r25, 0xFE	; 254
 3be:	fc 01       	movw	r30, r24
 3c0:	20 81       	ld	r18, Z
 3c2:	89 81       	ldd	r24, Y+1	; 0x01
 3c4:	9a 81       	ldd	r25, Y+2	; 0x02
 3c6:	fc 01       	movw	r30, r24
 3c8:	20 83       	st	Z, r18
 3ca:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <buffer+0x200>
 3ce:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <buffer+0x201>
 3d2:	01 96       	adiw	r24, 0x01	; 1
 3d4:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <buffer+0x201>
 3d8:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <buffer+0x200>
 3dc:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <buffer+0x200>
 3e0:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <buffer+0x201>
 3e4:	81 15       	cp	r24, r1
 3e6:	92 40       	sbci	r25, 0x02	; 2
 3e8:	20 f0       	brcs	.+8      	; 0x3f2 <buff_get+0x68>
 3ea:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <buffer+0x201>
 3ee:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <buffer+0x200>
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	0f 90       	pop	r0
 3f6:	0f 90       	pop	r0
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	08 95       	ret

000003fe <uart_init>:
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
 402:	00 d0       	rcall	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 404:	cd b7       	in	r28, 0x3d	; 61
 406:	de b7       	in	r29, 0x3e	; 62
 408:	87 e6       	ldi	r24, 0x67	; 103
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	9a 83       	std	Y+2, r25	; 0x02
 40e:	89 83       	std	Y+1, r24	; 0x01
 410:	85 ec       	ldi	r24, 0xC5	; 197
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	29 81       	ldd	r18, Y+1	; 0x01
 416:	3a 81       	ldd	r19, Y+2	; 0x02
 418:	23 2f       	mov	r18, r19
 41a:	33 27       	eor	r19, r19
 41c:	fc 01       	movw	r30, r24
 41e:	20 83       	st	Z, r18
 420:	84 ec       	ldi	r24, 0xC4	; 196
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	29 81       	ldd	r18, Y+1	; 0x01
 426:	fc 01       	movw	r30, r24
 428:	20 83       	st	Z, r18
 42a:	81 ec       	ldi	r24, 0xC1	; 193
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	28 e1       	ldi	r18, 0x18	; 24
 430:	fc 01       	movw	r30, r24
 432:	20 83       	st	Z, r18
 434:	82 ec       	ldi	r24, 0xC2	; 194
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	26 e0       	ldi	r18, 0x06	; 6
 43a:	fc 01       	movw	r30, r24
 43c:	20 83       	st	Z, r18
 43e:	00 00       	nop
 440:	0f 90       	pop	r0
 442:	0f 90       	pop	r0
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <uart_init_isr>:
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	cd b7       	in	r28, 0x3d	; 61
 450:	de b7       	in	r29, 0x3e	; 62
 452:	d5 df       	rcall	.-86     	; 0x3fe <uart_init>
 454:	81 ec       	ldi	r24, 0xC1	; 193
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	21 ec       	ldi	r18, 0xC1	; 193
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	f9 01       	movw	r30, r18
 45e:	20 81       	ld	r18, Z
 460:	20 62       	ori	r18, 0x20	; 32
 462:	fc 01       	movw	r30, r24
 464:	20 83       	st	Z, r18
 466:	00 00       	nop
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	08 95       	ret

0000046e <uart_send_isr>:
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	00 d0       	rcall	.+0      	; 0x474 <uart_send_isr+0x6>
 474:	00 d0       	rcall	.+0      	; 0x476 <uart_send_isr+0x8>
 476:	00 d0       	rcall	.+0      	; 0x478 <uart_send_isr+0xa>
 478:	cd b7       	in	r28, 0x3d	; 61
 47a:	de b7       	in	r29, 0x3e	; 62
 47c:	9e 83       	std	Y+6, r25	; 0x06
 47e:	8d 83       	std	Y+5, r24	; 0x05
 480:	8d 81       	ldd	r24, Y+5	; 0x05
 482:	9e 81       	ldd	r25, Y+6	; 0x06
 484:	7f d0       	rcall	.+254    	; 0x584 <strlen>
 486:	9c 83       	std	Y+4, r25	; 0x04
 488:	8b 83       	std	Y+3, r24	; 0x03
 48a:	1a 82       	std	Y+2, r1	; 0x02
 48c:	19 82       	std	Y+1, r1	; 0x01
 48e:	18 c0       	rjmp	.+48     	; 0x4c0 <uart_send_isr+0x52>
 490:	89 81       	ldd	r24, Y+1	; 0x01
 492:	9a 81       	ldd	r25, Y+2	; 0x02
 494:	2d 81       	ldd	r18, Y+5	; 0x05
 496:	3e 81       	ldd	r19, Y+6	; 0x06
 498:	82 0f       	add	r24, r18
 49a:	93 1f       	adc	r25, r19
 49c:	fc 01       	movw	r30, r24
 49e:	80 81       	ld	r24, Z
 4a0:	2f df       	rcall	.-418    	; 0x300 <buff_put>
 4a2:	81 30       	cpi	r24, 0x01	; 1
 4a4:	41 f4       	brne	.+16     	; 0x4b6 <uart_send_isr+0x48>
 4a6:	89 81       	ldd	r24, Y+1	; 0x01
 4a8:	9a 81       	ldd	r25, Y+2	; 0x02
 4aa:	9c 01       	movw	r18, r24
 4ac:	2f 5f       	subi	r18, 0xFF	; 255
 4ae:	3f 4f       	sbci	r19, 0xFF	; 255
 4b0:	3a 83       	std	Y+2, r19	; 0x02
 4b2:	29 83       	std	Y+1, r18	; 0x01
 4b4:	17 c0       	rjmp	.+46     	; 0x4e4 <uart_send_isr+0x76>
 4b6:	89 81       	ldd	r24, Y+1	; 0x01
 4b8:	9a 81       	ldd	r25, Y+2	; 0x02
 4ba:	01 96       	adiw	r24, 0x01	; 1
 4bc:	9a 83       	std	Y+2, r25	; 0x02
 4be:	89 83       	std	Y+1, r24	; 0x01
 4c0:	29 81       	ldd	r18, Y+1	; 0x01
 4c2:	3a 81       	ldd	r19, Y+2	; 0x02
 4c4:	8b 81       	ldd	r24, Y+3	; 0x03
 4c6:	9c 81       	ldd	r25, Y+4	; 0x04
 4c8:	28 17       	cp	r18, r24
 4ca:	39 07       	cpc	r19, r25
 4cc:	0c f3       	brlt	.-62     	; 0x490 <uart_send_isr+0x22>
 4ce:	80 ec       	ldi	r24, 0xC0	; 192
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	20 ec       	ldi	r18, 0xC0	; 192
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	f9 01       	movw	r30, r18
 4d8:	20 81       	ld	r18, Z
 4da:	20 62       	ori	r18, 0x20	; 32
 4dc:	fc 01       	movw	r30, r24
 4de:	20 83       	st	Z, r18
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	26 96       	adiw	r28, 0x06	; 6
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	f8 94       	cli
 4ea:	de bf       	out	0x3e, r29	; 62
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	cd bf       	out	0x3d, r28	; 61
 4f0:	df 91       	pop	r29
 4f2:	cf 91       	pop	r28
 4f4:	08 95       	ret

000004f6 <__vector_21>:


ISR(USART0_UDRE_vect){
 4f6:	1f 92       	push	r1
 4f8:	0f 92       	push	r0
 4fa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 4fe:	0f 92       	push	r0
 500:	11 24       	eor	r1, r1
 502:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 506:	0f 92       	push	r0
 508:	2f 93       	push	r18
 50a:	3f 93       	push	r19
 50c:	4f 93       	push	r20
 50e:	5f 93       	push	r21
 510:	6f 93       	push	r22
 512:	7f 93       	push	r23
 514:	8f 93       	push	r24
 516:	9f 93       	push	r25
 518:	af 93       	push	r26
 51a:	bf 93       	push	r27
 51c:	ef 93       	push	r30
 51e:	ff 93       	push	r31
 520:	cf 93       	push	r28
 522:	df 93       	push	r29
 524:	1f 92       	push	r1
 526:	cd b7       	in	r28, 0x3d	; 61
 528:	de b7       	in	r29, 0x3e	; 62
    unsigned char pByte;
    if (buff_get(&pByte) == 0) {
 52a:	ce 01       	movw	r24, r28
 52c:	01 96       	adiw	r24, 0x01	; 1
 52e:	2d df       	rcall	.-422    	; 0x38a <buff_get>
 530:	88 23       	and	r24, r24
 532:	31 f4       	brne	.+12     	; 0x540 <__vector_21+0x4a>
        UDR0 = pByte;
 534:	86 ec       	ldi	r24, 0xC6	; 198
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	29 81       	ldd	r18, Y+1	; 0x01
 53a:	fc 01       	movw	r30, r24
 53c:	20 83       	st	Z, r18
    }else {
        UCSR0A &= ~(1 << UDRE0);
    }
}
 53e:	09 c0       	rjmp	.+18     	; 0x552 <__vector_21+0x5c>
ISR(USART0_UDRE_vect){
    unsigned char pByte;
    if (buff_get(&pByte) == 0) {
        UDR0 = pByte;
    }else {
        UCSR0A &= ~(1 << UDRE0);
 540:	80 ec       	ldi	r24, 0xC0	; 192
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	20 ec       	ldi	r18, 0xC0	; 192
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	f9 01       	movw	r30, r18
 54a:	20 81       	ld	r18, Z
 54c:	2f 7d       	andi	r18, 0xDF	; 223
 54e:	fc 01       	movw	r30, r24
 550:	20 83       	st	Z, r18
    }
}
 552:	00 00       	nop
 554:	0f 90       	pop	r0
 556:	df 91       	pop	r29
 558:	cf 91       	pop	r28
 55a:	ff 91       	pop	r31
 55c:	ef 91       	pop	r30
 55e:	bf 91       	pop	r27
 560:	af 91       	pop	r26
 562:	9f 91       	pop	r25
 564:	8f 91       	pop	r24
 566:	7f 91       	pop	r23
 568:	6f 91       	pop	r22
 56a:	5f 91       	pop	r21
 56c:	4f 91       	pop	r20
 56e:	3f 91       	pop	r19
 570:	2f 91       	pop	r18
 572:	0f 90       	pop	r0
 574:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 578:	0f 90       	pop	r0
 57a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 57e:	0f 90       	pop	r0
 580:	1f 90       	pop	r1
 582:	18 95       	reti

00000584 <strlen>:
 584:	fc 01       	movw	r30, r24
 586:	01 90       	ld	r0, Z+
 588:	00 20       	and	r0, r0
 58a:	e9 f7       	brne	.-6      	; 0x586 <strlen+0x2>
 58c:	80 95       	com	r24
 58e:	90 95       	com	r25
 590:	8e 0f       	add	r24, r30
 592:	9f 1f       	adc	r25, r31
 594:	08 95       	ret

00000596 <_exit>:
 596:	f8 94       	cli

00000598 <__stop_program>:
 598:	ff cf       	rjmp	.-2      	; 0x598 <__stop_program>
