
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000013ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001376  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  000013ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000141c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016c5  00000000  00000000  000015ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b31  00000000  00000000  00002cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ebe  00000000  00000000  000037e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e4  00000000  00000000  000046a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b9  00000000  00000000  00004b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000913  00000000  00000000  0000523d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  00005b50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 8d 08 	jmp	0x111a	; 0x111a <__vector_16>
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e7       	ldi	r30, 0x76	; 118
      a0:	f3 e1       	ldi	r31, 0x13	; 19
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 30       	cpi	r26, 0x00	; 0
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a0 e0       	ldi	r26, 0x00	; 0
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 31       	cpi	r26, 0x10	; 16
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	77 d1       	rcall	.+750    	; 0x3b2 <main>
      c4:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <Led_init>:
void Led7_On(void) {
    PORTB |= (1 << 1);
}
void Led7_Off(void) {
    PORTB &= ~(1 << 1);
}
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	1f 92       	push	r1
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
      d4:	89 83       	std	Y+1, r24	; 0x01
      d6:	84 e2       	ldi	r24, 0x24	; 36
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	2f ef       	ldi	r18, 0xFF	; 255
      dc:	fc 01       	movw	r30, r24
      de:	20 83       	st	Z, r18
      e0:	85 e2       	ldi	r24, 0x25	; 37
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	fc 01       	movw	r30, r24
      e6:	10 82       	st	Z, r1
      e8:	89 81       	ldd	r24, Y+1	; 0x01
      ea:	88 23       	and	r24, r24
      ec:	91 f0       	breq	.+36     	; 0x112 <Led_init+0x48>
      ee:	8a e2       	ldi	r24, 0x2A	; 42
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	2a e2       	ldi	r18, 0x2A	; 42
      f4:	30 e0       	ldi	r19, 0x00	; 0
      f6:	f9 01       	movw	r30, r18
      f8:	20 81       	ld	r18, Z
      fa:	2f 61       	ori	r18, 0x1F	; 31
      fc:	fc 01       	movw	r30, r24
      fe:	20 83       	st	Z, r18
     100:	8b e2       	ldi	r24, 0x2B	; 43
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	2b e2       	ldi	r18, 0x2B	; 43
     106:	30 e0       	ldi	r19, 0x00	; 0
     108:	f9 01       	movw	r30, r18
     10a:	20 81       	ld	r18, Z
     10c:	20 7e       	andi	r18, 0xE0	; 224
     10e:	fc 01       	movw	r30, r24
     110:	20 83       	st	Z, r18
     112:	00 00       	nop
     114:	0f 90       	pop	r0
     116:	df 91       	pop	r29
     118:	cf 91       	pop	r28
     11a:	08 95       	ret

0000011c <Led1_On>:
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
     120:	cd b7       	in	r28, 0x3d	; 61
     122:	de b7       	in	r29, 0x3e	; 62
     124:	85 e2       	ldi	r24, 0x25	; 37
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	25 e2       	ldi	r18, 0x25	; 37
     12a:	30 e0       	ldi	r19, 0x00	; 0
     12c:	f9 01       	movw	r30, r18
     12e:	20 81       	ld	r18, Z
     130:	20 68       	ori	r18, 0x80	; 128
     132:	fc 01       	movw	r30, r24
     134:	20 83       	st	Z, r18
     136:	00 00       	nop
     138:	df 91       	pop	r29
     13a:	cf 91       	pop	r28
     13c:	08 95       	ret

0000013e <Led1_Off>:
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	cd b7       	in	r28, 0x3d	; 61
     144:	de b7       	in	r29, 0x3e	; 62
     146:	85 e2       	ldi	r24, 0x25	; 37
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	25 e2       	ldi	r18, 0x25	; 37
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	f9 01       	movw	r30, r18
     150:	20 81       	ld	r18, Z
     152:	2f 77       	andi	r18, 0x7F	; 127
     154:	fc 01       	movw	r30, r24
     156:	20 83       	st	Z, r18
     158:	00 00       	nop
     15a:	df 91       	pop	r29
     15c:	cf 91       	pop	r28
     15e:	08 95       	ret

00000160 <Led2_On>:
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	cd b7       	in	r28, 0x3d	; 61
     166:	de b7       	in	r29, 0x3e	; 62
     168:	85 e2       	ldi	r24, 0x25	; 37
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	25 e2       	ldi	r18, 0x25	; 37
     16e:	30 e0       	ldi	r19, 0x00	; 0
     170:	f9 01       	movw	r30, r18
     172:	20 81       	ld	r18, Z
     174:	20 64       	ori	r18, 0x40	; 64
     176:	fc 01       	movw	r30, r24
     178:	20 83       	st	Z, r18
     17a:	00 00       	nop
     17c:	df 91       	pop	r29
     17e:	cf 91       	pop	r28
     180:	08 95       	ret

00000182 <Led2_Off>:
     182:	cf 93       	push	r28
     184:	df 93       	push	r29
     186:	cd b7       	in	r28, 0x3d	; 61
     188:	de b7       	in	r29, 0x3e	; 62
     18a:	85 e2       	ldi	r24, 0x25	; 37
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	25 e2       	ldi	r18, 0x25	; 37
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	f9 01       	movw	r30, r18
     194:	20 81       	ld	r18, Z
     196:	2f 7b       	andi	r18, 0xBF	; 191
     198:	fc 01       	movw	r30, r24
     19a:	20 83       	st	Z, r18
     19c:	00 00       	nop
     19e:	df 91       	pop	r29
     1a0:	cf 91       	pop	r28
     1a2:	08 95       	ret

000001a4 <Led3_On>:
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
     1a8:	cd b7       	in	r28, 0x3d	; 61
     1aa:	de b7       	in	r29, 0x3e	; 62
     1ac:	85 e2       	ldi	r24, 0x25	; 37
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	25 e2       	ldi	r18, 0x25	; 37
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	f9 01       	movw	r30, r18
     1b6:	20 81       	ld	r18, Z
     1b8:	20 62       	ori	r18, 0x20	; 32
     1ba:	fc 01       	movw	r30, r24
     1bc:	20 83       	st	Z, r18
     1be:	00 00       	nop
     1c0:	df 91       	pop	r29
     1c2:	cf 91       	pop	r28
     1c4:	08 95       	ret

000001c6 <Led3_Off>:
     1c6:	cf 93       	push	r28
     1c8:	df 93       	push	r29
     1ca:	cd b7       	in	r28, 0x3d	; 61
     1cc:	de b7       	in	r29, 0x3e	; 62
     1ce:	85 e2       	ldi	r24, 0x25	; 37
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	25 e2       	ldi	r18, 0x25	; 37
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	f9 01       	movw	r30, r18
     1d8:	20 81       	ld	r18, Z
     1da:	2f 7d       	andi	r18, 0xDF	; 223
     1dc:	fc 01       	movw	r30, r24
     1de:	20 83       	st	Z, r18
     1e0:	00 00       	nop
     1e2:	df 91       	pop	r29
     1e4:	cf 91       	pop	r28
     1e6:	08 95       	ret

000001e8 <Led4_On>:
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
     1f0:	85 e2       	ldi	r24, 0x25	; 37
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	25 e2       	ldi	r18, 0x25	; 37
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	f9 01       	movw	r30, r18
     1fa:	20 81       	ld	r18, Z
     1fc:	20 61       	ori	r18, 0x10	; 16
     1fe:	fc 01       	movw	r30, r24
     200:	20 83       	st	Z, r18
     202:	00 00       	nop
     204:	df 91       	pop	r29
     206:	cf 91       	pop	r28
     208:	08 95       	ret

0000020a <Led4_Off>:
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	85 e2       	ldi	r24, 0x25	; 37
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	25 e2       	ldi	r18, 0x25	; 37
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	f9 01       	movw	r30, r18
     21c:	20 81       	ld	r18, Z
     21e:	2f 7e       	andi	r18, 0xEF	; 239
     220:	fc 01       	movw	r30, r24
     222:	20 83       	st	Z, r18
     224:	00 00       	nop
     226:	df 91       	pop	r29
     228:	cf 91       	pop	r28
     22a:	08 95       	ret

0000022c <Led5_On>:
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	cd b7       	in	r28, 0x3d	; 61
     232:	de b7       	in	r29, 0x3e	; 62
     234:	85 e2       	ldi	r24, 0x25	; 37
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	25 e2       	ldi	r18, 0x25	; 37
     23a:	30 e0       	ldi	r19, 0x00	; 0
     23c:	f9 01       	movw	r30, r18
     23e:	20 81       	ld	r18, Z
     240:	28 60       	ori	r18, 0x08	; 8
     242:	fc 01       	movw	r30, r24
     244:	20 83       	st	Z, r18
     246:	00 00       	nop
     248:	df 91       	pop	r29
     24a:	cf 91       	pop	r28
     24c:	08 95       	ret

0000024e <Led8_On>:

/**
led8 - ioB0
*/
void Led8_On(void) {
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 0);
     256:	85 e2       	ldi	r24, 0x25	; 37
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	25 e2       	ldi	r18, 0x25	; 37
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	f9 01       	movw	r30, r18
     260:	20 81       	ld	r18, Z
     262:	21 60       	ori	r18, 0x01	; 1
     264:	fc 01       	movw	r30, r24
     266:	20 83       	st	Z, r18
}
     268:	00 00       	nop
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	08 95       	ret

00000270 <Taster_init>:
 ---------------------
 - DDR Reg has to be set to 0
 - PORT Reg has to be set to 1
 -> Pin is input with pull-up
 */
void Taster_init() {
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	cd b7       	in	r28, 0x3d	; 61
     276:	de b7       	in	r29, 0x3e	; 62
    
    // Disable JT
    MCUCR |= (1 << JTD);
     278:	85 e5       	ldi	r24, 0x55	; 85
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	25 e5       	ldi	r18, 0x55	; 85
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	f9 01       	movw	r30, r18
     282:	20 81       	ld	r18, Z
     284:	20 68       	ori	r18, 0x80	; 128
     286:	fc 01       	movw	r30, r24
     288:	20 83       	st	Z, r18
    MCUCR |= (1 << JTD);
     28a:	85 e5       	ldi	r24, 0x55	; 85
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	25 e5       	ldi	r18, 0x55	; 85
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	f9 01       	movw	r30, r18
     294:	20 81       	ld	r18, Z
     296:	20 68       	ori	r18, 0x80	; 128
     298:	fc 01       	movw	r30, r24
     29a:	20 83       	st	Z, r18
    
    // set to inputs
    DDRC &= ~(1 << 2);
     29c:	87 e2       	ldi	r24, 0x27	; 39
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	27 e2       	ldi	r18, 0x27	; 39
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	f9 01       	movw	r30, r18
     2a6:	20 81       	ld	r18, Z
     2a8:	2b 7f       	andi	r18, 0xFB	; 251
     2aa:	fc 01       	movw	r30, r24
     2ac:	20 83       	st	Z, r18
    DDRD &= ~( (1 << 7) | (1 << 6) | (1 << 5) );
     2ae:	8a e2       	ldi	r24, 0x2A	; 42
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	2a e2       	ldi	r18, 0x2A	; 42
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	f9 01       	movw	r30, r18
     2b8:	20 81       	ld	r18, Z
     2ba:	2f 71       	andi	r18, 0x1F	; 31
     2bc:	fc 01       	movw	r30, r24
     2be:	20 83       	st	Z, r18
    
    // enable pull-up
    PORTC |= (1 << 2);
     2c0:	88 e2       	ldi	r24, 0x28	; 40
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	28 e2       	ldi	r18, 0x28	; 40
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	f9 01       	movw	r30, r18
     2ca:	20 81       	ld	r18, Z
     2cc:	24 60       	ori	r18, 0x04	; 4
     2ce:	fc 01       	movw	r30, r24
     2d0:	20 83       	st	Z, r18
    PORTD |= (1 << 7) | (1 << 6) | (1 << 5);
     2d2:	8b e2       	ldi	r24, 0x2B	; 43
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	2b e2       	ldi	r18, 0x2B	; 43
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	f9 01       	movw	r30, r18
     2dc:	20 81       	ld	r18, Z
     2de:	20 6e       	ori	r18, 0xE0	; 224
     2e0:	fc 01       	movw	r30, r24
     2e2:	20 83       	st	Z, r18
}
     2e4:	00 00       	nop
     2e6:	df 91       	pop	r29
     2e8:	cf 91       	pop	r28
     2ea:	08 95       	ret

000002ec <Taster1_get>:

/**
 Taster1 - ioD7
 */
uint8_t Taster1_get(void) {
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	00 d0       	rcall	.+0      	; 0x2f2 <Taster1_get+0x6>
     2f2:	cd b7       	in	r28, 0x3d	; 61
     2f4:	de b7       	in	r29, 0x3e	; 62
    int state = PIND;
     2f6:	89 e2       	ldi	r24, 0x29	; 41
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	fc 01       	movw	r30, r24
     2fc:	80 81       	ld	r24, Z
     2fe:	88 2f       	mov	r24, r24
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	9a 83       	std	Y+2, r25	; 0x02
     304:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<7)) == 0 ) {
     306:	89 81       	ldd	r24, Y+1	; 0x01
     308:	9a 81       	ldd	r25, Y+2	; 0x02
     30a:	80 78       	andi	r24, 0x80	; 128
     30c:	99 27       	eor	r25, r25
     30e:	89 2b       	or	r24, r25
     310:	11 f4       	brne	.+4      	; 0x316 <Taster1_get+0x2a>
        return TASTER_RETURN_VALUE_LOW;
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	01 c0       	rjmp	.+2      	; 0x318 <Taster1_get+0x2c>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
     316:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     318:	0f 90       	pop	r0
     31a:	0f 90       	pop	r0
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	08 95       	ret

00000322 <Taster2_get>:

/**
Taster2 - ioD6
*/
uint8_t Taster2_get(void) {
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	1f 92       	push	r1
     328:	cd b7       	in	r28, 0x3d	; 61
     32a:	de b7       	in	r29, 0x3e	; 62
    uint8_t state = PIND;
     32c:	89 e2       	ldi	r24, 0x29	; 41
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	fc 01       	movw	r30, r24
     332:	80 81       	ld	r24, Z
     334:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<6)) == 0 ) {
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	88 2f       	mov	r24, r24
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	80 74       	andi	r24, 0x40	; 64
     33e:	99 27       	eor	r25, r25
     340:	89 2b       	or	r24, r25
     342:	11 f4       	brne	.+4      	; 0x348 <Taster2_get+0x26>
        return TASTER_RETURN_VALUE_LOW;
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	01 c0       	rjmp	.+2      	; 0x34a <Taster2_get+0x28>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
     348:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     34a:	0f 90       	pop	r0
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	08 95       	ret

00000352 <Taster3_get>:

/**
Taster3 - ioD5
*/
uint8_t Taster3_get(void) {
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	1f 92       	push	r1
     358:	cd b7       	in	r28, 0x3d	; 61
     35a:	de b7       	in	r29, 0x3e	; 62
    uint8_t state = PIND;
     35c:	89 e2       	ldi	r24, 0x29	; 41
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	fc 01       	movw	r30, r24
     362:	80 81       	ld	r24, Z
     364:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<5)) == 0 ) {
     366:	89 81       	ldd	r24, Y+1	; 0x01
     368:	88 2f       	mov	r24, r24
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	80 72       	andi	r24, 0x20	; 32
     36e:	99 27       	eor	r25, r25
     370:	89 2b       	or	r24, r25
     372:	11 f4       	brne	.+4      	; 0x378 <Taster3_get+0x26>
        return TASTER_RETURN_VALUE_LOW;
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	01 c0       	rjmp	.+2      	; 0x37a <Taster3_get+0x28>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
     378:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     37a:	0f 90       	pop	r0
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	08 95       	ret

00000382 <Taster4_get>:

/**
Taster4 - ioC2
*/
uint8_t Taster4_get(void) {
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	1f 92       	push	r1
     388:	cd b7       	in	r28, 0x3d	; 61
     38a:	de b7       	in	r29, 0x3e	; 62
    uint8_t state = PINC;
     38c:	86 e2       	ldi	r24, 0x26	; 38
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	fc 01       	movw	r30, r24
     392:	80 81       	ld	r24, Z
     394:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<2)) == 0 ) {
     396:	89 81       	ldd	r24, Y+1	; 0x01
     398:	88 2f       	mov	r24, r24
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	84 70       	andi	r24, 0x04	; 4
     39e:	99 27       	eor	r25, r25
     3a0:	89 2b       	or	r24, r25
     3a2:	11 f4       	brne	.+4      	; 0x3a8 <Taster4_get+0x26>
        return TASTER_RETURN_VALUE_LOW;
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	01 c0       	rjmp	.+2      	; 0x3aa <Taster4_get+0x28>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
     3a8:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     3aa:	0f 90       	pop	r0
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	08 95       	ret

000003b2 <main>:





int main(void) {
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	00 d0       	rcall	.+0      	; 0x3b8 <main+0x6>
     3b8:	00 d0       	rcall	.+0      	; 0x3ba <main+0x8>
     3ba:	cd b7       	in	r28, 0x3d	; 61
     3bc:	de b7       	in	r29, 0x3e	; 62
	
    Led_init(0);	// Don't set LEDs at PORTD
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	84 de       	rcall	.-760    	; 0xca <Led_init>
	Taster_init();
     3c2:	56 df       	rcall	.-340    	; 0x270 <Taster_init>
    Timer_init();
     3c4:	43 d6       	rcall	.+3206   	; 0x104c <Timer_init>
     3c6:	78 94       	sei
	sei();
     3c8:	19 82       	std	Y+1, r1	; 0x01
	
    uint8_t state_testBoard = 0;
     3ca:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t last_time = 0;
     3cc:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t  toggle_asdf = 1;
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	8c 83       	std	Y+4, r24	; 0x04
			PORTB = 0x00;
		}*/
        
        
        //trafficLight();
        playground();
     3d2:	01 d0       	rcall	.+2      	; 0x3d6 <playground>
     3d4:	fe cf       	rjmp	.-4      	; 0x3d2 <main+0x20>

000003d6 <playground>:
    }
     3d6:	0f 93       	push	r16
- button1 pressed -> testTasterLed()
- button2 pressed -> testBoard()
- button3 pressed -> lauflicht()
- button4 pressed -> increment()
*/
void playground() {
     3d8:	1f 93       	push	r17
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
     3e2:	c4 55       	subi	r28, 0x54	; 84
     3e4:	d1 09       	sbc	r29, r1
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	f8 94       	cli
     3ea:	de bf       	out	0x3e, r29	; 62
     3ec:	0f be       	out	0x3f, r0	; 63
     3ee:	cd bf       	out	0x3d, r28	; 61
    static int mode = 0;
    
    if (mode == 0) {    // mode selection
     3f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     3f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     3f8:	89 2b       	or	r24, r25
     3fa:	09 f0       	breq	.+2      	; 0x3fe <playground+0x28>
     3fc:	02 c2       	rjmp	.+1028   	; 0x802 <__LOCK_REGION_LENGTH__+0x402>
        Led1_On();
     3fe:	8e de       	rcall	.-740    	; 0x11c <Led1_On>
        Led4_On();
     400:	f3 de       	rcall	.-538    	; 0x1e8 <Led4_On>
        Led5_On();
     402:	14 df       	rcall	.-472    	; 0x22c <Led5_On>
        Led8_On();
     404:	24 df       	rcall	.-440    	; 0x24e <Led8_On>
     406:	72 df       	rcall	.-284    	; 0x2ec <Taster1_get>
        
        // test buttons
        if (Taster1_get()) {
     408:	89 2b       	or	r24, r25
     40a:	09 f4       	brne	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40c:	79 c0       	rjmp	.+242    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	90 e0       	ldi	r25, 0x00	; 0
            mode = 1;
     412:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     416:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     41a:	85 e2       	ldi	r24, 0x25	; 37
            PORTB = 0x00;
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	fc 01       	movw	r30, r24
     420:	10 82       	st	Z, r1
     422:	7c de       	rcall	.-776    	; 0x11c <Led1_On>
            Led1_On();
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	aa ef       	ldi	r26, 0xFA	; 250
     42a:	b3 e4       	ldi	r27, 0x43	; 67
     42c:	8d 8b       	std	Y+21, r24	; 0x15
     42e:	9e 8b       	std	Y+22, r25	; 0x16
     430:	af 8b       	std	Y+23, r26	; 0x17
     432:	b8 8f       	std	Y+24, r27	; 0x18
     434:	20 e0       	ldi	r18, 0x00	; 0
     436:	30 e0       	ldi	r19, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     438:	4a e7       	ldi	r20, 0x7A	; 122
     43a:	53 e4       	ldi	r21, 0x43	; 67
     43c:	6d 89       	ldd	r22, Y+21	; 0x15
     43e:	7e 89       	ldd	r23, Y+22	; 0x16
     440:	8f 89       	ldd	r24, Y+23	; 0x17
     442:	98 8d       	ldd	r25, Y+24	; 0x18
     444:	0b d7       	rcall	.+3606   	; 0x125c <__mulsf3>
     446:	dc 01       	movw	r26, r24
     448:	cb 01       	movw	r24, r22
     44a:	89 8f       	std	Y+25, r24	; 0x19
     44c:	9a 8f       	std	Y+26, r25	; 0x1a
     44e:	ab 8f       	std	Y+27, r26	; 0x1b
     450:	bc 8f       	std	Y+28, r27	; 0x1c
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
     456:	40 e8       	ldi	r20, 0x80	; 128
     458:	5f e3       	ldi	r21, 0x3F	; 63
     45a:	69 8d       	ldd	r22, Y+25	; 0x19
     45c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     45e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     460:	9c 8d       	ldd	r25, Y+28	; 0x1c
     462:	7b d6       	rcall	.+3318   	; 0x115a <__cmpsf2>
     464:	88 23       	and	r24, r24
     466:	2c f4       	brge	.+10     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
     46c:	9e 8f       	std	Y+30, r25	; 0x1e
     46e:	8d 8f       	std	Y+29, r24	; 0x1d
     470:	3b c0       	rjmp	.+118    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     472:	20 e0       	ldi	r18, 0x00	; 0
     474:	3f ef       	ldi	r19, 0xFF	; 255
	else if (__tmp > 65535)
     476:	4f e7       	ldi	r20, 0x7F	; 127
     478:	57 e4       	ldi	r21, 0x47	; 71
     47a:	69 8d       	ldd	r22, Y+25	; 0x19
     47c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     47e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     480:	9c 8d       	ldd	r25, Y+28	; 0x1c
     482:	e8 d6       	rcall	.+3536   	; 0x1254 <__gesf2>
     484:	18 16       	cp	r1, r24
     486:	3c f5       	brge	.+78     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	30 e0       	ldi	r19, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     48c:	40 e2       	ldi	r20, 0x20	; 32
     48e:	51 e4       	ldi	r21, 0x41	; 65
     490:	6d 89       	ldd	r22, Y+21	; 0x15
     492:	7e 89       	ldd	r23, Y+22	; 0x16
     494:	8f 89       	ldd	r24, Y+23	; 0x17
     496:	98 8d       	ldd	r25, Y+24	; 0x18
     498:	e1 d6       	rcall	.+3522   	; 0x125c <__mulsf3>
     49a:	dc 01       	movw	r26, r24
     49c:	cb 01       	movw	r24, r22
     49e:	bc 01       	movw	r22, r24
     4a0:	cd 01       	movw	r24, r26
     4a2:	5f d6       	rcall	.+3262   	; 0x1162 <__fixunssfsi>
     4a4:	dc 01       	movw	r26, r24
     4a6:	cb 01       	movw	r24, r22
     4a8:	9e 8f       	std	Y+30, r25	; 0x1e
     4aa:	8d 8f       	std	Y+29, r24	; 0x1d
     4ac:	0f c0       	rjmp	.+30     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     4ae:	89 e1       	ldi	r24, 0x19	; 25
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	98 a3       	std	Y+32, r25	; 0x20
     4b4:	8f 8f       	std	Y+31, r24	; 0x1f
     4b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     4b8:	98 a1       	ldd	r25, Y+32	; 0x20
     4ba:	01 97       	sbiw	r24, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4bc:	f1 f7       	brne	.-4      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4be:	98 a3       	std	Y+32, r25	; 0x20
     4c0:	8f 8f       	std	Y+31, r24	; 0x1f
     4c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     4c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     4c6:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4c8:	9e 8f       	std	Y+30, r25	; 0x1e
     4ca:	8d 8f       	std	Y+29, r24	; 0x1d
     4cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     4ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4d0:	89 2b       	or	r24, r25
     4d2:	69 f7       	brne	.-38     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4d4:	13 c0       	rjmp	.+38     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     4d6:	69 8d       	ldd	r22, Y+25	; 0x19
     4d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4da:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4de:	41 d6       	rcall	.+3202   	; 0x1162 <__fixunssfsi>
     4e0:	dc 01       	movw	r26, r24
     4e2:	cb 01       	movw	r24, r22
     4e4:	9e 8f       	std	Y+30, r25	; 0x1e
     4e6:	8d 8f       	std	Y+29, r24	; 0x1d
     4e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     4ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
     4ec:	9a a3       	std	Y+34, r25	; 0x22
     4ee:	89 a3       	std	Y+33, r24	; 0x21
     4f0:	89 a1       	ldd	r24, Y+33	; 0x21
     4f2:	9a a1       	ldd	r25, Y+34	; 0x22
     4f4:	01 97       	sbiw	r24, 0x01	; 1
     4f6:	f1 f7       	brne	.-4      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4f8:	9a a3       	std	Y+34, r25	; 0x22
     4fa:	89 a3       	std	Y+33, r24	; 0x21
     4fc:	20 de       	rcall	.-960    	; 0x13e <Led1_Off>
            _delay_ms(500);
            Led1_Off();
     4fe:	19 c3       	rjmp	.+1586   	; 0xb32 <__LOCK_REGION_LENGTH__+0x732>
     500:	10 df       	rcall	.-480    	; 0x322 <Taster2_get>
            default:
                mode = 0;
                break;
        }
    }
}
     502:	89 2b       	or	r24, r25
            mode = 1;
            PORTB = 0x00;
            Led1_On();
            _delay_ms(500);
            Led1_Off();
        } else if (Taster2_get()) {
     504:	09 f4       	brne	.+2      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     506:	79 c0       	rjmp	.+242    	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
     508:	82 e0       	ldi	r24, 0x02	; 2
     50a:	90 e0       	ldi	r25, 0x00	; 0
            mode = 2;
     50c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     510:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     514:	85 e2       	ldi	r24, 0x25	; 37
     516:	90 e0       	ldi	r25, 0x00	; 0
            PORTB = 0x00;
     518:	fc 01       	movw	r30, r24
     51a:	10 82       	st	Z, r1
     51c:	21 de       	rcall	.-958    	; 0x160 <Led2_On>
     51e:	80 e0       	ldi	r24, 0x00	; 0
            Led2_On();
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	aa ef       	ldi	r26, 0xFA	; 250
     524:	b3 e4       	ldi	r27, 0x43	; 67
     526:	89 83       	std	Y+1, r24	; 0x01
     528:	9a 83       	std	Y+2, r25	; 0x02
     52a:	ab 83       	std	Y+3, r26	; 0x03
     52c:	bc 83       	std	Y+4, r27	; 0x04
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     532:	4a e7       	ldi	r20, 0x7A	; 122
     534:	53 e4       	ldi	r21, 0x43	; 67
     536:	69 81       	ldd	r22, Y+1	; 0x01
     538:	7a 81       	ldd	r23, Y+2	; 0x02
     53a:	8b 81       	ldd	r24, Y+3	; 0x03
     53c:	9c 81       	ldd	r25, Y+4	; 0x04
     53e:	8e d6       	rcall	.+3356   	; 0x125c <__mulsf3>
     540:	dc 01       	movw	r26, r24
     542:	cb 01       	movw	r24, r22
     544:	8b a3       	std	Y+35, r24	; 0x23
     546:	9c a3       	std	Y+36, r25	; 0x24
     548:	ad a3       	std	Y+37, r26	; 0x25
     54a:	be a3       	std	Y+38, r27	; 0x26
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
     550:	40 e8       	ldi	r20, 0x80	; 128
     552:	5f e3       	ldi	r21, 0x3F	; 63
     554:	6b a1       	ldd	r22, Y+35	; 0x23
     556:	7c a1       	ldd	r23, Y+36	; 0x24
     558:	8d a1       	ldd	r24, Y+37	; 0x25
     55a:	9e a1       	ldd	r25, Y+38	; 0x26
     55c:	fe d5       	rcall	.+3068   	; 0x115a <__cmpsf2>
     55e:	88 23       	and	r24, r24
     560:	2c f4       	brge	.+10     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
     566:	98 a7       	std	Y+40, r25	; 0x28
     568:	8f a3       	std	Y+39, r24	; 0x27
     56a:	3b c0       	rjmp	.+118    	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	3f ef       	ldi	r19, 0xFF	; 255
	else if (__tmp > 65535)
     570:	4f e7       	ldi	r20, 0x7F	; 127
     572:	57 e4       	ldi	r21, 0x47	; 71
     574:	6b a1       	ldd	r22, Y+35	; 0x23
     576:	7c a1       	ldd	r23, Y+36	; 0x24
     578:	8d a1       	ldd	r24, Y+37	; 0x25
     57a:	9e a1       	ldd	r25, Y+38	; 0x26
     57c:	6b d6       	rcall	.+3286   	; 0x1254 <__gesf2>
     57e:	18 16       	cp	r1, r24
     580:	3c f5       	brge	.+78     	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
     582:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	40 e2       	ldi	r20, 0x20	; 32
     588:	51 e4       	ldi	r21, 0x41	; 65
     58a:	69 81       	ldd	r22, Y+1	; 0x01
     58c:	7a 81       	ldd	r23, Y+2	; 0x02
     58e:	8b 81       	ldd	r24, Y+3	; 0x03
     590:	9c 81       	ldd	r25, Y+4	; 0x04
     592:	64 d6       	rcall	.+3272   	; 0x125c <__mulsf3>
     594:	dc 01       	movw	r26, r24
     596:	cb 01       	movw	r24, r22
     598:	bc 01       	movw	r22, r24
     59a:	cd 01       	movw	r24, r26
     59c:	e2 d5       	rcall	.+3012   	; 0x1162 <__fixunssfsi>
     59e:	dc 01       	movw	r26, r24
     5a0:	cb 01       	movw	r24, r22
     5a2:	98 a7       	std	Y+40, r25	; 0x28
     5a4:	8f a3       	std	Y+39, r24	; 0x27
     5a6:	0f c0       	rjmp	.+30     	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
     5a8:	89 e1       	ldi	r24, 0x19	; 25
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	9a a7       	std	Y+42, r25	; 0x2a
     5ae:	89 a7       	std	Y+41, r24	; 0x29
     5b0:	89 a5       	ldd	r24, Y+41	; 0x29
     5b2:	9a a5       	ldd	r25, Y+42	; 0x2a
     5b4:	01 97       	sbiw	r24, 0x01	; 1
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
     5b8:	9a a7       	std	Y+42, r25	; 0x2a
     5ba:	89 a7       	std	Y+41, r24	; 0x29
     5bc:	8f a1       	ldd	r24, Y+39	; 0x27
     5be:	98 a5       	ldd	r25, Y+40	; 0x28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5c0:	01 97       	sbiw	r24, 0x01	; 1
     5c2:	98 a7       	std	Y+40, r25	; 0x28
     5c4:	8f a3       	std	Y+39, r24	; 0x27
     5c6:	8f a1       	ldd	r24, Y+39	; 0x27
     5c8:	98 a5       	ldd	r25, Y+40	; 0x28
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5ca:	89 2b       	or	r24, r25
     5cc:	69 f7       	brne	.-38     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
     5ce:	13 c0       	rjmp	.+38     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
     5d0:	6b a1       	ldd	r22, Y+35	; 0x23
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5d2:	7c a1       	ldd	r23, Y+36	; 0x24
     5d4:	8d a1       	ldd	r24, Y+37	; 0x25
     5d6:	9e a1       	ldd	r25, Y+38	; 0x26
     5d8:	c4 d5       	rcall	.+2952   	; 0x1162 <__fixunssfsi>
     5da:	dc 01       	movw	r26, r24
     5dc:	cb 01       	movw	r24, r22
     5de:	98 a7       	std	Y+40, r25	; 0x28
     5e0:	8f a3       	std	Y+39, r24	; 0x27
     5e2:	8f a1       	ldd	r24, Y+39	; 0x27
     5e4:	98 a5       	ldd	r25, Y+40	; 0x28
     5e6:	9c a7       	std	Y+44, r25	; 0x2c
     5e8:	8b a7       	std	Y+43, r24	; 0x2b
     5ea:	8b a5       	ldd	r24, Y+43	; 0x2b
     5ec:	9c a5       	ldd	r25, Y+44	; 0x2c
     5ee:	01 97       	sbiw	r24, 0x01	; 1
     5f0:	f1 f7       	brne	.-4      	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
     5f2:	9c a7       	std	Y+44, r25	; 0x2c
     5f4:	8b a7       	std	Y+43, r24	; 0x2b
            _delay_ms(500);
            Led2_Off();
     5f6:	c5 dd       	rcall	.-1142   	; 0x182 <Led2_Off>
     5f8:	9c c2       	rjmp	.+1336   	; 0xb32 <__LOCK_REGION_LENGTH__+0x732>
            default:
                mode = 0;
                break;
        }
    }
}
     5fa:	ab de       	rcall	.-682    	; 0x352 <Taster3_get>
            mode = 2;
            PORTB = 0x00;
            Led2_On();
            _delay_ms(500);
            Led2_Off();
        } else if (Taster3_get()) {
     5fc:	89 2b       	or	r24, r25
     5fe:	09 f4       	brne	.+2      	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
     600:	79 c0       	rjmp	.+242    	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
     602:	83 e0       	ldi	r24, 0x03	; 3
     604:	90 e0       	ldi	r25, 0x00	; 0
            mode = 3;
     606:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     60a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     60e:	85 e2       	ldi	r24, 0x25	; 37
            PORTB = 0x00;
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	fc 01       	movw	r30, r24
     614:	10 82       	st	Z, r1
     616:	c6 dd       	rcall	.-1140   	; 0x1a4 <Led3_On>
            Led3_On();
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	aa ef       	ldi	r26, 0xFA	; 250
     61e:	b3 e4       	ldi	r27, 0x43	; 67
     620:	8d 83       	std	Y+5, r24	; 0x05
     622:	9e 83       	std	Y+6, r25	; 0x06
     624:	af 83       	std	Y+7, r26	; 0x07
     626:	b8 87       	std	Y+8, r27	; 0x08
     628:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	4a e7       	ldi	r20, 0x7A	; 122
     62e:	53 e4       	ldi	r21, 0x43	; 67
     630:	6d 81       	ldd	r22, Y+5	; 0x05
     632:	7e 81       	ldd	r23, Y+6	; 0x06
     634:	8f 81       	ldd	r24, Y+7	; 0x07
     636:	98 85       	ldd	r25, Y+8	; 0x08
     638:	11 d6       	rcall	.+3106   	; 0x125c <__mulsf3>
     63a:	dc 01       	movw	r26, r24
     63c:	cb 01       	movw	r24, r22
     63e:	8d a7       	std	Y+45, r24	; 0x2d
     640:	9e a7       	std	Y+46, r25	; 0x2e
     642:	af a7       	std	Y+47, r26	; 0x2f
     644:	b8 ab       	std	Y+48, r27	; 0x30
     646:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	40 e8       	ldi	r20, 0x80	; 128
     64c:	5f e3       	ldi	r21, 0x3F	; 63
     64e:	6d a5       	ldd	r22, Y+45	; 0x2d
     650:	7e a5       	ldd	r23, Y+46	; 0x2e
     652:	8f a5       	ldd	r24, Y+47	; 0x2f
     654:	98 a9       	ldd	r25, Y+48	; 0x30
     656:	81 d5       	rcall	.+2818   	; 0x115a <__cmpsf2>
     658:	88 23       	and	r24, r24
     65a:	2c f4       	brge	.+10     	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
     65c:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	9a ab       	std	Y+50, r25	; 0x32
     662:	89 ab       	std	Y+49, r24	; 0x31
     664:	3b c0       	rjmp	.+118    	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
	else if (__tmp > 65535)
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	3f ef       	ldi	r19, 0xFF	; 255
     66a:	4f e7       	ldi	r20, 0x7F	; 127
     66c:	57 e4       	ldi	r21, 0x47	; 71
     66e:	6d a5       	ldd	r22, Y+45	; 0x2d
     670:	7e a5       	ldd	r23, Y+46	; 0x2e
     672:	8f a5       	ldd	r24, Y+47	; 0x2f
     674:	98 a9       	ldd	r25, Y+48	; 0x30
     676:	ee d5       	rcall	.+3036   	; 0x1254 <__gesf2>
     678:	18 16       	cp	r1, r24
     67a:	3c f5       	brge	.+78     	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
     67c:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	40 e2       	ldi	r20, 0x20	; 32
     682:	51 e4       	ldi	r21, 0x41	; 65
     684:	6d 81       	ldd	r22, Y+5	; 0x05
     686:	7e 81       	ldd	r23, Y+6	; 0x06
     688:	8f 81       	ldd	r24, Y+7	; 0x07
     68a:	98 85       	ldd	r25, Y+8	; 0x08
     68c:	e7 d5       	rcall	.+3022   	; 0x125c <__mulsf3>
     68e:	dc 01       	movw	r26, r24
     690:	cb 01       	movw	r24, r22
     692:	bc 01       	movw	r22, r24
     694:	cd 01       	movw	r24, r26
     696:	65 d5       	rcall	.+2762   	; 0x1162 <__fixunssfsi>
     698:	dc 01       	movw	r26, r24
     69a:	cb 01       	movw	r24, r22
     69c:	9a ab       	std	Y+50, r25	; 0x32
     69e:	89 ab       	std	Y+49, r24	; 0x31
     6a0:	0f c0       	rjmp	.+30     	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
     6a2:	89 e1       	ldi	r24, 0x19	; 25
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	9c ab       	std	Y+52, r25	; 0x34
     6a8:	8b ab       	std	Y+51, r24	; 0x33
     6aa:	8b a9       	ldd	r24, Y+51	; 0x33
     6ac:	9c a9       	ldd	r25, Y+52	; 0x34
     6ae:	01 97       	sbiw	r24, 0x01	; 1
     6b0:	f1 f7       	brne	.-4      	; 0x6ae <__LOCK_REGION_LENGTH__+0x2ae>
     6b2:	9c ab       	std	Y+52, r25	; 0x34
     6b4:	8b ab       	std	Y+51, r24	; 0x33
     6b6:	89 a9       	ldd	r24, Y+49	; 0x31
     6b8:	9a a9       	ldd	r25, Y+50	; 0x32
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6ba:	01 97       	sbiw	r24, 0x01	; 1
     6bc:	9a ab       	std	Y+50, r25	; 0x32
     6be:	89 ab       	std	Y+49, r24	; 0x31
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6c0:	89 a9       	ldd	r24, Y+49	; 0x31
     6c2:	9a a9       	ldd	r25, Y+50	; 0x32
     6c4:	89 2b       	or	r24, r25
     6c6:	69 f7       	brne	.-38     	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
     6c8:	13 c0       	rjmp	.+38     	; 0x6f0 <__LOCK_REGION_LENGTH__+0x2f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6ca:	6d a5       	ldd	r22, Y+45	; 0x2d
     6cc:	7e a5       	ldd	r23, Y+46	; 0x2e
     6ce:	8f a5       	ldd	r24, Y+47	; 0x2f
     6d0:	98 a9       	ldd	r25, Y+48	; 0x30
     6d2:	47 d5       	rcall	.+2702   	; 0x1162 <__fixunssfsi>
     6d4:	dc 01       	movw	r26, r24
     6d6:	cb 01       	movw	r24, r22
     6d8:	9a ab       	std	Y+50, r25	; 0x32
     6da:	89 ab       	std	Y+49, r24	; 0x31
     6dc:	89 a9       	ldd	r24, Y+49	; 0x31
     6de:	9a a9       	ldd	r25, Y+50	; 0x32
     6e0:	9e ab       	std	Y+54, r25	; 0x36
     6e2:	8d ab       	std	Y+53, r24	; 0x35
     6e4:	8d a9       	ldd	r24, Y+53	; 0x35
     6e6:	9e a9       	ldd	r25, Y+54	; 0x36
     6e8:	01 97       	sbiw	r24, 0x01	; 1
     6ea:	f1 f7       	brne	.-4      	; 0x6e8 <__LOCK_REGION_LENGTH__+0x2e8>
     6ec:	9e ab       	std	Y+54, r25	; 0x36
     6ee:	8d ab       	std	Y+53, r24	; 0x35
            _delay_ms(500);
            Led3_Off();
     6f0:	6a dd       	rcall	.-1324   	; 0x1c6 <Led3_Off>
     6f2:	1f c2       	rjmp	.+1086   	; 0xb32 <__LOCK_REGION_LENGTH__+0x732>
            default:
                mode = 0;
                break;
        }
    }
}
     6f4:	46 de       	rcall	.-884    	; 0x382 <Taster4_get>
            mode = 3;
            PORTB = 0x00;
            Led3_On();
            _delay_ms(500);
            Led3_Off();
        } else if (Taster4_get()) {
     6f6:	89 2b       	or	r24, r25
     6f8:	09 f4       	brne	.+2      	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
     6fa:	1b c2       	rjmp	.+1078   	; 0xb32 <__LOCK_REGION_LENGTH__+0x732>
     6fc:	84 e0       	ldi	r24, 0x04	; 4
            mode = 4;
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     704:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     708:	85 e2       	ldi	r24, 0x25	; 37
            PORTB = 0x00;
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	fc 01       	movw	r30, r24
     70e:	10 82       	st	Z, r1
     710:	6b dd       	rcall	.-1322   	; 0x1e8 <Led4_On>
            Led4_On();
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	aa ef       	ldi	r26, 0xFA	; 250
     718:	b3 e4       	ldi	r27, 0x43	; 67
     71a:	89 87       	std	Y+9, r24	; 0x09
     71c:	9a 87       	std	Y+10, r25	; 0x0a
     71e:	ab 87       	std	Y+11, r26	; 0x0b
     720:	bc 87       	std	Y+12, r27	; 0x0c
     722:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	4a e7       	ldi	r20, 0x7A	; 122
     728:	53 e4       	ldi	r21, 0x43	; 67
     72a:	69 85       	ldd	r22, Y+9	; 0x09
     72c:	7a 85       	ldd	r23, Y+10	; 0x0a
     72e:	8b 85       	ldd	r24, Y+11	; 0x0b
     730:	9c 85       	ldd	r25, Y+12	; 0x0c
     732:	94 d5       	rcall	.+2856   	; 0x125c <__mulsf3>
     734:	dc 01       	movw	r26, r24
     736:	cb 01       	movw	r24, r22
     738:	8f ab       	std	Y+55, r24	; 0x37
     73a:	98 af       	std	Y+56, r25	; 0x38
     73c:	a9 af       	std	Y+57, r26	; 0x39
     73e:	ba af       	std	Y+58, r27	; 0x3a
     740:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	40 e8       	ldi	r20, 0x80	; 128
     746:	5f e3       	ldi	r21, 0x3F	; 63
     748:	6f a9       	ldd	r22, Y+55	; 0x37
     74a:	78 ad       	ldd	r23, Y+56	; 0x38
     74c:	89 ad       	ldd	r24, Y+57	; 0x39
     74e:	9a ad       	ldd	r25, Y+58	; 0x3a
     750:	04 d5       	rcall	.+2568   	; 0x115a <__cmpsf2>
     752:	88 23       	and	r24, r24
     754:	2c f4       	brge	.+10     	; 0x760 <__LOCK_REGION_LENGTH__+0x360>
		__ticks = 1;
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	9c af       	std	Y+60, r25	; 0x3c
     75c:	8b af       	std	Y+59, r24	; 0x3b
     75e:	3b c0       	rjmp	.+118    	; 0x7d6 <__LOCK_REGION_LENGTH__+0x3d6>
	else if (__tmp > 65535)
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	3f ef       	ldi	r19, 0xFF	; 255
     764:	4f e7       	ldi	r20, 0x7F	; 127
     766:	57 e4       	ldi	r21, 0x47	; 71
     768:	6f a9       	ldd	r22, Y+55	; 0x37
     76a:	78 ad       	ldd	r23, Y+56	; 0x38
     76c:	89 ad       	ldd	r24, Y+57	; 0x39
     76e:	9a ad       	ldd	r25, Y+58	; 0x3a
     770:	71 d5       	rcall	.+2786   	; 0x1254 <__gesf2>
     772:	18 16       	cp	r1, r24
     774:	3c f5       	brge	.+78     	; 0x7c4 <__LOCK_REGION_LENGTH__+0x3c4>
     776:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	40 e2       	ldi	r20, 0x20	; 32
     77c:	51 e4       	ldi	r21, 0x41	; 65
     77e:	69 85       	ldd	r22, Y+9	; 0x09
     780:	7a 85       	ldd	r23, Y+10	; 0x0a
     782:	8b 85       	ldd	r24, Y+11	; 0x0b
     784:	9c 85       	ldd	r25, Y+12	; 0x0c
     786:	6a d5       	rcall	.+2772   	; 0x125c <__mulsf3>
     788:	dc 01       	movw	r26, r24
     78a:	cb 01       	movw	r24, r22
     78c:	bc 01       	movw	r22, r24
     78e:	cd 01       	movw	r24, r26
     790:	e8 d4       	rcall	.+2512   	; 0x1162 <__fixunssfsi>
     792:	dc 01       	movw	r26, r24
     794:	cb 01       	movw	r24, r22
     796:	9c af       	std	Y+60, r25	; 0x3c
     798:	8b af       	std	Y+59, r24	; 0x3b
     79a:	0f c0       	rjmp	.+30     	; 0x7ba <__LOCK_REGION_LENGTH__+0x3ba>
     79c:	89 e1       	ldi	r24, 0x19	; 25
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	9e af       	std	Y+62, r25	; 0x3e
     7a2:	8d af       	std	Y+61, r24	; 0x3d
     7a4:	8d ad       	ldd	r24, Y+61	; 0x3d
     7a6:	9e ad       	ldd	r25, Y+62	; 0x3e
     7a8:	01 97       	sbiw	r24, 0x01	; 1
     7aa:	f1 f7       	brne	.-4      	; 0x7a8 <__LOCK_REGION_LENGTH__+0x3a8>
     7ac:	9e af       	std	Y+62, r25	; 0x3e
     7ae:	8d af       	std	Y+61, r24	; 0x3d
     7b0:	8b ad       	ldd	r24, Y+59	; 0x3b
     7b2:	9c ad       	ldd	r25, Y+60	; 0x3c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7b4:	01 97       	sbiw	r24, 0x01	; 1
     7b6:	9c af       	std	Y+60, r25	; 0x3c
     7b8:	8b af       	std	Y+59, r24	; 0x3b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7ba:	8b ad       	ldd	r24, Y+59	; 0x3b
     7bc:	9c ad       	ldd	r25, Y+60	; 0x3c
     7be:	89 2b       	or	r24, r25
     7c0:	69 f7       	brne	.-38     	; 0x79c <__LOCK_REGION_LENGTH__+0x39c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7c2:	1d c0       	rjmp	.+58     	; 0x7fe <__LOCK_REGION_LENGTH__+0x3fe>
     7c4:	6f a9       	ldd	r22, Y+55	; 0x37
     7c6:	78 ad       	ldd	r23, Y+56	; 0x38
     7c8:	89 ad       	ldd	r24, Y+57	; 0x39
     7ca:	9a ad       	ldd	r25, Y+58	; 0x3a
     7cc:	ca d4       	rcall	.+2452   	; 0x1162 <__fixunssfsi>
     7ce:	dc 01       	movw	r26, r24
     7d0:	cb 01       	movw	r24, r22
     7d2:	9c af       	std	Y+60, r25	; 0x3c
     7d4:	8b af       	std	Y+59, r24	; 0x3b
     7d6:	2b ad       	ldd	r18, Y+59	; 0x3b
     7d8:	3c ad       	ldd	r19, Y+60	; 0x3c
     7da:	ce 01       	movw	r24, r28
     7dc:	cf 96       	adiw	r24, 0x3f	; 63
     7de:	fc 01       	movw	r30, r24
     7e0:	31 83       	std	Z+1, r19	; 0x01
     7e2:	20 83       	st	Z, r18
     7e4:	ce 01       	movw	r24, r28
     7e6:	cf 96       	adiw	r24, 0x3f	; 63
     7e8:	fc 01       	movw	r30, r24
     7ea:	80 81       	ld	r24, Z
     7ec:	91 81       	ldd	r25, Z+1	; 0x01
     7ee:	01 97       	sbiw	r24, 0x01	; 1
     7f0:	f1 f7       	brne	.-4      	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
     7f2:	9e 01       	movw	r18, r28
     7f4:	21 5c       	subi	r18, 0xC1	; 193
     7f6:	3f 4f       	sbci	r19, 0xFF	; 255
     7f8:	f9 01       	movw	r30, r18
     7fa:	91 83       	std	Z+1, r25	; 0x01
            _delay_ms(500);
            Led4_Off();
     7fc:	80 83       	st	Z, r24
     7fe:	05 dd       	rcall	.-1526   	; 0x20a <Led4_Off>
            default:
                mode = 0;
                break;
        }
    }
}
     800:	98 c1       	rjmp	.+816    	; 0xb32 <__LOCK_REGION_LENGTH__+0x732>
        }
        
    } else {    // run
        
        // reset if button 1 and button 2 are pressed
        if (Taster1_get() && Taster2_get()) {
     802:	74 dd       	rcall	.-1304   	; 0x2ec <Taster1_get>
     804:	89 2b       	or	r24, r25
     806:	09 f4       	brne	.+2      	; 0x80a <__LOCK_REGION_LENGTH__+0x40a>
     808:	75 c1       	rjmp	.+746    	; 0xaf4 <__LOCK_REGION_LENGTH__+0x6f4>
     80a:	8b dd       	rcall	.-1258   	; 0x322 <Taster2_get>
     80c:	89 2b       	or	r24, r25
     80e:	09 f4       	brne	.+2      	; 0x812 <__LOCK_REGION_LENGTH__+0x412>
     810:	71 c1       	rjmp	.+738    	; 0xaf4 <__LOCK_REGION_LENGTH__+0x6f4>
     812:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
            mode = 0;
     816:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	aa e7       	ldi	r26, 0x7A	; 122
     820:	b4 e4       	ldi	r27, 0x44	; 68
     822:	89 8b       	std	Y+17, r24	; 0x11
     824:	9a 8b       	std	Y+18, r25	; 0x12
     826:	ab 8b       	std	Y+19, r26	; 0x13
     828:	bc 8b       	std	Y+20, r27	; 0x14
     82a:	8e 01       	movw	r16, r28

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     82c:	05 5b       	subi	r16, 0xB5	; 181
     82e:	1f 4f       	sbci	r17, 0xFF	; 255
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	4a e7       	ldi	r20, 0x7A	; 122
     836:	53 e4       	ldi	r21, 0x43	; 67
     838:	69 89       	ldd	r22, Y+17	; 0x11
     83a:	7a 89       	ldd	r23, Y+18	; 0x12
     83c:	8b 89       	ldd	r24, Y+19	; 0x13
     83e:	9c 89       	ldd	r25, Y+20	; 0x14
     840:	0d d5       	rcall	.+2586   	; 0x125c <__mulsf3>
     842:	dc 01       	movw	r26, r24
     844:	cb 01       	movw	r24, r22
     846:	f8 01       	movw	r30, r16
     848:	80 83       	st	Z, r24
     84a:	91 83       	std	Z+1, r25	; 0x01
     84c:	a2 83       	std	Z+2, r26	; 0x02
     84e:	b3 83       	std	Z+3, r27	; 0x03
     850:	ce 01       	movw	r24, r28
	if (__tmp < 1.0)
     852:	85 5b       	subi	r24, 0xB5	; 181
     854:	9f 4f       	sbci	r25, 0xFF	; 255
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e8       	ldi	r20, 0x80	; 128
     85c:	5f e3       	ldi	r21, 0x3F	; 63
     85e:	fc 01       	movw	r30, r24
     860:	60 81       	ld	r22, Z
     862:	71 81       	ldd	r23, Z+1	; 0x01
     864:	82 81       	ldd	r24, Z+2	; 0x02
     866:	93 81       	ldd	r25, Z+3	; 0x03
     868:	78 d4       	rcall	.+2288   	; 0x115a <__cmpsf2>
     86a:	88 23       	and	r24, r24
     86c:	4c f4       	brge	.+18     	; 0x880 <__LOCK_REGION_LENGTH__+0x480>
		__ticks = 1;
     86e:	ce 01       	movw	r24, r28
     870:	81 5b       	subi	r24, 0xB1	; 177
     872:	9f 4f       	sbci	r25, 0xFF	; 255
     874:	21 e0       	ldi	r18, 0x01	; 1
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	fc 01       	movw	r30, r24
     87a:	31 83       	std	Z+1, r19	; 0x01
     87c:	20 83       	st	Z, r18
     87e:	65 c0       	rjmp	.+202    	; 0x94a <__LOCK_REGION_LENGTH__+0x54a>
	else if (__tmp > 65535)
     880:	ce 01       	movw	r24, r28
     882:	85 5b       	subi	r24, 0xB5	; 181
     884:	9f 4f       	sbci	r25, 0xFF	; 255
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	3f ef       	ldi	r19, 0xFF	; 255
     88a:	4f e7       	ldi	r20, 0x7F	; 127
     88c:	57 e4       	ldi	r21, 0x47	; 71
     88e:	fc 01       	movw	r30, r24
     890:	60 81       	ld	r22, Z
     892:	71 81       	ldd	r23, Z+1	; 0x01
     894:	82 81       	ldd	r24, Z+2	; 0x02
     896:	93 81       	ldd	r25, Z+3	; 0x03
     898:	dd d4       	rcall	.+2490   	; 0x1254 <__gesf2>
     89a:	18 16       	cp	r1, r24
     89c:	0c f0       	brlt	.+2      	; 0x8a0 <__LOCK_REGION_LENGTH__+0x4a0>
     89e:	44 c0       	rjmp	.+136    	; 0x928 <__LOCK_REGION_LENGTH__+0x528>
     8a0:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	40 e2       	ldi	r20, 0x20	; 32
     8a6:	51 e4       	ldi	r21, 0x41	; 65
     8a8:	69 89       	ldd	r22, Y+17	; 0x11
     8aa:	7a 89       	ldd	r23, Y+18	; 0x12
     8ac:	8b 89       	ldd	r24, Y+19	; 0x13
     8ae:	9c 89       	ldd	r25, Y+20	; 0x14
     8b0:	d5 d4       	rcall	.+2474   	; 0x125c <__mulsf3>
     8b2:	dc 01       	movw	r26, r24
     8b4:	cb 01       	movw	r24, r22
     8b6:	8e 01       	movw	r16, r28
     8b8:	01 5b       	subi	r16, 0xB1	; 177
     8ba:	1f 4f       	sbci	r17, 0xFF	; 255
     8bc:	bc 01       	movw	r22, r24
     8be:	cd 01       	movw	r24, r26
     8c0:	50 d4       	rcall	.+2208   	; 0x1162 <__fixunssfsi>
     8c2:	dc 01       	movw	r26, r24
     8c4:	cb 01       	movw	r24, r22
     8c6:	f8 01       	movw	r30, r16
     8c8:	91 83       	std	Z+1, r25	; 0x01
     8ca:	80 83       	st	Z, r24
     8cc:	24 c0       	rjmp	.+72     	; 0x916 <__LOCK_REGION_LENGTH__+0x516>
     8ce:	ce 01       	movw	r24, r28
     8d0:	8f 5a       	subi	r24, 0xAF	; 175
     8d2:	9f 4f       	sbci	r25, 0xFF	; 255
     8d4:	29 e1       	ldi	r18, 0x19	; 25
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	fc 01       	movw	r30, r24
     8da:	31 83       	std	Z+1, r19	; 0x01
     8dc:	20 83       	st	Z, r18
     8de:	ce 01       	movw	r24, r28
     8e0:	8f 5a       	subi	r24, 0xAF	; 175
     8e2:	9f 4f       	sbci	r25, 0xFF	; 255
     8e4:	fc 01       	movw	r30, r24
     8e6:	80 81       	ld	r24, Z
     8e8:	91 81       	ldd	r25, Z+1	; 0x01
     8ea:	01 97       	sbiw	r24, 0x01	; 1
     8ec:	f1 f7       	brne	.-4      	; 0x8ea <__LOCK_REGION_LENGTH__+0x4ea>
     8ee:	9e 01       	movw	r18, r28
     8f0:	2f 5a       	subi	r18, 0xAF	; 175
     8f2:	3f 4f       	sbci	r19, 0xFF	; 255
     8f4:	f9 01       	movw	r30, r18
     8f6:	91 83       	std	Z+1, r25	; 0x01
     8f8:	80 83       	st	Z, r24
     8fa:	ce 01       	movw	r24, r28
     8fc:	81 5b       	subi	r24, 0xB1	; 177
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8fe:	9f 4f       	sbci	r25, 0xFF	; 255
     900:	9e 01       	movw	r18, r28
     902:	21 5b       	subi	r18, 0xB1	; 177
     904:	3f 4f       	sbci	r19, 0xFF	; 255
     906:	f9 01       	movw	r30, r18
     908:	20 81       	ld	r18, Z
     90a:	31 81       	ldd	r19, Z+1	; 0x01
     90c:	21 50       	subi	r18, 0x01	; 1
     90e:	31 09       	sbc	r19, r1
     910:	fc 01       	movw	r30, r24
     912:	31 83       	std	Z+1, r19	; 0x01
     914:	20 83       	st	Z, r18
     916:	ce 01       	movw	r24, r28
     918:	81 5b       	subi	r24, 0xB1	; 177
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     91a:	9f 4f       	sbci	r25, 0xFF	; 255
     91c:	fc 01       	movw	r30, r24
     91e:	80 81       	ld	r24, Z
     920:	91 81       	ldd	r25, Z+1	; 0x01
     922:	89 2b       	or	r24, r25
     924:	a1 f6       	brne	.-88     	; 0x8ce <__LOCK_REGION_LENGTH__+0x4ce>
     926:	2b c0       	rjmp	.+86     	; 0x97e <__LOCK_REGION_LENGTH__+0x57e>
     928:	8e 01       	movw	r16, r28
     92a:	01 5b       	subi	r16, 0xB1	; 177
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     92c:	1f 4f       	sbci	r17, 0xFF	; 255
     92e:	ce 01       	movw	r24, r28
     930:	85 5b       	subi	r24, 0xB5	; 181
     932:	9f 4f       	sbci	r25, 0xFF	; 255
     934:	fc 01       	movw	r30, r24
     936:	60 81       	ld	r22, Z
     938:	71 81       	ldd	r23, Z+1	; 0x01
     93a:	82 81       	ldd	r24, Z+2	; 0x02
     93c:	93 81       	ldd	r25, Z+3	; 0x03
     93e:	11 d4       	rcall	.+2082   	; 0x1162 <__fixunssfsi>
     940:	dc 01       	movw	r26, r24
     942:	cb 01       	movw	r24, r22
     944:	f8 01       	movw	r30, r16
     946:	91 83       	std	Z+1, r25	; 0x01
     948:	80 83       	st	Z, r24
     94a:	ce 01       	movw	r24, r28
     94c:	8d 5a       	subi	r24, 0xAD	; 173
     94e:	9f 4f       	sbci	r25, 0xFF	; 255
     950:	9e 01       	movw	r18, r28
     952:	21 5b       	subi	r18, 0xB1	; 177
     954:	3f 4f       	sbci	r19, 0xFF	; 255
     956:	f9 01       	movw	r30, r18
     958:	20 81       	ld	r18, Z
     95a:	31 81       	ldd	r19, Z+1	; 0x01
     95c:	fc 01       	movw	r30, r24
     95e:	31 83       	std	Z+1, r19	; 0x01
     960:	20 83       	st	Z, r18
     962:	ce 01       	movw	r24, r28
     964:	8d 5a       	subi	r24, 0xAD	; 173
     966:	9f 4f       	sbci	r25, 0xFF	; 255
     968:	fc 01       	movw	r30, r24
     96a:	80 81       	ld	r24, Z
     96c:	91 81       	ldd	r25, Z+1	; 0x01
     96e:	01 97       	sbiw	r24, 0x01	; 1
     970:	f1 f7       	brne	.-4      	; 0x96e <__LOCK_REGION_LENGTH__+0x56e>
     972:	9e 01       	movw	r18, r28
     974:	2d 5a       	subi	r18, 0xAD	; 173
     976:	3f 4f       	sbci	r19, 0xFF	; 255
     978:	f9 01       	movw	r30, r18
     97a:	91 83       	std	Z+1, r25	; 0x01
     97c:	80 83       	st	Z, r24
     97e:	85 e2       	ldi	r24, 0x25	; 37
            _delay_ms(1000);
            PORTB = 0xFF;
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	2f ef       	ldi	r18, 0xFF	; 255
     984:	fc 01       	movw	r30, r24
     986:	20 83       	st	Z, r18
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	aa ef       	ldi	r26, 0xFA	; 250
     98e:	b3 e4       	ldi	r27, 0x43	; 67
     990:	8d 87       	std	Y+13, r24	; 0x0d
     992:	9e 87       	std	Y+14, r25	; 0x0e
     994:	af 87       	std	Y+15, r26	; 0x0f
     996:	b8 8b       	std	Y+16, r27	; 0x10
     998:	8e 01       	movw	r16, r28

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     99a:	0f 5b       	subi	r16, 0xBF	; 191
     99c:	1f 4f       	sbci	r17, 0xFF	; 255
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	4a e7       	ldi	r20, 0x7A	; 122
     9a4:	53 e4       	ldi	r21, 0x43	; 67
     9a6:	6d 85       	ldd	r22, Y+13	; 0x0d
     9a8:	7e 85       	ldd	r23, Y+14	; 0x0e
     9aa:	8f 85       	ldd	r24, Y+15	; 0x0f
     9ac:	98 89       	ldd	r25, Y+16	; 0x10
     9ae:	56 d4       	rcall	.+2220   	; 0x125c <__mulsf3>
     9b0:	dc 01       	movw	r26, r24
     9b2:	cb 01       	movw	r24, r22
     9b4:	f8 01       	movw	r30, r16
     9b6:	80 83       	st	Z, r24
     9b8:	91 83       	std	Z+1, r25	; 0x01
     9ba:	a2 83       	std	Z+2, r26	; 0x02
     9bc:	b3 83       	std	Z+3, r27	; 0x03
     9be:	ce 01       	movw	r24, r28
	if (__tmp < 1.0)
     9c0:	8f 5b       	subi	r24, 0xBF	; 191
     9c2:	9f 4f       	sbci	r25, 0xFF	; 255
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	40 e8       	ldi	r20, 0x80	; 128
     9ca:	5f e3       	ldi	r21, 0x3F	; 63
     9cc:	fc 01       	movw	r30, r24
     9ce:	60 81       	ld	r22, Z
     9d0:	71 81       	ldd	r23, Z+1	; 0x01
     9d2:	82 81       	ldd	r24, Z+2	; 0x02
     9d4:	93 81       	ldd	r25, Z+3	; 0x03
     9d6:	c1 d3       	rcall	.+1922   	; 0x115a <__cmpsf2>
     9d8:	88 23       	and	r24, r24
     9da:	4c f4       	brge	.+18     	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     9dc:	ce 01       	movw	r24, r28
		__ticks = 1;
     9de:	8b 5b       	subi	r24, 0xBB	; 187
     9e0:	9f 4f       	sbci	r25, 0xFF	; 255
     9e2:	21 e0       	ldi	r18, 0x01	; 1
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	fc 01       	movw	r30, r24
     9e8:	31 83       	std	Z+1, r19	; 0x01
     9ea:	20 83       	st	Z, r18
     9ec:	65 c0       	rjmp	.+202    	; 0xab8 <__LOCK_REGION_LENGTH__+0x6b8>
     9ee:	ce 01       	movw	r24, r28
	else if (__tmp > 65535)
     9f0:	8f 5b       	subi	r24, 0xBF	; 191
     9f2:	9f 4f       	sbci	r25, 0xFF	; 255
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	3f ef       	ldi	r19, 0xFF	; 255
     9f8:	4f e7       	ldi	r20, 0x7F	; 127
     9fa:	57 e4       	ldi	r21, 0x47	; 71
     9fc:	fc 01       	movw	r30, r24
     9fe:	60 81       	ld	r22, Z
     a00:	71 81       	ldd	r23, Z+1	; 0x01
     a02:	82 81       	ldd	r24, Z+2	; 0x02
     a04:	93 81       	ldd	r25, Z+3	; 0x03
     a06:	26 d4       	rcall	.+2124   	; 0x1254 <__gesf2>
     a08:	18 16       	cp	r1, r24
     a0a:	0c f0       	brlt	.+2      	; 0xa0e <__LOCK_REGION_LENGTH__+0x60e>
     a0c:	44 c0       	rjmp	.+136    	; 0xa96 <__LOCK_REGION_LENGTH__+0x696>
     a0e:	20 e0       	ldi	r18, 0x00	; 0
     a10:	30 e0       	ldi	r19, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a12:	40 e2       	ldi	r20, 0x20	; 32
     a14:	51 e4       	ldi	r21, 0x41	; 65
     a16:	6d 85       	ldd	r22, Y+13	; 0x0d
     a18:	7e 85       	ldd	r23, Y+14	; 0x0e
     a1a:	8f 85       	ldd	r24, Y+15	; 0x0f
     a1c:	98 89       	ldd	r25, Y+16	; 0x10
     a1e:	1e d4       	rcall	.+2108   	; 0x125c <__mulsf3>
     a20:	dc 01       	movw	r26, r24
     a22:	cb 01       	movw	r24, r22
     a24:	8e 01       	movw	r16, r28
     a26:	0b 5b       	subi	r16, 0xBB	; 187
     a28:	1f 4f       	sbci	r17, 0xFF	; 255
     a2a:	bc 01       	movw	r22, r24
     a2c:	cd 01       	movw	r24, r26
     a2e:	99 d3       	rcall	.+1842   	; 0x1162 <__fixunssfsi>
     a30:	dc 01       	movw	r26, r24
     a32:	cb 01       	movw	r24, r22
     a34:	f8 01       	movw	r30, r16
     a36:	91 83       	std	Z+1, r25	; 0x01
     a38:	80 83       	st	Z, r24
     a3a:	24 c0       	rjmp	.+72     	; 0xa84 <__LOCK_REGION_LENGTH__+0x684>
     a3c:	ce 01       	movw	r24, r28
     a3e:	89 5b       	subi	r24, 0xB9	; 185
     a40:	9f 4f       	sbci	r25, 0xFF	; 255
     a42:	29 e1       	ldi	r18, 0x19	; 25
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	fc 01       	movw	r30, r24
     a48:	31 83       	std	Z+1, r19	; 0x01
     a4a:	20 83       	st	Z, r18
     a4c:	ce 01       	movw	r24, r28
     a4e:	89 5b       	subi	r24, 0xB9	; 185
     a50:	9f 4f       	sbci	r25, 0xFF	; 255
     a52:	fc 01       	movw	r30, r24
     a54:	80 81       	ld	r24, Z
     a56:	91 81       	ldd	r25, Z+1	; 0x01
     a58:	01 97       	sbiw	r24, 0x01	; 1
     a5a:	f1 f7       	brne	.-4      	; 0xa58 <__LOCK_REGION_LENGTH__+0x658>
     a5c:	9e 01       	movw	r18, r28
     a5e:	29 5b       	subi	r18, 0xB9	; 185
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	f9 01       	movw	r30, r18
     a64:	91 83       	std	Z+1, r25	; 0x01
     a66:	80 83       	st	Z, r24
     a68:	ce 01       	movw	r24, r28
     a6a:	8b 5b       	subi	r24, 0xBB	; 187
     a6c:	9f 4f       	sbci	r25, 0xFF	; 255
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a6e:	9e 01       	movw	r18, r28
     a70:	2b 5b       	subi	r18, 0xBB	; 187
     a72:	3f 4f       	sbci	r19, 0xFF	; 255
     a74:	f9 01       	movw	r30, r18
     a76:	20 81       	ld	r18, Z
     a78:	31 81       	ldd	r19, Z+1	; 0x01
     a7a:	21 50       	subi	r18, 0x01	; 1
     a7c:	31 09       	sbc	r19, r1
     a7e:	fc 01       	movw	r30, r24
     a80:	31 83       	std	Z+1, r19	; 0x01
     a82:	20 83       	st	Z, r18
     a84:	ce 01       	movw	r24, r28
     a86:	8b 5b       	subi	r24, 0xBB	; 187
     a88:	9f 4f       	sbci	r25, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a8a:	fc 01       	movw	r30, r24
     a8c:	80 81       	ld	r24, Z
     a8e:	91 81       	ldd	r25, Z+1	; 0x01
     a90:	89 2b       	or	r24, r25
     a92:	a1 f6       	brne	.-88     	; 0xa3c <__LOCK_REGION_LENGTH__+0x63c>
     a94:	2b c0       	rjmp	.+86     	; 0xaec <__LOCK_REGION_LENGTH__+0x6ec>
     a96:	8e 01       	movw	r16, r28
     a98:	0b 5b       	subi	r16, 0xBB	; 187
     a9a:	1f 4f       	sbci	r17, 0xFF	; 255
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a9c:	ce 01       	movw	r24, r28
     a9e:	8f 5b       	subi	r24, 0xBF	; 191
     aa0:	9f 4f       	sbci	r25, 0xFF	; 255
     aa2:	fc 01       	movw	r30, r24
     aa4:	60 81       	ld	r22, Z
     aa6:	71 81       	ldd	r23, Z+1	; 0x01
     aa8:	82 81       	ldd	r24, Z+2	; 0x02
     aaa:	93 81       	ldd	r25, Z+3	; 0x03
     aac:	5a d3       	rcall	.+1716   	; 0x1162 <__fixunssfsi>
     aae:	dc 01       	movw	r26, r24
     ab0:	cb 01       	movw	r24, r22
     ab2:	f8 01       	movw	r30, r16
     ab4:	91 83       	std	Z+1, r25	; 0x01
     ab6:	80 83       	st	Z, r24
     ab8:	ce 01       	movw	r24, r28
     aba:	87 5b       	subi	r24, 0xB7	; 183
     abc:	9f 4f       	sbci	r25, 0xFF	; 255
     abe:	9e 01       	movw	r18, r28
     ac0:	2b 5b       	subi	r18, 0xBB	; 187
     ac2:	3f 4f       	sbci	r19, 0xFF	; 255
     ac4:	f9 01       	movw	r30, r18
     ac6:	20 81       	ld	r18, Z
     ac8:	31 81       	ldd	r19, Z+1	; 0x01
     aca:	fc 01       	movw	r30, r24
     acc:	31 83       	std	Z+1, r19	; 0x01
     ace:	20 83       	st	Z, r18
     ad0:	ce 01       	movw	r24, r28
     ad2:	87 5b       	subi	r24, 0xB7	; 183
     ad4:	9f 4f       	sbci	r25, 0xFF	; 255
     ad6:	fc 01       	movw	r30, r24
     ad8:	80 81       	ld	r24, Z
     ada:	91 81       	ldd	r25, Z+1	; 0x01
     adc:	01 97       	sbiw	r24, 0x01	; 1
     ade:	f1 f7       	brne	.-4      	; 0xadc <__LOCK_REGION_LENGTH__+0x6dc>
     ae0:	9e 01       	movw	r18, r28
     ae2:	27 5b       	subi	r18, 0xB7	; 183
     ae4:	3f 4f       	sbci	r19, 0xFF	; 255
     ae6:	f9 01       	movw	r30, r18
     ae8:	91 83       	std	Z+1, r25	; 0x01
     aea:	80 83       	st	Z, r24
            _delay_ms(500);
            PORTB = 0x00;
     aec:	85 e2       	ldi	r24, 0x25	; 37
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	fc 01       	movw	r30, r24
     af2:	10 82       	st	Z, r1
        }
        
        // execute
        switch (mode) {
     af4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     af8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     afc:	82 30       	cpi	r24, 0x02	; 2
     afe:	91 05       	cpc	r25, r1
     b00:	71 f0       	breq	.+28     	; 0xb1e <__LOCK_REGION_LENGTH__+0x71e>
     b02:	83 30       	cpi	r24, 0x03	; 3
     b04:	91 05       	cpc	r25, r1
     b06:	1c f4       	brge	.+6      	; 0xb0e <__LOCK_REGION_LENGTH__+0x70e>
     b08:	01 97       	sbiw	r24, 0x01	; 1
     b0a:	39 f0       	breq	.+14     	; 0xb1a <__LOCK_REGION_LENGTH__+0x71a>
     b0c:	0d c0       	rjmp	.+26     	; 0xb28 <__LOCK_REGION_LENGTH__+0x728>
     b0e:	83 30       	cpi	r24, 0x03	; 3
     b10:	91 05       	cpc	r25, r1
     b12:	39 f0       	breq	.+14     	; 0xb22 <__LOCK_REGION_LENGTH__+0x722>
     b14:	04 97       	sbiw	r24, 0x04	; 4
     b16:	31 f0       	breq	.+12     	; 0xb24 <__LOCK_REGION_LENGTH__+0x724>
     b18:	07 c0       	rjmp	.+14     	; 0xb28 <__LOCK_REGION_LENGTH__+0x728>
            case 1:
                testTasterLed();
     b1a:	78 d2       	rcall	.+1264   	; 0x100c <testTasterLed>
     b1c:	0a c0       	rjmp	.+20     	; 0xb32 <__LOCK_REGION_LENGTH__+0x732>
                break;
     b1e:	6f d1       	rcall	.+734    	; 0xdfe <testBoard>
            case 2:
                testBoard();
     b20:	08 c0       	rjmp	.+16     	; 0xb32 <__LOCK_REGION_LENGTH__+0x732>
     b22:	14 d0       	rcall	.+40     	; 0xb4c <lauflicht>
                break;
     b24:	ef d0       	rcall	.+478    	; 0xd04 <increment>
            case 3:
                lauflicht();
     b26:	05 c0       	rjmp	.+10     	; 0xb32 <__LOCK_REGION_LENGTH__+0x732>
     b28:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
            case 4:
                increment();
     b2c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
                break;
            default:
                mode = 0;
     b30:	00 00       	nop
     b32:	00 00       	nop
     b34:	cc 5a       	subi	r28, 0xAC	; 172
     b36:	df 4f       	sbci	r29, 0xFF	; 255
                break;
     b38:	0f b6       	in	r0, 0x3f	; 63
        }
    }
}
     b3a:	f8 94       	cli
     b3c:	de bf       	out	0x3e, r29	; 62
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	cd bf       	out	0x3d, r28	; 61
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	1f 91       	pop	r17
     b48:	0f 91       	pop	r16
     b4a:	08 95       	ret

00000b4c <lauflicht>:
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
 Starting at Led0, the Led next to the current led will turn on at the same time the current led turns off.
 If last led is reached, the direction will change
 
 Only one led is active at once
 */
void lauflicht() {
     b54:	60 97       	sbiw	r28, 0x10	; 16
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
    static int laufCount = 0;
    static int direction = 0;   // 0=right, 1=left
    
    if (direction) {    // left
     b60:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <direction.1779>
     b64:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <direction.1779+0x1>
     b68:	89 2b       	or	r24, r25
     b6a:	f1 f0       	breq	.+60     	; 0xba8 <lauflicht+0x5c>
        if (laufCount <= 1) {
     b6c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <laufCount.1778>
     b70:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <laufCount.1778+0x1>
     b74:	02 97       	sbiw	r24, 0x02	; 2
     b76:	74 f4       	brge	.+28     	; 0xb94 <lauflicht+0x48>
            direction = 0;
     b78:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <direction.1779+0x1>
     b7c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <direction.1779>
            laufCount++;
     b80:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <laufCount.1778>
     b84:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <laufCount.1778+0x1>
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <laufCount.1778+0x1>
     b8e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <laufCount.1778>
     b92:	29 c0       	rjmp	.+82     	; 0xbe6 <lauflicht+0x9a>
        } else {
            laufCount--;
     b94:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <laufCount.1778>
     b98:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <laufCount.1778+0x1>
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <laufCount.1778+0x1>
     ba2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <laufCount.1778>
     ba6:	1f c0       	rjmp	.+62     	; 0xbe6 <lauflicht+0x9a>
        }
    }else { // right
        if (laufCount >= 8) {
     ba8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <laufCount.1778>
     bac:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <laufCount.1778+0x1>
     bb0:	08 97       	sbiw	r24, 0x08	; 8
     bb2:	84 f0       	brlt	.+32     	; 0xbd4 <lauflicht+0x88>
            direction = 1;
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <direction.1779+0x1>
     bbc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <direction.1779>
            laufCount--;
     bc0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <laufCount.1778>
     bc4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <laufCount.1778+0x1>
     bc8:	01 97       	sbiw	r24, 0x01	; 1
     bca:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <laufCount.1778+0x1>
     bce:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <laufCount.1778>
     bd2:	09 c0       	rjmp	.+18     	; 0xbe6 <lauflicht+0x9a>
        } else {
            laufCount++;
     bd4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <laufCount.1778>
     bd8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <laufCount.1778+0x1>
     bdc:	01 96       	adiw	r24, 0x01	; 1
     bde:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <laufCount.1778+0x1>
     be2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <laufCount.1778>
        }
    }
    
    // create byte
    int ledByte = 1;
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	9a 83       	std	Y+2, r25	; 0x02
     bec:	89 83       	std	Y+1, r24	; 0x01
    ledByte = ledByte << (laufCount - 1);
     bee:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <laufCount.1778>
     bf2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <laufCount.1778+0x1>
     bf6:	9c 01       	movw	r18, r24
     bf8:	21 50       	subi	r18, 0x01	; 1
     bfa:	31 09       	sbc	r19, r1
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	9a 81       	ldd	r25, Y+2	; 0x02
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <lauflicht+0xba>
     c02:	88 0f       	add	r24, r24
     c04:	99 1f       	adc	r25, r25
     c06:	2a 95       	dec	r18
     c08:	e2 f7       	brpl	.-8      	; 0xc02 <lauflicht+0xb6>
     c0a:	9a 83       	std	Y+2, r25	; 0x02
     c0c:	89 83       	std	Y+1, r24	; 0x01
    
    // set Port
    PORTB = ledByte;
     c0e:	85 e2       	ldi	r24, 0x25	; 37
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	29 81       	ldd	r18, Y+1	; 0x01
     c14:	fc 01       	movw	r30, r24
     c16:	20 83       	st	Z, r18
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	a8 e4       	ldi	r26, 0x48	; 72
     c1e:	b3 e4       	ldi	r27, 0x43	; 67
     c20:	8b 83       	std	Y+3, r24	; 0x03
     c22:	9c 83       	std	Y+4, r25	; 0x04
     c24:	ad 83       	std	Y+5, r26	; 0x05
     c26:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	4a e7       	ldi	r20, 0x7A	; 122
     c2e:	53 e4       	ldi	r21, 0x43	; 67
     c30:	6b 81       	ldd	r22, Y+3	; 0x03
     c32:	7c 81       	ldd	r23, Y+4	; 0x04
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	11 d3       	rcall	.+1570   	; 0x125c <__mulsf3>
     c3a:	dc 01       	movw	r26, r24
     c3c:	cb 01       	movw	r24, r22
     c3e:	8f 83       	std	Y+7, r24	; 0x07
     c40:	98 87       	std	Y+8, r25	; 0x08
     c42:	a9 87       	std	Y+9, r26	; 0x09
     c44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	40 e8       	ldi	r20, 0x80	; 128
     c4c:	5f e3       	ldi	r21, 0x3F	; 63
     c4e:	6f 81       	ldd	r22, Y+7	; 0x07
     c50:	78 85       	ldd	r23, Y+8	; 0x08
     c52:	89 85       	ldd	r24, Y+9	; 0x09
     c54:	9a 85       	ldd	r25, Y+10	; 0x0a
     c56:	81 d2       	rcall	.+1282   	; 0x115a <__cmpsf2>
     c58:	88 23       	and	r24, r24
     c5a:	2c f4       	brge	.+10     	; 0xc66 <lauflicht+0x11a>
		__ticks = 1;
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	9c 87       	std	Y+12, r25	; 0x0c
     c62:	8b 87       	std	Y+11, r24	; 0x0b
     c64:	3b c0       	rjmp	.+118    	; 0xcdc <lauflicht+0x190>
	else if (__tmp > 65535)
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	3f ef       	ldi	r19, 0xFF	; 255
     c6a:	4f e7       	ldi	r20, 0x7F	; 127
     c6c:	57 e4       	ldi	r21, 0x47	; 71
     c6e:	6f 81       	ldd	r22, Y+7	; 0x07
     c70:	78 85       	ldd	r23, Y+8	; 0x08
     c72:	89 85       	ldd	r24, Y+9	; 0x09
     c74:	9a 85       	ldd	r25, Y+10	; 0x0a
     c76:	ee d2       	rcall	.+1500   	; 0x1254 <__gesf2>
     c78:	18 16       	cp	r1, r24
     c7a:	3c f5       	brge	.+78     	; 0xcca <lauflicht+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	40 e2       	ldi	r20, 0x20	; 32
     c82:	51 e4       	ldi	r21, 0x41	; 65
     c84:	6b 81       	ldd	r22, Y+3	; 0x03
     c86:	7c 81       	ldd	r23, Y+4	; 0x04
     c88:	8d 81       	ldd	r24, Y+5	; 0x05
     c8a:	9e 81       	ldd	r25, Y+6	; 0x06
     c8c:	e7 d2       	rcall	.+1486   	; 0x125c <__mulsf3>
     c8e:	dc 01       	movw	r26, r24
     c90:	cb 01       	movw	r24, r22
     c92:	bc 01       	movw	r22, r24
     c94:	cd 01       	movw	r24, r26
     c96:	65 d2       	rcall	.+1226   	; 0x1162 <__fixunssfsi>
     c98:	dc 01       	movw	r26, r24
     c9a:	cb 01       	movw	r24, r22
     c9c:	9c 87       	std	Y+12, r25	; 0x0c
     c9e:	8b 87       	std	Y+11, r24	; 0x0b
     ca0:	0f c0       	rjmp	.+30     	; 0xcc0 <lauflicht+0x174>
     ca2:	89 e1       	ldi	r24, 0x19	; 25
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	9e 87       	std	Y+14, r25	; 0x0e
     ca8:	8d 87       	std	Y+13, r24	; 0x0d
     caa:	8d 85       	ldd	r24, Y+13	; 0x0d
     cac:	9e 85       	ldd	r25, Y+14	; 0x0e
     cae:	01 97       	sbiw	r24, 0x01	; 1
     cb0:	f1 f7       	brne	.-4      	; 0xcae <lauflicht+0x162>
     cb2:	9e 87       	std	Y+14, r25	; 0x0e
     cb4:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cb6:	8b 85       	ldd	r24, Y+11	; 0x0b
     cb8:	9c 85       	ldd	r25, Y+12	; 0x0c
     cba:	01 97       	sbiw	r24, 0x01	; 1
     cbc:	9c 87       	std	Y+12, r25	; 0x0c
     cbe:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cc0:	8b 85       	ldd	r24, Y+11	; 0x0b
     cc2:	9c 85       	ldd	r25, Y+12	; 0x0c
     cc4:	89 2b       	or	r24, r25
     cc6:	69 f7       	brne	.-38     	; 0xca2 <lauflicht+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cc8:	13 c0       	rjmp	.+38     	; 0xcf0 <lauflicht+0x1a4>
     cca:	6f 81       	ldd	r22, Y+7	; 0x07
     ccc:	78 85       	ldd	r23, Y+8	; 0x08
     cce:	89 85       	ldd	r24, Y+9	; 0x09
     cd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     cd2:	47 d2       	rcall	.+1166   	; 0x1162 <__fixunssfsi>
     cd4:	dc 01       	movw	r26, r24
     cd6:	cb 01       	movw	r24, r22
     cd8:	9c 87       	std	Y+12, r25	; 0x0c
     cda:	8b 87       	std	Y+11, r24	; 0x0b
     cdc:	8b 85       	ldd	r24, Y+11	; 0x0b
     cde:	9c 85       	ldd	r25, Y+12	; 0x0c
     ce0:	98 8b       	std	Y+16, r25	; 0x10
     ce2:	8f 87       	std	Y+15, r24	; 0x0f
     ce4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ce6:	98 89       	ldd	r25, Y+16	; 0x10
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	f1 f7       	brne	.-4      	; 0xce8 <lauflicht+0x19c>
     cec:	98 8b       	std	Y+16, r25	; 0x10
     cee:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(200);
}
     cf0:	00 00       	nop
     cf2:	60 96       	adiw	r28, 0x10	; 16
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	08 95       	ret

00000d04 <increment>:

/**
 Increment if button 1 is pressed, decrement if button 2 is pressed.
 Value of count will display with leds. if count is dez 5, 5 leds will turn on
 */
void increment() {
     d04:	cf 93       	push	r28
     d06:	df 93       	push	r29
     d08:	00 d0       	rcall	.+0      	; 0xd0a <increment+0x6>
     d0a:	00 d0       	rcall	.+0      	; 0xd0c <increment+0x8>
     d0c:	cd b7       	in	r28, 0x3d	; 61
     d0e:	de b7       	in	r29, 0x3e	; 62
    static int count = 0;
    static int lockt1 = 0, lockt2 = 0;
    
    // If button is pressed and lock is released
    if (!lockt1 && Taster1_get()) {
     d10:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lockt1.1784>
     d14:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <lockt1.1784+0x1>
     d18:	89 2b       	or	r24, r25
     d1a:	c9 f4       	brne	.+50     	; 0xd4e <increment+0x4a>
     d1c:	e7 da       	rcall	.-2610   	; 0x2ec <Taster1_get>
     d1e:	89 2b       	or	r24, r25
     d20:	b1 f0       	breq	.+44     	; 0xd4e <increment+0x4a>
        //count to max 8
        if (count <= 8) {
     d22:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count.1783>
     d26:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count.1783+0x1>
     d2a:	09 97       	sbiw	r24, 0x09	; 9
     d2c:	4c f4       	brge	.+18     	; 0xd40 <increment+0x3c>
            count++;
     d2e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count.1783>
     d32:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count.1783+0x1>
     d36:	01 96       	adiw	r24, 0x01	; 1
     d38:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <count.1783+0x1>
     d3c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <count.1783>
        }
        // lock
        lockt1 = 1;
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <lockt1.1784+0x1>
     d48:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <lockt1.1784>
     d4c:	1f c0       	rjmp	.+62     	; 0xd8c <increment+0x88>
    }else if (!lockt2 && Taster2_get()) {
     d4e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lockt2.1785>
     d52:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lockt2.1785+0x1>
     d56:	89 2b       	or	r24, r25
     d58:	c9 f4       	brne	.+50     	; 0xd8c <increment+0x88>
     d5a:	e3 da       	rcall	.-2618   	; 0x322 <Taster2_get>
     d5c:	89 2b       	or	r24, r25
     d5e:	b1 f0       	breq	.+44     	; 0xd8c <increment+0x88>
        //count to min 0
        if (count > 0) {
     d60:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count.1783>
     d64:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count.1783+0x1>
     d68:	18 16       	cp	r1, r24
     d6a:	19 06       	cpc	r1, r25
     d6c:	4c f4       	brge	.+18     	; 0xd80 <increment+0x7c>
            count--;
     d6e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count.1783>
     d72:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count.1783+0x1>
     d76:	01 97       	sbiw	r24, 0x01	; 1
     d78:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <count.1783+0x1>
     d7c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <count.1783>
        }
        // lock
        lockt2 = 1;
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <lockt2.1785+0x1>
     d88:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lockt2.1785>
    }
    
    // if button is released, release lock
    if (!Taster1_get()) {
     d8c:	af da       	rcall	.-2722   	; 0x2ec <Taster1_get>
     d8e:	89 2b       	or	r24, r25
     d90:	21 f4       	brne	.+8      	; 0xd9a <increment+0x96>
        lockt1 = 0;
     d92:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <lockt1.1784+0x1>
     d96:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <lockt1.1784>
    }
    if (!Taster2_get()) {
     d9a:	c3 da       	rcall	.-2682   	; 0x322 <Taster2_get>
     d9c:	89 2b       	or	r24, r25
     d9e:	21 f4       	brne	.+8      	; 0xda8 <increment+0xa4>
        lockt2 = 0;
     da0:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lockt2.1785+0x1>
     da4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lockt2.1785>
    }
    
    // shift as many ones as count to byte
    int ledByte = 0;
     da8:	1a 82       	std	Y+2, r1	; 0x02
     daa:	19 82       	std	Y+1, r1	; 0x01
    for (int i = 0; i < count; i++) {
     dac:	1c 82       	std	Y+4, r1	; 0x04
     dae:	1b 82       	std	Y+3, r1	; 0x03
     db0:	10 c0       	rjmp	.+32     	; 0xdd2 <increment+0xce>
        ledByte = ledByte << 1;
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	9a 81       	ldd	r25, Y+2	; 0x02
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	9a 83       	std	Y+2, r25	; 0x02
     dbc:	89 83       	std	Y+1, r24	; 0x01
        ledByte++;
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	9a 81       	ldd	r25, Y+2	; 0x02
     dc2:	01 96       	adiw	r24, 0x01	; 1
     dc4:	9a 83       	std	Y+2, r25	; 0x02
     dc6:	89 83       	std	Y+1, r24	; 0x01
        lockt2 = 0;
    }
    
    // shift as many ones as count to byte
    int ledByte = 0;
    for (int i = 0; i < count; i++) {
     dc8:	8b 81       	ldd	r24, Y+3	; 0x03
     dca:	9c 81       	ldd	r25, Y+4	; 0x04
     dcc:	01 96       	adiw	r24, 0x01	; 1
     dce:	9c 83       	std	Y+4, r25	; 0x04
     dd0:	8b 83       	std	Y+3, r24	; 0x03
     dd2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count.1783>
     dd6:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count.1783+0x1>
     dda:	2b 81       	ldd	r18, Y+3	; 0x03
     ddc:	3c 81       	ldd	r19, Y+4	; 0x04
     dde:	28 17       	cp	r18, r24
     de0:	39 07       	cpc	r19, r25
     de2:	3c f3       	brlt	.-50     	; 0xdb2 <increment+0xae>
        ledByte = ledByte << 1;
        ledByte++;
    }
    // set Port
    PORTB = ledByte;
     de4:	85 e2       	ldi	r24, 0x25	; 37
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	29 81       	ldd	r18, Y+1	; 0x01
     dea:	fc 01       	movw	r30, r24
     dec:	20 83       	st	Z, r18
}
     dee:	00 00       	nop
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	08 95       	ret

00000dfe <testBoard>:

/**
 Switches PORTB on and off with a delay off 500 ms
 */
void testBoard() {
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	6c 97       	sbiw	r28, 0x1c	; 28
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
    static int state_testBoard = 0;
    if (state_testBoard) {
     e12:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <state_testBoard.1797>
     e16:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <state_testBoard.1797+0x1>
     e1a:	89 2b       	or	r24, r25
     e1c:	09 f4       	brne	.+2      	; 0xe20 <testBoard+0x22>
     e1e:	75 c0       	rjmp	.+234    	; 0xf0a <testBoard+0x10c>
		state_testBoard = 0;
     e20:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <state_testBoard.1797+0x1>
     e24:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <state_testBoard.1797>
        PORTB = 0x00;
     e28:	85 e2       	ldi	r24, 0x25	; 37
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	fc 01       	movw	r30, r24
     e2e:	10 82       	st	Z, r1
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	aa ef       	ldi	r26, 0xFA	; 250
     e36:	b3 e4       	ldi	r27, 0x43	; 67
     e38:	8d 83       	std	Y+5, r24	; 0x05
     e3a:	9e 83       	std	Y+6, r25	; 0x06
     e3c:	af 83       	std	Y+7, r26	; 0x07
     e3e:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	4a e7       	ldi	r20, 0x7A	; 122
     e46:	53 e4       	ldi	r21, 0x43	; 67
     e48:	6d 81       	ldd	r22, Y+5	; 0x05
     e4a:	7e 81       	ldd	r23, Y+6	; 0x06
     e4c:	8f 81       	ldd	r24, Y+7	; 0x07
     e4e:	98 85       	ldd	r25, Y+8	; 0x08
     e50:	05 d2       	rcall	.+1034   	; 0x125c <__mulsf3>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	89 87       	std	Y+9, r24	; 0x09
     e58:	9a 87       	std	Y+10, r25	; 0x0a
     e5a:	ab 87       	std	Y+11, r26	; 0x0b
     e5c:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	40 e8       	ldi	r20, 0x80	; 128
     e64:	5f e3       	ldi	r21, 0x3F	; 63
     e66:	69 85       	ldd	r22, Y+9	; 0x09
     e68:	7a 85       	ldd	r23, Y+10	; 0x0a
     e6a:	8b 85       	ldd	r24, Y+11	; 0x0b
     e6c:	9c 85       	ldd	r25, Y+12	; 0x0c
     e6e:	75 d1       	rcall	.+746    	; 0x115a <__cmpsf2>
     e70:	88 23       	and	r24, r24
     e72:	2c f4       	brge	.+10     	; 0xe7e <testBoard+0x80>
		__ticks = 1;
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	9e 87       	std	Y+14, r25	; 0x0e
     e7a:	8d 87       	std	Y+13, r24	; 0x0d
     e7c:	3b c0       	rjmp	.+118    	; 0xef4 <testBoard+0xf6>
	else if (__tmp > 65535)
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	3f ef       	ldi	r19, 0xFF	; 255
     e82:	4f e7       	ldi	r20, 0x7F	; 127
     e84:	57 e4       	ldi	r21, 0x47	; 71
     e86:	69 85       	ldd	r22, Y+9	; 0x09
     e88:	7a 85       	ldd	r23, Y+10	; 0x0a
     e8a:	8b 85       	ldd	r24, Y+11	; 0x0b
     e8c:	9c 85       	ldd	r25, Y+12	; 0x0c
     e8e:	e2 d1       	rcall	.+964    	; 0x1254 <__gesf2>
     e90:	18 16       	cp	r1, r24
     e92:	3c f5       	brge	.+78     	; 0xee2 <testBoard+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	40 e2       	ldi	r20, 0x20	; 32
     e9a:	51 e4       	ldi	r21, 0x41	; 65
     e9c:	6d 81       	ldd	r22, Y+5	; 0x05
     e9e:	7e 81       	ldd	r23, Y+6	; 0x06
     ea0:	8f 81       	ldd	r24, Y+7	; 0x07
     ea2:	98 85       	ldd	r25, Y+8	; 0x08
     ea4:	db d1       	rcall	.+950    	; 0x125c <__mulsf3>
     ea6:	dc 01       	movw	r26, r24
     ea8:	cb 01       	movw	r24, r22
     eaa:	bc 01       	movw	r22, r24
     eac:	cd 01       	movw	r24, r26
     eae:	59 d1       	rcall	.+690    	; 0x1162 <__fixunssfsi>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	9e 87       	std	Y+14, r25	; 0x0e
     eb6:	8d 87       	std	Y+13, r24	; 0x0d
     eb8:	0f c0       	rjmp	.+30     	; 0xed8 <testBoard+0xda>
     eba:	89 e1       	ldi	r24, 0x19	; 25
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	98 8b       	std	Y+16, r25	; 0x10
     ec0:	8f 87       	std	Y+15, r24	; 0x0f
     ec2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ec4:	98 89       	ldd	r25, Y+16	; 0x10
     ec6:	01 97       	sbiw	r24, 0x01	; 1
     ec8:	f1 f7       	brne	.-4      	; 0xec6 <testBoard+0xc8>
     eca:	98 8b       	std	Y+16, r25	; 0x10
     ecc:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ece:	8d 85       	ldd	r24, Y+13	; 0x0d
     ed0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	9e 87       	std	Y+14, r25	; 0x0e
     ed6:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ed8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eda:	9e 85       	ldd	r25, Y+14	; 0x0e
     edc:	89 2b       	or	r24, r25
     ede:	69 f7       	brne	.-38     	; 0xeba <testBoard+0xbc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ee0:	8b c0       	rjmp	.+278    	; 0xff8 <testBoard+0x1fa>
     ee2:	69 85       	ldd	r22, Y+9	; 0x09
     ee4:	7a 85       	ldd	r23, Y+10	; 0x0a
     ee6:	8b 85       	ldd	r24, Y+11	; 0x0b
     ee8:	9c 85       	ldd	r25, Y+12	; 0x0c
     eea:	3b d1       	rcall	.+630    	; 0x1162 <__fixunssfsi>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	9e 87       	std	Y+14, r25	; 0x0e
     ef2:	8d 87       	std	Y+13, r24	; 0x0d
     ef4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef8:	9a 8b       	std	Y+18, r25	; 0x12
     efa:	89 8b       	std	Y+17, r24	; 0x11
     efc:	89 89       	ldd	r24, Y+17	; 0x11
     efe:	9a 89       	ldd	r25, Y+18	; 0x12
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	f1 f7       	brne	.-4      	; 0xf00 <testBoard+0x102>
     f04:	9a 8b       	std	Y+18, r25	; 0x12
     f06:	89 8b       	std	Y+17, r24	; 0x11
    }else {
		state_testBoard = 1;
        PORTB = 0xFF;
        _delay_ms(500);
    }
}
     f08:	77 c0       	rjmp	.+238    	; 0xff8 <testBoard+0x1fa>
    if (state_testBoard) {
		state_testBoard = 0;
        PORTB = 0x00;
        _delay_ms(500);
    }else {
		state_testBoard = 1;
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <state_testBoard.1797+0x1>
     f12:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state_testBoard.1797>
        PORTB = 0xFF;
     f16:	85 e2       	ldi	r24, 0x25	; 37
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	2f ef       	ldi	r18, 0xFF	; 255
     f1c:	fc 01       	movw	r30, r24
     f1e:	20 83       	st	Z, r18
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	aa ef       	ldi	r26, 0xFA	; 250
     f26:	b3 e4       	ldi	r27, 0x43	; 67
     f28:	89 83       	std	Y+1, r24	; 0x01
     f2a:	9a 83       	std	Y+2, r25	; 0x02
     f2c:	ab 83       	std	Y+3, r26	; 0x03
     f2e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	4a e7       	ldi	r20, 0x7A	; 122
     f36:	53 e4       	ldi	r21, 0x43	; 67
     f38:	69 81       	ldd	r22, Y+1	; 0x01
     f3a:	7a 81       	ldd	r23, Y+2	; 0x02
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	9c 81       	ldd	r25, Y+4	; 0x04
     f40:	8d d1       	rcall	.+794    	; 0x125c <__mulsf3>
     f42:	dc 01       	movw	r26, r24
     f44:	cb 01       	movw	r24, r22
     f46:	8b 8b       	std	Y+19, r24	; 0x13
     f48:	9c 8b       	std	Y+20, r25	; 0x14
     f4a:	ad 8b       	std	Y+21, r26	; 0x15
     f4c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	40 e8       	ldi	r20, 0x80	; 128
     f54:	5f e3       	ldi	r21, 0x3F	; 63
     f56:	6b 89       	ldd	r22, Y+19	; 0x13
     f58:	7c 89       	ldd	r23, Y+20	; 0x14
     f5a:	8d 89       	ldd	r24, Y+21	; 0x15
     f5c:	9e 89       	ldd	r25, Y+22	; 0x16
     f5e:	fd d0       	rcall	.+506    	; 0x115a <__cmpsf2>
     f60:	88 23       	and	r24, r24
     f62:	2c f4       	brge	.+10     	; 0xf6e <testBoard+0x170>
		__ticks = 1;
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	98 8f       	std	Y+24, r25	; 0x18
     f6a:	8f 8b       	std	Y+23, r24	; 0x17
     f6c:	3b c0       	rjmp	.+118    	; 0xfe4 <testBoard+0x1e6>
	else if (__tmp > 65535)
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	3f ef       	ldi	r19, 0xFF	; 255
     f72:	4f e7       	ldi	r20, 0x7F	; 127
     f74:	57 e4       	ldi	r21, 0x47	; 71
     f76:	6b 89       	ldd	r22, Y+19	; 0x13
     f78:	7c 89       	ldd	r23, Y+20	; 0x14
     f7a:	8d 89       	ldd	r24, Y+21	; 0x15
     f7c:	9e 89       	ldd	r25, Y+22	; 0x16
     f7e:	6a d1       	rcall	.+724    	; 0x1254 <__gesf2>
     f80:	18 16       	cp	r1, r24
     f82:	3c f5       	brge	.+78     	; 0xfd2 <testBoard+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	40 e2       	ldi	r20, 0x20	; 32
     f8a:	51 e4       	ldi	r21, 0x41	; 65
     f8c:	69 81       	ldd	r22, Y+1	; 0x01
     f8e:	7a 81       	ldd	r23, Y+2	; 0x02
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	9c 81       	ldd	r25, Y+4	; 0x04
     f94:	63 d1       	rcall	.+710    	; 0x125c <__mulsf3>
     f96:	dc 01       	movw	r26, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	bc 01       	movw	r22, r24
     f9c:	cd 01       	movw	r24, r26
     f9e:	e1 d0       	rcall	.+450    	; 0x1162 <__fixunssfsi>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	98 8f       	std	Y+24, r25	; 0x18
     fa6:	8f 8b       	std	Y+23, r24	; 0x17
     fa8:	0f c0       	rjmp	.+30     	; 0xfc8 <testBoard+0x1ca>
     faa:	89 e1       	ldi	r24, 0x19	; 25
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	9a 8f       	std	Y+26, r25	; 0x1a
     fb0:	89 8f       	std	Y+25, r24	; 0x19
     fb2:	89 8d       	ldd	r24, Y+25	; 0x19
     fb4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	f1 f7       	brne	.-4      	; 0xfb6 <testBoard+0x1b8>
     fba:	9a 8f       	std	Y+26, r25	; 0x1a
     fbc:	89 8f       	std	Y+25, r24	; 0x19
     fbe:	8f 89       	ldd	r24, Y+23	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc0:	98 8d       	ldd	r25, Y+24	; 0x18
     fc2:	01 97       	sbiw	r24, 0x01	; 1
     fc4:	98 8f       	std	Y+24, r25	; 0x18
     fc6:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc8:	8f 89       	ldd	r24, Y+23	; 0x17
     fca:	98 8d       	ldd	r25, Y+24	; 0x18
     fcc:	89 2b       	or	r24, r25
     fce:	69 f7       	brne	.-38     	; 0xfaa <testBoard+0x1ac>
        _delay_ms(500);
    }
}
     fd0:	13 c0       	rjmp	.+38     	; 0xff8 <testBoard+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd2:	6b 89       	ldd	r22, Y+19	; 0x13
     fd4:	7c 89       	ldd	r23, Y+20	; 0x14
     fd6:	8d 89       	ldd	r24, Y+21	; 0x15
     fd8:	9e 89       	ldd	r25, Y+22	; 0x16
     fda:	c3 d0       	rcall	.+390    	; 0x1162 <__fixunssfsi>
     fdc:	dc 01       	movw	r26, r24
     fde:	cb 01       	movw	r24, r22
     fe0:	98 8f       	std	Y+24, r25	; 0x18
     fe2:	8f 8b       	std	Y+23, r24	; 0x17
     fe4:	8f 89       	ldd	r24, Y+23	; 0x17
     fe6:	98 8d       	ldd	r25, Y+24	; 0x18
     fe8:	9c 8f       	std	Y+28, r25	; 0x1c
     fea:	8b 8f       	std	Y+27, r24	; 0x1b
     fec:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fee:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ff0:	01 97       	sbiw	r24, 0x01	; 1
     ff2:	f1 f7       	brne	.-4      	; 0xff0 <testBoard+0x1f2>
     ff4:	9c 8f       	std	Y+28, r25	; 0x1c
     ff6:	8b 8f       	std	Y+27, r24	; 0x1b
     ff8:	00 00       	nop
     ffa:	6c 96       	adiw	r28, 0x1c	; 28
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	f8 94       	cli
    1000:	de bf       	out	0x3e, r29	; 62
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	cd bf       	out	0x3d, r28	; 61
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	08 95       	ret

0000100c <testTasterLed>:
    100c:	cf 93       	push	r28

/**
 If button1 is pressed, led1 will turn on. If button2 is pressed, led2 will turn on and so on...
 */
void testTasterLed() {
    100e:	df 93       	push	r29
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    if (Taster1_get()) {
    1014:	6b d9       	rcall	.-3370   	; 0x2ec <Taster1_get>
    1016:	89 2b       	or	r24, r25
    1018:	11 f0       	breq	.+4      	; 0x101e <testTasterLed+0x12>
        Led1_On();
    101a:	80 d8       	rcall	.-3840   	; 0x11c <Led1_On>
    101c:	01 c0       	rjmp	.+2      	; 0x1020 <testTasterLed+0x14>
    }else {
        Led1_Off();
    101e:	8f d8       	rcall	.-3810   	; 0x13e <Led1_Off>
    1020:	80 d9       	rcall	.-3328   	; 0x322 <Taster2_get>
    }
    if (Taster2_get()) {
    1022:	89 2b       	or	r24, r25
    1024:	11 f0       	breq	.+4      	; 0x102a <testTasterLed+0x1e>
        Led2_On();
    1026:	9c d8       	rcall	.-3784   	; 0x160 <Led2_On>
    1028:	01 c0       	rjmp	.+2      	; 0x102c <testTasterLed+0x20>
    }else {
        Led2_Off();
    102a:	ab d8       	rcall	.-3754   	; 0x182 <Led2_Off>
    }
    if (Taster3_get()) {
    102c:	92 d9       	rcall	.-3292   	; 0x352 <Taster3_get>
    102e:	89 2b       	or	r24, r25
    1030:	11 f0       	breq	.+4      	; 0x1036 <testTasterLed+0x2a>
        Led3_On();
    1032:	b8 d8       	rcall	.-3728   	; 0x1a4 <Led3_On>
    1034:	01 c0       	rjmp	.+2      	; 0x1038 <testTasterLed+0x2c>
        }else {
        Led3_Off();
    1036:	c7 d8       	rcall	.-3698   	; 0x1c6 <Led3_Off>
    1038:	a4 d9       	rcall	.-3256   	; 0x382 <Taster4_get>
    }
    if (Taster4_get()) {
    103a:	89 2b       	or	r24, r25
    103c:	11 f0       	breq	.+4      	; 0x1042 <testTasterLed+0x36>
    103e:	d4 d8       	rcall	.-3672   	; 0x1e8 <Led4_On>
    1040:	01 c0       	rjmp	.+2      	; 0x1044 <testTasterLed+0x38>
        Led4_On();
    1042:	e3 d8       	rcall	.-3642   	; 0x20a <Led4_Off>
    1044:	00 00       	nop
        }else {
        Led4_Off();
    }
}
    1046:	df 91       	pop	r29
        Led3_Off();
    }
    if (Taster4_get()) {
        Led4_On();
        }else {
        Led4_Off();
    1048:	cf 91       	pop	r28
    104a:	08 95       	ret

0000104c <Timer_init>:
    }
}
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    
    // enable global interrupt
    sei();

    return temp_timer_count;
}
    1054:	04 d0       	rcall	.+8      	; 0x105e <Timer_init_withoutStruct>
    1056:	00 00       	nop
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	08 95       	ret

0000105e <Timer_init_withoutStruct>:
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	85 e4       	ldi	r24, 0x45	; 69
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	25 e4       	ldi	r18, 0x45	; 69
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	f9 01       	movw	r30, r18
    1070:	20 81       	ld	r18, Z
    1072:	27 7f       	andi	r18, 0xF7	; 247
    1074:	fc 01       	movw	r30, r24
    1076:	20 83       	st	Z, r18
    1078:	84 e4       	ldi	r24, 0x44	; 68
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	24 e4       	ldi	r18, 0x44	; 68
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	f9 01       	movw	r30, r18
    1082:	20 81       	ld	r18, Z
    1084:	22 60       	ori	r18, 0x02	; 2
    1086:	fc 01       	movw	r30, r24
    1088:	20 83       	st	Z, r18
    108a:	84 e4       	ldi	r24, 0x44	; 68
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	24 e4       	ldi	r18, 0x44	; 68
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	f9 01       	movw	r30, r18
    1094:	20 81       	ld	r18, Z
    1096:	2e 7f       	andi	r18, 0xFE	; 254
    1098:	fc 01       	movw	r30, r24
    109a:	20 83       	st	Z, r18
    109c:	87 e4       	ldi	r24, 0x47	; 71
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	2c e7       	ldi	r18, 0x7C	; 124
    10a2:	fc 01       	movw	r30, r24
    10a4:	20 83       	st	Z, r18
    10a6:	85 e4       	ldi	r24, 0x45	; 69
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	25 e4       	ldi	r18, 0x45	; 69
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	f9 01       	movw	r30, r18
    10b0:	20 81       	ld	r18, Z
    10b2:	2b 7f       	andi	r18, 0xFB	; 251
    10b4:	fc 01       	movw	r30, r24
    10b6:	20 83       	st	Z, r18
    10b8:	85 e4       	ldi	r24, 0x45	; 69
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	25 e4       	ldi	r18, 0x45	; 69
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	f9 01       	movw	r30, r18
    10c2:	20 81       	ld	r18, Z
    10c4:	22 60       	ori	r18, 0x02	; 2
    10c6:	fc 01       	movw	r30, r24
    10c8:	20 83       	st	Z, r18
    10ca:	85 e4       	ldi	r24, 0x45	; 69
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	25 e4       	ldi	r18, 0x45	; 69
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	f9 01       	movw	r30, r18
    10d4:	20 81       	ld	r18, Z
    10d6:	2e 7f       	andi	r18, 0xFE	; 254
    10d8:	fc 01       	movw	r30, r24
    10da:	20 83       	st	Z, r18
    10dc:	8e e6       	ldi	r24, 0x6E	; 110
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	2e e6       	ldi	r18, 0x6E	; 110
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	f9 01       	movw	r30, r18
    10e6:	20 81       	ld	r18, Z
    10e8:	2b 7f       	andi	r18, 0xFB	; 251
    10ea:	fc 01       	movw	r30, r24
    10ec:	20 83       	st	Z, r18
    10ee:	8e e6       	ldi	r24, 0x6E	; 110
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	2e e6       	ldi	r18, 0x6E	; 110
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	f9 01       	movw	r30, r18
    10f8:	20 81       	ld	r18, Z
    10fa:	22 60       	ori	r18, 0x02	; 2
    10fc:	fc 01       	movw	r30, r24
    10fe:	20 83       	st	Z, r18
    1100:	8e e6       	ldi	r24, 0x6E	; 110
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	2e e6       	ldi	r18, 0x6E	; 110
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	f9 01       	movw	r30, r18
    110a:	20 81       	ld	r18, Z
    110c:	2e 7f       	andi	r18, 0xFE	; 254
    110e:	fc 01       	movw	r30, r24
    1110:	20 83       	st	Z, r18
    1112:	00 00       	nop
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	08 95       	ret

0000111a <__vector_16>:
 ( not used atm)
 Timer compare A interrput:
 - increase timer_count
 - if timer_count is at max of uint16, set it to 0
 */
ISR(TIMER0_COMPA_vect){
    111a:	1f 92       	push	r1
    111c:	0f 92       	push	r0
    111e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1122:	0f 92       	push	r0
    1124:	11 24       	eor	r1, r1
    1126:	8f 93       	push	r24
    1128:	9f 93       	push	r25
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    timer_count++;
    1132:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <timer_count>
    1136:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <timer_count+0x1>
    113a:	01 96       	adiw	r24, 0x01	; 1
    113c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timer_count+0x1>
    1140:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timer_count>
}
    1144:	00 00       	nop
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	9f 91       	pop	r25
    114c:	8f 91       	pop	r24
    114e:	0f 90       	pop	r0
    1150:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1154:	0f 90       	pop	r0
    1156:	1f 90       	pop	r1
    1158:	18 95       	reti

0000115a <__cmpsf2>:
    115a:	2f d0       	rcall	.+94     	; 0x11ba <__fp_cmp>
    115c:	08 f4       	brcc	.+2      	; 0x1160 <__cmpsf2+0x6>
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	08 95       	ret

00001162 <__fixunssfsi>:
    1162:	57 d0       	rcall	.+174    	; 0x1212 <__fp_splitA>
    1164:	88 f0       	brcs	.+34     	; 0x1188 <__fixunssfsi+0x26>
    1166:	9f 57       	subi	r25, 0x7F	; 127
    1168:	90 f0       	brcs	.+36     	; 0x118e <__fixunssfsi+0x2c>
    116a:	b9 2f       	mov	r27, r25
    116c:	99 27       	eor	r25, r25
    116e:	b7 51       	subi	r27, 0x17	; 23
    1170:	a0 f0       	brcs	.+40     	; 0x119a <__fixunssfsi+0x38>
    1172:	d1 f0       	breq	.+52     	; 0x11a8 <__fixunssfsi+0x46>
    1174:	66 0f       	add	r22, r22
    1176:	77 1f       	adc	r23, r23
    1178:	88 1f       	adc	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	1a f0       	brmi	.+6      	; 0x1184 <__fixunssfsi+0x22>
    117e:	ba 95       	dec	r27
    1180:	c9 f7       	brne	.-14     	; 0x1174 <__fixunssfsi+0x12>
    1182:	12 c0       	rjmp	.+36     	; 0x11a8 <__fixunssfsi+0x46>
    1184:	b1 30       	cpi	r27, 0x01	; 1
    1186:	81 f0       	breq	.+32     	; 0x11a8 <__fixunssfsi+0x46>
    1188:	5e d0       	rcall	.+188    	; 0x1246 <__fp_zero>
    118a:	b1 e0       	ldi	r27, 0x01	; 1
    118c:	08 95       	ret
    118e:	5b c0       	rjmp	.+182    	; 0x1246 <__fp_zero>
    1190:	67 2f       	mov	r22, r23
    1192:	78 2f       	mov	r23, r24
    1194:	88 27       	eor	r24, r24
    1196:	b8 5f       	subi	r27, 0xF8	; 248
    1198:	39 f0       	breq	.+14     	; 0x11a8 <__fixunssfsi+0x46>
    119a:	b9 3f       	cpi	r27, 0xF9	; 249
    119c:	cc f3       	brlt	.-14     	; 0x1190 <__fixunssfsi+0x2e>
    119e:	86 95       	lsr	r24
    11a0:	77 95       	ror	r23
    11a2:	67 95       	ror	r22
    11a4:	b3 95       	inc	r27
    11a6:	d9 f7       	brne	.-10     	; 0x119e <__fixunssfsi+0x3c>
    11a8:	3e f4       	brtc	.+14     	; 0x11b8 <__fixunssfsi+0x56>
    11aa:	90 95       	com	r25
    11ac:	80 95       	com	r24
    11ae:	70 95       	com	r23
    11b0:	61 95       	neg	r22
    11b2:	7f 4f       	sbci	r23, 0xFF	; 255
    11b4:	8f 4f       	sbci	r24, 0xFF	; 255
    11b6:	9f 4f       	sbci	r25, 0xFF	; 255
    11b8:	08 95       	ret

000011ba <__fp_cmp>:
    11ba:	99 0f       	add	r25, r25
    11bc:	00 08       	sbc	r0, r0
    11be:	55 0f       	add	r21, r21
    11c0:	aa 0b       	sbc	r26, r26
    11c2:	e0 e8       	ldi	r30, 0x80	; 128
    11c4:	fe ef       	ldi	r31, 0xFE	; 254
    11c6:	16 16       	cp	r1, r22
    11c8:	17 06       	cpc	r1, r23
    11ca:	e8 07       	cpc	r30, r24
    11cc:	f9 07       	cpc	r31, r25
    11ce:	c0 f0       	brcs	.+48     	; 0x1200 <__fp_cmp+0x46>
    11d0:	12 16       	cp	r1, r18
    11d2:	13 06       	cpc	r1, r19
    11d4:	e4 07       	cpc	r30, r20
    11d6:	f5 07       	cpc	r31, r21
    11d8:	98 f0       	brcs	.+38     	; 0x1200 <__fp_cmp+0x46>
    11da:	62 1b       	sub	r22, r18
    11dc:	73 0b       	sbc	r23, r19
    11de:	84 0b       	sbc	r24, r20
    11e0:	95 0b       	sbc	r25, r21
    11e2:	39 f4       	brne	.+14     	; 0x11f2 <__fp_cmp+0x38>
    11e4:	0a 26       	eor	r0, r26
    11e6:	61 f0       	breq	.+24     	; 0x1200 <__fp_cmp+0x46>
    11e8:	23 2b       	or	r18, r19
    11ea:	24 2b       	or	r18, r20
    11ec:	25 2b       	or	r18, r21
    11ee:	21 f4       	brne	.+8      	; 0x11f8 <__fp_cmp+0x3e>
    11f0:	08 95       	ret
    11f2:	0a 26       	eor	r0, r26
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <__fp_cmp+0x3e>
    11f6:	a1 40       	sbci	r26, 0x01	; 1
    11f8:	a6 95       	lsr	r26
    11fa:	8f ef       	ldi	r24, 0xFF	; 255
    11fc:	81 1d       	adc	r24, r1
    11fe:	81 1d       	adc	r24, r1
    1200:	08 95       	ret

00001202 <__fp_split3>:
    1202:	57 fd       	sbrc	r21, 7
    1204:	90 58       	subi	r25, 0x80	; 128
    1206:	44 0f       	add	r20, r20
    1208:	55 1f       	adc	r21, r21
    120a:	59 f0       	breq	.+22     	; 0x1222 <__fp_splitA+0x10>
    120c:	5f 3f       	cpi	r21, 0xFF	; 255
    120e:	71 f0       	breq	.+28     	; 0x122c <__fp_splitA+0x1a>
    1210:	47 95       	ror	r20

00001212 <__fp_splitA>:
    1212:	88 0f       	add	r24, r24
    1214:	97 fb       	bst	r25, 7
    1216:	99 1f       	adc	r25, r25
    1218:	61 f0       	breq	.+24     	; 0x1232 <__fp_splitA+0x20>
    121a:	9f 3f       	cpi	r25, 0xFF	; 255
    121c:	79 f0       	breq	.+30     	; 0x123c <__fp_splitA+0x2a>
    121e:	87 95       	ror	r24
    1220:	08 95       	ret
    1222:	12 16       	cp	r1, r18
    1224:	13 06       	cpc	r1, r19
    1226:	14 06       	cpc	r1, r20
    1228:	55 1f       	adc	r21, r21
    122a:	f2 cf       	rjmp	.-28     	; 0x1210 <__fp_split3+0xe>
    122c:	46 95       	lsr	r20
    122e:	f1 df       	rcall	.-30     	; 0x1212 <__fp_splitA>
    1230:	08 c0       	rjmp	.+16     	; 0x1242 <__fp_splitA+0x30>
    1232:	16 16       	cp	r1, r22
    1234:	17 06       	cpc	r1, r23
    1236:	18 06       	cpc	r1, r24
    1238:	99 1f       	adc	r25, r25
    123a:	f1 cf       	rjmp	.-30     	; 0x121e <__fp_splitA+0xc>
    123c:	86 95       	lsr	r24
    123e:	71 05       	cpc	r23, r1
    1240:	61 05       	cpc	r22, r1
    1242:	08 94       	sec
    1244:	08 95       	ret

00001246 <__fp_zero>:
    1246:	e8 94       	clt

00001248 <__fp_szero>:
    1248:	bb 27       	eor	r27, r27
    124a:	66 27       	eor	r22, r22
    124c:	77 27       	eor	r23, r23
    124e:	cb 01       	movw	r24, r22
    1250:	97 f9       	bld	r25, 7
    1252:	08 95       	ret

00001254 <__gesf2>:
    1254:	b2 df       	rcall	.-156    	; 0x11ba <__fp_cmp>
    1256:	08 f4       	brcc	.+2      	; 0x125a <__gesf2+0x6>
    1258:	8f ef       	ldi	r24, 0xFF	; 255
    125a:	08 95       	ret

0000125c <__mulsf3>:
    125c:	0b d0       	rcall	.+22     	; 0x1274 <__mulsf3x>
    125e:	78 c0       	rjmp	.+240    	; 0x1350 <__fp_round>
    1260:	69 d0       	rcall	.+210    	; 0x1334 <__fp_pscA>
    1262:	28 f0       	brcs	.+10     	; 0x126e <__mulsf3+0x12>
    1264:	6e d0       	rcall	.+220    	; 0x1342 <__fp_pscB>
    1266:	18 f0       	brcs	.+6      	; 0x126e <__mulsf3+0x12>
    1268:	95 23       	and	r25, r21
    126a:	09 f0       	breq	.+2      	; 0x126e <__mulsf3+0x12>
    126c:	5a c0       	rjmp	.+180    	; 0x1322 <__fp_inf>
    126e:	5f c0       	rjmp	.+190    	; 0x132e <__fp_nan>
    1270:	11 24       	eor	r1, r1
    1272:	ea cf       	rjmp	.-44     	; 0x1248 <__fp_szero>

00001274 <__mulsf3x>:
    1274:	c6 df       	rcall	.-116    	; 0x1202 <__fp_split3>
    1276:	a0 f3       	brcs	.-24     	; 0x1260 <__mulsf3+0x4>

00001278 <__mulsf3_pse>:
    1278:	95 9f       	mul	r25, r21
    127a:	d1 f3       	breq	.-12     	; 0x1270 <__mulsf3+0x14>
    127c:	95 0f       	add	r25, r21
    127e:	50 e0       	ldi	r21, 0x00	; 0
    1280:	55 1f       	adc	r21, r21
    1282:	62 9f       	mul	r22, r18
    1284:	f0 01       	movw	r30, r0
    1286:	72 9f       	mul	r23, r18
    1288:	bb 27       	eor	r27, r27
    128a:	f0 0d       	add	r31, r0
    128c:	b1 1d       	adc	r27, r1
    128e:	63 9f       	mul	r22, r19
    1290:	aa 27       	eor	r26, r26
    1292:	f0 0d       	add	r31, r0
    1294:	b1 1d       	adc	r27, r1
    1296:	aa 1f       	adc	r26, r26
    1298:	64 9f       	mul	r22, r20
    129a:	66 27       	eor	r22, r22
    129c:	b0 0d       	add	r27, r0
    129e:	a1 1d       	adc	r26, r1
    12a0:	66 1f       	adc	r22, r22
    12a2:	82 9f       	mul	r24, r18
    12a4:	22 27       	eor	r18, r18
    12a6:	b0 0d       	add	r27, r0
    12a8:	a1 1d       	adc	r26, r1
    12aa:	62 1f       	adc	r22, r18
    12ac:	73 9f       	mul	r23, r19
    12ae:	b0 0d       	add	r27, r0
    12b0:	a1 1d       	adc	r26, r1
    12b2:	62 1f       	adc	r22, r18
    12b4:	83 9f       	mul	r24, r19
    12b6:	a0 0d       	add	r26, r0
    12b8:	61 1d       	adc	r22, r1
    12ba:	22 1f       	adc	r18, r18
    12bc:	74 9f       	mul	r23, r20
    12be:	33 27       	eor	r19, r19
    12c0:	a0 0d       	add	r26, r0
    12c2:	61 1d       	adc	r22, r1
    12c4:	23 1f       	adc	r18, r19
    12c6:	84 9f       	mul	r24, r20
    12c8:	60 0d       	add	r22, r0
    12ca:	21 1d       	adc	r18, r1
    12cc:	82 2f       	mov	r24, r18
    12ce:	76 2f       	mov	r23, r22
    12d0:	6a 2f       	mov	r22, r26
    12d2:	11 24       	eor	r1, r1
    12d4:	9f 57       	subi	r25, 0x7F	; 127
    12d6:	50 40       	sbci	r21, 0x00	; 0
    12d8:	8a f0       	brmi	.+34     	; 0x12fc <__mulsf3_pse+0x84>
    12da:	e1 f0       	breq	.+56     	; 0x1314 <__mulsf3_pse+0x9c>
    12dc:	88 23       	and	r24, r24
    12de:	4a f0       	brmi	.+18     	; 0x12f2 <__mulsf3_pse+0x7a>
    12e0:	ee 0f       	add	r30, r30
    12e2:	ff 1f       	adc	r31, r31
    12e4:	bb 1f       	adc	r27, r27
    12e6:	66 1f       	adc	r22, r22
    12e8:	77 1f       	adc	r23, r23
    12ea:	88 1f       	adc	r24, r24
    12ec:	91 50       	subi	r25, 0x01	; 1
    12ee:	50 40       	sbci	r21, 0x00	; 0
    12f0:	a9 f7       	brne	.-22     	; 0x12dc <__mulsf3_pse+0x64>
    12f2:	9e 3f       	cpi	r25, 0xFE	; 254
    12f4:	51 05       	cpc	r21, r1
    12f6:	70 f0       	brcs	.+28     	; 0x1314 <__mulsf3_pse+0x9c>
    12f8:	14 c0       	rjmp	.+40     	; 0x1322 <__fp_inf>
    12fa:	a6 cf       	rjmp	.-180    	; 0x1248 <__fp_szero>
    12fc:	5f 3f       	cpi	r21, 0xFF	; 255
    12fe:	ec f3       	brlt	.-6      	; 0x12fa <__mulsf3_pse+0x82>
    1300:	98 3e       	cpi	r25, 0xE8	; 232
    1302:	dc f3       	brlt	.-10     	; 0x12fa <__mulsf3_pse+0x82>
    1304:	86 95       	lsr	r24
    1306:	77 95       	ror	r23
    1308:	67 95       	ror	r22
    130a:	b7 95       	ror	r27
    130c:	f7 95       	ror	r31
    130e:	e7 95       	ror	r30
    1310:	9f 5f       	subi	r25, 0xFF	; 255
    1312:	c1 f7       	brne	.-16     	; 0x1304 <__mulsf3_pse+0x8c>
    1314:	fe 2b       	or	r31, r30
    1316:	88 0f       	add	r24, r24
    1318:	91 1d       	adc	r25, r1
    131a:	96 95       	lsr	r25
    131c:	87 95       	ror	r24
    131e:	97 f9       	bld	r25, 7
    1320:	08 95       	ret

00001322 <__fp_inf>:
    1322:	97 f9       	bld	r25, 7
    1324:	9f 67       	ori	r25, 0x7F	; 127
    1326:	80 e8       	ldi	r24, 0x80	; 128
    1328:	70 e0       	ldi	r23, 0x00	; 0
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	08 95       	ret

0000132e <__fp_nan>:
    132e:	9f ef       	ldi	r25, 0xFF	; 255
    1330:	80 ec       	ldi	r24, 0xC0	; 192
    1332:	08 95       	ret

00001334 <__fp_pscA>:
    1334:	00 24       	eor	r0, r0
    1336:	0a 94       	dec	r0
    1338:	16 16       	cp	r1, r22
    133a:	17 06       	cpc	r1, r23
    133c:	18 06       	cpc	r1, r24
    133e:	09 06       	cpc	r0, r25
    1340:	08 95       	ret

00001342 <__fp_pscB>:
    1342:	00 24       	eor	r0, r0
    1344:	0a 94       	dec	r0
    1346:	12 16       	cp	r1, r18
    1348:	13 06       	cpc	r1, r19
    134a:	14 06       	cpc	r1, r20
    134c:	05 06       	cpc	r0, r21
    134e:	08 95       	ret

00001350 <__fp_round>:
    1350:	09 2e       	mov	r0, r25
    1352:	03 94       	inc	r0
    1354:	00 0c       	add	r0, r0
    1356:	11 f4       	brne	.+4      	; 0x135c <__fp_round+0xc>
    1358:	88 23       	and	r24, r24
    135a:	52 f0       	brmi	.+20     	; 0x1370 <__fp_round+0x20>
    135c:	bb 0f       	add	r27, r27
    135e:	40 f4       	brcc	.+16     	; 0x1370 <__fp_round+0x20>
    1360:	bf 2b       	or	r27, r31
    1362:	11 f4       	brne	.+4      	; 0x1368 <__fp_round+0x18>
    1364:	60 ff       	sbrs	r22, 0
    1366:	04 c0       	rjmp	.+8      	; 0x1370 <__fp_round+0x20>
    1368:	6f 5f       	subi	r22, 0xFF	; 255
    136a:	7f 4f       	sbci	r23, 0xFF	; 255
    136c:	8f 4f       	sbci	r24, 0xFF	; 255
    136e:	9f 4f       	sbci	r25, 0xFF	; 255
    1370:	08 95       	ret

00001372 <_exit>:
    1372:	f8 94       	cli

00001374 <__stop_program>:
    1374:	ff cf       	rjmp	.-2      	; 0x1374 <__stop_program>
