
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00001140  000011d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001140  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000042d  0080011a  0080011a  000011ee  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000124c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  0000128c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013b5  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c92  00000000  00000000  00002839  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e32  00000000  00000000  000034cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006e0  00000000  00000000  00004300  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000772  00000000  00000000  000049e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d9f  00000000  00000000  00005152  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00005ef1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c3       	rjmp	.+1670   	; 0x6c8 <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	59 c5       	rjmp	.+2738   	; 0xb04 <__vector_20>
      52:	00 00       	nop
      54:	0e c5       	rjmp	.+2588   	; 0xa72 <__vector_21>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	2f c1       	rjmp	.+606    	; 0x2c0 <__vector_24>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e4       	ldi	r30, 0x40	; 64
      a0:	f1 e1       	ldi	r31, 0x11	; 17
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 31       	cpi	r26, 0x1A	; 26
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	25 e0       	ldi	r18, 0x05	; 5
      b4:	aa e1       	ldi	r26, 0x1A	; 26
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a7 34       	cpi	r26, 0x47	; 71
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	e3 d1       	rcall	.+966    	; 0x48a <main>
      c4:	0c 94 9e 08 	jmp	0x113c	; 0x113c <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <adc_init>:
uint16_t LM35_Array[8] = {0};
uint8_t index_LM35 = 0;
uint16_t Poti_Array[8] = {0};
uint8_t index_Poti = 0;

void adc_init() {
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	00 d0       	rcall	.+0      	; 0xd0 <adc_init+0x6>
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
    ADMUX = 0;  // AREF, Right Adjust, ADC0
      d4:	8c e7       	ldi	r24, 0x7C	; 124
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	fc 01       	movw	r30, r24
      da:	10 82       	st	Z, r1
    
    ADCSRB = 3; // Set trigger to Timer0 Compare Match
      dc:	8b e7       	ldi	r24, 0x7B	; 123
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	23 e0       	ldi	r18, 0x03	; 3
      e2:	fc 01       	movw	r30, r24
      e4:	20 83       	st	Z, r18
    
    ADCSRA = 7; // Set prescaler to 128
      e6:	8a e7       	ldi	r24, 0x7A	; 122
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	27 e0       	ldi	r18, 0x07	; 7
      ec:	fc 01       	movw	r30, r24
      ee:	20 83       	st	Z, r18
    ADCSRA |= (1 << ADEN) | (1 << ADSC); // Set ADC enable, no Auto trigger | (1 << ADATE)
      f0:	8a e7       	ldi	r24, 0x7A	; 122
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	2a e7       	ldi	r18, 0x7A	; 122
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	f9 01       	movw	r30, r18
      fa:	20 81       	ld	r18, Z
      fc:	20 6c       	ori	r18, 0xC0	; 192
      fe:	fc 01       	movw	r30, r24
     100:	20 83       	st	Z, r18
    
    while (ADCSRA & (1 << ADSC));   // wait till first conversion is finished
     102:	00 00       	nop
     104:	8a e7       	ldi	r24, 0x7A	; 122
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	fc 01       	movw	r30, r24
     10a:	80 81       	ld	r24, Z
     10c:	88 2f       	mov	r24, r24
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	80 74       	andi	r24, 0x40	; 64
     112:	99 27       	eor	r25, r25
     114:	89 2b       	or	r24, r25
     116:	b1 f7       	brne	.-20     	; 0x104 <adc_init+0x3a>
    uint16_t trash = ADC;
     118:	88 e7       	ldi	r24, 0x78	; 120
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	fc 01       	movw	r30, r24
     11e:	80 81       	ld	r24, Z
     120:	91 81       	ldd	r25, Z+1	; 0x01
     122:	9a 83       	std	Y+2, r25	; 0x02
     124:	89 83       	std	Y+1, r24	; 0x01
    
    ADCSRA |= (1 << ADIE); // ADC interrupt
     126:	8a e7       	ldi	r24, 0x7A	; 122
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	2a e7       	ldi	r18, 0x7A	; 122
     12c:	30 e0       	ldi	r19, 0x00	; 0
     12e:	f9 01       	movw	r30, r18
     130:	20 81       	ld	r18, Z
     132:	28 60       	ori	r18, 0x08	; 8
     134:	fc 01       	movw	r30, r24
     136:	20 83       	st	Z, r18
}
     138:	00 00       	nop
     13a:	0f 90       	pop	r0
     13c:	0f 90       	pop	r0
     13e:	df 91       	pop	r29
     140:	cf 91       	pop	r28
     142:	08 95       	ret

00000144 <adc_get_LM35>:

uint32_t adc_get_LM35() {
     144:	cf 93       	push	r28
     146:	df 93       	push	r29
     148:	00 d0       	rcall	.+0      	; 0x14a <adc_get_LM35+0x6>
     14a:	00 d0       	rcall	.+0      	; 0x14c <adc_get_LM35+0x8>
     14c:	00 d0       	rcall	.+0      	; 0x14e <adc_get_LM35+0xa>
     14e:	cd b7       	in	r28, 0x3d	; 61
     150:	de b7       	in	r29, 0x3e	; 62
    if (LM35_Array[index_LM35] == 0) {
     152:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <index_LM35>
     156:	88 2f       	mov	r24, r24
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	88 0f       	add	r24, r24
     15c:	99 1f       	adc	r25, r25
     15e:	85 5e       	subi	r24, 0xE5	; 229
     160:	9e 4f       	sbci	r25, 0xFE	; 254
     162:	fc 01       	movw	r30, r24
     164:	80 81       	ld	r24, Z
     166:	91 81       	ldd	r25, Z+1	; 0x01
     168:	89 2b       	or	r24, r25
     16a:	21 f4       	brne	.+8      	; 0x174 <adc_get_LM35+0x30>
        return 0; // Not enoght data in Array
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	dc 01       	movw	r26, r24
     172:	3c c0       	rjmp	.+120    	; 0x1ec <adc_get_LM35+0xa8>
    }
    
    uint32_t avg = 0;
     174:	19 82       	std	Y+1, r1	; 0x01
     176:	1a 82       	std	Y+2, r1	; 0x02
     178:	1b 82       	std	Y+3, r1	; 0x03
     17a:	1c 82       	std	Y+4, r1	; 0x04
    
    for (int i = 0; i < 8; i++) {
     17c:	1e 82       	std	Y+6, r1	; 0x06
     17e:	1d 82       	std	Y+5, r1	; 0x05
     180:	1d c0       	rjmp	.+58     	; 0x1bc <adc_get_LM35+0x78>
        avg += LM35_Array[i];
     182:	8d 81       	ldd	r24, Y+5	; 0x05
     184:	9e 81       	ldd	r25, Y+6	; 0x06
     186:	88 0f       	add	r24, r24
     188:	99 1f       	adc	r25, r25
     18a:	85 5e       	subi	r24, 0xE5	; 229
     18c:	9e 4f       	sbci	r25, 0xFE	; 254
     18e:	fc 01       	movw	r30, r24
     190:	80 81       	ld	r24, Z
     192:	91 81       	ldd	r25, Z+1	; 0x01
     194:	cc 01       	movw	r24, r24
     196:	a0 e0       	ldi	r26, 0x00	; 0
     198:	b0 e0       	ldi	r27, 0x00	; 0
     19a:	29 81       	ldd	r18, Y+1	; 0x01
     19c:	3a 81       	ldd	r19, Y+2	; 0x02
     19e:	4b 81       	ldd	r20, Y+3	; 0x03
     1a0:	5c 81       	ldd	r21, Y+4	; 0x04
     1a2:	82 0f       	add	r24, r18
     1a4:	93 1f       	adc	r25, r19
     1a6:	a4 1f       	adc	r26, r20
     1a8:	b5 1f       	adc	r27, r21
     1aa:	89 83       	std	Y+1, r24	; 0x01
     1ac:	9a 83       	std	Y+2, r25	; 0x02
     1ae:	ab 83       	std	Y+3, r26	; 0x03
     1b0:	bc 83       	std	Y+4, r27	; 0x04
        return 0; // Not enoght data in Array
    }
    
    uint32_t avg = 0;
    
    for (int i = 0; i < 8; i++) {
     1b2:	8d 81       	ldd	r24, Y+5	; 0x05
     1b4:	9e 81       	ldd	r25, Y+6	; 0x06
     1b6:	01 96       	adiw	r24, 0x01	; 1
     1b8:	9e 83       	std	Y+6, r25	; 0x06
     1ba:	8d 83       	std	Y+5, r24	; 0x05
     1bc:	8d 81       	ldd	r24, Y+5	; 0x05
     1be:	9e 81       	ldd	r25, Y+6	; 0x06
     1c0:	08 97       	sbiw	r24, 0x08	; 8
     1c2:	fc f2       	brlt	.-66     	; 0x182 <adc_get_LM35+0x3e>
        avg += LM35_Array[i];
    }
    avg = avg / 8;
     1c4:	89 81       	ldd	r24, Y+1	; 0x01
     1c6:	9a 81       	ldd	r25, Y+2	; 0x02
     1c8:	ab 81       	ldd	r26, Y+3	; 0x03
     1ca:	bc 81       	ldd	r27, Y+4	; 0x04
     1cc:	68 94       	set
     1ce:	12 f8       	bld	r1, 2
     1d0:	b6 95       	lsr	r27
     1d2:	a7 95       	ror	r26
     1d4:	97 95       	ror	r25
     1d6:	87 95       	ror	r24
     1d8:	16 94       	lsr	r1
     1da:	d1 f7       	brne	.-12     	; 0x1d0 <adc_get_LM35+0x8c>
     1dc:	89 83       	std	Y+1, r24	; 0x01
     1de:	9a 83       	std	Y+2, r25	; 0x02
     1e0:	ab 83       	std	Y+3, r26	; 0x03
     1e2:	bc 83       	std	Y+4, r27	; 0x04
    
    return avg;
     1e4:	89 81       	ldd	r24, Y+1	; 0x01
     1e6:	9a 81       	ldd	r25, Y+2	; 0x02
     1e8:	ab 81       	ldd	r26, Y+3	; 0x03
     1ea:	bc 81       	ldd	r27, Y+4	; 0x04
}
     1ec:	bc 01       	movw	r22, r24
     1ee:	cd 01       	movw	r24, r26
     1f0:	26 96       	adiw	r28, 0x06	; 6
     1f2:	0f b6       	in	r0, 0x3f	; 63
     1f4:	f8 94       	cli
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	0f be       	out	0x3f, r0	; 63
     1fa:	cd bf       	out	0x3d, r28	; 61
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	08 95       	ret

00000202 <adc_get_Poti>:

uint32_t adc_get_Poti() {
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	00 d0       	rcall	.+0      	; 0x208 <adc_get_Poti+0x6>
     208:	00 d0       	rcall	.+0      	; 0x20a <adc_get_Poti+0x8>
     20a:	00 d0       	rcall	.+0      	; 0x20c <adc_get_Poti+0xa>
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
    if (Poti_Array[index_Poti] == 0) {
     210:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <index_Poti>
     214:	88 2f       	mov	r24, r24
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	88 0f       	add	r24, r24
     21a:	99 1f       	adc	r25, r25
     21c:	84 5d       	subi	r24, 0xD4	; 212
     21e:	9e 4f       	sbci	r25, 0xFE	; 254
     220:	fc 01       	movw	r30, r24
     222:	80 81       	ld	r24, Z
     224:	91 81       	ldd	r25, Z+1	; 0x01
     226:	89 2b       	or	r24, r25
     228:	21 f4       	brne	.+8      	; 0x232 <adc_get_Poti+0x30>
        return 0; // Not enoght data in Array
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	dc 01       	movw	r26, r24
     230:	3c c0       	rjmp	.+120    	; 0x2aa <adc_get_Poti+0xa8>
    }
    
    uint32_t avg = 0;
     232:	19 82       	std	Y+1, r1	; 0x01
     234:	1a 82       	std	Y+2, r1	; 0x02
     236:	1b 82       	std	Y+3, r1	; 0x03
     238:	1c 82       	std	Y+4, r1	; 0x04
    
    for (int i = 0; i < 8; i++) {
     23a:	1e 82       	std	Y+6, r1	; 0x06
     23c:	1d 82       	std	Y+5, r1	; 0x05
     23e:	1d c0       	rjmp	.+58     	; 0x27a <adc_get_Poti+0x78>
        avg += Poti_Array[i];
     240:	8d 81       	ldd	r24, Y+5	; 0x05
     242:	9e 81       	ldd	r25, Y+6	; 0x06
     244:	88 0f       	add	r24, r24
     246:	99 1f       	adc	r25, r25
     248:	84 5d       	subi	r24, 0xD4	; 212
     24a:	9e 4f       	sbci	r25, 0xFE	; 254
     24c:	fc 01       	movw	r30, r24
     24e:	80 81       	ld	r24, Z
     250:	91 81       	ldd	r25, Z+1	; 0x01
     252:	cc 01       	movw	r24, r24
     254:	a0 e0       	ldi	r26, 0x00	; 0
     256:	b0 e0       	ldi	r27, 0x00	; 0
     258:	29 81       	ldd	r18, Y+1	; 0x01
     25a:	3a 81       	ldd	r19, Y+2	; 0x02
     25c:	4b 81       	ldd	r20, Y+3	; 0x03
     25e:	5c 81       	ldd	r21, Y+4	; 0x04
     260:	82 0f       	add	r24, r18
     262:	93 1f       	adc	r25, r19
     264:	a4 1f       	adc	r26, r20
     266:	b5 1f       	adc	r27, r21
     268:	89 83       	std	Y+1, r24	; 0x01
     26a:	9a 83       	std	Y+2, r25	; 0x02
     26c:	ab 83       	std	Y+3, r26	; 0x03
     26e:	bc 83       	std	Y+4, r27	; 0x04
        return 0; // Not enoght data in Array
    }
    
    uint32_t avg = 0;
    
    for (int i = 0; i < 8; i++) {
     270:	8d 81       	ldd	r24, Y+5	; 0x05
     272:	9e 81       	ldd	r25, Y+6	; 0x06
     274:	01 96       	adiw	r24, 0x01	; 1
     276:	9e 83       	std	Y+6, r25	; 0x06
     278:	8d 83       	std	Y+5, r24	; 0x05
     27a:	8d 81       	ldd	r24, Y+5	; 0x05
     27c:	9e 81       	ldd	r25, Y+6	; 0x06
     27e:	08 97       	sbiw	r24, 0x08	; 8
     280:	fc f2       	brlt	.-66     	; 0x240 <adc_get_Poti+0x3e>
        avg += Poti_Array[i];
    }
    avg = avg / 8;
     282:	89 81       	ldd	r24, Y+1	; 0x01
     284:	9a 81       	ldd	r25, Y+2	; 0x02
     286:	ab 81       	ldd	r26, Y+3	; 0x03
     288:	bc 81       	ldd	r27, Y+4	; 0x04
     28a:	68 94       	set
     28c:	12 f8       	bld	r1, 2
     28e:	b6 95       	lsr	r27
     290:	a7 95       	ror	r26
     292:	97 95       	ror	r25
     294:	87 95       	ror	r24
     296:	16 94       	lsr	r1
     298:	d1 f7       	brne	.-12     	; 0x28e <adc_get_Poti+0x8c>
     29a:	89 83       	std	Y+1, r24	; 0x01
     29c:	9a 83       	std	Y+2, r25	; 0x02
     29e:	ab 83       	std	Y+3, r26	; 0x03
     2a0:	bc 83       	std	Y+4, r27	; 0x04
    
    return avg;
     2a2:	89 81       	ldd	r24, Y+1	; 0x01
     2a4:	9a 81       	ldd	r25, Y+2	; 0x02
     2a6:	ab 81       	ldd	r26, Y+3	; 0x03
     2a8:	bc 81       	ldd	r27, Y+4	; 0x04
}
     2aa:	bc 01       	movw	r22, r24
     2ac:	cd 01       	movw	r24, r26
     2ae:	26 96       	adiw	r28, 0x06	; 6
     2b0:	0f b6       	in	r0, 0x3f	; 63
     2b2:	f8 94       	cli
     2b4:	de bf       	out	0x3e, r29	; 62
     2b6:	0f be       	out	0x3f, r0	; 63
     2b8:	cd bf       	out	0x3d, r28	; 61
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	08 95       	ret

000002c0 <__vector_24>:

ISR(ADC_vect){
     2c0:	1f 92       	push	r1
     2c2:	0f 92       	push	r0
     2c4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     2c8:	0f 92       	push	r0
     2ca:	11 24       	eor	r1, r1
     2cc:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     2d0:	0f 92       	push	r0
     2d2:	2f 93       	push	r18
     2d4:	3f 93       	push	r19
     2d6:	8f 93       	push	r24
     2d8:	9f 93       	push	r25
     2da:	ef 93       	push	r30
     2dc:	ff 93       	push	r31
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	00 d0       	rcall	.+0      	; 0x2e4 <__vector_24+0x24>
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
    volatile uint16_t res = ADC;
     2e8:	88 e7       	ldi	r24, 0x78	; 120
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	fc 01       	movw	r30, r24
     2ee:	80 81       	ld	r24, Z
     2f0:	91 81       	ldd	r25, Z+1	; 0x01
     2f2:	9a 83       	std	Y+2, r25	; 0x02
     2f4:	89 83       	std	Y+1, r24	; 0x01
    
    switch (pin) {
     2f6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
     2fa:	88 2f       	mov	r24, r24
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	00 97       	sbiw	r24, 0x00	; 0
     300:	19 f0       	breq	.+6      	; 0x308 <__vector_24+0x48>
     302:	01 97       	sbiw	r24, 0x01	; 1
     304:	49 f1       	breq	.+82     	; 0x358 <__vector_24+0x98>
            }
            pin = Temperatur;
            break;
            
        default:
            break;
     306:	4f c0       	rjmp	.+158    	; 0x3a6 <__vector_24+0xe6>
ISR(ADC_vect){
    volatile uint16_t res = ADC;
    
    switch (pin) {
        case Temperatur:
            if (index_LM35 >= 8 || index_LM35 == 0) {
     308:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <index_LM35>
     30c:	88 30       	cpi	r24, 0x08	; 8
     30e:	20 f4       	brcc	.+8      	; 0x318 <__vector_24+0x58>
     310:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <index_LM35>
     314:	88 23       	and	r24, r24
     316:	51 f4       	brne	.+20     	; 0x32c <__vector_24+0x6c>
                LM35_Array[0] = res;
     318:	89 81       	ldd	r24, Y+1	; 0x01
     31a:	9a 81       	ldd	r25, Y+2	; 0x02
     31c:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <LM35_Array+0x1>
     320:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <LM35_Array>
                index_LM35 = 1;
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <index_LM35>
     32a:	12 c0       	rjmp	.+36     	; 0x350 <__vector_24+0x90>
            }else {
                LM35_Array[index_LM35] = res;
     32c:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <index_LM35>
     330:	88 2f       	mov	r24, r24
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	29 81       	ldd	r18, Y+1	; 0x01
     336:	3a 81       	ldd	r19, Y+2	; 0x02
     338:	88 0f       	add	r24, r24
     33a:	99 1f       	adc	r25, r25
     33c:	85 5e       	subi	r24, 0xE5	; 229
     33e:	9e 4f       	sbci	r25, 0xFE	; 254
     340:	fc 01       	movw	r30, r24
     342:	31 83       	std	Z+1, r19	; 0x01
     344:	20 83       	st	Z, r18
                index_LM35++;
     346:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <index_LM35>
     34a:	8f 5f       	subi	r24, 0xFF	; 255
     34c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <index_LM35>
            }
            pin = Poti;
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
            break;
     356:	27 c0       	rjmp	.+78     	; 0x3a6 <__vector_24+0xe6>
            
        case Poti:
            if (index_Poti >= 8 || index_Poti == 0) {
     358:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <index_Poti>
     35c:	88 30       	cpi	r24, 0x08	; 8
     35e:	20 f4       	brcc	.+8      	; 0x368 <__vector_24+0xa8>
     360:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <index_Poti>
     364:	88 23       	and	r24, r24
     366:	51 f4       	brne	.+20     	; 0x37c <__vector_24+0xbc>
                Poti_Array[0] = res;
     368:	89 81       	ldd	r24, Y+1	; 0x01
     36a:	9a 81       	ldd	r25, Y+2	; 0x02
     36c:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <Poti_Array+0x1>
     370:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <Poti_Array>
                index_Poti = 1;
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <index_Poti>
     37a:	12 c0       	rjmp	.+36     	; 0x3a0 <__vector_24+0xe0>
            }else {
                Poti_Array[index_Poti] = res;
     37c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <index_Poti>
     380:	88 2f       	mov	r24, r24
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	29 81       	ldd	r18, Y+1	; 0x01
     386:	3a 81       	ldd	r19, Y+2	; 0x02
     388:	88 0f       	add	r24, r24
     38a:	99 1f       	adc	r25, r25
     38c:	84 5d       	subi	r24, 0xD4	; 212
     38e:	9e 4f       	sbci	r25, 0xFE	; 254
     390:	fc 01       	movw	r30, r24
     392:	31 83       	std	Z+1, r19	; 0x01
     394:	20 83       	st	Z, r18
                index_Poti++;
     396:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <index_Poti>
     39a:	8f 5f       	subi	r24, 0xFF	; 255
     39c:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <index_Poti>
            }
            pin = Temperatur;
     3a0:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
            break;
     3a4:	00 00       	nop
            
        default:
            break;
    }
    
    ADCSRA |= (1 << ADSC);
     3a6:	8a e7       	ldi	r24, 0x7A	; 122
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	2a e7       	ldi	r18, 0x7A	; 122
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	f9 01       	movw	r30, r18
     3b0:	20 81       	ld	r18, Z
     3b2:	20 64       	ori	r18, 0x40	; 64
     3b4:	fc 01       	movw	r30, r24
     3b6:	20 83       	st	Z, r18
}
     3b8:	00 00       	nop
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	ff 91       	pop	r31
     3c4:	ef 91       	pop	r30
     3c6:	9f 91       	pop	r25
     3c8:	8f 91       	pop	r24
     3ca:	3f 91       	pop	r19
     3cc:	2f 91       	pop	r18
     3ce:	0f 90       	pop	r0
     3d0:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     3d4:	0f 90       	pop	r0
     3d6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     3da:	0f 90       	pop	r0
     3dc:	1f 90       	pop	r1
     3de:	18 95       	reti

000003e0 <Led_init>:

#include "Led.h"

void Led_init(uint8_t initD) {
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
     3e4:	1f 92       	push	r1
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
     3ea:	89 83       	std	Y+1, r24	; 0x01
    // Set PORTB to outputs
    DDRB = 0xFF;
     3ec:	84 e2       	ldi	r24, 0x24	; 36
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	2f ef       	ldi	r18, 0xFF	; 255
     3f2:	fc 01       	movw	r30, r24
     3f4:	20 83       	st	Z, r18
    PORTB = 0x00;
     3f6:	85 e2       	ldi	r24, 0x25	; 37
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	fc 01       	movw	r30, r24
     3fc:	10 82       	st	Z, r1
    
    if (initD) {
     3fe:	89 81       	ldd	r24, Y+1	; 0x01
     400:	88 23       	and	r24, r24
     402:	91 f0       	breq	.+36     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
        // Set PORTD 0..4 to outputs
        DDRD |= ( (1 << 4) | (1 << 3) | (1 << 2) | (1 << 1) | (1 << 0));
     404:	8a e2       	ldi	r24, 0x2A	; 42
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	2a e2       	ldi	r18, 0x2A	; 42
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	f9 01       	movw	r30, r18
     40e:	20 81       	ld	r18, Z
     410:	2f 61       	ori	r18, 0x1F	; 31
     412:	fc 01       	movw	r30, r24
     414:	20 83       	st	Z, r18
        PORTD &= ~( (1 << 4) | (1 << 3) | (1 << 2) | (1 << 1) | (1 << 0));
     416:	8b e2       	ldi	r24, 0x2B	; 43
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	2b e2       	ldi	r18, 0x2B	; 43
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	f9 01       	movw	r30, r18
     420:	20 81       	ld	r18, Z
     422:	20 7e       	andi	r18, 0xE0	; 224
     424:	fc 01       	movw	r30, r24
     426:	20 83       	st	Z, r18
    }
}
     428:	00 00       	nop
     42a:	0f 90       	pop	r0
     42c:	df 91       	pop	r29
     42e:	cf 91       	pop	r28
     430:	08 95       	ret

00000432 <Taster_init>:
 ---------------------
 - DDR Reg has to be set to 0
 - PORT Reg has to be set to 1
 -> Pin is input with pull-up
 */
void Taster_init() {
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
    
    // set to inputs
    DDRC &= ~(1 << 2);
     43a:	87 e2       	ldi	r24, 0x27	; 39
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	27 e2       	ldi	r18, 0x27	; 39
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	f9 01       	movw	r30, r18
     444:	20 81       	ld	r18, Z
     446:	2b 7f       	andi	r18, 0xFB	; 251
     448:	fc 01       	movw	r30, r24
     44a:	20 83       	st	Z, r18
    DDRD &= ~( (1 << 7) | (1 << 6) | (1 << 5) );
     44c:	8a e2       	ldi	r24, 0x2A	; 42
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	2a e2       	ldi	r18, 0x2A	; 42
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	f9 01       	movw	r30, r18
     456:	20 81       	ld	r18, Z
     458:	2f 71       	andi	r18, 0x1F	; 31
     45a:	fc 01       	movw	r30, r24
     45c:	20 83       	st	Z, r18
    
    // enable pull-up
    PORTC |= (1 << 2);
     45e:	88 e2       	ldi	r24, 0x28	; 40
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	28 e2       	ldi	r18, 0x28	; 40
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	f9 01       	movw	r30, r18
     468:	20 81       	ld	r18, Z
     46a:	24 60       	ori	r18, 0x04	; 4
     46c:	fc 01       	movw	r30, r24
     46e:	20 83       	st	Z, r18
    PORTD |= (1 << 7) | (1 << 6) | (1 << 5);
     470:	8b e2       	ldi	r24, 0x2B	; 43
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	2b e2       	ldi	r18, 0x2B	; 43
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	f9 01       	movw	r30, r18
     47a:	20 81       	ld	r18, Z
     47c:	20 6e       	ori	r18, 0xE0	; 224
     47e:	fc 01       	movw	r30, r24
     480:	20 83       	st	Z, r18
}
     482:	00 00       	nop
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	08 95       	ret

0000048a <main>:
#include <avr/interrupt.h>
#include "adc/adc.h"

#define CLK_F_MHZ 16

int main(void) {
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	c7 57       	subi	r28, 0x77	; 119
     494:	d1 09       	sbc	r29, r1
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	f8 94       	cli
     49a:	de bf       	out	0x3e, r29	; 62
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	cd bf       	out	0x3d, r28	; 61
	
    cli();
     4a0:	f8 94       	cli
    Led_init(0);	// Don't set LEDs at PORTD
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	9d df       	rcall	.-198    	; 0x3e0 <Led_init>
	Taster_init();
     4a6:	c5 df       	rcall	.-118    	; 0x432 <Taster_init>
    Timer_init(CLK_F_MHZ); // Init timer with 16MHZ clock
     4a8:	80 e1       	ldi	r24, 0x10	; 16
	uart_init_isr();
     4aa:	63 d0       	rcall	.+198    	; 0x572 <Timer_init>
    adc_init();
     4ac:	78 d2       	rcall	.+1264   	; 0x99e <uart_init_isr>
     4ae:	0d de       	rcall	.-998    	; 0xca <adc_init>
	sei();
     4b0:	78 94       	sei
    
    uint16_t timeVarMain = Timer_getTick();
     4b2:	f6 d0       	rcall	.+492    	; 0x6a0 <Timer_getTick>
     4b4:	9a 83       	std	Y+2, r25	; 0x02
     4b6:	89 83       	std	Y+1, r24	; 0x01
     4b8:	22 e3       	ldi	r18, 0x32	; 50
    char data_s;
    char data[50] = {0};
     4ba:	ce 01       	movw	r24, r28
     4bc:	05 96       	adiw	r24, 0x05	; 5
     4be:	fc 01       	movw	r30, r24
     4c0:	32 2f       	mov	r19, r18
     4c2:	11 92       	st	Z+, r1
     4c4:	3a 95       	dec	r19
     4c6:	e9 f7       	brne	.-6      	; 0x4c2 <main+0x38>
    int i = 0;
     4c8:	1c 82       	std	Y+4, r1	; 0x04
     4ca:	1b 82       	std	Y+3, r1	; 0x03
	char str[65];
	
    while (1) {
        
        if((Timer_getTick() - timeVarMain) >= 2000){
     4cc:	e9 d0       	rcall	.+466    	; 0x6a0 <Timer_getTick>
     4ce:	9c 01       	movw	r18, r24
     4d0:	89 81       	ldd	r24, Y+1	; 0x01
     4d2:	9a 81       	ldd	r25, Y+2	; 0x02
     4d4:	a9 01       	movw	r20, r18
     4d6:	48 1b       	sub	r20, r24
     4d8:	59 0b       	sbc	r21, r25
     4da:	ca 01       	movw	r24, r20
     4dc:	80 3d       	cpi	r24, 0xD0	; 208
     4de:	97 40       	sbci	r25, 0x07	; 7
            timeVarMain = Timer_getTick();
     4e0:	a8 f3       	brcs	.-22     	; 0x4cc <main+0x42>
     4e2:	de d0       	rcall	.+444    	; 0x6a0 <Timer_getTick>
     4e4:	9a 83       	std	Y+2, r25	; 0x02
     4e6:	89 83       	std	Y+1, r24	; 0x01
            
            sprintf(str, "Temperatur: %i\n", adc_get_LM35());
     4e8:	2d de       	rcall	.-934    	; 0x144 <adc_get_LM35>
     4ea:	dc 01       	movw	r26, r24
     4ec:	cb 01       	movw	r24, r22
     4ee:	2b 2f       	mov	r18, r27
     4f0:	2f 93       	push	r18
     4f2:	2a 2f       	mov	r18, r26
     4f4:	2f 93       	push	r18
     4f6:	29 2f       	mov	r18, r25
     4f8:	2f 93       	push	r18
     4fa:	8f 93       	push	r24
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	89 2f       	mov	r24, r25
     502:	8f 93       	push	r24
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	8f 93       	push	r24
     50a:	ce 01       	movw	r24, r28
     50c:	c7 96       	adiw	r24, 0x37	; 55
     50e:	29 2f       	mov	r18, r25
     510:	2f 93       	push	r18
     512:	8f 93       	push	r24
     514:	38 d3       	rcall	.+1648   	; 0xb86 <sprintf>
     516:	8d b7       	in	r24, 0x3d	; 61
     518:	9e b7       	in	r25, 0x3e	; 62
     51a:	08 96       	adiw	r24, 0x08	; 8
     51c:	0f b6       	in	r0, 0x3f	; 63
     51e:	f8 94       	cli
     520:	de bf       	out	0x3e, r29	; 62
     522:	0f be       	out	0x3f, r0	; 63
            uart_send_isr(str);
     524:	cd bf       	out	0x3d, r28	; 61
     526:	ce 01       	movw	r24, r28
     528:	c7 96       	adiw	r24, 0x37	; 55
     52a:	54 d2       	rcall	.+1192   	; 0x9d4 <uart_send_isr>
            
            sprintf(str, "Poti: %i\n", adc_get_Poti());
     52c:	6a de       	rcall	.-812    	; 0x202 <adc_get_Poti>
     52e:	dc 01       	movw	r26, r24
     530:	cb 01       	movw	r24, r22
     532:	2b 2f       	mov	r18, r27
     534:	2f 93       	push	r18
     536:	2a 2f       	mov	r18, r26
     538:	2f 93       	push	r18
     53a:	29 2f       	mov	r18, r25
     53c:	2f 93       	push	r18
     53e:	8f 93       	push	r24
     540:	80 e1       	ldi	r24, 0x10	; 16
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	89 2f       	mov	r24, r25
     546:	8f 93       	push	r24
     548:	80 e1       	ldi	r24, 0x10	; 16
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	8f 93       	push	r24
     54e:	ce 01       	movw	r24, r28
     550:	c7 96       	adiw	r24, 0x37	; 55
     552:	29 2f       	mov	r18, r25
     554:	2f 93       	push	r18
     556:	8f 93       	push	r24
     558:	16 d3       	rcall	.+1580   	; 0xb86 <sprintf>
     55a:	ed b7       	in	r30, 0x3d	; 61
     55c:	fe b7       	in	r31, 0x3e	; 62
     55e:	38 96       	adiw	r30, 0x08	; 8
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	f8 94       	cli
     564:	de bf       	out	0x3e, r29	; 62
     566:	0f be       	out	0x3f, r0	; 63
     568:	cd bf       	out	0x3d, r28	; 61
            uart_send_isr(str);
     56a:	ce 01       	movw	r24, r28
     56c:	c7 96       	adiw	r24, 0x37	; 55
     56e:	32 d2       	rcall	.+1124   	; 0x9d4 <uart_send_isr>
     570:	ad cf       	rjmp	.-166    	; 0x4cc <main+0x42>

00000572 <Timer_init>:
            }
        }*/
        
        //trafficLight(0);
        //playground();
    }
     572:	cf 93       	push	r28
    }
    
    TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
}
     574:	df 93       	push	r29
     576:	1f 92       	push	r1
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
     57c:	89 83       	std	Y+1, r24	; 0x01
     57e:	89 81       	ldd	r24, Y+1	; 0x01
     580:	88 2f       	mov	r24, r24
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	05 d0       	rcall	.+10     	; 0x590 <Timer_init_withoutStruct>
     586:	00 00       	nop
     588:	0f 90       	pop	r0
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	08 95       	ret

00000590 <Timer_init_withoutStruct>:

void Timer_init_withoutStruct(uint8_t clockFreqMhz) {
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	1f 92       	push	r1
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	89 83       	std	Y+1, r24	; 0x01
    // datasheet page 97
    // set mode to clear timer on compare (CTC)
    TCCR0B &= ~(1 << WGM02);
     59c:	85 e4       	ldi	r24, 0x45	; 69
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	25 e4       	ldi	r18, 0x45	; 69
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	f9 01       	movw	r30, r18
     5a6:	20 81       	ld	r18, Z
     5a8:	27 7f       	andi	r18, 0xF7	; 247
     5aa:	fc 01       	movw	r30, r24
     5ac:	20 83       	st	Z, r18
    TCCR0A |= (1 << WGM01);
     5ae:	84 e4       	ldi	r24, 0x44	; 68
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	24 e4       	ldi	r18, 0x44	; 68
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	f9 01       	movw	r30, r18
     5b8:	20 81       	ld	r18, Z
     5ba:	22 60       	ori	r18, 0x02	; 2
     5bc:	fc 01       	movw	r30, r24
     5be:	20 83       	st	Z, r18
    TCCR0A &= ~(1 << WGM00);
     5c0:	84 e4       	ldi	r24, 0x44	; 68
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	24 e4       	ldi	r18, 0x44	; 68
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	f9 01       	movw	r30, r18
     5ca:	20 81       	ld	r18, Z
     5cc:	2e 7f       	andi	r18, 0xFE	; 254
     5ce:	fc 01       	movw	r30, r24
     5d0:	20 83       	st	Z, r18
    
    
    switch (clockFreqMhz) {
     5d2:	89 81       	ldd	r24, Y+1	; 0x01
     5d4:	88 2f       	mov	r24, r24
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	40 97       	sbiw	r24, 0x10	; 16
     5da:	09 f5       	brne	.+66     	; 0x61e <Timer_init_withoutStruct+0x8e>
        case 16:
            // extern osc (16 MHZ)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = 249;   // dez 249; range 0 - 249 -> 250 cycles till interrupt
     5dc:	87 e4       	ldi	r24, 0x47	; 71
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	29 ef       	ldi	r18, 0xF9	; 249
     5e2:	fc 01       	movw	r30, r24
     5e4:	20 83       	st	Z, r18
            
            // set prescaler to 1/64
            TCCR0B &= ~(1 << CS02);
     5e6:	85 e4       	ldi	r24, 0x45	; 69
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	25 e4       	ldi	r18, 0x45	; 69
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	f9 01       	movw	r30, r18
     5f0:	20 81       	ld	r18, Z
     5f2:	2b 7f       	andi	r18, 0xFB	; 251
     5f4:	fc 01       	movw	r30, r24
     5f6:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
     5f8:	85 e4       	ldi	r24, 0x45	; 69
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	25 e4       	ldi	r18, 0x45	; 69
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	f9 01       	movw	r30, r18
     602:	20 81       	ld	r18, Z
     604:	22 60       	ori	r18, 0x02	; 2
     606:	fc 01       	movw	r30, r24
     608:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS00);
     60a:	85 e4       	ldi	r24, 0x45	; 69
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	25 e4       	ldi	r18, 0x45	; 69
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	f9 01       	movw	r30, r18
     614:	20 81       	ld	r18, Z
     616:	21 60       	ori	r18, 0x01	; 1
     618:	fc 01       	movw	r30, r24
     61a:	20 83       	st	Z, r18
            break;
     61c:	21 c0       	rjmp	.+66     	; 0x660 <Timer_init_withoutStruct+0xd0>
            
        default:
            // inter osc (8 MHZ divided by 8 -> 1 MHZ clock)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = 0x7C;   // dez 124; range 0 - 124 -> 125 cycles till interrupt
     61e:	87 e4       	ldi	r24, 0x47	; 71
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	2c e7       	ldi	r18, 0x7C	; 124
     624:	fc 01       	movw	r30, r24
     626:	20 83       	st	Z, r18
            
            // set prescaler to 1/8
            TCCR0B &= ~(1 << CS02);
     628:	85 e4       	ldi	r24, 0x45	; 69
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	25 e4       	ldi	r18, 0x45	; 69
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	f9 01       	movw	r30, r18
     632:	20 81       	ld	r18, Z
     634:	2b 7f       	andi	r18, 0xFB	; 251
     636:	fc 01       	movw	r30, r24
     638:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
     63a:	85 e4       	ldi	r24, 0x45	; 69
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	25 e4       	ldi	r18, 0x45	; 69
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	f9 01       	movw	r30, r18
     644:	20 81       	ld	r18, Z
     646:	22 60       	ori	r18, 0x02	; 2
     648:	fc 01       	movw	r30, r24
     64a:	20 83       	st	Z, r18
            TCCR0B &= ~(1 << CS00);
     64c:	85 e4       	ldi	r24, 0x45	; 69
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	25 e4       	ldi	r18, 0x45	; 69
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	f9 01       	movw	r30, r18
     656:	20 81       	ld	r18, Z
     658:	2e 7f       	andi	r18, 0xFE	; 254
     65a:	fc 01       	movw	r30, r24
     65c:	20 83       	st	Z, r18
            break;
     65e:	00 00       	nop
    }
    
    TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
     660:	8e e6       	ldi	r24, 0x6E	; 110
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	2e e6       	ldi	r18, 0x6E	; 110
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	f9 01       	movw	r30, r18
     66a:	20 81       	ld	r18, Z
     66c:	2b 7f       	andi	r18, 0xFB	; 251
     66e:	fc 01       	movw	r30, r24
     670:	20 83       	st	Z, r18
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
     672:	8e e6       	ldi	r24, 0x6E	; 110
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	2e e6       	ldi	r18, 0x6E	; 110
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	f9 01       	movw	r30, r18
     67c:	20 81       	ld	r18, Z
     67e:	22 60       	ori	r18, 0x02	; 2
     680:	fc 01       	movw	r30, r24
     682:	20 83       	st	Z, r18
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
     684:	8e e6       	ldi	r24, 0x6E	; 110
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	2e e6       	ldi	r18, 0x6E	; 110
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	f9 01       	movw	r30, r18
     68e:	20 81       	ld	r18, Z
     690:	2e 7f       	andi	r18, 0xFE	; 254
     692:	fc 01       	movw	r30, r24
     694:	20 83       	st	Z, r18
}
     696:	00 00       	nop
     698:	0f 90       	pop	r0
     69a:	df 91       	pop	r29
     69c:	cf 91       	pop	r28
     69e:	08 95       	ret

000006a0 <Timer_getTick>:

uint16_t Timer_getTick() {
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	00 d0       	rcall	.+0      	; 0x6a6 <Timer_getTick+0x6>
     6a6:	cd b7       	in	r28, 0x3d	; 61
     6a8:	de b7       	in	r29, 0x3e	; 62
    // disable global interrupt
    cli();
     6aa:	f8 94       	cli
    
    // store timer_count in a temp int that can't get changed by ISR
    uint16_t temp_timer_count = timer_count;
     6ac:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <timer_count>
     6b0:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <timer_count+0x1>
     6b4:	9a 83       	std	Y+2, r25	; 0x02
     6b6:	89 83       	std	Y+1, r24	; 0x01
    
    // enable global interrupt
    sei();
     6b8:	78 94       	sei

    return temp_timer_count;
     6ba:	89 81       	ldd	r24, Y+1	; 0x01
     6bc:	9a 81       	ldd	r25, Y+2	; 0x02
}
     6be:	0f 90       	pop	r0
     6c0:	0f 90       	pop	r0
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	08 95       	ret

000006c8 <__vector_16>:
 ( not used atm)
 Timer compare A interrput:
 - increase timer_count
 - if timer_count is at max of uint16, set it to 0
 */
ISR(TIMER0_COMPA_vect){
     6c8:	1f 92       	push	r1
     6ca:	0f 92       	push	r0
     6cc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     6d0:	0f 92       	push	r0
     6d2:	11 24       	eor	r1, r1
     6d4:	8f 93       	push	r24
     6d6:	9f 93       	push	r25
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	cd b7       	in	r28, 0x3d	; 61
     6de:	de b7       	in	r29, 0x3e	; 62
    timer_count++;
     6e0:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <timer_count>
     6e4:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <timer_count+0x1>
     6e8:	01 96       	adiw	r24, 0x01	; 1
     6ea:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <timer_count+0x1>
     6ee:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <timer_count>
}
     6f2:	00 00       	nop
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	9f 91       	pop	r25
     6fa:	8f 91       	pop	r24
     6fc:	0f 90       	pop	r0
     6fe:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     702:	0f 90       	pop	r0
     704:	1f 90       	pop	r1
     706:	18 95       	reti

00000708 <buff_put>:
        // Return byte
        return pByte;
    }else {
        return 0;
    }
}
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	00 d0       	rcall	.+0      	; 0x70e <buff_put+0x6>
     70e:	1f 92       	push	r1
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
     714:	89 83       	std	Y+1, r24	; 0x01
     716:	7b 83       	std	Y+3, r23	; 0x03
     718:	6a 83       	std	Y+2, r22	; 0x02
     71a:	81 ec       	ldi	r24, 0xC1	; 193
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	21 ec       	ldi	r18, 0xC1	; 193
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	f9 01       	movw	r30, r18
     724:	20 81       	ld	r18, Z
     726:	2f 7d       	andi	r18, 0xDF	; 223
     728:	fc 01       	movw	r30, r24
     72a:	20 83       	st	Z, r18
     72c:	81 ec       	ldi	r24, 0xC1	; 193
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	21 ec       	ldi	r18, 0xC1	; 193
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	f9 01       	movw	r30, r18
     736:	20 81       	ld	r18, Z
     738:	2f 77       	andi	r18, 0x7F	; 127
     73a:	fc 01       	movw	r30, r24
     73c:	20 83       	st	Z, r18
     73e:	8a 81       	ldd	r24, Y+2	; 0x02
     740:	9b 81       	ldd	r25, Y+3	; 0x03
     742:	8e 5f       	subi	r24, 0xFE	; 254
     744:	9d 4f       	sbci	r25, 0xFD	; 253
     746:	fc 01       	movw	r30, r24
     748:	80 81       	ld	r24, Z
     74a:	91 81       	ldd	r25, Z+1	; 0x01
     74c:	9c 01       	movw	r18, r24
     74e:	2f 5f       	subi	r18, 0xFF	; 255
     750:	3f 4f       	sbci	r19, 0xFF	; 255
     752:	8a 81       	ldd	r24, Y+2	; 0x02
     754:	9b 81       	ldd	r25, Y+3	; 0x03
     756:	9e 5f       	subi	r25, 0xFE	; 254
     758:	fc 01       	movw	r30, r24
     75a:	80 81       	ld	r24, Z
     75c:	91 81       	ldd	r25, Z+1	; 0x01
     75e:	28 17       	cp	r18, r24
     760:	39 07       	cpc	r19, r25
     762:	91 f0       	breq	.+36     	; 0x788 <buff_put+0x80>
     764:	8a 81       	ldd	r24, Y+2	; 0x02
     766:	9b 81       	ldd	r25, Y+3	; 0x03
     768:	9e 5f       	subi	r25, 0xFE	; 254
     76a:	fc 01       	movw	r30, r24
     76c:	80 81       	ld	r24, Z
     76e:	91 81       	ldd	r25, Z+1	; 0x01
     770:	89 2b       	or	r24, r25
     772:	f1 f4       	brne	.+60     	; 0x7b0 <buff_put+0xa8>
     774:	8a 81       	ldd	r24, Y+2	; 0x02
     776:	9b 81       	ldd	r25, Y+3	; 0x03
     778:	8e 5f       	subi	r24, 0xFE	; 254
     77a:	9d 4f       	sbci	r25, 0xFD	; 253
     77c:	fc 01       	movw	r30, r24
     77e:	80 81       	ld	r24, Z
     780:	91 81       	ldd	r25, Z+1	; 0x01
     782:	8f 3f       	cpi	r24, 0xFF	; 255
     784:	91 40       	sbci	r25, 0x01	; 1
     786:	a1 f4       	brne	.+40     	; 0x7b0 <buff_put+0xa8>
     788:	81 ec       	ldi	r24, 0xC1	; 193
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	21 ec       	ldi	r18, 0xC1	; 193
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	f9 01       	movw	r30, r18
     792:	20 81       	ld	r18, Z
     794:	20 62       	ori	r18, 0x20	; 32
     796:	fc 01       	movw	r30, r24
     798:	20 83       	st	Z, r18
     79a:	81 ec       	ldi	r24, 0xC1	; 193
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	21 ec       	ldi	r18, 0xC1	; 193
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	f9 01       	movw	r30, r18
     7a4:	20 81       	ld	r18, Z
     7a6:	20 68       	ori	r18, 0x80	; 128
     7a8:	fc 01       	movw	r30, r24
     7aa:	20 83       	st	Z, r18
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	43 c0       	rjmp	.+134    	; 0x836 <buff_put+0x12e>
     7b0:	8a 81       	ldd	r24, Y+2	; 0x02
     7b2:	9b 81       	ldd	r25, Y+3	; 0x03
     7b4:	8e 5f       	subi	r24, 0xFE	; 254
     7b6:	9d 4f       	sbci	r25, 0xFD	; 253
     7b8:	fc 01       	movw	r30, r24
     7ba:	80 81       	ld	r24, Z
     7bc:	91 81       	ldd	r25, Z+1	; 0x01
     7be:	2a 81       	ldd	r18, Y+2	; 0x02
     7c0:	3b 81       	ldd	r19, Y+3	; 0x03
     7c2:	82 0f       	add	r24, r18
     7c4:	93 1f       	adc	r25, r19
     7c6:	29 81       	ldd	r18, Y+1	; 0x01
     7c8:	fc 01       	movw	r30, r24
     7ca:	20 83       	st	Z, r18
     7cc:	8a 81       	ldd	r24, Y+2	; 0x02
     7ce:	9b 81       	ldd	r25, Y+3	; 0x03
     7d0:	8e 5f       	subi	r24, 0xFE	; 254
     7d2:	9d 4f       	sbci	r25, 0xFD	; 253
     7d4:	fc 01       	movw	r30, r24
     7d6:	80 81       	ld	r24, Z
     7d8:	91 81       	ldd	r25, Z+1	; 0x01
     7da:	9c 01       	movw	r18, r24
     7dc:	2f 5f       	subi	r18, 0xFF	; 255
     7de:	3f 4f       	sbci	r19, 0xFF	; 255
     7e0:	8a 81       	ldd	r24, Y+2	; 0x02
     7e2:	9b 81       	ldd	r25, Y+3	; 0x03
     7e4:	8e 5f       	subi	r24, 0xFE	; 254
     7e6:	9d 4f       	sbci	r25, 0xFD	; 253
     7e8:	fc 01       	movw	r30, r24
     7ea:	31 83       	std	Z+1, r19	; 0x01
     7ec:	20 83       	st	Z, r18
     7ee:	8a 81       	ldd	r24, Y+2	; 0x02
     7f0:	9b 81       	ldd	r25, Y+3	; 0x03
     7f2:	8e 5f       	subi	r24, 0xFE	; 254
     7f4:	9d 4f       	sbci	r25, 0xFD	; 253
     7f6:	fc 01       	movw	r30, r24
     7f8:	80 81       	ld	r24, Z
     7fa:	91 81       	ldd	r25, Z+1	; 0x01
     7fc:	81 15       	cp	r24, r1
     7fe:	92 40       	sbci	r25, 0x02	; 2
     800:	38 f0       	brcs	.+14     	; 0x810 <buff_put+0x108>
     802:	8a 81       	ldd	r24, Y+2	; 0x02
     804:	9b 81       	ldd	r25, Y+3	; 0x03
     806:	8e 5f       	subi	r24, 0xFE	; 254
     808:	9d 4f       	sbci	r25, 0xFD	; 253
     80a:	fc 01       	movw	r30, r24
     80c:	11 82       	std	Z+1, r1	; 0x01
     80e:	10 82       	st	Z, r1
     810:	81 ec       	ldi	r24, 0xC1	; 193
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	21 ec       	ldi	r18, 0xC1	; 193
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	f9 01       	movw	r30, r18
     81a:	20 81       	ld	r18, Z
     81c:	20 62       	ori	r18, 0x20	; 32
     81e:	fc 01       	movw	r30, r24
     820:	20 83       	st	Z, r18
     822:	81 ec       	ldi	r24, 0xC1	; 193
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	21 ec       	ldi	r18, 0xC1	; 193
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	f9 01       	movw	r30, r18
     82c:	20 81       	ld	r18, Z
     82e:	20 68       	ori	r18, 0x80	; 128
     830:	fc 01       	movw	r30, r24
     832:	20 83       	st	Z, r18
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	08 95       	ret

00000842 <buff_get>:
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	00 d0       	rcall	.+0      	; 0x848 <buff_get+0x6>
     848:	00 d0       	rcall	.+0      	; 0x84a <buff_get+0x8>
     84a:	cd b7       	in	r28, 0x3d	; 61
     84c:	de b7       	in	r29, 0x3e	; 62
     84e:	9a 83       	std	Y+2, r25	; 0x02
     850:	89 83       	std	Y+1, r24	; 0x01
     852:	7c 83       	std	Y+4, r23	; 0x04
     854:	6b 83       	std	Y+3, r22	; 0x03
     856:	81 ec       	ldi	r24, 0xC1	; 193
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	21 ec       	ldi	r18, 0xC1	; 193
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	f9 01       	movw	r30, r18
     860:	20 81       	ld	r18, Z
     862:	2f 7d       	andi	r18, 0xDF	; 223
     864:	fc 01       	movw	r30, r24
     866:	20 83       	st	Z, r18
     868:	81 ec       	ldi	r24, 0xC1	; 193
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	21 ec       	ldi	r18, 0xC1	; 193
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	f9 01       	movw	r30, r18
     872:	20 81       	ld	r18, Z
     874:	2f 77       	andi	r18, 0x7F	; 127
     876:	fc 01       	movw	r30, r24
     878:	20 83       	st	Z, r18
     87a:	8b 81       	ldd	r24, Y+3	; 0x03
     87c:	9c 81       	ldd	r25, Y+4	; 0x04
     87e:	9e 5f       	subi	r25, 0xFE	; 254
     880:	fc 01       	movw	r30, r24
     882:	20 81       	ld	r18, Z
     884:	31 81       	ldd	r19, Z+1	; 0x01
     886:	8b 81       	ldd	r24, Y+3	; 0x03
     888:	9c 81       	ldd	r25, Y+4	; 0x04
     88a:	8e 5f       	subi	r24, 0xFE	; 254
     88c:	9d 4f       	sbci	r25, 0xFD	; 253
     88e:	fc 01       	movw	r30, r24
     890:	80 81       	ld	r24, Z
     892:	91 81       	ldd	r25, Z+1	; 0x01
     894:	28 17       	cp	r18, r24
     896:	39 07       	cpc	r19, r25
     898:	a1 f4       	brne	.+40     	; 0x8c2 <buff_get+0x80>
     89a:	81 ec       	ldi	r24, 0xC1	; 193
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	21 ec       	ldi	r18, 0xC1	; 193
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	f9 01       	movw	r30, r18
     8a4:	20 81       	ld	r18, Z
     8a6:	20 62       	ori	r18, 0x20	; 32
     8a8:	fc 01       	movw	r30, r24
     8aa:	20 83       	st	Z, r18
     8ac:	81 ec       	ldi	r24, 0xC1	; 193
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	21 ec       	ldi	r18, 0xC1	; 193
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	f9 01       	movw	r30, r18
     8b6:	20 81       	ld	r18, Z
     8b8:	20 68       	ori	r18, 0x80	; 128
     8ba:	fc 01       	movw	r30, r24
     8bc:	20 83       	st	Z, r18
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	41 c0       	rjmp	.+130    	; 0x944 <buff_get+0x102>
     8c2:	8b 81       	ldd	r24, Y+3	; 0x03
     8c4:	9c 81       	ldd	r25, Y+4	; 0x04
     8c6:	9e 5f       	subi	r25, 0xFE	; 254
     8c8:	fc 01       	movw	r30, r24
     8ca:	80 81       	ld	r24, Z
     8cc:	91 81       	ldd	r25, Z+1	; 0x01
     8ce:	2b 81       	ldd	r18, Y+3	; 0x03
     8d0:	3c 81       	ldd	r19, Y+4	; 0x04
     8d2:	82 0f       	add	r24, r18
     8d4:	93 1f       	adc	r25, r19
     8d6:	fc 01       	movw	r30, r24
     8d8:	20 81       	ld	r18, Z
     8da:	89 81       	ldd	r24, Y+1	; 0x01
     8dc:	9a 81       	ldd	r25, Y+2	; 0x02
     8de:	fc 01       	movw	r30, r24
     8e0:	20 83       	st	Z, r18
     8e2:	8b 81       	ldd	r24, Y+3	; 0x03
     8e4:	9c 81       	ldd	r25, Y+4	; 0x04
     8e6:	9e 5f       	subi	r25, 0xFE	; 254
     8e8:	fc 01       	movw	r30, r24
     8ea:	80 81       	ld	r24, Z
     8ec:	91 81       	ldd	r25, Z+1	; 0x01
     8ee:	9c 01       	movw	r18, r24
     8f0:	2f 5f       	subi	r18, 0xFF	; 255
     8f2:	3f 4f       	sbci	r19, 0xFF	; 255
     8f4:	8b 81       	ldd	r24, Y+3	; 0x03
     8f6:	9c 81       	ldd	r25, Y+4	; 0x04
     8f8:	9e 5f       	subi	r25, 0xFE	; 254
     8fa:	fc 01       	movw	r30, r24
     8fc:	31 83       	std	Z+1, r19	; 0x01
     8fe:	20 83       	st	Z, r18
     900:	8b 81       	ldd	r24, Y+3	; 0x03
     902:	9c 81       	ldd	r25, Y+4	; 0x04
     904:	9e 5f       	subi	r25, 0xFE	; 254
     906:	fc 01       	movw	r30, r24
     908:	80 81       	ld	r24, Z
     90a:	91 81       	ldd	r25, Z+1	; 0x01
     90c:	81 15       	cp	r24, r1
     90e:	92 40       	sbci	r25, 0x02	; 2
     910:	30 f0       	brcs	.+12     	; 0x91e <buff_get+0xdc>
     912:	8b 81       	ldd	r24, Y+3	; 0x03
     914:	9c 81       	ldd	r25, Y+4	; 0x04
     916:	9e 5f       	subi	r25, 0xFE	; 254
     918:	fc 01       	movw	r30, r24
     91a:	11 82       	std	Z+1, r1	; 0x01
     91c:	10 82       	st	Z, r1
     91e:	81 ec       	ldi	r24, 0xC1	; 193
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	21 ec       	ldi	r18, 0xC1	; 193
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	f9 01       	movw	r30, r18
     928:	20 81       	ld	r18, Z
     92a:	20 62       	ori	r18, 0x20	; 32
     92c:	fc 01       	movw	r30, r24
     92e:	20 83       	st	Z, r18
     930:	81 ec       	ldi	r24, 0xC1	; 193
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	21 ec       	ldi	r18, 0xC1	; 193
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	f9 01       	movw	r30, r18
     93a:	20 81       	ld	r18, Z
     93c:	20 68       	ori	r18, 0x80	; 128
     93e:	fc 01       	movw	r30, r24
     940:	20 83       	st	Z, r18
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	08 95       	ret

00000952 <uart_init>:
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	00 d0       	rcall	.+0      	; 0x958 <uart_init+0x6>
     958:	cd b7       	in	r28, 0x3d	; 61
     95a:	de b7       	in	r29, 0x3e	; 62
     95c:	87 e6       	ldi	r24, 0x67	; 103
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	9a 83       	std	Y+2, r25	; 0x02
     962:	89 83       	std	Y+1, r24	; 0x01
     964:	85 ec       	ldi	r24, 0xC5	; 197
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	29 81       	ldd	r18, Y+1	; 0x01
     96a:	3a 81       	ldd	r19, Y+2	; 0x02
     96c:	23 2f       	mov	r18, r19
     96e:	33 27       	eor	r19, r19
     970:	fc 01       	movw	r30, r24
     972:	20 83       	st	Z, r18
     974:	84 ec       	ldi	r24, 0xC4	; 196
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	29 81       	ldd	r18, Y+1	; 0x01
     97a:	fc 01       	movw	r30, r24
     97c:	20 83       	st	Z, r18
     97e:	81 ec       	ldi	r24, 0xC1	; 193
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	28 e1       	ldi	r18, 0x18	; 24
     984:	fc 01       	movw	r30, r24
     986:	20 83       	st	Z, r18
     988:	82 ec       	ldi	r24, 0xC2	; 194
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	26 e0       	ldi	r18, 0x06	; 6
     98e:	fc 01       	movw	r30, r24
     990:	20 83       	st	Z, r18
     992:	00 00       	nop
     994:	0f 90       	pop	r0
     996:	0f 90       	pop	r0
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	08 95       	ret

0000099e <uart_init_isr>:
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	cd b7       	in	r28, 0x3d	; 61
     9a4:	de b7       	in	r29, 0x3e	; 62
     9a6:	d5 df       	rcall	.-86     	; 0x952 <uart_init>
     9a8:	81 ec       	ldi	r24, 0xC1	; 193
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	21 ec       	ldi	r18, 0xC1	; 193
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	f9 01       	movw	r30, r18
     9b2:	20 81       	ld	r18, Z
     9b4:	20 62       	ori	r18, 0x20	; 32
     9b6:	fc 01       	movw	r30, r24
     9b8:	20 83       	st	Z, r18
     9ba:	81 ec       	ldi	r24, 0xC1	; 193
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	21 ec       	ldi	r18, 0xC1	; 193
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	f9 01       	movw	r30, r18
     9c4:	20 81       	ld	r18, Z
     9c6:	20 68       	ori	r18, 0x80	; 128
     9c8:	fc 01       	movw	r30, r24
     9ca:	20 83       	st	Z, r18
     9cc:	00 00       	nop
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	08 95       	ret

000009d4 <uart_send_isr>:
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	00 d0       	rcall	.+0      	; 0x9da <uart_send_isr+0x6>
     9da:	00 d0       	rcall	.+0      	; 0x9dc <uart_send_isr+0x8>
     9dc:	00 d0       	rcall	.+0      	; 0x9de <uart_send_isr+0xa>
     9de:	cd b7       	in	r28, 0x3d	; 61
     9e0:	de b7       	in	r29, 0x3e	; 62
     9e2:	9e 83       	std	Y+6, r25	; 0x06
     9e4:	8d 83       	std	Y+5, r24	; 0x05
     9e6:	8d 81       	ldd	r24, Y+5	; 0x05
     9e8:	9e 81       	ldd	r25, Y+6	; 0x06
     9ea:	c4 d0       	rcall	.+392    	; 0xb74 <strlen>
     9ec:	9c 83       	std	Y+4, r25	; 0x04
     9ee:	8b 83       	std	Y+3, r24	; 0x03
     9f0:	1a 82       	std	Y+2, r1	; 0x02
     9f2:	19 82       	std	Y+1, r1	; 0x01
     9f4:	23 c0       	rjmp	.+70     	; 0xa3c <uart_send_isr+0x68>
     9f6:	89 81       	ldd	r24, Y+1	; 0x01
     9f8:	9a 81       	ldd	r25, Y+2	; 0x02
     9fa:	2d 81       	ldd	r18, Y+5	; 0x05
     9fc:	3e 81       	ldd	r19, Y+6	; 0x06
     9fe:	82 0f       	add	r24, r18
     a00:	93 1f       	adc	r25, r19
     a02:	fc 01       	movw	r30, r24
     a04:	80 81       	ld	r24, Z
     a06:	6f e3       	ldi	r22, 0x3F	; 63
     a08:	71 e0       	ldi	r23, 0x01	; 1
     a0a:	7e de       	rcall	.-772    	; 0x708 <buff_put>
     a0c:	81 30       	cpi	r24, 0x01	; 1
     a0e:	89 f4       	brne	.+34     	; 0xa32 <uart_send_isr+0x5e>
     a10:	80 ec       	ldi	r24, 0xC0	; 192
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	20 ec       	ldi	r18, 0xC0	; 192
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	f9 01       	movw	r30, r18
     a1a:	20 81       	ld	r18, Z
     a1c:	20 62       	ori	r18, 0x20	; 32
     a1e:	fc 01       	movw	r30, r24
     a20:	20 83       	st	Z, r18
     a22:	89 81       	ldd	r24, Y+1	; 0x01
     a24:	9a 81       	ldd	r25, Y+2	; 0x02
     a26:	9c 01       	movw	r18, r24
     a28:	2f 5f       	subi	r18, 0xFF	; 255
     a2a:	3f 4f       	sbci	r19, 0xFF	; 255
     a2c:	3a 83       	std	Y+2, r19	; 0x02
     a2e:	29 83       	std	Y+1, r18	; 0x01
     a30:	17 c0       	rjmp	.+46     	; 0xa60 <uart_send_isr+0x8c>
     a32:	89 81       	ldd	r24, Y+1	; 0x01
     a34:	9a 81       	ldd	r25, Y+2	; 0x02
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	9a 83       	std	Y+2, r25	; 0x02
     a3a:	89 83       	std	Y+1, r24	; 0x01
     a3c:	29 81       	ldd	r18, Y+1	; 0x01
     a3e:	3a 81       	ldd	r19, Y+2	; 0x02
     a40:	8b 81       	ldd	r24, Y+3	; 0x03
     a42:	9c 81       	ldd	r25, Y+4	; 0x04
     a44:	28 17       	cp	r18, r24
     a46:	39 07       	cpc	r19, r25
     a48:	b4 f2       	brlt	.-84     	; 0x9f6 <uart_send_isr+0x22>
     a4a:	80 ec       	ldi	r24, 0xC0	; 192
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	20 ec       	ldi	r18, 0xC0	; 192
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	f9 01       	movw	r30, r18
     a54:	20 81       	ld	r18, Z
     a56:	20 62       	ori	r18, 0x20	; 32
     a58:	fc 01       	movw	r30, r24
     a5a:	20 83       	st	Z, r18
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	26 96       	adiw	r28, 0x06	; 6
     a62:	0f b6       	in	r0, 0x3f	; 63
     a64:	f8 94       	cli
     a66:	de bf       	out	0x3e, r29	; 62
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	cd bf       	out	0x3d, r28	; 61
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	08 95       	ret

00000a72 <__vector_21>:

/**
 ISR for USART Data Register Empty flag
 */
ISR(USART0_UDRE_vect){
     a72:	1f 92       	push	r1
     a74:	0f 92       	push	r0
     a76:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a7a:	0f 92       	push	r0
     a7c:	11 24       	eor	r1, r1
     a7e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     a82:	0f 92       	push	r0
     a84:	2f 93       	push	r18
     a86:	3f 93       	push	r19
     a88:	4f 93       	push	r20
     a8a:	5f 93       	push	r21
     a8c:	6f 93       	push	r22
     a8e:	7f 93       	push	r23
     a90:	8f 93       	push	r24
     a92:	9f 93       	push	r25
     a94:	af 93       	push	r26
     a96:	bf 93       	push	r27
     a98:	ef 93       	push	r30
     a9a:	ff 93       	push	r31
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	1f 92       	push	r1
     aa2:	cd b7       	in	r28, 0x3d	; 61
     aa4:	de b7       	in	r29, 0x3e	; 62
    unsigned char pByte;
    // Pull one byte from buffer and store it in pByte
    if (buff_get(&pByte, &bufferSend) == 0) {
     aa6:	6f e3       	ldi	r22, 0x3F	; 63
     aa8:	71 e0       	ldi	r23, 0x01	; 1
     aaa:	ce 01       	movw	r24, r28
     aac:	01 96       	adiw	r24, 0x01	; 1
     aae:	c9 de       	rcall	.-622    	; 0x842 <buff_get>
     ab0:	88 23       	and	r24, r24
     ab2:	31 f4       	brne	.+12     	; 0xac0 <__vector_21+0x4e>
        // Send byte
        UDR0 = pByte;
     ab4:	86 ec       	ldi	r24, 0xC6	; 198
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	29 81       	ldd	r18, Y+1	; 0x01
     aba:	fc 01       	movw	r30, r24
     abc:	20 83       	st	Z, r18
    }else {
        // Buffer empty: disable interrupt
        UCSR0A &= ~(1 << UDRE0);
    }
}
     abe:	09 c0       	rjmp	.+18     	; 0xad2 <__vector_21+0x60>
    if (buff_get(&pByte, &bufferSend) == 0) {
        // Send byte
        UDR0 = pByte;
    }else {
        // Buffer empty: disable interrupt
        UCSR0A &= ~(1 << UDRE0);
     ac0:	80 ec       	ldi	r24, 0xC0	; 192
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	20 ec       	ldi	r18, 0xC0	; 192
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	f9 01       	movw	r30, r18
     aca:	20 81       	ld	r18, Z
     acc:	2f 7d       	andi	r18, 0xDF	; 223
     ace:	fc 01       	movw	r30, r24
     ad0:	20 83       	st	Z, r18
    }
}
     ad2:	00 00       	nop
     ad4:	0f 90       	pop	r0
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	ff 91       	pop	r31
     adc:	ef 91       	pop	r30
     ade:	bf 91       	pop	r27
     ae0:	af 91       	pop	r26
     ae2:	9f 91       	pop	r25
     ae4:	8f 91       	pop	r24
     ae6:	7f 91       	pop	r23
     ae8:	6f 91       	pop	r22
     aea:	5f 91       	pop	r21
     aec:	4f 91       	pop	r20
     aee:	3f 91       	pop	r19
     af0:	2f 91       	pop	r18
     af2:	0f 90       	pop	r0
     af4:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     af8:	0f 90       	pop	r0
     afa:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     afe:	0f 90       	pop	r0
     b00:	1f 90       	pop	r1
     b02:	18 95       	reti

00000b04 <__vector_20>:

ISR(USART0_RX_vect){
     b04:	1f 92       	push	r1
     b06:	0f 92       	push	r0
     b08:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b0c:	0f 92       	push	r0
     b0e:	11 24       	eor	r1, r1
     b10:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     b14:	0f 92       	push	r0
     b16:	2f 93       	push	r18
     b18:	3f 93       	push	r19
     b1a:	4f 93       	push	r20
     b1c:	5f 93       	push	r21
     b1e:	6f 93       	push	r22
     b20:	7f 93       	push	r23
     b22:	8f 93       	push	r24
     b24:	9f 93       	push	r25
     b26:	af 93       	push	r26
     b28:	bf 93       	push	r27
     b2a:	ef 93       	push	r30
     b2c:	ff 93       	push	r31
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
     b32:	cd b7       	in	r28, 0x3d	; 61
     b34:	de b7       	in	r29, 0x3e	; 62
    // Put received byte to bufferRecv (will read but don't save the value if buffer overflows)
    buff_put(UDR0, &bufferRecv);
     b36:	86 ec       	ldi	r24, 0xC6	; 198
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	fc 01       	movw	r30, r24
     b3c:	80 81       	ld	r24, Z
     b3e:	63 e4       	ldi	r22, 0x43	; 67
     b40:	73 e0       	ldi	r23, 0x03	; 3
     b42:	e2 dd       	rcall	.-1084   	; 0x708 <buff_put>
}
     b44:	00 00       	nop
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	ff 91       	pop	r31
     b4c:	ef 91       	pop	r30
     b4e:	bf 91       	pop	r27
     b50:	af 91       	pop	r26
     b52:	9f 91       	pop	r25
     b54:	8f 91       	pop	r24
     b56:	7f 91       	pop	r23
     b58:	6f 91       	pop	r22
     b5a:	5f 91       	pop	r21
     b5c:	4f 91       	pop	r20
     b5e:	3f 91       	pop	r19
     b60:	2f 91       	pop	r18
     b62:	0f 90       	pop	r0
     b64:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     b68:	0f 90       	pop	r0
     b6a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b6e:	0f 90       	pop	r0
     b70:	1f 90       	pop	r1
     b72:	18 95       	reti

00000b74 <strlen>:
     b74:	fc 01       	movw	r30, r24
     b76:	01 90       	ld	r0, Z+
     b78:	00 20       	and	r0, r0
     b7a:	e9 f7       	brne	.-6      	; 0xb76 <strlen+0x2>
     b7c:	80 95       	com	r24
     b7e:	90 95       	com	r25
     b80:	8e 0f       	add	r24, r30
     b82:	9f 1f       	adc	r25, r31
     b84:	08 95       	ret

00000b86 <sprintf>:
     b86:	0f 93       	push	r16
     b88:	1f 93       	push	r17
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	2e 97       	sbiw	r28, 0x0e	; 14
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	f8 94       	cli
     b98:	de bf       	out	0x3e, r29	; 62
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	cd bf       	out	0x3d, r28	; 61
     b9e:	0d 89       	ldd	r16, Y+21	; 0x15
     ba0:	1e 89       	ldd	r17, Y+22	; 0x16
     ba2:	86 e0       	ldi	r24, 0x06	; 6
     ba4:	8c 83       	std	Y+4, r24	; 0x04
     ba6:	1a 83       	std	Y+2, r17	; 0x02
     ba8:	09 83       	std	Y+1, r16	; 0x01
     baa:	8f ef       	ldi	r24, 0xFF	; 255
     bac:	9f e7       	ldi	r25, 0x7F	; 127
     bae:	9e 83       	std	Y+6, r25	; 0x06
     bb0:	8d 83       	std	Y+5, r24	; 0x05
     bb2:	ae 01       	movw	r20, r28
     bb4:	47 5e       	subi	r20, 0xE7	; 231
     bb6:	5f 4f       	sbci	r21, 0xFF	; 255
     bb8:	6f 89       	ldd	r22, Y+23	; 0x17
     bba:	78 8d       	ldd	r23, Y+24	; 0x18
     bbc:	ce 01       	movw	r24, r28
     bbe:	01 96       	adiw	r24, 0x01	; 1
     bc0:	10 d0       	rcall	.+32     	; 0xbe2 <vfprintf>
     bc2:	ef 81       	ldd	r30, Y+7	; 0x07
     bc4:	f8 85       	ldd	r31, Y+8	; 0x08
     bc6:	e0 0f       	add	r30, r16
     bc8:	f1 1f       	adc	r31, r17
     bca:	10 82       	st	Z, r1
     bcc:	2e 96       	adiw	r28, 0x0e	; 14
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	1f 91       	pop	r17
     bde:	0f 91       	pop	r16
     be0:	08 95       	ret

00000be2 <vfprintf>:
     be2:	2f 92       	push	r2
     be4:	3f 92       	push	r3
     be6:	4f 92       	push	r4
     be8:	5f 92       	push	r5
     bea:	6f 92       	push	r6
     bec:	7f 92       	push	r7
     bee:	8f 92       	push	r8
     bf0:	9f 92       	push	r9
     bf2:	af 92       	push	r10
     bf4:	bf 92       	push	r11
     bf6:	cf 92       	push	r12
     bf8:	df 92       	push	r13
     bfa:	ef 92       	push	r14
     bfc:	ff 92       	push	r15
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	2b 97       	sbiw	r28, 0x0b	; 11
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	f8 94       	cli
     c10:	de bf       	out	0x3e, r29	; 62
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	cd bf       	out	0x3d, r28	; 61
     c16:	6c 01       	movw	r12, r24
     c18:	7b 01       	movw	r14, r22
     c1a:	8a 01       	movw	r16, r20
     c1c:	fc 01       	movw	r30, r24
     c1e:	17 82       	std	Z+7, r1	; 0x07
     c20:	16 82       	std	Z+6, r1	; 0x06
     c22:	83 81       	ldd	r24, Z+3	; 0x03
     c24:	81 ff       	sbrs	r24, 1
     c26:	bf c1       	rjmp	.+894    	; 0xfa6 <vfprintf+0x3c4>
     c28:	ce 01       	movw	r24, r28
     c2a:	01 96       	adiw	r24, 0x01	; 1
     c2c:	3c 01       	movw	r6, r24
     c2e:	f6 01       	movw	r30, r12
     c30:	93 81       	ldd	r25, Z+3	; 0x03
     c32:	f7 01       	movw	r30, r14
     c34:	93 fd       	sbrc	r25, 3
     c36:	85 91       	lpm	r24, Z+
     c38:	93 ff       	sbrs	r25, 3
     c3a:	81 91       	ld	r24, Z+
     c3c:	7f 01       	movw	r14, r30
     c3e:	88 23       	and	r24, r24
     c40:	09 f4       	brne	.+2      	; 0xc44 <vfprintf+0x62>
     c42:	ad c1       	rjmp	.+858    	; 0xf9e <vfprintf+0x3bc>
     c44:	85 32       	cpi	r24, 0x25	; 37
     c46:	39 f4       	brne	.+14     	; 0xc56 <vfprintf+0x74>
     c48:	93 fd       	sbrc	r25, 3
     c4a:	85 91       	lpm	r24, Z+
     c4c:	93 ff       	sbrs	r25, 3
     c4e:	81 91       	ld	r24, Z+
     c50:	7f 01       	movw	r14, r30
     c52:	85 32       	cpi	r24, 0x25	; 37
     c54:	21 f4       	brne	.+8      	; 0xc5e <vfprintf+0x7c>
     c56:	b6 01       	movw	r22, r12
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	d6 d1       	rcall	.+940    	; 0x1008 <fputc>
     c5c:	e8 cf       	rjmp	.-48     	; 0xc2e <vfprintf+0x4c>
     c5e:	91 2c       	mov	r9, r1
     c60:	21 2c       	mov	r2, r1
     c62:	31 2c       	mov	r3, r1
     c64:	ff e1       	ldi	r31, 0x1F	; 31
     c66:	f3 15       	cp	r31, r3
     c68:	d8 f0       	brcs	.+54     	; 0xca0 <vfprintf+0xbe>
     c6a:	8b 32       	cpi	r24, 0x2B	; 43
     c6c:	79 f0       	breq	.+30     	; 0xc8c <vfprintf+0xaa>
     c6e:	38 f4       	brcc	.+14     	; 0xc7e <vfprintf+0x9c>
     c70:	80 32       	cpi	r24, 0x20	; 32
     c72:	79 f0       	breq	.+30     	; 0xc92 <vfprintf+0xb0>
     c74:	83 32       	cpi	r24, 0x23	; 35
     c76:	a1 f4       	brne	.+40     	; 0xca0 <vfprintf+0xbe>
     c78:	23 2d       	mov	r18, r3
     c7a:	20 61       	ori	r18, 0x10	; 16
     c7c:	1d c0       	rjmp	.+58     	; 0xcb8 <vfprintf+0xd6>
     c7e:	8d 32       	cpi	r24, 0x2D	; 45
     c80:	61 f0       	breq	.+24     	; 0xc9a <vfprintf+0xb8>
     c82:	80 33       	cpi	r24, 0x30	; 48
     c84:	69 f4       	brne	.+26     	; 0xca0 <vfprintf+0xbe>
     c86:	23 2d       	mov	r18, r3
     c88:	21 60       	ori	r18, 0x01	; 1
     c8a:	16 c0       	rjmp	.+44     	; 0xcb8 <vfprintf+0xd6>
     c8c:	83 2d       	mov	r24, r3
     c8e:	82 60       	ori	r24, 0x02	; 2
     c90:	38 2e       	mov	r3, r24
     c92:	e3 2d       	mov	r30, r3
     c94:	e4 60       	ori	r30, 0x04	; 4
     c96:	3e 2e       	mov	r3, r30
     c98:	2a c0       	rjmp	.+84     	; 0xcee <vfprintf+0x10c>
     c9a:	f3 2d       	mov	r31, r3
     c9c:	f8 60       	ori	r31, 0x08	; 8
     c9e:	1d c0       	rjmp	.+58     	; 0xcda <vfprintf+0xf8>
     ca0:	37 fc       	sbrc	r3, 7
     ca2:	2d c0       	rjmp	.+90     	; 0xcfe <vfprintf+0x11c>
     ca4:	20 ed       	ldi	r18, 0xD0	; 208
     ca6:	28 0f       	add	r18, r24
     ca8:	2a 30       	cpi	r18, 0x0A	; 10
     caa:	40 f0       	brcs	.+16     	; 0xcbc <vfprintf+0xda>
     cac:	8e 32       	cpi	r24, 0x2E	; 46
     cae:	b9 f4       	brne	.+46     	; 0xcde <vfprintf+0xfc>
     cb0:	36 fc       	sbrc	r3, 6
     cb2:	75 c1       	rjmp	.+746    	; 0xf9e <vfprintf+0x3bc>
     cb4:	23 2d       	mov	r18, r3
     cb6:	20 64       	ori	r18, 0x40	; 64
     cb8:	32 2e       	mov	r3, r18
     cba:	19 c0       	rjmp	.+50     	; 0xcee <vfprintf+0x10c>
     cbc:	36 fe       	sbrs	r3, 6
     cbe:	06 c0       	rjmp	.+12     	; 0xccc <vfprintf+0xea>
     cc0:	8a e0       	ldi	r24, 0x0A	; 10
     cc2:	98 9e       	mul	r9, r24
     cc4:	20 0d       	add	r18, r0
     cc6:	11 24       	eor	r1, r1
     cc8:	92 2e       	mov	r9, r18
     cca:	11 c0       	rjmp	.+34     	; 0xcee <vfprintf+0x10c>
     ccc:	ea e0       	ldi	r30, 0x0A	; 10
     cce:	2e 9e       	mul	r2, r30
     cd0:	20 0d       	add	r18, r0
     cd2:	11 24       	eor	r1, r1
     cd4:	22 2e       	mov	r2, r18
     cd6:	f3 2d       	mov	r31, r3
     cd8:	f0 62       	ori	r31, 0x20	; 32
     cda:	3f 2e       	mov	r3, r31
     cdc:	08 c0       	rjmp	.+16     	; 0xcee <vfprintf+0x10c>
     cde:	8c 36       	cpi	r24, 0x6C	; 108
     ce0:	21 f4       	brne	.+8      	; 0xcea <vfprintf+0x108>
     ce2:	83 2d       	mov	r24, r3
     ce4:	80 68       	ori	r24, 0x80	; 128
     ce6:	38 2e       	mov	r3, r24
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <vfprintf+0x10c>
     cea:	88 36       	cpi	r24, 0x68	; 104
     cec:	41 f4       	brne	.+16     	; 0xcfe <vfprintf+0x11c>
     cee:	f7 01       	movw	r30, r14
     cf0:	93 fd       	sbrc	r25, 3
     cf2:	85 91       	lpm	r24, Z+
     cf4:	93 ff       	sbrs	r25, 3
     cf6:	81 91       	ld	r24, Z+
     cf8:	7f 01       	movw	r14, r30
     cfa:	81 11       	cpse	r24, r1
     cfc:	b3 cf       	rjmp	.-154    	; 0xc64 <vfprintf+0x82>
     cfe:	98 2f       	mov	r25, r24
     d00:	9f 7d       	andi	r25, 0xDF	; 223
     d02:	95 54       	subi	r25, 0x45	; 69
     d04:	93 30       	cpi	r25, 0x03	; 3
     d06:	28 f4       	brcc	.+10     	; 0xd12 <vfprintf+0x130>
     d08:	0c 5f       	subi	r16, 0xFC	; 252
     d0a:	1f 4f       	sbci	r17, 0xFF	; 255
     d0c:	9f e3       	ldi	r25, 0x3F	; 63
     d0e:	99 83       	std	Y+1, r25	; 0x01
     d10:	0d c0       	rjmp	.+26     	; 0xd2c <vfprintf+0x14a>
     d12:	83 36       	cpi	r24, 0x63	; 99
     d14:	31 f0       	breq	.+12     	; 0xd22 <vfprintf+0x140>
     d16:	83 37       	cpi	r24, 0x73	; 115
     d18:	71 f0       	breq	.+28     	; 0xd36 <vfprintf+0x154>
     d1a:	83 35       	cpi	r24, 0x53	; 83
     d1c:	09 f0       	breq	.+2      	; 0xd20 <vfprintf+0x13e>
     d1e:	55 c0       	rjmp	.+170    	; 0xdca <vfprintf+0x1e8>
     d20:	20 c0       	rjmp	.+64     	; 0xd62 <vfprintf+0x180>
     d22:	f8 01       	movw	r30, r16
     d24:	80 81       	ld	r24, Z
     d26:	89 83       	std	Y+1, r24	; 0x01
     d28:	0e 5f       	subi	r16, 0xFE	; 254
     d2a:	1f 4f       	sbci	r17, 0xFF	; 255
     d2c:	88 24       	eor	r8, r8
     d2e:	83 94       	inc	r8
     d30:	91 2c       	mov	r9, r1
     d32:	53 01       	movw	r10, r6
     d34:	12 c0       	rjmp	.+36     	; 0xd5a <vfprintf+0x178>
     d36:	28 01       	movw	r4, r16
     d38:	f2 e0       	ldi	r31, 0x02	; 2
     d3a:	4f 0e       	add	r4, r31
     d3c:	51 1c       	adc	r5, r1
     d3e:	f8 01       	movw	r30, r16
     d40:	a0 80       	ld	r10, Z
     d42:	b1 80       	ldd	r11, Z+1	; 0x01
     d44:	36 fe       	sbrs	r3, 6
     d46:	03 c0       	rjmp	.+6      	; 0xd4e <vfprintf+0x16c>
     d48:	69 2d       	mov	r22, r9
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <vfprintf+0x170>
     d4e:	6f ef       	ldi	r22, 0xFF	; 255
     d50:	7f ef       	ldi	r23, 0xFF	; 255
     d52:	c5 01       	movw	r24, r10
     d54:	4e d1       	rcall	.+668    	; 0xff2 <strnlen>
     d56:	4c 01       	movw	r8, r24
     d58:	82 01       	movw	r16, r4
     d5a:	f3 2d       	mov	r31, r3
     d5c:	ff 77       	andi	r31, 0x7F	; 127
     d5e:	3f 2e       	mov	r3, r31
     d60:	15 c0       	rjmp	.+42     	; 0xd8c <vfprintf+0x1aa>
     d62:	28 01       	movw	r4, r16
     d64:	22 e0       	ldi	r18, 0x02	; 2
     d66:	42 0e       	add	r4, r18
     d68:	51 1c       	adc	r5, r1
     d6a:	f8 01       	movw	r30, r16
     d6c:	a0 80       	ld	r10, Z
     d6e:	b1 80       	ldd	r11, Z+1	; 0x01
     d70:	36 fe       	sbrs	r3, 6
     d72:	03 c0       	rjmp	.+6      	; 0xd7a <vfprintf+0x198>
     d74:	69 2d       	mov	r22, r9
     d76:	70 e0       	ldi	r23, 0x00	; 0
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <vfprintf+0x19c>
     d7a:	6f ef       	ldi	r22, 0xFF	; 255
     d7c:	7f ef       	ldi	r23, 0xFF	; 255
     d7e:	c5 01       	movw	r24, r10
     d80:	2d d1       	rcall	.+602    	; 0xfdc <strnlen_P>
     d82:	4c 01       	movw	r8, r24
     d84:	f3 2d       	mov	r31, r3
     d86:	f0 68       	ori	r31, 0x80	; 128
     d88:	3f 2e       	mov	r3, r31
     d8a:	82 01       	movw	r16, r4
     d8c:	33 fc       	sbrc	r3, 3
     d8e:	19 c0       	rjmp	.+50     	; 0xdc2 <vfprintf+0x1e0>
     d90:	82 2d       	mov	r24, r2
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	88 16       	cp	r8, r24
     d96:	99 06       	cpc	r9, r25
     d98:	a0 f4       	brcc	.+40     	; 0xdc2 <vfprintf+0x1e0>
     d9a:	b6 01       	movw	r22, r12
     d9c:	80 e2       	ldi	r24, 0x20	; 32
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	33 d1       	rcall	.+614    	; 0x1008 <fputc>
     da2:	2a 94       	dec	r2
     da4:	f5 cf       	rjmp	.-22     	; 0xd90 <vfprintf+0x1ae>
     da6:	f5 01       	movw	r30, r10
     da8:	37 fc       	sbrc	r3, 7
     daa:	85 91       	lpm	r24, Z+
     dac:	37 fe       	sbrs	r3, 7
     dae:	81 91       	ld	r24, Z+
     db0:	5f 01       	movw	r10, r30
     db2:	b6 01       	movw	r22, r12
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	28 d1       	rcall	.+592    	; 0x1008 <fputc>
     db8:	21 10       	cpse	r2, r1
     dba:	2a 94       	dec	r2
     dbc:	21 e0       	ldi	r18, 0x01	; 1
     dbe:	82 1a       	sub	r8, r18
     dc0:	91 08       	sbc	r9, r1
     dc2:	81 14       	cp	r8, r1
     dc4:	91 04       	cpc	r9, r1
     dc6:	79 f7       	brne	.-34     	; 0xda6 <vfprintf+0x1c4>
     dc8:	e1 c0       	rjmp	.+450    	; 0xf8c <vfprintf+0x3aa>
     dca:	84 36       	cpi	r24, 0x64	; 100
     dcc:	11 f0       	breq	.+4      	; 0xdd2 <vfprintf+0x1f0>
     dce:	89 36       	cpi	r24, 0x69	; 105
     dd0:	39 f5       	brne	.+78     	; 0xe20 <vfprintf+0x23e>
     dd2:	f8 01       	movw	r30, r16
     dd4:	37 fe       	sbrs	r3, 7
     dd6:	07 c0       	rjmp	.+14     	; 0xde6 <vfprintf+0x204>
     dd8:	60 81       	ld	r22, Z
     dda:	71 81       	ldd	r23, Z+1	; 0x01
     ddc:	82 81       	ldd	r24, Z+2	; 0x02
     dde:	93 81       	ldd	r25, Z+3	; 0x03
     de0:	0c 5f       	subi	r16, 0xFC	; 252
     de2:	1f 4f       	sbci	r17, 0xFF	; 255
     de4:	08 c0       	rjmp	.+16     	; 0xdf6 <vfprintf+0x214>
     de6:	60 81       	ld	r22, Z
     de8:	71 81       	ldd	r23, Z+1	; 0x01
     dea:	07 2e       	mov	r0, r23
     dec:	00 0c       	add	r0, r0
     dee:	88 0b       	sbc	r24, r24
     df0:	99 0b       	sbc	r25, r25
     df2:	0e 5f       	subi	r16, 0xFE	; 254
     df4:	1f 4f       	sbci	r17, 0xFF	; 255
     df6:	f3 2d       	mov	r31, r3
     df8:	ff 76       	andi	r31, 0x6F	; 111
     dfa:	3f 2e       	mov	r3, r31
     dfc:	97 ff       	sbrs	r25, 7
     dfe:	09 c0       	rjmp	.+18     	; 0xe12 <vfprintf+0x230>
     e00:	90 95       	com	r25
     e02:	80 95       	com	r24
     e04:	70 95       	com	r23
     e06:	61 95       	neg	r22
     e08:	7f 4f       	sbci	r23, 0xFF	; 255
     e0a:	8f 4f       	sbci	r24, 0xFF	; 255
     e0c:	9f 4f       	sbci	r25, 0xFF	; 255
     e0e:	f0 68       	ori	r31, 0x80	; 128
     e10:	3f 2e       	mov	r3, r31
     e12:	2a e0       	ldi	r18, 0x0A	; 10
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	a3 01       	movw	r20, r6
     e18:	33 d1       	rcall	.+614    	; 0x1080 <__ultoa_invert>
     e1a:	88 2e       	mov	r8, r24
     e1c:	86 18       	sub	r8, r6
     e1e:	44 c0       	rjmp	.+136    	; 0xea8 <vfprintf+0x2c6>
     e20:	85 37       	cpi	r24, 0x75	; 117
     e22:	31 f4       	brne	.+12     	; 0xe30 <vfprintf+0x24e>
     e24:	23 2d       	mov	r18, r3
     e26:	2f 7e       	andi	r18, 0xEF	; 239
     e28:	b2 2e       	mov	r11, r18
     e2a:	2a e0       	ldi	r18, 0x0A	; 10
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	25 c0       	rjmp	.+74     	; 0xe7a <vfprintf+0x298>
     e30:	93 2d       	mov	r25, r3
     e32:	99 7f       	andi	r25, 0xF9	; 249
     e34:	b9 2e       	mov	r11, r25
     e36:	8f 36       	cpi	r24, 0x6F	; 111
     e38:	c1 f0       	breq	.+48     	; 0xe6a <vfprintf+0x288>
     e3a:	18 f4       	brcc	.+6      	; 0xe42 <vfprintf+0x260>
     e3c:	88 35       	cpi	r24, 0x58	; 88
     e3e:	79 f0       	breq	.+30     	; 0xe5e <vfprintf+0x27c>
     e40:	ae c0       	rjmp	.+348    	; 0xf9e <vfprintf+0x3bc>
     e42:	80 37       	cpi	r24, 0x70	; 112
     e44:	19 f0       	breq	.+6      	; 0xe4c <vfprintf+0x26a>
     e46:	88 37       	cpi	r24, 0x78	; 120
     e48:	21 f0       	breq	.+8      	; 0xe52 <vfprintf+0x270>
     e4a:	a9 c0       	rjmp	.+338    	; 0xf9e <vfprintf+0x3bc>
     e4c:	e9 2f       	mov	r30, r25
     e4e:	e0 61       	ori	r30, 0x10	; 16
     e50:	be 2e       	mov	r11, r30
     e52:	b4 fe       	sbrs	r11, 4
     e54:	0d c0       	rjmp	.+26     	; 0xe70 <vfprintf+0x28e>
     e56:	fb 2d       	mov	r31, r11
     e58:	f4 60       	ori	r31, 0x04	; 4
     e5a:	bf 2e       	mov	r11, r31
     e5c:	09 c0       	rjmp	.+18     	; 0xe70 <vfprintf+0x28e>
     e5e:	34 fe       	sbrs	r3, 4
     e60:	0a c0       	rjmp	.+20     	; 0xe76 <vfprintf+0x294>
     e62:	29 2f       	mov	r18, r25
     e64:	26 60       	ori	r18, 0x06	; 6
     e66:	b2 2e       	mov	r11, r18
     e68:	06 c0       	rjmp	.+12     	; 0xe76 <vfprintf+0x294>
     e6a:	28 e0       	ldi	r18, 0x08	; 8
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	05 c0       	rjmp	.+10     	; 0xe7a <vfprintf+0x298>
     e70:	20 e1       	ldi	r18, 0x10	; 16
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <vfprintf+0x298>
     e76:	20 e1       	ldi	r18, 0x10	; 16
     e78:	32 e0       	ldi	r19, 0x02	; 2
     e7a:	f8 01       	movw	r30, r16
     e7c:	b7 fe       	sbrs	r11, 7
     e7e:	07 c0       	rjmp	.+14     	; 0xe8e <vfprintf+0x2ac>
     e80:	60 81       	ld	r22, Z
     e82:	71 81       	ldd	r23, Z+1	; 0x01
     e84:	82 81       	ldd	r24, Z+2	; 0x02
     e86:	93 81       	ldd	r25, Z+3	; 0x03
     e88:	0c 5f       	subi	r16, 0xFC	; 252
     e8a:	1f 4f       	sbci	r17, 0xFF	; 255
     e8c:	06 c0       	rjmp	.+12     	; 0xe9a <vfprintf+0x2b8>
     e8e:	60 81       	ld	r22, Z
     e90:	71 81       	ldd	r23, Z+1	; 0x01
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0e 5f       	subi	r16, 0xFE	; 254
     e98:	1f 4f       	sbci	r17, 0xFF	; 255
     e9a:	a3 01       	movw	r20, r6
     e9c:	f1 d0       	rcall	.+482    	; 0x1080 <__ultoa_invert>
     e9e:	88 2e       	mov	r8, r24
     ea0:	86 18       	sub	r8, r6
     ea2:	fb 2d       	mov	r31, r11
     ea4:	ff 77       	andi	r31, 0x7F	; 127
     ea6:	3f 2e       	mov	r3, r31
     ea8:	36 fe       	sbrs	r3, 6
     eaa:	0d c0       	rjmp	.+26     	; 0xec6 <vfprintf+0x2e4>
     eac:	23 2d       	mov	r18, r3
     eae:	2e 7f       	andi	r18, 0xFE	; 254
     eb0:	a2 2e       	mov	r10, r18
     eb2:	89 14       	cp	r8, r9
     eb4:	58 f4       	brcc	.+22     	; 0xecc <vfprintf+0x2ea>
     eb6:	34 fe       	sbrs	r3, 4
     eb8:	0b c0       	rjmp	.+22     	; 0xed0 <vfprintf+0x2ee>
     eba:	32 fc       	sbrc	r3, 2
     ebc:	09 c0       	rjmp	.+18     	; 0xed0 <vfprintf+0x2ee>
     ebe:	83 2d       	mov	r24, r3
     ec0:	8e 7e       	andi	r24, 0xEE	; 238
     ec2:	a8 2e       	mov	r10, r24
     ec4:	05 c0       	rjmp	.+10     	; 0xed0 <vfprintf+0x2ee>
     ec6:	b8 2c       	mov	r11, r8
     ec8:	a3 2c       	mov	r10, r3
     eca:	03 c0       	rjmp	.+6      	; 0xed2 <vfprintf+0x2f0>
     ecc:	b8 2c       	mov	r11, r8
     ece:	01 c0       	rjmp	.+2      	; 0xed2 <vfprintf+0x2f0>
     ed0:	b9 2c       	mov	r11, r9
     ed2:	a4 fe       	sbrs	r10, 4
     ed4:	0f c0       	rjmp	.+30     	; 0xef4 <vfprintf+0x312>
     ed6:	fe 01       	movw	r30, r28
     ed8:	e8 0d       	add	r30, r8
     eda:	f1 1d       	adc	r31, r1
     edc:	80 81       	ld	r24, Z
     ede:	80 33       	cpi	r24, 0x30	; 48
     ee0:	21 f4       	brne	.+8      	; 0xeea <vfprintf+0x308>
     ee2:	9a 2d       	mov	r25, r10
     ee4:	99 7e       	andi	r25, 0xE9	; 233
     ee6:	a9 2e       	mov	r10, r25
     ee8:	09 c0       	rjmp	.+18     	; 0xefc <vfprintf+0x31a>
     eea:	a2 fe       	sbrs	r10, 2
     eec:	06 c0       	rjmp	.+12     	; 0xefa <vfprintf+0x318>
     eee:	b3 94       	inc	r11
     ef0:	b3 94       	inc	r11
     ef2:	04 c0       	rjmp	.+8      	; 0xefc <vfprintf+0x31a>
     ef4:	8a 2d       	mov	r24, r10
     ef6:	86 78       	andi	r24, 0x86	; 134
     ef8:	09 f0       	breq	.+2      	; 0xefc <vfprintf+0x31a>
     efa:	b3 94       	inc	r11
     efc:	a3 fc       	sbrc	r10, 3
     efe:	10 c0       	rjmp	.+32     	; 0xf20 <vfprintf+0x33e>
     f00:	a0 fe       	sbrs	r10, 0
     f02:	06 c0       	rjmp	.+12     	; 0xf10 <vfprintf+0x32e>
     f04:	b2 14       	cp	r11, r2
     f06:	80 f4       	brcc	.+32     	; 0xf28 <vfprintf+0x346>
     f08:	28 0c       	add	r2, r8
     f0a:	92 2c       	mov	r9, r2
     f0c:	9b 18       	sub	r9, r11
     f0e:	0d c0       	rjmp	.+26     	; 0xf2a <vfprintf+0x348>
     f10:	b2 14       	cp	r11, r2
     f12:	58 f4       	brcc	.+22     	; 0xf2a <vfprintf+0x348>
     f14:	b6 01       	movw	r22, r12
     f16:	80 e2       	ldi	r24, 0x20	; 32
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	76 d0       	rcall	.+236    	; 0x1008 <fputc>
     f1c:	b3 94       	inc	r11
     f1e:	f8 cf       	rjmp	.-16     	; 0xf10 <vfprintf+0x32e>
     f20:	b2 14       	cp	r11, r2
     f22:	18 f4       	brcc	.+6      	; 0xf2a <vfprintf+0x348>
     f24:	2b 18       	sub	r2, r11
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <vfprintf+0x34a>
     f28:	98 2c       	mov	r9, r8
     f2a:	21 2c       	mov	r2, r1
     f2c:	a4 fe       	sbrs	r10, 4
     f2e:	0f c0       	rjmp	.+30     	; 0xf4e <vfprintf+0x36c>
     f30:	b6 01       	movw	r22, r12
     f32:	80 e3       	ldi	r24, 0x30	; 48
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	68 d0       	rcall	.+208    	; 0x1008 <fputc>
     f38:	a2 fe       	sbrs	r10, 2
     f3a:	16 c0       	rjmp	.+44     	; 0xf68 <vfprintf+0x386>
     f3c:	a1 fc       	sbrc	r10, 1
     f3e:	03 c0       	rjmp	.+6      	; 0xf46 <vfprintf+0x364>
     f40:	88 e7       	ldi	r24, 0x78	; 120
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <vfprintf+0x368>
     f46:	88 e5       	ldi	r24, 0x58	; 88
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	b6 01       	movw	r22, r12
     f4c:	0c c0       	rjmp	.+24     	; 0xf66 <vfprintf+0x384>
     f4e:	8a 2d       	mov	r24, r10
     f50:	86 78       	andi	r24, 0x86	; 134
     f52:	51 f0       	breq	.+20     	; 0xf68 <vfprintf+0x386>
     f54:	a1 fe       	sbrs	r10, 1
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <vfprintf+0x37a>
     f58:	8b e2       	ldi	r24, 0x2B	; 43
     f5a:	01 c0       	rjmp	.+2      	; 0xf5e <vfprintf+0x37c>
     f5c:	80 e2       	ldi	r24, 0x20	; 32
     f5e:	a7 fc       	sbrc	r10, 7
     f60:	8d e2       	ldi	r24, 0x2D	; 45
     f62:	b6 01       	movw	r22, r12
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	50 d0       	rcall	.+160    	; 0x1008 <fputc>
     f68:	89 14       	cp	r8, r9
     f6a:	30 f4       	brcc	.+12     	; 0xf78 <vfprintf+0x396>
     f6c:	b6 01       	movw	r22, r12
     f6e:	80 e3       	ldi	r24, 0x30	; 48
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	4a d0       	rcall	.+148    	; 0x1008 <fputc>
     f74:	9a 94       	dec	r9
     f76:	f8 cf       	rjmp	.-16     	; 0xf68 <vfprintf+0x386>
     f78:	8a 94       	dec	r8
     f7a:	f3 01       	movw	r30, r6
     f7c:	e8 0d       	add	r30, r8
     f7e:	f1 1d       	adc	r31, r1
     f80:	80 81       	ld	r24, Z
     f82:	b6 01       	movw	r22, r12
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	40 d0       	rcall	.+128    	; 0x1008 <fputc>
     f88:	81 10       	cpse	r8, r1
     f8a:	f6 cf       	rjmp	.-20     	; 0xf78 <vfprintf+0x396>
     f8c:	22 20       	and	r2, r2
     f8e:	09 f4       	brne	.+2      	; 0xf92 <vfprintf+0x3b0>
     f90:	4e ce       	rjmp	.-868    	; 0xc2e <vfprintf+0x4c>
     f92:	b6 01       	movw	r22, r12
     f94:	80 e2       	ldi	r24, 0x20	; 32
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	37 d0       	rcall	.+110    	; 0x1008 <fputc>
     f9a:	2a 94       	dec	r2
     f9c:	f7 cf       	rjmp	.-18     	; 0xf8c <vfprintf+0x3aa>
     f9e:	f6 01       	movw	r30, r12
     fa0:	86 81       	ldd	r24, Z+6	; 0x06
     fa2:	97 81       	ldd	r25, Z+7	; 0x07
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <vfprintf+0x3c8>
     fa6:	8f ef       	ldi	r24, 0xFF	; 255
     fa8:	9f ef       	ldi	r25, 0xFF	; 255
     faa:	2b 96       	adiw	r28, 0x0b	; 11
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	de bf       	out	0x3e, r29	; 62
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	cd bf       	out	0x3d, r28	; 61
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	1f 91       	pop	r17
     fbc:	0f 91       	pop	r16
     fbe:	ff 90       	pop	r15
     fc0:	ef 90       	pop	r14
     fc2:	df 90       	pop	r13
     fc4:	cf 90       	pop	r12
     fc6:	bf 90       	pop	r11
     fc8:	af 90       	pop	r10
     fca:	9f 90       	pop	r9
     fcc:	8f 90       	pop	r8
     fce:	7f 90       	pop	r7
     fd0:	6f 90       	pop	r6
     fd2:	5f 90       	pop	r5
     fd4:	4f 90       	pop	r4
     fd6:	3f 90       	pop	r3
     fd8:	2f 90       	pop	r2
     fda:	08 95       	ret

00000fdc <strnlen_P>:
     fdc:	fc 01       	movw	r30, r24
     fde:	05 90       	lpm	r0, Z+
     fe0:	61 50       	subi	r22, 0x01	; 1
     fe2:	70 40       	sbci	r23, 0x00	; 0
     fe4:	01 10       	cpse	r0, r1
     fe6:	d8 f7       	brcc	.-10     	; 0xfde <strnlen_P+0x2>
     fe8:	80 95       	com	r24
     fea:	90 95       	com	r25
     fec:	8e 0f       	add	r24, r30
     fee:	9f 1f       	adc	r25, r31
     ff0:	08 95       	ret

00000ff2 <strnlen>:
     ff2:	fc 01       	movw	r30, r24
     ff4:	61 50       	subi	r22, 0x01	; 1
     ff6:	70 40       	sbci	r23, 0x00	; 0
     ff8:	01 90       	ld	r0, Z+
     ffa:	01 10       	cpse	r0, r1
     ffc:	d8 f7       	brcc	.-10     	; 0xff4 <strnlen+0x2>
     ffe:	80 95       	com	r24
    1000:	90 95       	com	r25
    1002:	8e 0f       	add	r24, r30
    1004:	9f 1f       	adc	r25, r31
    1006:	08 95       	ret

00001008 <fputc>:
    1008:	0f 93       	push	r16
    100a:	1f 93       	push	r17
    100c:	cf 93       	push	r28
    100e:	df 93       	push	r29
    1010:	fb 01       	movw	r30, r22
    1012:	23 81       	ldd	r18, Z+3	; 0x03
    1014:	21 fd       	sbrc	r18, 1
    1016:	03 c0       	rjmp	.+6      	; 0x101e <fputc+0x16>
    1018:	8f ef       	ldi	r24, 0xFF	; 255
    101a:	9f ef       	ldi	r25, 0xFF	; 255
    101c:	2c c0       	rjmp	.+88     	; 0x1076 <fputc+0x6e>
    101e:	22 ff       	sbrs	r18, 2
    1020:	16 c0       	rjmp	.+44     	; 0x104e <fputc+0x46>
    1022:	46 81       	ldd	r20, Z+6	; 0x06
    1024:	57 81       	ldd	r21, Z+7	; 0x07
    1026:	24 81       	ldd	r18, Z+4	; 0x04
    1028:	35 81       	ldd	r19, Z+5	; 0x05
    102a:	42 17       	cp	r20, r18
    102c:	53 07       	cpc	r21, r19
    102e:	44 f4       	brge	.+16     	; 0x1040 <fputc+0x38>
    1030:	a0 81       	ld	r26, Z
    1032:	b1 81       	ldd	r27, Z+1	; 0x01
    1034:	9d 01       	movw	r18, r26
    1036:	2f 5f       	subi	r18, 0xFF	; 255
    1038:	3f 4f       	sbci	r19, 0xFF	; 255
    103a:	31 83       	std	Z+1, r19	; 0x01
    103c:	20 83       	st	Z, r18
    103e:	8c 93       	st	X, r24
    1040:	26 81       	ldd	r18, Z+6	; 0x06
    1042:	37 81       	ldd	r19, Z+7	; 0x07
    1044:	2f 5f       	subi	r18, 0xFF	; 255
    1046:	3f 4f       	sbci	r19, 0xFF	; 255
    1048:	37 83       	std	Z+7, r19	; 0x07
    104a:	26 83       	std	Z+6, r18	; 0x06
    104c:	14 c0       	rjmp	.+40     	; 0x1076 <fputc+0x6e>
    104e:	8b 01       	movw	r16, r22
    1050:	ec 01       	movw	r28, r24
    1052:	fb 01       	movw	r30, r22
    1054:	00 84       	ldd	r0, Z+8	; 0x08
    1056:	f1 85       	ldd	r31, Z+9	; 0x09
    1058:	e0 2d       	mov	r30, r0
    105a:	09 95       	icall
    105c:	89 2b       	or	r24, r25
    105e:	e1 f6       	brne	.-72     	; 0x1018 <fputc+0x10>
    1060:	d8 01       	movw	r26, r16
    1062:	16 96       	adiw	r26, 0x06	; 6
    1064:	8d 91       	ld	r24, X+
    1066:	9c 91       	ld	r25, X
    1068:	17 97       	sbiw	r26, 0x07	; 7
    106a:	01 96       	adiw	r24, 0x01	; 1
    106c:	17 96       	adiw	r26, 0x07	; 7
    106e:	9c 93       	st	X, r25
    1070:	8e 93       	st	-X, r24
    1072:	16 97       	sbiw	r26, 0x06	; 6
    1074:	ce 01       	movw	r24, r28
    1076:	df 91       	pop	r29
    1078:	cf 91       	pop	r28
    107a:	1f 91       	pop	r17
    107c:	0f 91       	pop	r16
    107e:	08 95       	ret

00001080 <__ultoa_invert>:
    1080:	fa 01       	movw	r30, r20
    1082:	aa 27       	eor	r26, r26
    1084:	28 30       	cpi	r18, 0x08	; 8
    1086:	51 f1       	breq	.+84     	; 0x10dc <__ultoa_invert+0x5c>
    1088:	20 31       	cpi	r18, 0x10	; 16
    108a:	81 f1       	breq	.+96     	; 0x10ec <__ultoa_invert+0x6c>
    108c:	e8 94       	clt
    108e:	6f 93       	push	r22
    1090:	6e 7f       	andi	r22, 0xFE	; 254
    1092:	6e 5f       	subi	r22, 0xFE	; 254
    1094:	7f 4f       	sbci	r23, 0xFF	; 255
    1096:	8f 4f       	sbci	r24, 0xFF	; 255
    1098:	9f 4f       	sbci	r25, 0xFF	; 255
    109a:	af 4f       	sbci	r26, 0xFF	; 255
    109c:	b1 e0       	ldi	r27, 0x01	; 1
    109e:	3e d0       	rcall	.+124    	; 0x111c <__ultoa_invert+0x9c>
    10a0:	b4 e0       	ldi	r27, 0x04	; 4
    10a2:	3c d0       	rcall	.+120    	; 0x111c <__ultoa_invert+0x9c>
    10a4:	67 0f       	add	r22, r23
    10a6:	78 1f       	adc	r23, r24
    10a8:	89 1f       	adc	r24, r25
    10aa:	9a 1f       	adc	r25, r26
    10ac:	a1 1d       	adc	r26, r1
    10ae:	68 0f       	add	r22, r24
    10b0:	79 1f       	adc	r23, r25
    10b2:	8a 1f       	adc	r24, r26
    10b4:	91 1d       	adc	r25, r1
    10b6:	a1 1d       	adc	r26, r1
    10b8:	6a 0f       	add	r22, r26
    10ba:	71 1d       	adc	r23, r1
    10bc:	81 1d       	adc	r24, r1
    10be:	91 1d       	adc	r25, r1
    10c0:	a1 1d       	adc	r26, r1
    10c2:	20 d0       	rcall	.+64     	; 0x1104 <__ultoa_invert+0x84>
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <__ultoa_invert+0x48>
    10c6:	68 94       	set
    10c8:	3f 91       	pop	r19
    10ca:	2a e0       	ldi	r18, 0x0A	; 10
    10cc:	26 9f       	mul	r18, r22
    10ce:	11 24       	eor	r1, r1
    10d0:	30 19       	sub	r19, r0
    10d2:	30 5d       	subi	r19, 0xD0	; 208
    10d4:	31 93       	st	Z+, r19
    10d6:	de f6       	brtc	.-74     	; 0x108e <__ultoa_invert+0xe>
    10d8:	cf 01       	movw	r24, r30
    10da:	08 95       	ret
    10dc:	46 2f       	mov	r20, r22
    10de:	47 70       	andi	r20, 0x07	; 7
    10e0:	40 5d       	subi	r20, 0xD0	; 208
    10e2:	41 93       	st	Z+, r20
    10e4:	b3 e0       	ldi	r27, 0x03	; 3
    10e6:	0f d0       	rcall	.+30     	; 0x1106 <__ultoa_invert+0x86>
    10e8:	c9 f7       	brne	.-14     	; 0x10dc <__ultoa_invert+0x5c>
    10ea:	f6 cf       	rjmp	.-20     	; 0x10d8 <__ultoa_invert+0x58>
    10ec:	46 2f       	mov	r20, r22
    10ee:	4f 70       	andi	r20, 0x0F	; 15
    10f0:	40 5d       	subi	r20, 0xD0	; 208
    10f2:	4a 33       	cpi	r20, 0x3A	; 58
    10f4:	18 f0       	brcs	.+6      	; 0x10fc <__ultoa_invert+0x7c>
    10f6:	49 5d       	subi	r20, 0xD9	; 217
    10f8:	31 fd       	sbrc	r19, 1
    10fa:	40 52       	subi	r20, 0x20	; 32
    10fc:	41 93       	st	Z+, r20
    10fe:	02 d0       	rcall	.+4      	; 0x1104 <__ultoa_invert+0x84>
    1100:	a9 f7       	brne	.-22     	; 0x10ec <__ultoa_invert+0x6c>
    1102:	ea cf       	rjmp	.-44     	; 0x10d8 <__ultoa_invert+0x58>
    1104:	b4 e0       	ldi	r27, 0x04	; 4
    1106:	a6 95       	lsr	r26
    1108:	97 95       	ror	r25
    110a:	87 95       	ror	r24
    110c:	77 95       	ror	r23
    110e:	67 95       	ror	r22
    1110:	ba 95       	dec	r27
    1112:	c9 f7       	brne	.-14     	; 0x1106 <__ultoa_invert+0x86>
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	61 05       	cpc	r22, r1
    1118:	71 05       	cpc	r23, r1
    111a:	08 95       	ret
    111c:	9b 01       	movw	r18, r22
    111e:	ac 01       	movw	r20, r24
    1120:	0a 2e       	mov	r0, r26
    1122:	06 94       	lsr	r0
    1124:	57 95       	ror	r21
    1126:	47 95       	ror	r20
    1128:	37 95       	ror	r19
    112a:	27 95       	ror	r18
    112c:	ba 95       	dec	r27
    112e:	c9 f7       	brne	.-14     	; 0x1122 <__ultoa_invert+0xa2>
    1130:	62 0f       	add	r22, r18
    1132:	73 1f       	adc	r23, r19
    1134:	84 1f       	adc	r24, r20
    1136:	95 1f       	adc	r25, r21
    1138:	a0 1d       	adc	r26, r0
    113a:	08 95       	ret

0000113c <_exit>:
    113c:	f8 94       	cli

0000113e <__stop_program>:
    113e:	ff cf       	rjmp	.-2      	; 0x113e <__stop_program>
