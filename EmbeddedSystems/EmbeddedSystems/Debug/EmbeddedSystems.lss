
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000a2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000a2c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e81  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084c  00000000  00000000  00001a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000955  00000000  00000000  000022a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d0  00000000  00000000  00002c00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000507  00000000  00000000  00002fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006cd  00000000  00000000  000034d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00003ba4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	41 c0       	rjmp	.+130    	; 0x88 <__bad_interrupt>
   6:	00 00       	nop
   8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
   a:	00 00       	nop
   c:	3d c0       	rjmp	.+122    	; 0x88 <__bad_interrupt>
   e:	00 00       	nop
  10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
  12:	00 00       	nop
  14:	39 c0       	rjmp	.+114    	; 0x88 <__bad_interrupt>
  16:	00 00       	nop
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
  1e:	00 00       	nop
  20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c0       	rjmp	.+98     	; 0x88 <__bad_interrupt>
  26:	00 00       	nop
  28:	2f c0       	rjmp	.+94     	; 0x88 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2d c0       	rjmp	.+90     	; 0x88 <__bad_interrupt>
  2e:	00 00       	nop
  30:	2b c0       	rjmp	.+86     	; 0x88 <__bad_interrupt>
  32:	00 00       	nop
  34:	29 c0       	rjmp	.+82     	; 0x88 <__bad_interrupt>
  36:	00 00       	nop
  38:	27 c0       	rjmp	.+78     	; 0x88 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	25 c0       	rjmp	.+74     	; 0x88 <__bad_interrupt>
  3e:	00 00       	nop
  40:	23 c0       	rjmp	.+70     	; 0x88 <__bad_interrupt>
  42:	00 00       	nop
  44:	21 c0       	rjmp	.+66     	; 0x88 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c0       	rjmp	.+62     	; 0x88 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1d c0       	rjmp	.+58     	; 0x88 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1b c0       	rjmp	.+54     	; 0x88 <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c0       	rjmp	.+50     	; 0x88 <__bad_interrupt>
  56:	00 00       	nop
  58:	17 c0       	rjmp	.+46     	; 0x88 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c0       	rjmp	.+42     	; 0x88 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c0       	rjmp	.+38     	; 0x88 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c0       	rjmp	.+34     	; 0x88 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	26 d1       	rcall	.+588    	; 0x2d2 <main>
  86:	96 c4       	rjmp	.+2348   	; 0x9b4 <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <Led_init>:

#include "Led.h"

void Led_init(void) {
  8a:	cf 93       	push	r28
  8c:	df 93       	push	r29
  8e:	cd b7       	in	r28, 0x3d	; 61
  90:	de b7       	in	r29, 0x3e	; 62
    // Set PORTB to outputs
    DDRB = 0xFF;
  92:	84 e2       	ldi	r24, 0x24	; 36
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	fc 01       	movw	r30, r24
  9a:	20 83       	st	Z, r18
}
  9c:	00 00       	nop
  9e:	df 91       	pop	r29
  a0:	cf 91       	pop	r28
  a2:	08 95       	ret

000000a4 <Led1_On>:


/**
 led1 - ioB7
 */
void Led1_On(void) {
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 7);
  ac:	85 e2       	ldi	r24, 0x25	; 37
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	25 e2       	ldi	r18, 0x25	; 37
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	f9 01       	movw	r30, r18
  b6:	20 81       	ld	r18, Z
  b8:	20 68       	ori	r18, 0x80	; 128
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18
}
  be:	00 00       	nop
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <Led1_Off>:
void Led1_Off(void) {
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 7);
  ce:	85 e2       	ldi	r24, 0x25	; 37
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	25 e2       	ldi	r18, 0x25	; 37
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	f9 01       	movw	r30, r18
  d8:	20 81       	ld	r18, Z
  da:	2f 77       	andi	r18, 0x7F	; 127
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
}
  e0:	00 00       	nop
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <Led2_On>:

/**
led2 - ioB6
*/
void Led2_On(void) {
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 6);
  f0:	85 e2       	ldi	r24, 0x25	; 37
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	25 e2       	ldi	r18, 0x25	; 37
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	f9 01       	movw	r30, r18
  fa:	20 81       	ld	r18, Z
  fc:	20 64       	ori	r18, 0x40	; 64
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
}
 102:	00 00       	nop
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <Led2_Off>:
void Led2_Off(void) {
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 6);
 112:	85 e2       	ldi	r24, 0x25	; 37
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	25 e2       	ldi	r18, 0x25	; 37
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	f9 01       	movw	r30, r18
 11c:	20 81       	ld	r18, Z
 11e:	2f 7b       	andi	r18, 0xBF	; 191
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
}
 124:	00 00       	nop
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <Led3_On>:

/**
led3 - ioB5
*/
void Led3_On(void) {
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 5);
 134:	85 e2       	ldi	r24, 0x25	; 37
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	25 e2       	ldi	r18, 0x25	; 37
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	f9 01       	movw	r30, r18
 13e:	20 81       	ld	r18, Z
 140:	20 62       	ori	r18, 0x20	; 32
 142:	fc 01       	movw	r30, r24
 144:	20 83       	st	Z, r18
}
 146:	00 00       	nop
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <Led3_Off>:
void Led3_Off(void) {
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 5);
 156:	85 e2       	ldi	r24, 0x25	; 37
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	25 e2       	ldi	r18, 0x25	; 37
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	f9 01       	movw	r30, r18
 160:	20 81       	ld	r18, Z
 162:	2f 7d       	andi	r18, 0xDF	; 223
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18
}
 168:	00 00       	nop
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <Led4_On>:

/**
led4 - ioB4
*/
void Led4_On(void) {
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 4);
 178:	85 e2       	ldi	r24, 0x25	; 37
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	25 e2       	ldi	r18, 0x25	; 37
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	f9 01       	movw	r30, r18
 182:	20 81       	ld	r18, Z
 184:	20 61       	ori	r18, 0x10	; 16
 186:	fc 01       	movw	r30, r24
 188:	20 83       	st	Z, r18
}
 18a:	00 00       	nop
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <Led4_Off>:
void Led4_Off(void) {
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 4);
 19a:	85 e2       	ldi	r24, 0x25	; 37
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	25 e2       	ldi	r18, 0x25	; 37
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	f9 01       	movw	r30, r18
 1a4:	20 81       	ld	r18, Z
 1a6:	2f 7e       	andi	r18, 0xEF	; 239
 1a8:	fc 01       	movw	r30, r24
 1aa:	20 83       	st	Z, r18
}
 1ac:	00 00       	nop
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <Taster_init>:
 ---------------------
 - DDR Reg has to be set to 0
 - PORT Reg has to be set to 1
 -> Pin is input with pull-up
 */
void Taster_init() {
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62
    // set to inputs
    DDRC &= (1 << 2);
 1bc:	87 e2       	ldi	r24, 0x27	; 39
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	27 e2       	ldi	r18, 0x27	; 39
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	f9 01       	movw	r30, r18
 1c6:	20 81       	ld	r18, Z
 1c8:	24 70       	andi	r18, 0x04	; 4
 1ca:	fc 01       	movw	r30, r24
 1cc:	20 83       	st	Z, r18
    DDRD &= ~( (1 << 7) | (1 << 6) | (1 << 5) );
 1ce:	8a e2       	ldi	r24, 0x2A	; 42
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	2a e2       	ldi	r18, 0x2A	; 42
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	f9 01       	movw	r30, r18
 1d8:	20 81       	ld	r18, Z
 1da:	2f 71       	andi	r18, 0x1F	; 31
 1dc:	fc 01       	movw	r30, r24
 1de:	20 83       	st	Z, r18
    
    // enable pull-up
    PORTC |= (1 << 2);
 1e0:	88 e2       	ldi	r24, 0x28	; 40
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	28 e2       	ldi	r18, 0x28	; 40
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	f9 01       	movw	r30, r18
 1ea:	20 81       	ld	r18, Z
 1ec:	24 60       	ori	r18, 0x04	; 4
 1ee:	fc 01       	movw	r30, r24
 1f0:	20 83       	st	Z, r18
    PORTD |= (1 << 7) | (1 << 6) | (1 << 5);
 1f2:	8b e2       	ldi	r24, 0x2B	; 43
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	2b e2       	ldi	r18, 0x2B	; 43
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	f9 01       	movw	r30, r18
 1fc:	20 81       	ld	r18, Z
 1fe:	20 6e       	ori	r18, 0xE0	; 224
 200:	fc 01       	movw	r30, r24
 202:	20 83       	st	Z, r18
}
 204:	00 00       	nop
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <Taster1_get>:

/**
 Taster1 - ioD7
 */
uint8_t Taster1_get(void) {
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	00 d0       	rcall	.+0      	; 0x212 <Taster1_get+0x6>
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
    int state = PIND;
 216:	89 e2       	ldi	r24, 0x29	; 41
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	fc 01       	movw	r30, r24
 21c:	80 81       	ld	r24, Z
 21e:	88 2f       	mov	r24, r24
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	9a 83       	std	Y+2, r25	; 0x02
 224:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<7)) == 0 ) {
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	9a 81       	ldd	r25, Y+2	; 0x02
 22a:	80 78       	andi	r24, 0x80	; 128
 22c:	99 27       	eor	r25, r25
 22e:	89 2b       	or	r24, r25
 230:	11 f4       	brne	.+4      	; 0x236 <Taster1_get+0x2a>
        return TASTER_RETURN_VALUE_LOW;
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	01 c0       	rjmp	.+2      	; 0x238 <Taster1_get+0x2c>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
 236:	80 e0       	ldi	r24, 0x00	; 0
    }
}
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <Taster2_get>:

/**
Taster2 - ioD6
*/
uint8_t Taster2_get(void) {
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	1f 92       	push	r1
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
    uint8_t state = PIND;
 24c:	89 e2       	ldi	r24, 0x29	; 41
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	fc 01       	movw	r30, r24
 252:	80 81       	ld	r24, Z
 254:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<6)) == 0 ) {
 256:	89 81       	ldd	r24, Y+1	; 0x01
 258:	88 2f       	mov	r24, r24
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	80 74       	andi	r24, 0x40	; 64
 25e:	99 27       	eor	r25, r25
 260:	89 2b       	or	r24, r25
 262:	11 f4       	brne	.+4      	; 0x268 <Taster2_get+0x26>
        return TASTER_RETURN_VALUE_LOW;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	01 c0       	rjmp	.+2      	; 0x26a <Taster2_get+0x28>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
 268:	80 e0       	ldi	r24, 0x00	; 0
    }
}
 26a:	0f 90       	pop	r0
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <Taster3_get>:

/**
Taster3 - ioD5
*/
uint8_t Taster3_get(void) {
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	1f 92       	push	r1
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
    uint8_t state = PIND;
 27c:	89 e2       	ldi	r24, 0x29	; 41
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	fc 01       	movw	r30, r24
 282:	80 81       	ld	r24, Z
 284:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<5)) == 0 ) {
 286:	89 81       	ldd	r24, Y+1	; 0x01
 288:	88 2f       	mov	r24, r24
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	80 72       	andi	r24, 0x20	; 32
 28e:	99 27       	eor	r25, r25
 290:	89 2b       	or	r24, r25
 292:	11 f4       	brne	.+4      	; 0x298 <Taster3_get+0x26>
        return TASTER_RETURN_VALUE_LOW;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	01 c0       	rjmp	.+2      	; 0x29a <Taster3_get+0x28>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
 298:	80 e0       	ldi	r24, 0x00	; 0
    }
}
 29a:	0f 90       	pop	r0
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <Taster4_get>:

/**
Taster4 - ioC2
*/
uint8_t Taster4_get(void) {
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	1f 92       	push	r1
 2a8:	cd b7       	in	r28, 0x3d	; 61
 2aa:	de b7       	in	r29, 0x3e	; 62
    uint8_t state = PINC;
 2ac:	86 e2       	ldi	r24, 0x26	; 38
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	fc 01       	movw	r30, r24
 2b2:	80 81       	ld	r24, Z
 2b4:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<2)) == 0 ) {
 2b6:	89 81       	ldd	r24, Y+1	; 0x01
 2b8:	88 2f       	mov	r24, r24
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	84 70       	andi	r24, 0x04	; 4
 2be:	99 27       	eor	r25, r25
 2c0:	89 2b       	or	r24, r25
 2c2:	11 f4       	brne	.+4      	; 0x2c8 <Taster4_get+0x26>
        return TASTER_RETURN_VALUE_LOW;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	01 c0       	rjmp	.+2      	; 0x2ca <Taster4_get+0x28>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
 2c8:	80 e0       	ldi	r24, 0x00	; 0
    }
}
 2ca:	0f 90       	pop	r0
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	08 95       	ret

000002d2 <main>:
#include "gpio/Taster.h"
#include "gpio/Led.h"
#include "playground/Playground.h"


int main(void) {
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
	
    Led_init();
 2da:	d7 de       	rcall	.-594    	; 0x8a <Led_init>
	Taster_init();
 2dc:	6b df       	rcall	.-298    	; 0x1b4 <Taster_init>
	
    while (1) {
        playground();
 2de:	01 d0       	rcall	.+2      	; 0x2e2 <playground>
 2e0:	fe cf       	rjmp	.-4      	; 0x2de <main+0xc>

000002e2 <playground>:
    }
 2e2:	cf 93       	push	r28
- button1 pressed -> testTasterLed()
- button2 pressed -> testBoard()
- button3 pressed -> lauflicht()
- button4 pressed -> increment()
*/
void playground() {
 2e4:	df 93       	push	r29
 2e6:	cd b7       	in	r28, 0x3d	; 61
 2e8:	de b7       	in	r29, 0x3e	; 62
 2ea:	2e 97       	sbiw	r28, 0x0e	; 14
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	f8 94       	cli
 2f0:	de bf       	out	0x3e, r29	; 62
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	cd bf       	out	0x3d, r28	; 61
    static int mode = 0;
    
    if (mode == 0) {    // mode selection
 2f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2fa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2fe:	89 2b       	or	r24, r25
 300:	49 f5       	brne	.+82     	; 0x354 <playground+0x72>
        
        // test buttons
        if (Taster1_get()) {
 302:	84 df       	rcall	.-248    	; 0x20c <Taster1_get>
 304:	89 2b       	or	r24, r25
 306:	39 f0       	breq	.+14     	; 0x316 <playground+0x34>
            mode = 1;
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 310:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
        } else if (Taster2_get()) {
 314:	b6 c0       	rjmp	.+364    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 316:	95 df       	rcall	.-214    	; 0x242 <Taster2_get>
 318:	89 2b       	or	r24, r25
 31a:	39 f0       	breq	.+14     	; 0x32a <playground+0x48>
            mode = 2;
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 324:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
        } else if (Taster3_get()) {
 328:	ac c0       	rjmp	.+344    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 32a:	a3 df       	rcall	.-186    	; 0x272 <Taster3_get>
 32c:	89 2b       	or	r24, r25
 32e:	39 f0       	breq	.+14     	; 0x33e <playground+0x5c>
            mode = 3;
 330:	83 e0       	ldi	r24, 0x03	; 3
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 338:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
        } else if (Taster4_get()) {
 33c:	a2 c0       	rjmp	.+324    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 33e:	b1 df       	rcall	.-158    	; 0x2a2 <Taster4_get>
 340:	89 2b       	or	r24, r25
 342:	09 f4       	brne	.+2      	; 0x346 <playground+0x64>
 344:	9e c0       	rjmp	.+316    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
            mode = 4;
 346:	84 e0       	ldi	r24, 0x04	; 4
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 34e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
        }
        
    } else {    // run
        
        // reset if button 1 and button 2 are pressed
        if (Taster1_get() && Taster2_get()) {
 352:	97 c0       	rjmp	.+302    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 354:	5b df       	rcall	.-330    	; 0x20c <Taster1_get>
 356:	89 2b       	or	r24, r25
 358:	09 f4       	brne	.+2      	; 0x35c <playground+0x7a>
 35a:	74 c0       	rjmp	.+232    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 35c:	72 df       	rcall	.-284    	; 0x242 <Taster2_get>
 35e:	89 2b       	or	r24, r25
 360:	09 f4       	brne	.+2      	; 0x364 <playground+0x82>
 362:	70 c0       	rjmp	.+224    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
            mode = 0;
 364:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 368:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	aa e7       	ldi	r26, 0x7A	; 122
 372:	b4 e4       	ldi	r27, 0x44	; 68
 374:	89 83       	std	Y+1, r24	; 0x01
 376:	9a 83       	std	Y+2, r25	; 0x02
 378:	ab 83       	std	Y+3, r26	; 0x03
 37a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 37c:	20 e0       	ldi	r18, 0x00	; 0
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	4a e7       	ldi	r20, 0x7A	; 122
 382:	53 e4       	ldi	r21, 0x43	; 67
 384:	69 81       	ldd	r22, Y+1	; 0x01
 386:	7a 81       	ldd	r23, Y+2	; 0x02
 388:	8b 81       	ldd	r24, Y+3	; 0x03
 38a:	9c 81       	ldd	r25, Y+4	; 0x04
 38c:	88 d2       	rcall	.+1296   	; 0x89e <__mulsf3>
 38e:	dc 01       	movw	r26, r24
 390:	cb 01       	movw	r24, r22
 392:	8d 83       	std	Y+5, r24	; 0x05
 394:	9e 83       	std	Y+6, r25	; 0x06
 396:	af 83       	std	Y+7, r26	; 0x07
 398:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 39a:	20 e0       	ldi	r18, 0x00	; 0
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	40 e8       	ldi	r20, 0x80	; 128
 3a0:	5f e3       	ldi	r21, 0x3F	; 63
 3a2:	6d 81       	ldd	r22, Y+5	; 0x05
 3a4:	7e 81       	ldd	r23, Y+6	; 0x06
 3a6:	8f 81       	ldd	r24, Y+7	; 0x07
 3a8:	98 85       	ldd	r25, Y+8	; 0x08
 3aa:	f8 d1       	rcall	.+1008   	; 0x79c <__cmpsf2>
 3ac:	88 23       	and	r24, r24
 3ae:	2c f4       	brge	.+10     	; 0x3ba <playground+0xd8>
		__ticks = 1;
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	9a 87       	std	Y+10, r25	; 0x0a
 3b6:	89 87       	std	Y+9, r24	; 0x09
 3b8:	3b c0       	rjmp	.+118    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	else if (__tmp > 65535)
 3ba:	20 e0       	ldi	r18, 0x00	; 0
 3bc:	3f ef       	ldi	r19, 0xFF	; 255
 3be:	4f e7       	ldi	r20, 0x7F	; 127
 3c0:	57 e4       	ldi	r21, 0x47	; 71
 3c2:	6d 81       	ldd	r22, Y+5	; 0x05
 3c4:	7e 81       	ldd	r23, Y+6	; 0x06
 3c6:	8f 81       	ldd	r24, Y+7	; 0x07
 3c8:	98 85       	ldd	r25, Y+8	; 0x08
 3ca:	65 d2       	rcall	.+1226   	; 0x896 <__gesf2>
 3cc:	18 16       	cp	r1, r24
 3ce:	3c f5       	brge	.+78     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3d0:	20 e0       	ldi	r18, 0x00	; 0
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	40 e2       	ldi	r20, 0x20	; 32
 3d6:	51 e4       	ldi	r21, 0x41	; 65
 3d8:	69 81       	ldd	r22, Y+1	; 0x01
 3da:	7a 81       	ldd	r23, Y+2	; 0x02
 3dc:	8b 81       	ldd	r24, Y+3	; 0x03
 3de:	9c 81       	ldd	r25, Y+4	; 0x04
 3e0:	5e d2       	rcall	.+1212   	; 0x89e <__mulsf3>
 3e2:	dc 01       	movw	r26, r24
 3e4:	cb 01       	movw	r24, r22
 3e6:	bc 01       	movw	r22, r24
 3e8:	cd 01       	movw	r24, r26
 3ea:	dc d1       	rcall	.+952    	; 0x7a4 <__fixunssfsi>
 3ec:	dc 01       	movw	r26, r24
 3ee:	cb 01       	movw	r24, r22
 3f0:	9a 87       	std	Y+10, r25	; 0x0a
 3f2:	89 87       	std	Y+9, r24	; 0x09
 3f4:	0f c0       	rjmp	.+30     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3f6:	89 e1       	ldi	r24, 0x19	; 25
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	9c 87       	std	Y+12, r25	; 0x0c
 3fc:	8b 87       	std	Y+11, r24	; 0x0b
 3fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 400:	9c 85       	ldd	r25, Y+12	; 0x0c
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	f1 f7       	brne	.-4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 406:	9c 87       	std	Y+12, r25	; 0x0c
 408:	8b 87       	std	Y+11, r24	; 0x0b
 40a:	89 85       	ldd	r24, Y+9	; 0x09
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 40c:	9a 85       	ldd	r25, Y+10	; 0x0a
 40e:	01 97       	sbiw	r24, 0x01	; 1
 410:	9a 87       	std	Y+10, r25	; 0x0a
 412:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 414:	89 85       	ldd	r24, Y+9	; 0x09
 416:	9a 85       	ldd	r25, Y+10	; 0x0a
 418:	89 2b       	or	r24, r25
 41a:	69 f7       	brne	.-38     	; 0x3f6 <playground+0x114>
 41c:	13 c0       	rjmp	.+38     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 41e:	6d 81       	ldd	r22, Y+5	; 0x05
 420:	7e 81       	ldd	r23, Y+6	; 0x06
 422:	8f 81       	ldd	r24, Y+7	; 0x07
 424:	98 85       	ldd	r25, Y+8	; 0x08
 426:	be d1       	rcall	.+892    	; 0x7a4 <__fixunssfsi>
 428:	dc 01       	movw	r26, r24
 42a:	cb 01       	movw	r24, r22
 42c:	9a 87       	std	Y+10, r25	; 0x0a
 42e:	89 87       	std	Y+9, r24	; 0x09
 430:	89 85       	ldd	r24, Y+9	; 0x09
 432:	9a 85       	ldd	r25, Y+10	; 0x0a
 434:	9e 87       	std	Y+14, r25	; 0x0e
 436:	8d 87       	std	Y+13, r24	; 0x0d
 438:	8d 85       	ldd	r24, Y+13	; 0x0d
 43a:	9e 85       	ldd	r25, Y+14	; 0x0e
 43c:	01 97       	sbiw	r24, 0x01	; 1
 43e:	f1 f7       	brne	.-4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 440:	9e 87       	std	Y+14, r25	; 0x0e
 442:	8d 87       	std	Y+13, r24	; 0x0d
 444:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
            _delay_ms(1000);
        }
        
        // execute
        switch (mode) {
 448:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 44c:	82 30       	cpi	r24, 0x02	; 2
 44e:	91 05       	cpc	r25, r1
 450:	71 f0       	breq	.+28     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 452:	83 30       	cpi	r24, 0x03	; 3
 454:	91 05       	cpc	r25, r1
 456:	1c f4       	brge	.+6      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	39 f0       	breq	.+14     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 45c:	0d c0       	rjmp	.+26     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 45e:	83 30       	cpi	r24, 0x03	; 3
 460:	91 05       	cpc	r25, r1
 462:	39 f0       	breq	.+14     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
            case 1:
                testTasterLed();
 464:	04 97       	sbiw	r24, 0x04	; 4
 466:	31 f0       	breq	.+12     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
                break;
 468:	07 c0       	rjmp	.+14     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
            case 2:
                testBoard();
 46a:	78 d1       	rcall	.+752    	; 0x75c <testTasterLed>
 46c:	0a c0       	rjmp	.+20     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
                break;
 46e:	6f d0       	rcall	.+222    	; 0x54e <testBoard>
            case 3:
                lauflicht();
 470:	08 c0       	rjmp	.+16     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 472:	11 d0       	rcall	.+34     	; 0x496 <lauflicht>
            case 4:
                increment();
 474:	18 d0       	rcall	.+48     	; 0x4a6 <increment>
 476:	05 c0       	rjmp	.+10     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
                break;
 478:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
            default:
                mode = 0;
 47c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 480:	00 00       	nop
                break;
 482:	00 00       	nop
        }
    }
}
 484:	2e 96       	adiw	r28, 0x0e	; 14
 486:	0f b6       	in	r0, 0x3f	; 63
 488:	f8 94       	cli
 48a:	de bf       	out	0x3e, r29	; 62
 48c:	0f be       	out	0x3f, r0	; 63
 48e:	cd bf       	out	0x3d, r28	; 61
 490:	df 91       	pop	r29
 492:	cf 91       	pop	r28
 494:	08 95       	ret

00000496 <lauflicht>:
 496:	cf 93       	push	r28

void lauflicht() {
 498:	df 93       	push	r29
 49a:	cd b7       	in	r28, 0x3d	; 61
 49c:	de b7       	in	r29, 0x3e	; 62
    // TODO
}
 49e:	00 00       	nop
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	08 95       	ret

000004a6 <increment>:

/**
 Increment if button 1 is pressed, decrement if button 2 is pressed
 */
void increment() {
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
 4aa:	00 d0       	rcall	.+0      	; 0x4ac <increment+0x6>
 4ac:	00 d0       	rcall	.+0      	; 0x4ae <increment+0x8>
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
    static int count = 0;
    if (Taster1_get()) {
 4b2:	ac de       	rcall	.-680    	; 0x20c <Taster1_get>
 4b4:	89 2b       	or	r24, r25
 4b6:	51 f0       	breq	.+20     	; 0x4cc <increment+0x26>
        count++;
 4b8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count.1760>
 4bc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count.1760+0x1>
 4c0:	01 96       	adiw	r24, 0x01	; 1
 4c2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <count.1760+0x1>
 4c6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count.1760>
    }else if (Taster2_get()) {
 4ca:	13 c0       	rjmp	.+38     	; 0x4f2 <increment+0x4c>
 4cc:	ba de       	rcall	.-652    	; 0x242 <Taster2_get>
 4ce:	89 2b       	or	r24, r25
 4d0:	81 f0       	breq	.+32     	; 0x4f2 <increment+0x4c>
        if (count > 0) {
 4d2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count.1760>
 4d6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count.1760+0x1>
 4da:	18 16       	cp	r1, r24
 4dc:	19 06       	cpc	r1, r25
 4de:	4c f4       	brge	.+18     	; 0x4f2 <increment+0x4c>
            count--;
 4e0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count.1760>
 4e4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count.1760+0x1>
 4e8:	01 97       	sbiw	r24, 0x01	; 1
 4ea:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <count.1760+0x1>
 4ee:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count.1760>
        }
    }
    
    int ledByte = 0;
 4f2:	1a 82       	std	Y+2, r1	; 0x02
 4f4:	19 82       	std	Y+1, r1	; 0x01
    for (int i = 0; i < count; i++) {
 4f6:	1c 82       	std	Y+4, r1	; 0x04
 4f8:	1b 82       	std	Y+3, r1	; 0x03
 4fa:	10 c0       	rjmp	.+32     	; 0x51c <increment+0x76>
        ledByte = ledByte << 1;
 4fc:	89 81       	ldd	r24, Y+1	; 0x01
 4fe:	9a 81       	ldd	r25, Y+2	; 0x02
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	9a 83       	std	Y+2, r25	; 0x02
 506:	89 83       	std	Y+1, r24	; 0x01
        ledByte++;
 508:	89 81       	ldd	r24, Y+1	; 0x01
 50a:	9a 81       	ldd	r25, Y+2	; 0x02
 50c:	01 96       	adiw	r24, 0x01	; 1
 50e:	9a 83       	std	Y+2, r25	; 0x02
 510:	89 83       	std	Y+1, r24	; 0x01
            count--;
        }
    }
    
    int ledByte = 0;
    for (int i = 0; i < count; i++) {
 512:	8b 81       	ldd	r24, Y+3	; 0x03
 514:	9c 81       	ldd	r25, Y+4	; 0x04
 516:	01 96       	adiw	r24, 0x01	; 1
 518:	9c 83       	std	Y+4, r25	; 0x04
 51a:	8b 83       	std	Y+3, r24	; 0x03
 51c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count.1760>
 520:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count.1760+0x1>
 524:	2b 81       	ldd	r18, Y+3	; 0x03
 526:	3c 81       	ldd	r19, Y+4	; 0x04
 528:	28 17       	cp	r18, r24
 52a:	39 07       	cpc	r19, r25
 52c:	3c f3       	brlt	.-50     	; 0x4fc <increment+0x56>
        ledByte = ledByte << 1;
        ledByte++;
    }
    PORTB = count;
 52e:	85 e2       	ldi	r24, 0x25	; 37
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <count.1760>
 536:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <count.1760+0x1>
 53a:	fc 01       	movw	r30, r24
 53c:	20 83       	st	Z, r18
}
 53e:	00 00       	nop
 540:	0f 90       	pop	r0
 542:	0f 90       	pop	r0
 544:	0f 90       	pop	r0
 546:	0f 90       	pop	r0
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	08 95       	ret

0000054e <testBoard>:

void testBoard() {
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	cd b7       	in	r28, 0x3d	; 61
 554:	de b7       	in	r29, 0x3e	; 62
 556:	6c 97       	sbiw	r28, 0x1c	; 28
 558:	0f b6       	in	r0, 0x3f	; 63
 55a:	f8 94       	cli
 55c:	de bf       	out	0x3e, r29	; 62
 55e:	0f be       	out	0x3f, r0	; 63
 560:	cd bf       	out	0x3d, r28	; 61
    static int state_testBoard = 0;
    if (state_testBoard) {
 562:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <state_testBoard.1770>
 566:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <state_testBoard.1770+0x1>
 56a:	89 2b       	or	r24, r25
 56c:	09 f4       	brne	.+2      	; 0x570 <testBoard+0x22>
 56e:	75 c0       	rjmp	.+234    	; 0x65a <testBoard+0x10c>
		state_testBoard = 0;
 570:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <state_testBoard.1770+0x1>
 574:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <state_testBoard.1770>
        PORTB = 0x00;
 578:	85 e2       	ldi	r24, 0x25	; 37
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	fc 01       	movw	r30, r24
 57e:	10 82       	st	Z, r1
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	aa ef       	ldi	r26, 0xFA	; 250
 586:	b3 e4       	ldi	r27, 0x43	; 67
 588:	8d 83       	std	Y+5, r24	; 0x05
 58a:	9e 83       	std	Y+6, r25	; 0x06
 58c:	af 83       	std	Y+7, r26	; 0x07
 58e:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 590:	20 e0       	ldi	r18, 0x00	; 0
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	4a e7       	ldi	r20, 0x7A	; 122
 596:	53 e4       	ldi	r21, 0x43	; 67
 598:	6d 81       	ldd	r22, Y+5	; 0x05
 59a:	7e 81       	ldd	r23, Y+6	; 0x06
 59c:	8f 81       	ldd	r24, Y+7	; 0x07
 59e:	98 85       	ldd	r25, Y+8	; 0x08
 5a0:	7e d1       	rcall	.+764    	; 0x89e <__mulsf3>
 5a2:	dc 01       	movw	r26, r24
 5a4:	cb 01       	movw	r24, r22
 5a6:	89 87       	std	Y+9, r24	; 0x09
 5a8:	9a 87       	std	Y+10, r25	; 0x0a
 5aa:	ab 87       	std	Y+11, r26	; 0x0b
 5ac:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 5ae:	20 e0       	ldi	r18, 0x00	; 0
 5b0:	30 e0       	ldi	r19, 0x00	; 0
 5b2:	40 e8       	ldi	r20, 0x80	; 128
 5b4:	5f e3       	ldi	r21, 0x3F	; 63
 5b6:	69 85       	ldd	r22, Y+9	; 0x09
 5b8:	7a 85       	ldd	r23, Y+10	; 0x0a
 5ba:	8b 85       	ldd	r24, Y+11	; 0x0b
 5bc:	9c 85       	ldd	r25, Y+12	; 0x0c
 5be:	ee d0       	rcall	.+476    	; 0x79c <__cmpsf2>
 5c0:	88 23       	and	r24, r24
 5c2:	2c f4       	brge	.+10     	; 0x5ce <testBoard+0x80>
		__ticks = 1;
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	9e 87       	std	Y+14, r25	; 0x0e
 5ca:	8d 87       	std	Y+13, r24	; 0x0d
 5cc:	3b c0       	rjmp	.+118    	; 0x644 <testBoard+0xf6>
	else if (__tmp > 65535)
 5ce:	20 e0       	ldi	r18, 0x00	; 0
 5d0:	3f ef       	ldi	r19, 0xFF	; 255
 5d2:	4f e7       	ldi	r20, 0x7F	; 127
 5d4:	57 e4       	ldi	r21, 0x47	; 71
 5d6:	69 85       	ldd	r22, Y+9	; 0x09
 5d8:	7a 85       	ldd	r23, Y+10	; 0x0a
 5da:	8b 85       	ldd	r24, Y+11	; 0x0b
 5dc:	9c 85       	ldd	r25, Y+12	; 0x0c
 5de:	5b d1       	rcall	.+694    	; 0x896 <__gesf2>
 5e0:	18 16       	cp	r1, r24
 5e2:	3c f5       	brge	.+78     	; 0x632 <testBoard+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 5e4:	20 e0       	ldi	r18, 0x00	; 0
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	40 e2       	ldi	r20, 0x20	; 32
 5ea:	51 e4       	ldi	r21, 0x41	; 65
 5ec:	6d 81       	ldd	r22, Y+5	; 0x05
 5ee:	7e 81       	ldd	r23, Y+6	; 0x06
 5f0:	8f 81       	ldd	r24, Y+7	; 0x07
 5f2:	98 85       	ldd	r25, Y+8	; 0x08
 5f4:	54 d1       	rcall	.+680    	; 0x89e <__mulsf3>
 5f6:	dc 01       	movw	r26, r24
 5f8:	cb 01       	movw	r24, r22
 5fa:	bc 01       	movw	r22, r24
 5fc:	cd 01       	movw	r24, r26
 5fe:	d2 d0       	rcall	.+420    	; 0x7a4 <__fixunssfsi>
 600:	dc 01       	movw	r26, r24
 602:	cb 01       	movw	r24, r22
 604:	9e 87       	std	Y+14, r25	; 0x0e
 606:	8d 87       	std	Y+13, r24	; 0x0d
 608:	0f c0       	rjmp	.+30     	; 0x628 <testBoard+0xda>
 60a:	89 e1       	ldi	r24, 0x19	; 25
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	98 8b       	std	Y+16, r25	; 0x10
 610:	8f 87       	std	Y+15, r24	; 0x0f
 612:	8f 85       	ldd	r24, Y+15	; 0x0f
 614:	98 89       	ldd	r25, Y+16	; 0x10
 616:	01 97       	sbiw	r24, 0x01	; 1
 618:	f1 f7       	brne	.-4      	; 0x616 <testBoard+0xc8>
 61a:	98 8b       	std	Y+16, r25	; 0x10
 61c:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 61e:	8d 85       	ldd	r24, Y+13	; 0x0d
 620:	9e 85       	ldd	r25, Y+14	; 0x0e
 622:	01 97       	sbiw	r24, 0x01	; 1
 624:	9e 87       	std	Y+14, r25	; 0x0e
 626:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 628:	8d 85       	ldd	r24, Y+13	; 0x0d
 62a:	9e 85       	ldd	r25, Y+14	; 0x0e
 62c:	89 2b       	or	r24, r25
 62e:	69 f7       	brne	.-38     	; 0x60a <testBoard+0xbc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 630:	8b c0       	rjmp	.+278    	; 0x748 <testBoard+0x1fa>
 632:	69 85       	ldd	r22, Y+9	; 0x09
 634:	7a 85       	ldd	r23, Y+10	; 0x0a
 636:	8b 85       	ldd	r24, Y+11	; 0x0b
 638:	9c 85       	ldd	r25, Y+12	; 0x0c
 63a:	b4 d0       	rcall	.+360    	; 0x7a4 <__fixunssfsi>
 63c:	dc 01       	movw	r26, r24
 63e:	cb 01       	movw	r24, r22
 640:	9e 87       	std	Y+14, r25	; 0x0e
 642:	8d 87       	std	Y+13, r24	; 0x0d
 644:	8d 85       	ldd	r24, Y+13	; 0x0d
 646:	9e 85       	ldd	r25, Y+14	; 0x0e
 648:	9a 8b       	std	Y+18, r25	; 0x12
 64a:	89 8b       	std	Y+17, r24	; 0x11
 64c:	89 89       	ldd	r24, Y+17	; 0x11
 64e:	9a 89       	ldd	r25, Y+18	; 0x12
 650:	01 97       	sbiw	r24, 0x01	; 1
 652:	f1 f7       	brne	.-4      	; 0x650 <testBoard+0x102>
 654:	9a 8b       	std	Y+18, r25	; 0x12
 656:	89 8b       	std	Y+17, r24	; 0x11
    }else {
		state_testBoard = 1;
        PORTB = 0xFF;
        _delay_ms(500);
    }
}
 658:	77 c0       	rjmp	.+238    	; 0x748 <testBoard+0x1fa>
    if (state_testBoard) {
		state_testBoard = 0;
        PORTB = 0x00;
        _delay_ms(500);
    }else {
		state_testBoard = 1;
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <state_testBoard.1770+0x1>
 662:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state_testBoard.1770>
        PORTB = 0xFF;
 666:	85 e2       	ldi	r24, 0x25	; 37
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	2f ef       	ldi	r18, 0xFF	; 255
 66c:	fc 01       	movw	r30, r24
 66e:	20 83       	st	Z, r18
 670:	80 e0       	ldi	r24, 0x00	; 0
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	aa ef       	ldi	r26, 0xFA	; 250
 676:	b3 e4       	ldi	r27, 0x43	; 67
 678:	89 83       	std	Y+1, r24	; 0x01
 67a:	9a 83       	std	Y+2, r25	; 0x02
 67c:	ab 83       	std	Y+3, r26	; 0x03
 67e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 680:	20 e0       	ldi	r18, 0x00	; 0
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	4a e7       	ldi	r20, 0x7A	; 122
 686:	53 e4       	ldi	r21, 0x43	; 67
 688:	69 81       	ldd	r22, Y+1	; 0x01
 68a:	7a 81       	ldd	r23, Y+2	; 0x02
 68c:	8b 81       	ldd	r24, Y+3	; 0x03
 68e:	9c 81       	ldd	r25, Y+4	; 0x04
 690:	06 d1       	rcall	.+524    	; 0x89e <__mulsf3>
 692:	dc 01       	movw	r26, r24
 694:	cb 01       	movw	r24, r22
 696:	8b 8b       	std	Y+19, r24	; 0x13
 698:	9c 8b       	std	Y+20, r25	; 0x14
 69a:	ad 8b       	std	Y+21, r26	; 0x15
 69c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 69e:	20 e0       	ldi	r18, 0x00	; 0
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	40 e8       	ldi	r20, 0x80	; 128
 6a4:	5f e3       	ldi	r21, 0x3F	; 63
 6a6:	6b 89       	ldd	r22, Y+19	; 0x13
 6a8:	7c 89       	ldd	r23, Y+20	; 0x14
 6aa:	8d 89       	ldd	r24, Y+21	; 0x15
 6ac:	9e 89       	ldd	r25, Y+22	; 0x16
 6ae:	76 d0       	rcall	.+236    	; 0x79c <__cmpsf2>
 6b0:	88 23       	and	r24, r24
 6b2:	2c f4       	brge	.+10     	; 0x6be <testBoard+0x170>
		__ticks = 1;
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	98 8f       	std	Y+24, r25	; 0x18
 6ba:	8f 8b       	std	Y+23, r24	; 0x17
 6bc:	3b c0       	rjmp	.+118    	; 0x734 <testBoard+0x1e6>
	else if (__tmp > 65535)
 6be:	20 e0       	ldi	r18, 0x00	; 0
 6c0:	3f ef       	ldi	r19, 0xFF	; 255
 6c2:	4f e7       	ldi	r20, 0x7F	; 127
 6c4:	57 e4       	ldi	r21, 0x47	; 71
 6c6:	6b 89       	ldd	r22, Y+19	; 0x13
 6c8:	7c 89       	ldd	r23, Y+20	; 0x14
 6ca:	8d 89       	ldd	r24, Y+21	; 0x15
 6cc:	9e 89       	ldd	r25, Y+22	; 0x16
 6ce:	e3 d0       	rcall	.+454    	; 0x896 <__gesf2>
 6d0:	18 16       	cp	r1, r24
 6d2:	3c f5       	brge	.+78     	; 0x722 <testBoard+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 6d4:	20 e0       	ldi	r18, 0x00	; 0
 6d6:	30 e0       	ldi	r19, 0x00	; 0
 6d8:	40 e2       	ldi	r20, 0x20	; 32
 6da:	51 e4       	ldi	r21, 0x41	; 65
 6dc:	69 81       	ldd	r22, Y+1	; 0x01
 6de:	7a 81       	ldd	r23, Y+2	; 0x02
 6e0:	8b 81       	ldd	r24, Y+3	; 0x03
 6e2:	9c 81       	ldd	r25, Y+4	; 0x04
 6e4:	dc d0       	rcall	.+440    	; 0x89e <__mulsf3>
 6e6:	dc 01       	movw	r26, r24
 6e8:	cb 01       	movw	r24, r22
 6ea:	bc 01       	movw	r22, r24
 6ec:	cd 01       	movw	r24, r26
 6ee:	5a d0       	rcall	.+180    	; 0x7a4 <__fixunssfsi>
 6f0:	dc 01       	movw	r26, r24
 6f2:	cb 01       	movw	r24, r22
 6f4:	98 8f       	std	Y+24, r25	; 0x18
 6f6:	8f 8b       	std	Y+23, r24	; 0x17
 6f8:	0f c0       	rjmp	.+30     	; 0x718 <testBoard+0x1ca>
 6fa:	89 e1       	ldi	r24, 0x19	; 25
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	9a 8f       	std	Y+26, r25	; 0x1a
 700:	89 8f       	std	Y+25, r24	; 0x19
 702:	89 8d       	ldd	r24, Y+25	; 0x19
 704:	9a 8d       	ldd	r25, Y+26	; 0x1a
 706:	01 97       	sbiw	r24, 0x01	; 1
 708:	f1 f7       	brne	.-4      	; 0x706 <testBoard+0x1b8>
 70a:	9a 8f       	std	Y+26, r25	; 0x1a
 70c:	89 8f       	std	Y+25, r24	; 0x19
 70e:	8f 89       	ldd	r24, Y+23	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 710:	98 8d       	ldd	r25, Y+24	; 0x18
 712:	01 97       	sbiw	r24, 0x01	; 1
 714:	98 8f       	std	Y+24, r25	; 0x18
 716:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 718:	8f 89       	ldd	r24, Y+23	; 0x17
 71a:	98 8d       	ldd	r25, Y+24	; 0x18
 71c:	89 2b       	or	r24, r25
 71e:	69 f7       	brne	.-38     	; 0x6fa <testBoard+0x1ac>
        _delay_ms(500);
    }
}
 720:	13 c0       	rjmp	.+38     	; 0x748 <testBoard+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 722:	6b 89       	ldd	r22, Y+19	; 0x13
 724:	7c 89       	ldd	r23, Y+20	; 0x14
 726:	8d 89       	ldd	r24, Y+21	; 0x15
 728:	9e 89       	ldd	r25, Y+22	; 0x16
 72a:	3c d0       	rcall	.+120    	; 0x7a4 <__fixunssfsi>
 72c:	dc 01       	movw	r26, r24
 72e:	cb 01       	movw	r24, r22
 730:	98 8f       	std	Y+24, r25	; 0x18
 732:	8f 8b       	std	Y+23, r24	; 0x17
 734:	8f 89       	ldd	r24, Y+23	; 0x17
 736:	98 8d       	ldd	r25, Y+24	; 0x18
 738:	9c 8f       	std	Y+28, r25	; 0x1c
 73a:	8b 8f       	std	Y+27, r24	; 0x1b
 73c:	8b 8d       	ldd	r24, Y+27	; 0x1b
 73e:	9c 8d       	ldd	r25, Y+28	; 0x1c
 740:	01 97       	sbiw	r24, 0x01	; 1
 742:	f1 f7       	brne	.-4      	; 0x740 <testBoard+0x1f2>
 744:	9c 8f       	std	Y+28, r25	; 0x1c
 746:	8b 8f       	std	Y+27, r24	; 0x1b
 748:	00 00       	nop
 74a:	6c 96       	adiw	r28, 0x1c	; 28
 74c:	0f b6       	in	r0, 0x3f	; 63
 74e:	f8 94       	cli
 750:	de bf       	out	0x3e, r29	; 62
 752:	0f be       	out	0x3f, r0	; 63
 754:	cd bf       	out	0x3d, r28	; 61
 756:	df 91       	pop	r29
 758:	cf 91       	pop	r28
 75a:	08 95       	ret

0000075c <testTasterLed>:
 75c:	cf 93       	push	r28

void testTasterLed() {
 75e:	df 93       	push	r29
 760:	cd b7       	in	r28, 0x3d	; 61
 762:	de b7       	in	r29, 0x3e	; 62
    if (Taster1_get()) {
 764:	53 dd       	rcall	.-1370   	; 0x20c <Taster1_get>
 766:	89 2b       	or	r24, r25
 768:	11 f0       	breq	.+4      	; 0x76e <testTasterLed+0x12>
        Led1_On();
 76a:	9c dc       	rcall	.-1736   	; 0xa4 <Led1_On>
 76c:	01 c0       	rjmp	.+2      	; 0x770 <testTasterLed+0x14>
    }else {
        Led1_Off();
 76e:	ab dc       	rcall	.-1706   	; 0xc6 <Led1_Off>
 770:	68 dd       	rcall	.-1328   	; 0x242 <Taster2_get>
    }
    if (Taster2_get()) {
 772:	89 2b       	or	r24, r25
 774:	11 f0       	breq	.+4      	; 0x77a <testTasterLed+0x1e>
        Led2_On();
 776:	b8 dc       	rcall	.-1680   	; 0xe8 <Led2_On>
 778:	01 c0       	rjmp	.+2      	; 0x77c <testTasterLed+0x20>
    }else {
        Led2_Off();
 77a:	c7 dc       	rcall	.-1650   	; 0x10a <Led2_Off>
    }
    if (Taster3_get()) {
 77c:	7a dd       	rcall	.-1292   	; 0x272 <Taster3_get>
 77e:	89 2b       	or	r24, r25
 780:	11 f0       	breq	.+4      	; 0x786 <testTasterLed+0x2a>
        Led3_On();
 782:	d4 dc       	rcall	.-1624   	; 0x12c <Led3_On>
 784:	01 c0       	rjmp	.+2      	; 0x788 <testTasterLed+0x2c>
        }else {
        Led3_Off();
 786:	e3 dc       	rcall	.-1594   	; 0x14e <Led3_Off>
 788:	8c dd       	rcall	.-1256   	; 0x2a2 <Taster4_get>
    }
    if (Taster4_get()) {
 78a:	89 2b       	or	r24, r25
 78c:	11 f0       	breq	.+4      	; 0x792 <testTasterLed+0x36>
 78e:	f0 dc       	rcall	.-1568   	; 0x170 <Led4_On>
 790:	01 c0       	rjmp	.+2      	; 0x794 <testTasterLed+0x38>
        Led4_On();
 792:	ff dc       	rcall	.-1538   	; 0x192 <Led4_Off>
 794:	00 00       	nop
        }else {
        Led4_Off();
    }
}
 796:	df 91       	pop	r29
        Led3_Off();
    }
    if (Taster4_get()) {
        Led4_On();
        }else {
        Led4_Off();
 798:	cf 91       	pop	r28
 79a:	08 95       	ret

0000079c <__cmpsf2>:
    }
}
 79c:	2f d0       	rcall	.+94     	; 0x7fc <__fp_cmp>
 79e:	08 f4       	brcc	.+2      	; 0x7a2 <__cmpsf2+0x6>
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	08 95       	ret

000007a4 <__fixunssfsi>:
 7a4:	57 d0       	rcall	.+174    	; 0x854 <__fp_splitA>
 7a6:	88 f0       	brcs	.+34     	; 0x7ca <__fixunssfsi+0x26>
 7a8:	9f 57       	subi	r25, 0x7F	; 127
 7aa:	90 f0       	brcs	.+36     	; 0x7d0 <__fixunssfsi+0x2c>
 7ac:	b9 2f       	mov	r27, r25
 7ae:	99 27       	eor	r25, r25
 7b0:	b7 51       	subi	r27, 0x17	; 23
 7b2:	a0 f0       	brcs	.+40     	; 0x7dc <__fixunssfsi+0x38>
 7b4:	d1 f0       	breq	.+52     	; 0x7ea <__fixunssfsi+0x46>
 7b6:	66 0f       	add	r22, r22
 7b8:	77 1f       	adc	r23, r23
 7ba:	88 1f       	adc	r24, r24
 7bc:	99 1f       	adc	r25, r25
 7be:	1a f0       	brmi	.+6      	; 0x7c6 <__fixunssfsi+0x22>
 7c0:	ba 95       	dec	r27
 7c2:	c9 f7       	brne	.-14     	; 0x7b6 <__fixunssfsi+0x12>
 7c4:	12 c0       	rjmp	.+36     	; 0x7ea <__fixunssfsi+0x46>
 7c6:	b1 30       	cpi	r27, 0x01	; 1
 7c8:	81 f0       	breq	.+32     	; 0x7ea <__fixunssfsi+0x46>
 7ca:	5e d0       	rcall	.+188    	; 0x888 <__fp_zero>
 7cc:	b1 e0       	ldi	r27, 0x01	; 1
 7ce:	08 95       	ret
 7d0:	5b c0       	rjmp	.+182    	; 0x888 <__fp_zero>
 7d2:	67 2f       	mov	r22, r23
 7d4:	78 2f       	mov	r23, r24
 7d6:	88 27       	eor	r24, r24
 7d8:	b8 5f       	subi	r27, 0xF8	; 248
 7da:	39 f0       	breq	.+14     	; 0x7ea <__fixunssfsi+0x46>
 7dc:	b9 3f       	cpi	r27, 0xF9	; 249
 7de:	cc f3       	brlt	.-14     	; 0x7d2 <__fixunssfsi+0x2e>
 7e0:	86 95       	lsr	r24
 7e2:	77 95       	ror	r23
 7e4:	67 95       	ror	r22
 7e6:	b3 95       	inc	r27
 7e8:	d9 f7       	brne	.-10     	; 0x7e0 <__fixunssfsi+0x3c>
 7ea:	3e f4       	brtc	.+14     	; 0x7fa <__fixunssfsi+0x56>
 7ec:	90 95       	com	r25
 7ee:	80 95       	com	r24
 7f0:	70 95       	com	r23
 7f2:	61 95       	neg	r22
 7f4:	7f 4f       	sbci	r23, 0xFF	; 255
 7f6:	8f 4f       	sbci	r24, 0xFF	; 255
 7f8:	9f 4f       	sbci	r25, 0xFF	; 255
 7fa:	08 95       	ret

000007fc <__fp_cmp>:
 7fc:	99 0f       	add	r25, r25
 7fe:	00 08       	sbc	r0, r0
 800:	55 0f       	add	r21, r21
 802:	aa 0b       	sbc	r26, r26
 804:	e0 e8       	ldi	r30, 0x80	; 128
 806:	fe ef       	ldi	r31, 0xFE	; 254
 808:	16 16       	cp	r1, r22
 80a:	17 06       	cpc	r1, r23
 80c:	e8 07       	cpc	r30, r24
 80e:	f9 07       	cpc	r31, r25
 810:	c0 f0       	brcs	.+48     	; 0x842 <__fp_cmp+0x46>
 812:	12 16       	cp	r1, r18
 814:	13 06       	cpc	r1, r19
 816:	e4 07       	cpc	r30, r20
 818:	f5 07       	cpc	r31, r21
 81a:	98 f0       	brcs	.+38     	; 0x842 <__fp_cmp+0x46>
 81c:	62 1b       	sub	r22, r18
 81e:	73 0b       	sbc	r23, r19
 820:	84 0b       	sbc	r24, r20
 822:	95 0b       	sbc	r25, r21
 824:	39 f4       	brne	.+14     	; 0x834 <__fp_cmp+0x38>
 826:	0a 26       	eor	r0, r26
 828:	61 f0       	breq	.+24     	; 0x842 <__fp_cmp+0x46>
 82a:	23 2b       	or	r18, r19
 82c:	24 2b       	or	r18, r20
 82e:	25 2b       	or	r18, r21
 830:	21 f4       	brne	.+8      	; 0x83a <__fp_cmp+0x3e>
 832:	08 95       	ret
 834:	0a 26       	eor	r0, r26
 836:	09 f4       	brne	.+2      	; 0x83a <__fp_cmp+0x3e>
 838:	a1 40       	sbci	r26, 0x01	; 1
 83a:	a6 95       	lsr	r26
 83c:	8f ef       	ldi	r24, 0xFF	; 255
 83e:	81 1d       	adc	r24, r1
 840:	81 1d       	adc	r24, r1
 842:	08 95       	ret

00000844 <__fp_split3>:
 844:	57 fd       	sbrc	r21, 7
 846:	90 58       	subi	r25, 0x80	; 128
 848:	44 0f       	add	r20, r20
 84a:	55 1f       	adc	r21, r21
 84c:	59 f0       	breq	.+22     	; 0x864 <__fp_splitA+0x10>
 84e:	5f 3f       	cpi	r21, 0xFF	; 255
 850:	71 f0       	breq	.+28     	; 0x86e <__fp_splitA+0x1a>
 852:	47 95       	ror	r20

00000854 <__fp_splitA>:
 854:	88 0f       	add	r24, r24
 856:	97 fb       	bst	r25, 7
 858:	99 1f       	adc	r25, r25
 85a:	61 f0       	breq	.+24     	; 0x874 <__fp_splitA+0x20>
 85c:	9f 3f       	cpi	r25, 0xFF	; 255
 85e:	79 f0       	breq	.+30     	; 0x87e <__fp_splitA+0x2a>
 860:	87 95       	ror	r24
 862:	08 95       	ret
 864:	12 16       	cp	r1, r18
 866:	13 06       	cpc	r1, r19
 868:	14 06       	cpc	r1, r20
 86a:	55 1f       	adc	r21, r21
 86c:	f2 cf       	rjmp	.-28     	; 0x852 <__fp_split3+0xe>
 86e:	46 95       	lsr	r20
 870:	f1 df       	rcall	.-30     	; 0x854 <__fp_splitA>
 872:	08 c0       	rjmp	.+16     	; 0x884 <__fp_splitA+0x30>
 874:	16 16       	cp	r1, r22
 876:	17 06       	cpc	r1, r23
 878:	18 06       	cpc	r1, r24
 87a:	99 1f       	adc	r25, r25
 87c:	f1 cf       	rjmp	.-30     	; 0x860 <__fp_splitA+0xc>
 87e:	86 95       	lsr	r24
 880:	71 05       	cpc	r23, r1
 882:	61 05       	cpc	r22, r1
 884:	08 94       	sec
 886:	08 95       	ret

00000888 <__fp_zero>:
 888:	e8 94       	clt

0000088a <__fp_szero>:
 88a:	bb 27       	eor	r27, r27
 88c:	66 27       	eor	r22, r22
 88e:	77 27       	eor	r23, r23
 890:	cb 01       	movw	r24, r22
 892:	97 f9       	bld	r25, 7
 894:	08 95       	ret

00000896 <__gesf2>:
 896:	b2 df       	rcall	.-156    	; 0x7fc <__fp_cmp>
 898:	08 f4       	brcc	.+2      	; 0x89c <__gesf2+0x6>
 89a:	8f ef       	ldi	r24, 0xFF	; 255
 89c:	08 95       	ret

0000089e <__mulsf3>:
 89e:	0b d0       	rcall	.+22     	; 0x8b6 <__mulsf3x>
 8a0:	78 c0       	rjmp	.+240    	; 0x992 <__fp_round>
 8a2:	69 d0       	rcall	.+210    	; 0x976 <__fp_pscA>
 8a4:	28 f0       	brcs	.+10     	; 0x8b0 <__mulsf3+0x12>
 8a6:	6e d0       	rcall	.+220    	; 0x984 <__fp_pscB>
 8a8:	18 f0       	brcs	.+6      	; 0x8b0 <__mulsf3+0x12>
 8aa:	95 23       	and	r25, r21
 8ac:	09 f0       	breq	.+2      	; 0x8b0 <__mulsf3+0x12>
 8ae:	5a c0       	rjmp	.+180    	; 0x964 <__fp_inf>
 8b0:	5f c0       	rjmp	.+190    	; 0x970 <__fp_nan>
 8b2:	11 24       	eor	r1, r1
 8b4:	ea cf       	rjmp	.-44     	; 0x88a <__fp_szero>

000008b6 <__mulsf3x>:
 8b6:	c6 df       	rcall	.-116    	; 0x844 <__fp_split3>
 8b8:	a0 f3       	brcs	.-24     	; 0x8a2 <__mulsf3+0x4>

000008ba <__mulsf3_pse>:
 8ba:	95 9f       	mul	r25, r21
 8bc:	d1 f3       	breq	.-12     	; 0x8b2 <__mulsf3+0x14>
 8be:	95 0f       	add	r25, r21
 8c0:	50 e0       	ldi	r21, 0x00	; 0
 8c2:	55 1f       	adc	r21, r21
 8c4:	62 9f       	mul	r22, r18
 8c6:	f0 01       	movw	r30, r0
 8c8:	72 9f       	mul	r23, r18
 8ca:	bb 27       	eor	r27, r27
 8cc:	f0 0d       	add	r31, r0
 8ce:	b1 1d       	adc	r27, r1
 8d0:	63 9f       	mul	r22, r19
 8d2:	aa 27       	eor	r26, r26
 8d4:	f0 0d       	add	r31, r0
 8d6:	b1 1d       	adc	r27, r1
 8d8:	aa 1f       	adc	r26, r26
 8da:	64 9f       	mul	r22, r20
 8dc:	66 27       	eor	r22, r22
 8de:	b0 0d       	add	r27, r0
 8e0:	a1 1d       	adc	r26, r1
 8e2:	66 1f       	adc	r22, r22
 8e4:	82 9f       	mul	r24, r18
 8e6:	22 27       	eor	r18, r18
 8e8:	b0 0d       	add	r27, r0
 8ea:	a1 1d       	adc	r26, r1
 8ec:	62 1f       	adc	r22, r18
 8ee:	73 9f       	mul	r23, r19
 8f0:	b0 0d       	add	r27, r0
 8f2:	a1 1d       	adc	r26, r1
 8f4:	62 1f       	adc	r22, r18
 8f6:	83 9f       	mul	r24, r19
 8f8:	a0 0d       	add	r26, r0
 8fa:	61 1d       	adc	r22, r1
 8fc:	22 1f       	adc	r18, r18
 8fe:	74 9f       	mul	r23, r20
 900:	33 27       	eor	r19, r19
 902:	a0 0d       	add	r26, r0
 904:	61 1d       	adc	r22, r1
 906:	23 1f       	adc	r18, r19
 908:	84 9f       	mul	r24, r20
 90a:	60 0d       	add	r22, r0
 90c:	21 1d       	adc	r18, r1
 90e:	82 2f       	mov	r24, r18
 910:	76 2f       	mov	r23, r22
 912:	6a 2f       	mov	r22, r26
 914:	11 24       	eor	r1, r1
 916:	9f 57       	subi	r25, 0x7F	; 127
 918:	50 40       	sbci	r21, 0x00	; 0
 91a:	8a f0       	brmi	.+34     	; 0x93e <__stack+0x3f>
 91c:	e1 f0       	breq	.+56     	; 0x956 <__stack+0x57>
 91e:	88 23       	and	r24, r24
 920:	4a f0       	brmi	.+18     	; 0x934 <__stack+0x35>
 922:	ee 0f       	add	r30, r30
 924:	ff 1f       	adc	r31, r31
 926:	bb 1f       	adc	r27, r27
 928:	66 1f       	adc	r22, r22
 92a:	77 1f       	adc	r23, r23
 92c:	88 1f       	adc	r24, r24
 92e:	91 50       	subi	r25, 0x01	; 1
 930:	50 40       	sbci	r21, 0x00	; 0
 932:	a9 f7       	brne	.-22     	; 0x91e <__stack+0x1f>
 934:	9e 3f       	cpi	r25, 0xFE	; 254
 936:	51 05       	cpc	r21, r1
 938:	70 f0       	brcs	.+28     	; 0x956 <__stack+0x57>
 93a:	14 c0       	rjmp	.+40     	; 0x964 <__fp_inf>
 93c:	a6 cf       	rjmp	.-180    	; 0x88a <__fp_szero>
 93e:	5f 3f       	cpi	r21, 0xFF	; 255
 940:	ec f3       	brlt	.-6      	; 0x93c <__stack+0x3d>
 942:	98 3e       	cpi	r25, 0xE8	; 232
 944:	dc f3       	brlt	.-10     	; 0x93c <__stack+0x3d>
 946:	86 95       	lsr	r24
 948:	77 95       	ror	r23
 94a:	67 95       	ror	r22
 94c:	b7 95       	ror	r27
 94e:	f7 95       	ror	r31
 950:	e7 95       	ror	r30
 952:	9f 5f       	subi	r25, 0xFF	; 255
 954:	c1 f7       	brne	.-16     	; 0x946 <__stack+0x47>
 956:	fe 2b       	or	r31, r30
 958:	88 0f       	add	r24, r24
 95a:	91 1d       	adc	r25, r1
 95c:	96 95       	lsr	r25
 95e:	87 95       	ror	r24
 960:	97 f9       	bld	r25, 7
 962:	08 95       	ret

00000964 <__fp_inf>:
 964:	97 f9       	bld	r25, 7
 966:	9f 67       	ori	r25, 0x7F	; 127
 968:	80 e8       	ldi	r24, 0x80	; 128
 96a:	70 e0       	ldi	r23, 0x00	; 0
 96c:	60 e0       	ldi	r22, 0x00	; 0
 96e:	08 95       	ret

00000970 <__fp_nan>:
 970:	9f ef       	ldi	r25, 0xFF	; 255
 972:	80 ec       	ldi	r24, 0xC0	; 192
 974:	08 95       	ret

00000976 <__fp_pscA>:
 976:	00 24       	eor	r0, r0
 978:	0a 94       	dec	r0
 97a:	16 16       	cp	r1, r22
 97c:	17 06       	cpc	r1, r23
 97e:	18 06       	cpc	r1, r24
 980:	09 06       	cpc	r0, r25
 982:	08 95       	ret

00000984 <__fp_pscB>:
 984:	00 24       	eor	r0, r0
 986:	0a 94       	dec	r0
 988:	12 16       	cp	r1, r18
 98a:	13 06       	cpc	r1, r19
 98c:	14 06       	cpc	r1, r20
 98e:	05 06       	cpc	r0, r21
 990:	08 95       	ret

00000992 <__fp_round>:
 992:	09 2e       	mov	r0, r25
 994:	03 94       	inc	r0
 996:	00 0c       	add	r0, r0
 998:	11 f4       	brne	.+4      	; 0x99e <__fp_round+0xc>
 99a:	88 23       	and	r24, r24
 99c:	52 f0       	brmi	.+20     	; 0x9b2 <__fp_round+0x20>
 99e:	bb 0f       	add	r27, r27
 9a0:	40 f4       	brcc	.+16     	; 0x9b2 <__fp_round+0x20>
 9a2:	bf 2b       	or	r27, r31
 9a4:	11 f4       	brne	.+4      	; 0x9aa <__fp_round+0x18>
 9a6:	60 ff       	sbrs	r22, 0
 9a8:	04 c0       	rjmp	.+8      	; 0x9b2 <__fp_round+0x20>
 9aa:	6f 5f       	subi	r22, 0xFF	; 255
 9ac:	7f 4f       	sbci	r23, 0xFF	; 255
 9ae:	8f 4f       	sbci	r24, 0xFF	; 255
 9b0:	9f 4f       	sbci	r25, 0xFF	; 255
 9b2:	08 95       	ret

000009b4 <_exit>:
 9b4:	f8 94       	cli

000009b6 <__stop_program>:
 9b6:	ff cf       	rjmp	.-2      	; 0x9b6 <__stop_program>
