
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000009da  00000a6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010e  0080010e  00000a7c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000aac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015e7  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b3e  00000000  00000000  0000226b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d23  00000000  00000000  00002da9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004ac  00000000  00000000  00003acc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000073d  00000000  00000000  00003f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000892  00000000  00000000  000046b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00004f47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3f c4       	rjmp	.+2174   	; 0x8c0 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ed       	ldi	r30, 0xDA	; 218
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c1 d1       	rcall	.+898    	; 0x446 <main>
  c4:	88 c4       	rjmp	.+2320   	; 0x9d6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Led_init>:

#include "Led.h"

void Led_init(uint8_t initD) {
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	1f 92       	push	r1
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	89 83       	std	Y+1, r24	; 0x01
    // Set PORTB to outputs
    DDRB = 0xFF;
  d4:	84 e2       	ldi	r24, 0x24	; 36
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	fc 01       	movw	r30, r24
  dc:	20 83       	st	Z, r18
    PORTB = 0x00;
  de:	85 e2       	ldi	r24, 0x25	; 37
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	10 82       	st	Z, r1
    
    if (initD) {
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	88 23       	and	r24, r24
  ea:	91 f0       	breq	.+36     	; 0x110 <Led_init+0x48>
        // Set PORTD 0..4 to outputs
        DDRD |= ( (1 << 4) | (1 << 3) | (1 << 2) | (1 << 1) | (1 << 0));
  ec:	8a e2       	ldi	r24, 0x2A	; 42
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	2a e2       	ldi	r18, 0x2A	; 42
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	f9 01       	movw	r30, r18
  f6:	20 81       	ld	r18, Z
  f8:	2f 61       	ori	r18, 0x1F	; 31
  fa:	fc 01       	movw	r30, r24
  fc:	20 83       	st	Z, r18
        PORTD &= ~( (1 << 4) | (1 << 3) | (1 << 2) | (1 << 1) | (1 << 0));
  fe:	8b e2       	ldi	r24, 0x2B	; 43
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	2b e2       	ldi	r18, 0x2B	; 43
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	f9 01       	movw	r30, r18
 108:	20 81       	ld	r18, Z
 10a:	20 7e       	andi	r18, 0xE0	; 224
 10c:	fc 01       	movw	r30, r24
 10e:	20 83       	st	Z, r18
    }
}
 110:	00 00       	nop
 112:	0f 90       	pop	r0
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <turnOnD>:

void turnOnD(uint8_t bit) {
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	1f 92       	push	r1
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
 124:	89 83       	std	Y+1, r24	; 0x01
    PORTD |= (1 << bit);
 126:	8b e2       	ldi	r24, 0x2B	; 43
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	2b e2       	ldi	r18, 0x2B	; 43
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	f9 01       	movw	r30, r18
 130:	20 81       	ld	r18, Z
 132:	62 2f       	mov	r22, r18
 134:	29 81       	ldd	r18, Y+1	; 0x01
 136:	42 2f       	mov	r20, r18
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <turnOnD+0x2a>
 140:	22 0f       	add	r18, r18
 142:	33 1f       	adc	r19, r19
 144:	4a 95       	dec	r20
 146:	e2 f7       	brpl	.-8      	; 0x140 <turnOnD+0x26>
 148:	26 2b       	or	r18, r22
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18
}
 14e:	00 00       	nop
 150:	0f 90       	pop	r0
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <turnOffD>:
void turnOffD(uint8_t bit) {
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	1f 92       	push	r1
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
 162:	89 83       	std	Y+1, r24	; 0x01
    PORTD &= ~(1 << bit);
 164:	8b e2       	ldi	r24, 0x2B	; 43
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	2b e2       	ldi	r18, 0x2B	; 43
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	f9 01       	movw	r30, r18
 16e:	20 81       	ld	r18, Z
 170:	62 2f       	mov	r22, r18
 172:	29 81       	ldd	r18, Y+1	; 0x01
 174:	42 2f       	mov	r20, r18
 176:	50 e0       	ldi	r21, 0x00	; 0
 178:	21 e0       	ldi	r18, 0x01	; 1
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <turnOffD+0x2a>
 17e:	22 0f       	add	r18, r18
 180:	33 1f       	adc	r19, r19
 182:	4a 95       	dec	r20
 184:	e2 f7       	brpl	.-8      	; 0x17e <turnOffD+0x26>
 186:	20 95       	com	r18
 188:	26 23       	and	r18, r22
 18a:	fc 01       	movw	r30, r24
 18c:	20 83       	st	Z, r18
}
 18e:	00 00       	nop
 190:	0f 90       	pop	r0
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <Led1_On>:

/**
 led1 - ioB7
 */
void Led1_On(void) {
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	cd b7       	in	r28, 0x3d	; 61
 19e:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 7);
 1a0:	85 e2       	ldi	r24, 0x25	; 37
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	25 e2       	ldi	r18, 0x25	; 37
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	f9 01       	movw	r30, r18
 1aa:	20 81       	ld	r18, Z
 1ac:	20 68       	ori	r18, 0x80	; 128
 1ae:	fc 01       	movw	r30, r24
 1b0:	20 83       	st	Z, r18
}
 1b2:	00 00       	nop
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <Led1_Off>:
void Led1_Off(void) {
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 7);
 1c2:	85 e2       	ldi	r24, 0x25	; 37
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	25 e2       	ldi	r18, 0x25	; 37
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	f9 01       	movw	r30, r18
 1cc:	20 81       	ld	r18, Z
 1ce:	2f 77       	andi	r18, 0x7F	; 127
 1d0:	fc 01       	movw	r30, r24
 1d2:	20 83       	st	Z, r18
}
 1d4:	00 00       	nop
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <Led2_On>:

/**
led2 - ioB6
*/
void Led2_On(void) {
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 6);
 1e4:	85 e2       	ldi	r24, 0x25	; 37
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	25 e2       	ldi	r18, 0x25	; 37
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	f9 01       	movw	r30, r18
 1ee:	20 81       	ld	r18, Z
 1f0:	20 64       	ori	r18, 0x40	; 64
 1f2:	fc 01       	movw	r30, r24
 1f4:	20 83       	st	Z, r18
}
 1f6:	00 00       	nop
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <Led2_Off>:
void Led2_Off(void) {
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 6);
 206:	85 e2       	ldi	r24, 0x25	; 37
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	25 e2       	ldi	r18, 0x25	; 37
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	f9 01       	movw	r30, r18
 210:	20 81       	ld	r18, Z
 212:	2f 7b       	andi	r18, 0xBF	; 191
 214:	fc 01       	movw	r30, r24
 216:	20 83       	st	Z, r18
}
 218:	00 00       	nop
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <Led3_On>:

/**
led3 - ioB5
*/
void Led3_On(void) {
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	cd b7       	in	r28, 0x3d	; 61
 226:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 5);
 228:	85 e2       	ldi	r24, 0x25	; 37
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	25 e2       	ldi	r18, 0x25	; 37
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	f9 01       	movw	r30, r18
 232:	20 81       	ld	r18, Z
 234:	20 62       	ori	r18, 0x20	; 32
 236:	fc 01       	movw	r30, r24
 238:	20 83       	st	Z, r18
}
 23a:	00 00       	nop
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <Led3_Off>:
void Led3_Off(void) {
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	cd b7       	in	r28, 0x3d	; 61
 248:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 5);
 24a:	85 e2       	ldi	r24, 0x25	; 37
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	25 e2       	ldi	r18, 0x25	; 37
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	f9 01       	movw	r30, r18
 254:	20 81       	ld	r18, Z
 256:	2f 7d       	andi	r18, 0xDF	; 223
 258:	fc 01       	movw	r30, r24
 25a:	20 83       	st	Z, r18
}
 25c:	00 00       	nop
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <Led4_On>:

/**
led4 - ioB4
*/
void Led4_On(void) {
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	cd b7       	in	r28, 0x3d	; 61
 26a:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 4);
 26c:	85 e2       	ldi	r24, 0x25	; 37
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	25 e2       	ldi	r18, 0x25	; 37
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	f9 01       	movw	r30, r18
 276:	20 81       	ld	r18, Z
 278:	20 61       	ori	r18, 0x10	; 16
 27a:	fc 01       	movw	r30, r24
 27c:	20 83       	st	Z, r18
}
 27e:	00 00       	nop
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <Led4_Off>:
void Led4_Off(void) {
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 4);
 28e:	85 e2       	ldi	r24, 0x25	; 37
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	25 e2       	ldi	r18, 0x25	; 37
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	f9 01       	movw	r30, r18
 298:	20 81       	ld	r18, Z
 29a:	2f 7e       	andi	r18, 0xEF	; 239
 29c:	fc 01       	movw	r30, r24
 29e:	20 83       	st	Z, r18
}
 2a0:	00 00       	nop
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <Led5_On>:

/**
led5 - ioB3
*/
void Led5_On(void) {
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 3);
 2b0:	85 e2       	ldi	r24, 0x25	; 37
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	25 e2       	ldi	r18, 0x25	; 37
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	f9 01       	movw	r30, r18
 2ba:	20 81       	ld	r18, Z
 2bc:	28 60       	ori	r18, 0x08	; 8
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
}
 2c2:	00 00       	nop
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <Led5_Off>:
void Led5_Off(void) {
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	cd b7       	in	r28, 0x3d	; 61
 2d0:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 3);
 2d2:	85 e2       	ldi	r24, 0x25	; 37
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	25 e2       	ldi	r18, 0x25	; 37
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	f9 01       	movw	r30, r18
 2dc:	20 81       	ld	r18, Z
 2de:	27 7f       	andi	r18, 0xF7	; 247
 2e0:	fc 01       	movw	r30, r24
 2e2:	20 83       	st	Z, r18
}
 2e4:	00 00       	nop
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <Led6_On>:

/**
led6 - ioB2
*/
void Led6_On(void) {
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	cd b7       	in	r28, 0x3d	; 61
 2f2:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 2);
 2f4:	85 e2       	ldi	r24, 0x25	; 37
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	25 e2       	ldi	r18, 0x25	; 37
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	f9 01       	movw	r30, r18
 2fe:	20 81       	ld	r18, Z
 300:	24 60       	ori	r18, 0x04	; 4
 302:	fc 01       	movw	r30, r24
 304:	20 83       	st	Z, r18
}
 306:	00 00       	nop
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	08 95       	ret

0000030e <Led6_Off>:
void Led6_Off(void) {
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	cd b7       	in	r28, 0x3d	; 61
 314:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 2);
 316:	85 e2       	ldi	r24, 0x25	; 37
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	25 e2       	ldi	r18, 0x25	; 37
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	f9 01       	movw	r30, r18
 320:	20 81       	ld	r18, Z
 322:	2b 7f       	andi	r18, 0xFB	; 251
 324:	fc 01       	movw	r30, r24
 326:	20 83       	st	Z, r18
}
 328:	00 00       	nop
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	08 95       	ret

00000330 <Led7_On>:

/**
led7 - ioB1
*/
void Led7_On(void) {
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 1);
 338:	85 e2       	ldi	r24, 0x25	; 37
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	25 e2       	ldi	r18, 0x25	; 37
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	f9 01       	movw	r30, r18
 342:	20 81       	ld	r18, Z
 344:	22 60       	ori	r18, 0x02	; 2
 346:	fc 01       	movw	r30, r24
 348:	20 83       	st	Z, r18
}
 34a:	00 00       	nop
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <Led7_Off>:
void Led7_Off(void) {
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	cd b7       	in	r28, 0x3d	; 61
 358:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 1);
 35a:	85 e2       	ldi	r24, 0x25	; 37
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	25 e2       	ldi	r18, 0x25	; 37
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	f9 01       	movw	r30, r18
 364:	20 81       	ld	r18, Z
 366:	2d 7f       	andi	r18, 0xFD	; 253
 368:	fc 01       	movw	r30, r24
 36a:	20 83       	st	Z, r18
}
 36c:	00 00       	nop
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	08 95       	ret

00000374 <Led8_On>:

/**
led8 - ioB0
*/
void Led8_On(void) {
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	cd b7       	in	r28, 0x3d	; 61
 37a:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 0);
 37c:	85 e2       	ldi	r24, 0x25	; 37
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	25 e2       	ldi	r18, 0x25	; 37
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	f9 01       	movw	r30, r18
 386:	20 81       	ld	r18, Z
 388:	21 60       	ori	r18, 0x01	; 1
 38a:	fc 01       	movw	r30, r24
 38c:	20 83       	st	Z, r18
}
 38e:	00 00       	nop
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	08 95       	ret

00000396 <Led8_Off>:
void Led8_Off(void) {
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 0);
 39e:	85 e2       	ldi	r24, 0x25	; 37
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	25 e2       	ldi	r18, 0x25	; 37
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	f9 01       	movw	r30, r18
 3a8:	20 81       	ld	r18, Z
 3aa:	2e 7f       	andi	r18, 0xFE	; 254
 3ac:	fc 01       	movw	r30, r24
 3ae:	20 83       	st	Z, r18
}
 3b0:	00 00       	nop
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <Taster_init>:
 ---------------------
 - DDR Reg has to be set to 0
 - PORT Reg has to be set to 1
 -> Pin is input with pull-up
 */
void Taster_init() {
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
    
    // set to inputs
    DDRC &= ~(1 << 2);
 3c0:	87 e2       	ldi	r24, 0x27	; 39
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	27 e2       	ldi	r18, 0x27	; 39
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	f9 01       	movw	r30, r18
 3ca:	20 81       	ld	r18, Z
 3cc:	2b 7f       	andi	r18, 0xFB	; 251
 3ce:	fc 01       	movw	r30, r24
 3d0:	20 83       	st	Z, r18
    DDRD &= ~( (1 << 7) | (1 << 6) | (1 << 5) );
 3d2:	8a e2       	ldi	r24, 0x2A	; 42
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	2a e2       	ldi	r18, 0x2A	; 42
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	f9 01       	movw	r30, r18
 3dc:	20 81       	ld	r18, Z
 3de:	2f 71       	andi	r18, 0x1F	; 31
 3e0:	fc 01       	movw	r30, r24
 3e2:	20 83       	st	Z, r18
    
    // enable pull-up
    PORTC |= (1 << 2);
 3e4:	88 e2       	ldi	r24, 0x28	; 40
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	28 e2       	ldi	r18, 0x28	; 40
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	f9 01       	movw	r30, r18
 3ee:	20 81       	ld	r18, Z
 3f0:	24 60       	ori	r18, 0x04	; 4
 3f2:	fc 01       	movw	r30, r24
 3f4:	20 83       	st	Z, r18
    PORTD |= (1 << 7) | (1 << 6) | (1 << 5);
 3f6:	8b e2       	ldi	r24, 0x2B	; 43
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	2b e2       	ldi	r18, 0x2B	; 43
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	f9 01       	movw	r30, r18
 400:	20 81       	ld	r18, Z
 402:	20 6e       	ori	r18, 0xE0	; 224
 404:	fc 01       	movw	r30, r24
 406:	20 83       	st	Z, r18
}
 408:	00 00       	nop
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	08 95       	ret

00000410 <Taster1_get>:

/**
 Taster1 - ioD7
 */
uint8_t Taster1_get(void) {
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	00 d0       	rcall	.+0      	; 0x416 <Taster1_get+0x6>
 416:	cd b7       	in	r28, 0x3d	; 61
 418:	de b7       	in	r29, 0x3e	; 62
    int state = PIND;
 41a:	89 e2       	ldi	r24, 0x29	; 41
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	fc 01       	movw	r30, r24
 420:	80 81       	ld	r24, Z
 422:	88 2f       	mov	r24, r24
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	9a 83       	std	Y+2, r25	; 0x02
 428:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<7)) == 0 ) {
 42a:	89 81       	ldd	r24, Y+1	; 0x01
 42c:	9a 81       	ldd	r25, Y+2	; 0x02
 42e:	80 78       	andi	r24, 0x80	; 128
 430:	99 27       	eor	r25, r25
 432:	89 2b       	or	r24, r25
 434:	11 f4       	brne	.+4      	; 0x43a <Taster1_get+0x2a>
        return TASTER_RETURN_VALUE_LOW;
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	01 c0       	rjmp	.+2      	; 0x43c <Taster1_get+0x2c>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
 43a:	80 e0       	ldi	r24, 0x00	; 0
    }
}
 43c:	0f 90       	pop	r0
 43e:	0f 90       	pop	r0
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	08 95       	ret

00000446 <main>:


#define MY_BAUD 9600


int main(void) {
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	00 d0       	rcall	.+0      	; 0x44c <main+0x6>
 44c:	00 d0       	rcall	.+0      	; 0x44e <main+0x8>
 44e:	cd b7       	in	r28, 0x3d	; 61
 450:	de b7       	in	r29, 0x3e	; 62
	
    Led_init(0);	// Don't set LEDs at PORTD
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	39 de       	rcall	.-910    	; 0xc8 <Led_init>
	Taster_init();
 456:	b0 df       	rcall	.-160    	; 0x3b8 <Taster_init>
    Timer_init(16); // Init timer with 16MHZ clock
 458:	80 e1       	ldi	r24, 0x10	; 16
 45a:	87 d1       	rcall	.+782    	; 0x76a <Timer_init>
	uart_init(9600);
 45c:	80 e8       	ldi	r24, 0x80	; 128
 45e:	95 e2       	ldi	r25, 0x25	; 37
 460:	4f d2       	rcall	.+1182   	; 0x900 <uart_init>
 462:	78 94       	sei
	sei();
 464:	19 82       	std	Y+1, r1	; 0x01
	
    uint8_t state_testBoard = 0;
 466:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t last_time = 0;
 468:	1a 82       	std	Y+2, r1	; 0x02
 46a:	81 e0       	ldi	r24, 0x01	; 1
	uint8_t  toggle_asdf = 1;
 46c:	8c 83       	std	Y+4, r24	; 0x04
    /**
    Toggle PORTB every 500ms -> LEDs blink with 1 Hz, accuracy: +- 70 us
    (There could be a lag if timer_count was cleared, approximately every 65,5 seconds)
    */
	
	uart_send("Hallo Welt!!");
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	91 e0       	ldi	r25, 0x01	; 1
 472:	6a d2       	rcall	.+1236   	; 0x948 <uart_send>
		}else {
			PORTB = 0x00;
		}*/
        
        
        trafficLight(0);
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	01 d0       	rcall	.+2      	; 0x47a <trafficLight>
 478:	fd cf       	rjmp	.-6      	; 0x474 <main+0x2e>

0000047a <trafficLight>:
        //playground();
    }
 47a:	cf 93       	push	r28

uint16_t timeVar = 0;
uint8_t traffic_ready = 1;
uint8_t button_pressed = 0;

void trafficLight(uint8_t extraLeds) {
 47c:	df 93       	push	r29
 47e:	1f 92       	push	r1
 480:	cd b7       	in	r28, 0x3d	; 61
 482:	de b7       	in	r29, 0x3e	; 62
 484:	89 83       	std	Y+1, r24	; 0x01
    switch (trafficLightWithPerson_state) {
 486:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 48a:	88 2f       	mov	r24, r24
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	82 30       	cpi	r24, 0x02	; 2
 490:	91 05       	cpc	r25, r1
 492:	09 f4       	brne	.+2      	; 0x496 <trafficLight+0x1c>
 494:	94 c0       	rjmp	.+296    	; 0x5be <trafficLight+0x144>
 496:	83 30       	cpi	r24, 0x03	; 3
 498:	91 05       	cpc	r25, r1
 49a:	34 f4       	brge	.+12     	; 0x4a8 <trafficLight+0x2e>
 49c:	00 97       	sbiw	r24, 0x00	; 0
 49e:	81 f0       	breq	.+32     	; 0x4c0 <trafficLight+0x46>
 4a0:	01 97       	sbiw	r24, 0x01	; 1
 4a2:	09 f4       	brne	.+2      	; 0x4a6 <trafficLight+0x2c>
 4a4:	5a c0       	rjmp	.+180    	; 0x55a <trafficLight+0xe0>
                trafficLightWithPerson_state = AUTO_GREEN_PERSON_RED;
            }
            break;
            
        default:
            break;
 4a6:	5c c1       	rjmp	.+696    	; 0x760 <trafficLight+0x2e6>
uint16_t timeVar = 0;
uint8_t traffic_ready = 1;
uint8_t button_pressed = 0;

void trafficLight(uint8_t extraLeds) {
    switch (trafficLightWithPerson_state) {
 4a8:	85 30       	cpi	r24, 0x05	; 5
 4aa:	91 05       	cpc	r25, r1
 4ac:	09 f4       	brne	.+2      	; 0x4b0 <trafficLight+0x36>
 4ae:	eb c0       	rjmp	.+470    	; 0x686 <trafficLight+0x20c>
 4b0:	86 30       	cpi	r24, 0x06	; 6
 4b2:	91 05       	cpc	r25, r1
 4b4:	09 f4       	brne	.+2      	; 0x4b8 <trafficLight+0x3e>
 4b6:	19 c1       	rjmp	.+562    	; 0x6ea <trafficLight+0x270>
 4b8:	04 97       	sbiw	r24, 0x04	; 4
 4ba:	09 f4       	brne	.+2      	; 0x4be <trafficLight+0x44>
 4bc:	b2 c0       	rjmp	.+356    	; 0x622 <trafficLight+0x1a8>
                trafficLightWithPerson_state = AUTO_GREEN_PERSON_RED;
            }
            break;
            
        default:
            break;
 4be:	50 c1       	rjmp	.+672    	; 0x760 <trafficLight+0x2e6>

void trafficLight(uint8_t extraLeds) {
    switch (trafficLightWithPerson_state) {
        case AUTO_GREEN_PERSON_RED:
            // set leds
            if (extraLeds) {
 4c0:	89 81       	ldd	r24, Y+1	; 0x01
 4c2:	88 23       	and	r24, r24
 4c4:	81 f0       	breq	.+32     	; 0x4e6 <trafficLight+0x6c>
                // cars
                turnOffD(0);    // red
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	46 de       	rcall	.-884    	; 0x158 <turnOffD>
                turnOffD(1);    // yellow
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	43 de       	rcall	.-890    	; 0x158 <turnOffD>
                turnOnD(2);     // green
 4d2:	82 e0       	ldi	r24, 0x02	; 2
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	21 de       	rcall	.-958    	; 0x11a <turnOnD>
                
                // person
                turnOnD(3);     // red
 4d8:	83 e0       	ldi	r24, 0x03	; 3
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	1e de       	rcall	.-964    	; 0x11a <turnOnD>
                turnOffD(4);    // green
 4de:	84 e0       	ldi	r24, 0x04	; 4
 4e0:	90 e0       	ldi	r25, 0x00	; 0
            } else {
                // red
                Led2_Off();
 4e2:	3a de       	rcall	.-908    	; 0x158 <turnOffD>
                Led3_Off();
 4e4:	08 c0       	rjmp	.+16     	; 0x4f6 <trafficLight+0x7c>
                
                // yellow
                Led4_Off();
 4e6:	8b de       	rcall	.-746    	; 0x1fe <Led2_Off>
 4e8:	ac de       	rcall	.-680    	; 0x242 <Led3_Off>
                Led5_Off();
 4ea:	cd de       	rcall	.-614    	; 0x286 <Led4_Off>
 4ec:	ee de       	rcall	.-548    	; 0x2ca <Led5_Off>
                
                // green
                Led6_On();
 4ee:	fe de       	rcall	.-516    	; 0x2ec <Led6_On>
 4f0:	1f df       	rcall	.-450    	; 0x330 <Led7_On>
                Led7_On();
 4f2:	52 de       	rcall	.-860    	; 0x198 <Led1_On>
 4f4:	50 df       	rcall	.-352    	; 0x396 <Led8_Off>
                
                // person
                Led1_On();  //red
 4f6:	d0 d1       	rcall	.+928    	; 0x898 <Timer_getTick>
 4f8:	9c 01       	movw	r18, r24
                Led8_Off();  //green
 4fa:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <timeVar>
            }
            
            
            if((Timer_getTick() - timeVar) >= 30000){
 4fe:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <timeVar+0x1>
 502:	a9 01       	movw	r20, r18
 504:	48 1b       	sub	r20, r24
 506:	59 0b       	sbc	r21, r25
 508:	ca 01       	movw	r24, r20
 50a:	80 33       	cpi	r24, 0x30	; 48
 50c:	95 47       	sbci	r25, 0x75	; 117
 50e:	40 f0       	brcs	.+16     	; 0x520 <trafficLight+0xa6>
 510:	c3 d1       	rcall	.+902    	; 0x898 <Timer_getTick>
 512:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <timeVar+0x1>
                timeVar = Timer_getTick();
 516:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <timeVar>
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 520:	77 df       	rcall	.-274    	; 0x410 <Taster1_get>
                traffic_ready = 1;
 522:	89 2b       	or	r24, r25
 524:	19 f0       	breq	.+6      	; 0x52c <trafficLight+0xb2>
 526:	81 e0       	ldi	r24, 0x01	; 1
            }
            
            if (Taster1_get()) {
 528:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <button_pressed>
 52c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
                button_pressed = 1;
 530:	88 23       	and	r24, r24
 532:	09 f4       	brne	.+2      	; 0x536 <trafficLight+0xbc>
            }
            
            if(traffic_ready && button_pressed){
 534:	0a c1       	rjmp	.+532    	; 0x74a <trafficLight+0x2d0>
 536:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <button_pressed>
 53a:	88 23       	and	r24, r24
 53c:	09 f4       	brne	.+2      	; 0x540 <trafficLight+0xc6>
 53e:	05 c1       	rjmp	.+522    	; 0x74a <trafficLight+0x2d0>
 540:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 544:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <button_pressed>
                traffic_ready = 0;
 548:	a7 d1       	rcall	.+846    	; 0x898 <Timer_getTick>
 54a:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <timeVar+0x1>
                button_pressed = 0;
                
                // goto step 1
                timeVar = Timer_getTick();
 54e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <timeVar>
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
                trafficLightWithPerson_state = AUTO_YELLOW_PERSON_RED;
 558:	f8 c0       	rjmp	.+496    	; 0x74a <trafficLight+0x2d0>
            }
            
            break;
 55a:	89 81       	ldd	r24, Y+1	; 0x01
            
        case AUTO_YELLOW_PERSON_RED:
            // set leds
            if (extraLeds) {
 55c:	88 23       	and	r24, r24
 55e:	81 f0       	breq	.+32     	; 0x580 <trafficLight+0x106>
                // cars
                turnOffD(0);
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	90 e0       	ldi	r25, 0x00	; 0
                turnOnD(1);
 564:	f9 dd       	rcall	.-1038   	; 0x158 <turnOffD>
 566:	81 e0       	ldi	r24, 0x01	; 1
                turnOffD(2);
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	d7 dd       	rcall	.-1106   	; 0x11a <turnOnD>
 56c:	82 e0       	ldi	r24, 0x02	; 2
 56e:	90 e0       	ldi	r25, 0x00	; 0
                
                turnOnD(3);
 570:	f3 dd       	rcall	.-1050   	; 0x158 <turnOffD>
 572:	83 e0       	ldi	r24, 0x03	; 3
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	d1 dd       	rcall	.-1118   	; 0x11a <turnOnD>
                turnOffD(4);
 578:	84 e0       	ldi	r24, 0x04	; 4
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	ed dd       	rcall	.-1062   	; 0x158 <turnOffD>
 57e:	08 c0       	rjmp	.+16     	; 0x590 <trafficLight+0x116>
 580:	3e de       	rcall	.-900    	; 0x1fe <Led2_Off>
            } else {
                // red
                Led2_Off();
 582:	5f de       	rcall	.-834    	; 0x242 <Led3_Off>
                Led3_Off();
 584:	6f de       	rcall	.-802    	; 0x264 <Led4_On>
 586:	90 de       	rcall	.-736    	; 0x2a8 <Led5_On>
                
                // yellow
                Led4_On();
 588:	c2 de       	rcall	.-636    	; 0x30e <Led6_Off>
 58a:	e3 de       	rcall	.-570    	; 0x352 <Led7_Off>
                Led5_On();
 58c:	05 de       	rcall	.-1014   	; 0x198 <Led1_On>
 58e:	03 df       	rcall	.-506    	; 0x396 <Led8_Off>
                
                // green
                Led6_Off();
 590:	83 d1       	rcall	.+774    	; 0x898 <Timer_getTick>
 592:	9c 01       	movw	r18, r24
                Led7_Off();
 594:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <timeVar>
                
                // person
                Led1_On();  //red
 598:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <timeVar+0x1>
                Led8_Off();  //green
 59c:	a9 01       	movw	r20, r18
            }
            
            if((Timer_getTick() - timeVar) >= 5000){
 59e:	48 1b       	sub	r20, r24
 5a0:	59 0b       	sbc	r21, r25
 5a2:	ca 01       	movw	r24, r20
 5a4:	88 38       	cpi	r24, 0x88	; 136
 5a6:	93 41       	sbci	r25, 0x13	; 19
 5a8:	08 f4       	brcc	.+2      	; 0x5ac <trafficLight+0x132>
 5aa:	d1 c0       	rjmp	.+418    	; 0x74e <trafficLight+0x2d4>
 5ac:	75 d1       	rcall	.+746    	; 0x898 <Timer_getTick>
 5ae:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <timeVar+0x1>
 5b2:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <timeVar>
                // goto step 2
                timeVar = Timer_getTick();
 5b6:	82 e0       	ldi	r24, 0x02	; 2
 5b8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
                trafficLightWithPerson_state = AUTO_RED_PERSON_RED;
 5bc:	c8 c0       	rjmp	.+400    	; 0x74e <trafficLight+0x2d4>
 5be:	89 81       	ldd	r24, Y+1	; 0x01
            }
            break;
 5c0:	88 23       	and	r24, r24
            
        case AUTO_RED_PERSON_RED:
            // set leds
            if (extraLeds) {
 5c2:	81 f0       	breq	.+32     	; 0x5e4 <trafficLight+0x16a>
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	90 e0       	ldi	r25, 0x00	; 0
                // cars
                turnOnD(0);
 5c8:	a8 dd       	rcall	.-1200   	; 0x11a <turnOnD>
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	c4 dd       	rcall	.-1144   	; 0x158 <turnOffD>
                turnOffD(1);
 5d0:	82 e0       	ldi	r24, 0x02	; 2
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	c1 dd       	rcall	.-1150   	; 0x158 <turnOffD>
                turnOffD(2);
 5d6:	83 e0       	ldi	r24, 0x03	; 3
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	9f dd       	rcall	.-1218   	; 0x11a <turnOnD>
 5dc:	84 e0       	ldi	r24, 0x04	; 4
                
                turnOnD(3);
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	bb dd       	rcall	.-1162   	; 0x158 <turnOffD>
 5e2:	08 c0       	rjmp	.+16     	; 0x5f4 <trafficLight+0x17a>
 5e4:	fb dd       	rcall	.-1034   	; 0x1dc <Led2_On>
                turnOffD(4);
 5e6:	1c de       	rcall	.-968    	; 0x220 <Led3_On>
 5e8:	4e de       	rcall	.-868    	; 0x286 <Led4_Off>
 5ea:	6f de       	rcall	.-802    	; 0x2ca <Led5_Off>
 5ec:	90 de       	rcall	.-736    	; 0x30e <Led6_Off>
            } else {
                // red
                Led2_On();
 5ee:	b1 de       	rcall	.-670    	; 0x352 <Led7_Off>
 5f0:	d3 dd       	rcall	.-1114   	; 0x198 <Led1_On>
                Led3_On();
 5f2:	d1 de       	rcall	.-606    	; 0x396 <Led8_Off>
                
                // yellow
                Led4_Off();
 5f4:	51 d1       	rcall	.+674    	; 0x898 <Timer_getTick>
                Led5_Off();
 5f6:	9c 01       	movw	r18, r24
 5f8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <timeVar>
                
                // green
                Led6_Off();
                Led7_Off();
 5fc:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <timeVar+0x1>
                
                // person
                Led1_On();  //red
                Led8_Off();  //green
 600:	a9 01       	movw	r20, r18
            }
            
            if((Timer_getTick() - timeVar) >= 5000){
 602:	48 1b       	sub	r20, r24
 604:	59 0b       	sbc	r21, r25
 606:	ca 01       	movw	r24, r20
 608:	88 38       	cpi	r24, 0x88	; 136
 60a:	93 41       	sbci	r25, 0x13	; 19
 60c:	08 f4       	brcc	.+2      	; 0x610 <trafficLight+0x196>
 60e:	a1 c0       	rjmp	.+322    	; 0x752 <trafficLight+0x2d8>
 610:	43 d1       	rcall	.+646    	; 0x898 <Timer_getTick>
 612:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <timeVar+0x1>
                timeVar = Timer_getTick();
 616:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <timeVar>
 61a:	84 e0       	ldi	r24, 0x04	; 4
 61c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
                trafficLightWithPerson_state = AUTO_RED_PERSON_GREEN;
 620:	98 c0       	rjmp	.+304    	; 0x752 <trafficLight+0x2d8>
 622:	89 81       	ldd	r24, Y+1	; 0x01
            }
            break;
 624:	88 23       	and	r24, r24
            
        case AUTO_RED_PERSON_GREEN:
            // set leds
            if (extraLeds) {
 626:	81 f0       	breq	.+32     	; 0x648 <trafficLight+0x1ce>
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	90 e0       	ldi	r25, 0x00	; 0
                // cars
                turnOnD(0);
 62c:	76 dd       	rcall	.-1300   	; 0x11a <turnOnD>
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	92 dd       	rcall	.-1244   	; 0x158 <turnOffD>
                turnOffD(1);
 634:	82 e0       	ldi	r24, 0x02	; 2
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	8f dd       	rcall	.-1250   	; 0x158 <turnOffD>
                turnOffD(2);
 63a:	83 e0       	ldi	r24, 0x03	; 3
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	8c dd       	rcall	.-1256   	; 0x158 <turnOffD>
                
                turnOffD(3);
 640:	84 e0       	ldi	r24, 0x04	; 4
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	6a dd       	rcall	.-1324   	; 0x11a <turnOnD>
                turnOnD(4);
 646:	08 c0       	rjmp	.+16     	; 0x658 <trafficLight+0x1de>
 648:	c9 dd       	rcall	.-1134   	; 0x1dc <Led2_On>
 64a:	ea dd       	rcall	.-1068   	; 0x220 <Led3_On>
            } else {
                // red
                Led2_On();
 64c:	1c de       	rcall	.-968    	; 0x286 <Led4_Off>
                Led3_On();
 64e:	3d de       	rcall	.-902    	; 0x2ca <Led5_Off>
                
                // yellow
                Led4_Off();
 650:	5e de       	rcall	.-836    	; 0x30e <Led6_Off>
                Led5_Off();
 652:	7f de       	rcall	.-770    	; 0x352 <Led7_Off>
                
                // green
                Led6_Off();
 654:	b2 dd       	rcall	.-1180   	; 0x1ba <Led1_Off>
 656:	8e de       	rcall	.-740    	; 0x374 <Led8_On>
                Led7_Off();
 658:	1f d1       	rcall	.+574    	; 0x898 <Timer_getTick>
 65a:	9c 01       	movw	r18, r24
                
                // person
                Led1_Off();  //red
 65c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <timeVar>
                Led8_On();  //green
 660:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <timeVar+0x1>
            }
            
            if((Timer_getTick() - timeVar) >= 30000){
 664:	a9 01       	movw	r20, r18
 666:	48 1b       	sub	r20, r24
 668:	59 0b       	sbc	r21, r25
 66a:	ca 01       	movw	r24, r20
 66c:	80 33       	cpi	r24, 0x30	; 48
 66e:	95 47       	sbci	r25, 0x75	; 117
 670:	08 f4       	brcc	.+2      	; 0x674 <trafficLight+0x1fa>
 672:	71 c0       	rjmp	.+226    	; 0x756 <trafficLight+0x2dc>
 674:	11 d1       	rcall	.+546    	; 0x898 <Timer_getTick>
 676:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <timeVar+0x1>
 67a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <timeVar>
 67e:	85 e0       	ldi	r24, 0x05	; 5
                timeVar = Timer_getTick();
 680:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 684:	68 c0       	rjmp	.+208    	; 0x756 <trafficLight+0x2dc>
 686:	89 81       	ldd	r24, Y+1	; 0x01
 688:	88 23       	and	r24, r24
                trafficLightWithPerson_state = AUTO_RED_PERSON_RED_2;
 68a:	81 f0       	breq	.+32     	; 0x6ac <trafficLight+0x232>
 68c:	80 e0       	ldi	r24, 0x00	; 0
            }
            break;
            
        case AUTO_RED_PERSON_RED_2:
            // set leds
            if (extraLeds) {
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	44 dd       	rcall	.-1400   	; 0x11a <turnOnD>
                // cars
                turnOnD(0);
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	60 dd       	rcall	.-1344   	; 0x158 <turnOffD>
                turnOffD(1);
 698:	82 e0       	ldi	r24, 0x02	; 2
 69a:	90 e0       	ldi	r25, 0x00	; 0
                turnOffD(2);
 69c:	5d dd       	rcall	.-1350   	; 0x158 <turnOffD>
 69e:	83 e0       	ldi	r24, 0x03	; 3
                
                turnOnD(3);
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	3b dd       	rcall	.-1418   	; 0x11a <turnOnD>
 6a4:	84 e0       	ldi	r24, 0x04	; 4
                turnOffD(4);
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	57 dd       	rcall	.-1362   	; 0x158 <turnOffD>
 6aa:	08 c0       	rjmp	.+16     	; 0x6bc <trafficLight+0x242>
 6ac:	97 dd       	rcall	.-1234   	; 0x1dc <Led2_On>
 6ae:	b8 dd       	rcall	.-1168   	; 0x220 <Led3_On>
            } else {
                // red
                Led2_On();
 6b0:	ea dd       	rcall	.-1068   	; 0x286 <Led4_Off>
 6b2:	0b de       	rcall	.-1002   	; 0x2ca <Led5_Off>
                Led3_On();
 6b4:	2c de       	rcall	.-936    	; 0x30e <Led6_Off>
 6b6:	4d de       	rcall	.-870    	; 0x352 <Led7_Off>
                
                // yellow
                Led4_Off();
 6b8:	6f dd       	rcall	.-1314   	; 0x198 <Led1_On>
                Led5_Off();
 6ba:	6d de       	rcall	.-806    	; 0x396 <Led8_Off>
 6bc:	ed d0       	rcall	.+474    	; 0x898 <Timer_getTick>
                
                // green
                Led6_Off();
 6be:	9c 01       	movw	r18, r24
 6c0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <timeVar>
                Led7_Off();
 6c4:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <timeVar+0x1>
                
                // person
                Led1_On();  //red
 6c8:	a9 01       	movw	r20, r18
                Led8_Off();  //green
 6ca:	48 1b       	sub	r20, r24
 6cc:	59 0b       	sbc	r21, r25
            }
            
            if((Timer_getTick() - timeVar) >= 5000){
 6ce:	ca 01       	movw	r24, r20
 6d0:	88 38       	cpi	r24, 0x88	; 136
 6d2:	93 41       	sbci	r25, 0x13	; 19
 6d4:	08 f4       	brcc	.+2      	; 0x6d8 <trafficLight+0x25e>
 6d6:	41 c0       	rjmp	.+130    	; 0x75a <trafficLight+0x2e0>
 6d8:	df d0       	rcall	.+446    	; 0x898 <Timer_getTick>
 6da:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <timeVar+0x1>
 6de:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <timeVar>
 6e2:	86 e0       	ldi	r24, 0x06	; 6
 6e4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 6e8:	38 c0       	rjmp	.+112    	; 0x75a <trafficLight+0x2e0>
 6ea:	89 81       	ldd	r24, Y+1	; 0x01
                timeVar = Timer_getTick();
 6ec:	88 23       	and	r24, r24
 6ee:	81 f0       	breq	.+32     	; 0x710 <trafficLight+0x296>
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	12 dd       	rcall	.-1500   	; 0x11a <turnOnD>
 6f6:	81 e0       	ldi	r24, 0x01	; 1
                trafficLightWithPerson_state = AUTO_YELLOWRED_PERSON_RED;
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	0f dd       	rcall	.-1506   	; 0x11a <turnOnD>
 6fc:	82 e0       	ldi	r24, 0x02	; 2
            }
            break;
 6fe:	90 e0       	ldi	r25, 0x00	; 0
            
        case AUTO_YELLOWRED_PERSON_RED:
            // set leds
            if (extraLeds) {
 700:	2b dd       	rcall	.-1450   	; 0x158 <turnOffD>
 702:	83 e0       	ldi	r24, 0x03	; 3
 704:	90 e0       	ldi	r25, 0x00	; 0
                // cars
                turnOnD(0);
 706:	09 dd       	rcall	.-1518   	; 0x11a <turnOnD>
 708:	84 e0       	ldi	r24, 0x04	; 4
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	25 dd       	rcall	.-1462   	; 0x158 <turnOffD>
                turnOnD(1);
 70e:	08 c0       	rjmp	.+16     	; 0x720 <trafficLight+0x2a6>
 710:	65 dd       	rcall	.-1334   	; 0x1dc <Led2_On>
 712:	86 dd       	rcall	.-1268   	; 0x220 <Led3_On>
 714:	a7 dd       	rcall	.-1202   	; 0x264 <Led4_On>
                turnOffD(2);
 716:	c8 dd       	rcall	.-1136   	; 0x2a8 <Led5_On>
 718:	fa dd       	rcall	.-1036   	; 0x30e <Led6_Off>
 71a:	1b de       	rcall	.-970    	; 0x352 <Led7_Off>
 71c:	3d dd       	rcall	.-1414   	; 0x198 <Led1_On>
                
                turnOnD(3);
 71e:	3b de       	rcall	.-906    	; 0x396 <Led8_Off>
 720:	bb d0       	rcall	.+374    	; 0x898 <Timer_getTick>
 722:	9c 01       	movw	r18, r24
 724:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <timeVar>
                turnOffD(4);
 728:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <timeVar+0x1>
 72c:	a9 01       	movw	r20, r18
 72e:	48 1b       	sub	r20, r24
            } else {
                // red
                Led2_On();
 730:	59 0b       	sbc	r21, r25
 732:	ca 01       	movw	r24, r20
                Led3_On();
 734:	88 38       	cpi	r24, 0x88	; 136
 736:	93 41       	sbci	r25, 0x13	; 19
                
                // yellow
                Led4_On();
 738:	90 f0       	brcs	.+36     	; 0x75e <trafficLight+0x2e4>
 73a:	ae d0       	rcall	.+348    	; 0x898 <Timer_getTick>
                Led5_On();
 73c:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <timeVar+0x1>
                
                // green
                Led6_Off();
 740:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <timeVar>
                Led7_Off();
 744:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
                
                // person
                Led1_On();  //red
 748:	0a c0       	rjmp	.+20     	; 0x75e <trafficLight+0x2e4>
 74a:	00 00       	nop
                Led8_Off();  //green
 74c:	09 c0       	rjmp	.+18     	; 0x760 <trafficLight+0x2e6>
 74e:	00 00       	nop
            }
            
            if((Timer_getTick() - timeVar) >= 5000){
 750:	07 c0       	rjmp	.+14     	; 0x760 <trafficLight+0x2e6>
 752:	00 00       	nop
 754:	05 c0       	rjmp	.+10     	; 0x760 <trafficLight+0x2e6>
 756:	00 00       	nop
 758:	03 c0       	rjmp	.+6      	; 0x760 <trafficLight+0x2e6>
 75a:	00 00       	nop
 75c:	01 c0       	rjmp	.+2      	; 0x760 <trafficLight+0x2e6>
 75e:	00 00       	nop
 760:	00 00       	nop
 762:	0f 90       	pop	r0
 764:	df 91       	pop	r29
 766:	cf 91       	pop	r28
 768:	08 95       	ret

0000076a <Timer_init>:
 76a:	cf 93       	push	r28
                timeVar = Timer_getTick();
 76c:	df 93       	push	r29
 76e:	1f 92       	push	r1
 770:	cd b7       	in	r28, 0x3d	; 61
 772:	de b7       	in	r29, 0x3e	; 62
 774:	89 83       	std	Y+1, r24	; 0x01
 776:	89 81       	ldd	r24, Y+1	; 0x01
                trafficLightWithPerson_state = AUTO_GREEN_PERSON_RED;
 778:	88 2f       	mov	r24, r24
 77a:	90 e0       	ldi	r25, 0x00	; 0
            }
            break;
 77c:	05 d0       	rcall	.+10     	; 0x788 <Timer_init_withoutStruct>
                // goto step 1
                timeVar = Timer_getTick();
                trafficLightWithPerson_state = AUTO_YELLOW_PERSON_RED;
            }
            
            break;
 77e:	00 00       	nop
 780:	0f 90       	pop	r0
            if((Timer_getTick() - timeVar) >= 5000){
                // goto step 2
                timeVar = Timer_getTick();
                trafficLightWithPerson_state = AUTO_RED_PERSON_RED;
            }
            break;
 782:	df 91       	pop	r29
 784:	cf 91       	pop	r28
            
            if((Timer_getTick() - timeVar) >= 5000){
                timeVar = Timer_getTick();
                trafficLightWithPerson_state = AUTO_RED_PERSON_GREEN;
            }
            break;
 786:	08 95       	ret

00000788 <Timer_init_withoutStruct>:
 788:	cf 93       	push	r28
            
            if((Timer_getTick() - timeVar) >= 30000){
                timeVar = Timer_getTick();
                trafficLightWithPerson_state = AUTO_RED_PERSON_RED_2;
            }
            break;
 78a:	df 93       	push	r29
 78c:	1f 92       	push	r1
            
            if((Timer_getTick() - timeVar) >= 5000){
                timeVar = Timer_getTick();
                trafficLightWithPerson_state = AUTO_YELLOWRED_PERSON_RED;
            }
            break;
 78e:	cd b7       	in	r28, 0x3d	; 61
 790:	de b7       	in	r29, 0x3e	; 62
            
            if((Timer_getTick() - timeVar) >= 5000){
                timeVar = Timer_getTick();
                trafficLightWithPerson_state = AUTO_GREEN_PERSON_RED;
            }
            break;
 792:	89 83       	std	Y+1, r24	; 0x01
            
        default:
            break;
    }
}
 794:	85 e4       	ldi	r24, 0x45	; 69
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	25 e4       	ldi	r18, 0x45	; 69
 79a:	30 e0       	ldi	r19, 0x00	; 0
 79c:	f9 01       	movw	r30, r18
}

void Timer_init_withoutStruct(uint8_t clockFreqMhz) {
    // datasheet page 97
    // set mode to clear timer on compare (CTC)
    TCCR0B &= ~(1 << WGM02);
 79e:	20 81       	ld	r18, Z
 7a0:	27 7f       	andi	r18, 0xF7	; 247
 7a2:	fc 01       	movw	r30, r24
 7a4:	20 83       	st	Z, r18
    TCCR0A |= (1 << WGM01);
 7a6:	84 e4       	ldi	r24, 0x44	; 68
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	24 e4       	ldi	r18, 0x44	; 68
 7ac:	30 e0       	ldi	r19, 0x00	; 0
 7ae:	f9 01       	movw	r30, r18
 7b0:	20 81       	ld	r18, Z
 7b2:	22 60       	ori	r18, 0x02	; 2
 7b4:	fc 01       	movw	r30, r24
 7b6:	20 83       	st	Z, r18
    TCCR0A &= ~(1 << WGM00);
 7b8:	84 e4       	ldi	r24, 0x44	; 68
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	24 e4       	ldi	r18, 0x44	; 68
 7be:	30 e0       	ldi	r19, 0x00	; 0
 7c0:	f9 01       	movw	r30, r18
 7c2:	20 81       	ld	r18, Z
 7c4:	2e 7f       	andi	r18, 0xFE	; 254
 7c6:	fc 01       	movw	r30, r24
 7c8:	20 83       	st	Z, r18
    
    
    switch (clockFreqMhz) {
 7ca:	89 81       	ldd	r24, Y+1	; 0x01
 7cc:	88 2f       	mov	r24, r24
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	40 97       	sbiw	r24, 0x10	; 16
 7d2:	09 f5       	brne	.+66     	; 0x816 <Timer_init_withoutStruct+0x8e>
        case 16:
            // extern osc (16 MHZ)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = 249;   // dez 249; range 0 - 249 -> 250 cycles till interrupt
 7d4:	87 e4       	ldi	r24, 0x47	; 71
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	29 ef       	ldi	r18, 0xF9	; 249
 7da:	fc 01       	movw	r30, r24
 7dc:	20 83       	st	Z, r18
            
            // set prescaler to 1/64
            TCCR0B &= ~(1 << CS02);
 7de:	85 e4       	ldi	r24, 0x45	; 69
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	25 e4       	ldi	r18, 0x45	; 69
 7e4:	30 e0       	ldi	r19, 0x00	; 0
 7e6:	f9 01       	movw	r30, r18
 7e8:	20 81       	ld	r18, Z
 7ea:	2b 7f       	andi	r18, 0xFB	; 251
 7ec:	fc 01       	movw	r30, r24
 7ee:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
 7f0:	85 e4       	ldi	r24, 0x45	; 69
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	25 e4       	ldi	r18, 0x45	; 69
 7f6:	30 e0       	ldi	r19, 0x00	; 0
 7f8:	f9 01       	movw	r30, r18
 7fa:	20 81       	ld	r18, Z
 7fc:	22 60       	ori	r18, 0x02	; 2
 7fe:	fc 01       	movw	r30, r24
 800:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS00);
 802:	85 e4       	ldi	r24, 0x45	; 69
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	25 e4       	ldi	r18, 0x45	; 69
 808:	30 e0       	ldi	r19, 0x00	; 0
 80a:	f9 01       	movw	r30, r18
 80c:	20 81       	ld	r18, Z
 80e:	21 60       	ori	r18, 0x01	; 1
 810:	fc 01       	movw	r30, r24
 812:	20 83       	st	Z, r18
            break;
 814:	21 c0       	rjmp	.+66     	; 0x858 <Timer_init_withoutStruct+0xd0>
            
        default:
            // inter osc (8 MHZ divided by 8 -> 1 MHZ clock)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = 0x7C;   // dez 124; range 0 - 124 -> 125 cycles till interrupt
 816:	87 e4       	ldi	r24, 0x47	; 71
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	2c e7       	ldi	r18, 0x7C	; 124
 81c:	fc 01       	movw	r30, r24
 81e:	20 83       	st	Z, r18
            
            // set prescaler to 1/8
            TCCR0B &= ~(1 << CS02);
 820:	85 e4       	ldi	r24, 0x45	; 69
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	25 e4       	ldi	r18, 0x45	; 69
 826:	30 e0       	ldi	r19, 0x00	; 0
 828:	f9 01       	movw	r30, r18
 82a:	20 81       	ld	r18, Z
 82c:	2b 7f       	andi	r18, 0xFB	; 251
 82e:	fc 01       	movw	r30, r24
 830:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
 832:	85 e4       	ldi	r24, 0x45	; 69
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	25 e4       	ldi	r18, 0x45	; 69
 838:	30 e0       	ldi	r19, 0x00	; 0
 83a:	f9 01       	movw	r30, r18
 83c:	20 81       	ld	r18, Z
 83e:	22 60       	ori	r18, 0x02	; 2
 840:	fc 01       	movw	r30, r24
 842:	20 83       	st	Z, r18
            TCCR0B &= ~(1 << CS00);
 844:	85 e4       	ldi	r24, 0x45	; 69
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	25 e4       	ldi	r18, 0x45	; 69
 84a:	30 e0       	ldi	r19, 0x00	; 0
 84c:	f9 01       	movw	r30, r18
 84e:	20 81       	ld	r18, Z
 850:	2e 7f       	andi	r18, 0xFE	; 254
 852:	fc 01       	movw	r30, r24
 854:	20 83       	st	Z, r18
            break;
 856:	00 00       	nop
    }
    
    TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
 858:	8e e6       	ldi	r24, 0x6E	; 110
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	2e e6       	ldi	r18, 0x6E	; 110
 85e:	30 e0       	ldi	r19, 0x00	; 0
 860:	f9 01       	movw	r30, r18
 862:	20 81       	ld	r18, Z
 864:	2b 7f       	andi	r18, 0xFB	; 251
 866:	fc 01       	movw	r30, r24
 868:	20 83       	st	Z, r18
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
 86a:	8e e6       	ldi	r24, 0x6E	; 110
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	2e e6       	ldi	r18, 0x6E	; 110
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	f9 01       	movw	r30, r18
 874:	20 81       	ld	r18, Z
 876:	22 60       	ori	r18, 0x02	; 2
 878:	fc 01       	movw	r30, r24
 87a:	20 83       	st	Z, r18
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
 87c:	8e e6       	ldi	r24, 0x6E	; 110
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	2e e6       	ldi	r18, 0x6E	; 110
 882:	30 e0       	ldi	r19, 0x00	; 0
 884:	f9 01       	movw	r30, r18
 886:	20 81       	ld	r18, Z
 888:	2e 7f       	andi	r18, 0xFE	; 254
 88a:	fc 01       	movw	r30, r24
 88c:	20 83       	st	Z, r18
}
 88e:	00 00       	nop
 890:	0f 90       	pop	r0
 892:	df 91       	pop	r29
 894:	cf 91       	pop	r28
 896:	08 95       	ret

00000898 <Timer_getTick>:

uint16_t Timer_getTick() {
 898:	cf 93       	push	r28
 89a:	df 93       	push	r29
 89c:	00 d0       	rcall	.+0      	; 0x89e <Timer_getTick+0x6>
 89e:	cd b7       	in	r28, 0x3d	; 61
 8a0:	de b7       	in	r29, 0x3e	; 62
    // disable global interrupt
    cli();
 8a2:	f8 94       	cli
    
    // store timer_count in a temp int that can't get changed by ISR
    uint16_t temp_timer_count = timer_count;
 8a4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <timer_count>
 8a8:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <timer_count+0x1>
 8ac:	9a 83       	std	Y+2, r25	; 0x02
 8ae:	89 83       	std	Y+1, r24	; 0x01
    
    // enable global interrupt
    sei();
 8b0:	78 94       	sei

    return temp_timer_count;
 8b2:	89 81       	ldd	r24, Y+1	; 0x01
 8b4:	9a 81       	ldd	r25, Y+2	; 0x02
}
 8b6:	0f 90       	pop	r0
 8b8:	0f 90       	pop	r0
 8ba:	df 91       	pop	r29
 8bc:	cf 91       	pop	r28
 8be:	08 95       	ret

000008c0 <__vector_16>:
 ( not used atm)
 Timer compare A interrput:
 - increase timer_count
 - if timer_count is at max of uint16, set it to 0
 */
ISR(TIMER0_COMPA_vect){
 8c0:	1f 92       	push	r1
 8c2:	0f 92       	push	r0
 8c4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 8c8:	0f 92       	push	r0
 8ca:	11 24       	eor	r1, r1
 8cc:	8f 93       	push	r24
 8ce:	9f 93       	push	r25
 8d0:	cf 93       	push	r28
 8d2:	df 93       	push	r29
 8d4:	cd b7       	in	r28, 0x3d	; 61
 8d6:	de b7       	in	r29, 0x3e	; 62
    timer_count++;
 8d8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <timer_count>
 8dc:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <timer_count+0x1>
 8e0:	01 96       	adiw	r24, 0x01	; 1
 8e2:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <timer_count+0x1>
 8e6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <timer_count>
}
 8ea:	00 00       	nop
 8ec:	df 91       	pop	r29
 8ee:	cf 91       	pop	r28
 8f0:	9f 91       	pop	r25
 8f2:	8f 91       	pop	r24
 8f4:	0f 90       	pop	r0
 8f6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 8fa:	0f 90       	pop	r0
 8fc:	1f 90       	pop	r1
 8fe:	18 95       	reti

00000900 <uart_init>:

#include "Uart.h"

void uart_init(unsigned int baud) {
 900:	cf 93       	push	r28
 902:	df 93       	push	r29
 904:	00 d0       	rcall	.+0      	; 0x906 <uart_init+0x6>
 906:	cd b7       	in	r28, 0x3d	; 61
 908:	de b7       	in	r29, 0x3e	; 62
 90a:	9a 83       	std	Y+2, r25	; 0x02
 90c:	89 83       	std	Y+1, r24	; 0x01
    
    // Set baud rate
    UBRR0H = (unsigned char) (baud >> 8);
 90e:	85 ec       	ldi	r24, 0xC5	; 197
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	29 81       	ldd	r18, Y+1	; 0x01
 914:	3a 81       	ldd	r19, Y+2	; 0x02
 916:	23 2f       	mov	r18, r19
 918:	33 27       	eor	r19, r19
 91a:	fc 01       	movw	r30, r24
 91c:	20 83       	st	Z, r18
    UBRR0L = (unsigned char) baud;
 91e:	84 ec       	ldi	r24, 0xC4	; 196
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	29 81       	ldd	r18, Y+1	; 0x01
 924:	fc 01       	movw	r30, r24
 926:	20 83       	st	Z, r18
    
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // b00000110 -> async USART, no parity, 1 stop-bit, 8 bit (set UCSZn2 in UCSR0C to 0)
 928:	82 ec       	ldi	r24, 0xC2	; 194
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	26 e0       	ldi	r18, 0x06	; 6
 92e:	fc 01       	movw	r30, r24
 930:	20 83       	st	Z, r18
    
    UCSR0B = (1 << RXEN0) | (1 << TXEN0);   // set RX enable and TX enable
 932:	81 ec       	ldi	r24, 0xC1	; 193
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	28 e1       	ldi	r18, 0x18	; 24
 938:	fc 01       	movw	r30, r24
 93a:	20 83       	st	Z, r18
    
}
 93c:	00 00       	nop
 93e:	0f 90       	pop	r0
 940:	0f 90       	pop	r0
 942:	df 91       	pop	r29
 944:	cf 91       	pop	r28
 946:	08 95       	ret

00000948 <uart_send>:

void uart_send(char* string) {
 948:	cf 93       	push	r28
 94a:	df 93       	push	r29
 94c:	00 d0       	rcall	.+0      	; 0x94e <uart_send+0x6>
 94e:	00 d0       	rcall	.+0      	; 0x950 <uart_send+0x8>
 950:	00 d0       	rcall	.+0      	; 0x952 <uart_send+0xa>
 952:	cd b7       	in	r28, 0x3d	; 61
 954:	de b7       	in	r29, 0x3e	; 62
 956:	9e 83       	std	Y+6, r25	; 0x06
 958:	8d 83       	std	Y+5, r24	; 0x05
    
    int len = strlen(string);
 95a:	8d 81       	ldd	r24, Y+5	; 0x05
 95c:	9e 81       	ldd	r25, Y+6	; 0x06
 95e:	32 d0       	rcall	.+100    	; 0x9c4 <strlen>
 960:	9c 83       	std	Y+4, r25	; 0x04
 962:	8b 83       	std	Y+3, r24	; 0x03
    
    // Iterate over string
    for (int i = 0; i > len; i++) {
 964:	1a 82       	std	Y+2, r1	; 0x02
 966:	19 82       	std	Y+1, r1	; 0x01
 968:	1c c0       	rjmp	.+56     	; 0x9a2 <uart_send+0x5a>
        
        // Wait for transmit register to be empty
        while ( !(UCSR0A & (1 << UDRE0)) )
 96a:	00 00       	nop
 96c:	80 ec       	ldi	r24, 0xC0	; 192
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	fc 01       	movw	r30, r24
 972:	80 81       	ld	r24, Z
 974:	88 2f       	mov	r24, r24
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	80 72       	andi	r24, 0x20	; 32
 97a:	99 27       	eor	r25, r25
 97c:	89 2b       	or	r24, r25
 97e:	b1 f3       	breq	.-20     	; 0x96c <uart_send+0x24>
            ;
        
        // Write byte to transmit register
        UDR0 = string[i];
 980:	86 ec       	ldi	r24, 0xC6	; 198
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	29 81       	ldd	r18, Y+1	; 0x01
 986:	3a 81       	ldd	r19, Y+2	; 0x02
 988:	4d 81       	ldd	r20, Y+5	; 0x05
 98a:	5e 81       	ldd	r21, Y+6	; 0x06
 98c:	24 0f       	add	r18, r20
 98e:	35 1f       	adc	r19, r21
 990:	f9 01       	movw	r30, r18
 992:	20 81       	ld	r18, Z
 994:	fc 01       	movw	r30, r24
 996:	20 83       	st	Z, r18
void uart_send(char* string) {
    
    int len = strlen(string);
    
    // Iterate over string
    for (int i = 0; i > len; i++) {
 998:	89 81       	ldd	r24, Y+1	; 0x01
 99a:	9a 81       	ldd	r25, Y+2	; 0x02
 99c:	01 96       	adiw	r24, 0x01	; 1
 99e:	9a 83       	std	Y+2, r25	; 0x02
 9a0:	89 83       	std	Y+1, r24	; 0x01
 9a2:	29 81       	ldd	r18, Y+1	; 0x01
 9a4:	3a 81       	ldd	r19, Y+2	; 0x02
 9a6:	8b 81       	ldd	r24, Y+3	; 0x03
 9a8:	9c 81       	ldd	r25, Y+4	; 0x04
 9aa:	82 17       	cp	r24, r18
 9ac:	93 07       	cpc	r25, r19
 9ae:	ec f2       	brlt	.-70     	; 0x96a <uart_send+0x22>
        UDR0 = string[i];
    }
    
    
    
}
 9b0:	00 00       	nop
 9b2:	26 96       	adiw	r28, 0x06	; 6
 9b4:	0f b6       	in	r0, 0x3f	; 63
 9b6:	f8 94       	cli
 9b8:	de bf       	out	0x3e, r29	; 62
 9ba:	0f be       	out	0x3f, r0	; 63
 9bc:	cd bf       	out	0x3d, r28	; 61
 9be:	df 91       	pop	r29
 9c0:	cf 91       	pop	r28
 9c2:	08 95       	ret

000009c4 <strlen>:
 9c4:	fc 01       	movw	r30, r24
 9c6:	01 90       	ld	r0, Z+
 9c8:	00 20       	and	r0, r0
 9ca:	e9 f7       	brne	.-6      	; 0x9c6 <strlen+0x2>
 9cc:	80 95       	com	r24
 9ce:	90 95       	com	r25
 9d0:	8e 0f       	add	r24, r30
 9d2:	9f 1f       	adc	r25, r31
 9d4:	08 95       	ret

000009d6 <_exit>:
 9d6:	f8 94       	cli

000009d8 <__stop_program>:
 9d8:	ff cf       	rjmp	.-2      	; 0x9d8 <__stop_program>
