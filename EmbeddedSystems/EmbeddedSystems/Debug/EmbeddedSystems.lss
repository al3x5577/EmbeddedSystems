
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000122e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800100  00800100  0000122e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000122e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000127a  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000834  00000000  00000000  0000265a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c11  00000000  00000000  00002e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003dc  00000000  00000000  00003aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000529  00000000  00000000  00003e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006f4  00000000  00000000  000043a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00004a99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
       2:	00 00       	nop
       4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
       6:	00 00       	nop
       8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
       a:	00 00       	nop
       c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
       e:	00 00       	nop
      10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
      12:	00 00       	nop
      14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
      16:	00 00       	nop
      18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
      1e:	00 00       	nop
      20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
      22:	00 00       	nop
      24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
      26:	00 00       	nop
      28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
      2e:	00 00       	nop
      30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
      32:	00 00       	nop
      34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
      36:	00 00       	nop
      38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
      3e:	00 00       	nop
      40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
      42:	00 00       	nop
      44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
      46:	00 00       	nop
      48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
      4e:	00 00       	nop
      50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
      52:	00 00       	nop
      54:	1a c0       	rjmp	.+52     	; 0x8a <__bad_interrupt>
      56:	00 00       	nop
      58:	18 c0       	rjmp	.+48     	; 0x8a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	16 c0       	rjmp	.+44     	; 0x8a <__bad_interrupt>
      5e:	00 00       	nop
      60:	14 c0       	rjmp	.+40     	; 0x8a <__bad_interrupt>
      62:	00 00       	nop
      64:	12 c0       	rjmp	.+36     	; 0x8a <__bad_interrupt>
	...

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
      74:	21 e0       	ldi	r18, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
      7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
      7e:	ae 30       	cpi	r26, 0x0E	; 14
      80:	b2 07       	cpc	r27, r18
      82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
      84:	49 d1       	rcall	.+658    	; 0x318 <main>
      86:	0c 94 db 08 	jmp	0x11b6	; 0x11b6 <_exit>

0000008a <__bad_interrupt>:
      8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <Led_init>:
void Led7_On(void) {
    PORTB |= (1 << 1);
}
void Led7_Off(void) {
    PORTB &= ~(1 << 1);
}
      8c:	cf 93       	push	r28
      8e:	df 93       	push	r29
      90:	cd b7       	in	r28, 0x3d	; 61
      92:	de b7       	in	r29, 0x3e	; 62
      94:	84 e2       	ldi	r24, 0x24	; 36
      96:	90 e0       	ldi	r25, 0x00	; 0
      98:	2f ef       	ldi	r18, 0xFF	; 255
      9a:	fc 01       	movw	r30, r24
      9c:	20 83       	st	Z, r18
      9e:	00 00       	nop
      a0:	df 91       	pop	r29
      a2:	cf 91       	pop	r28
      a4:	08 95       	ret

000000a6 <Led1_On>:
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
      ae:	85 e2       	ldi	r24, 0x25	; 37
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	25 e2       	ldi	r18, 0x25	; 37
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	f9 01       	movw	r30, r18
      b8:	20 81       	ld	r18, Z
      ba:	20 68       	ori	r18, 0x80	; 128
      bc:	fc 01       	movw	r30, r24
      be:	20 83       	st	Z, r18
      c0:	00 00       	nop
      c2:	df 91       	pop	r29
      c4:	cf 91       	pop	r28
      c6:	08 95       	ret

000000c8 <Led1_Off>:
      c8:	cf 93       	push	r28
      ca:	df 93       	push	r29
      cc:	cd b7       	in	r28, 0x3d	; 61
      ce:	de b7       	in	r29, 0x3e	; 62
      d0:	85 e2       	ldi	r24, 0x25	; 37
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	25 e2       	ldi	r18, 0x25	; 37
      d6:	30 e0       	ldi	r19, 0x00	; 0
      d8:	f9 01       	movw	r30, r18
      da:	20 81       	ld	r18, Z
      dc:	2f 77       	andi	r18, 0x7F	; 127
      de:	fc 01       	movw	r30, r24
      e0:	20 83       	st	Z, r18
      e2:	00 00       	nop
      e4:	df 91       	pop	r29
      e6:	cf 91       	pop	r28
      e8:	08 95       	ret

000000ea <Led2_On>:
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29
      ee:	cd b7       	in	r28, 0x3d	; 61
      f0:	de b7       	in	r29, 0x3e	; 62
      f2:	85 e2       	ldi	r24, 0x25	; 37
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	25 e2       	ldi	r18, 0x25	; 37
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	f9 01       	movw	r30, r18
      fc:	20 81       	ld	r18, Z
      fe:	20 64       	ori	r18, 0x40	; 64
     100:	fc 01       	movw	r30, r24
     102:	20 83       	st	Z, r18
     104:	00 00       	nop
     106:	df 91       	pop	r29
     108:	cf 91       	pop	r28
     10a:	08 95       	ret

0000010c <Led2_Off>:
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	cd b7       	in	r28, 0x3d	; 61
     112:	de b7       	in	r29, 0x3e	; 62
     114:	85 e2       	ldi	r24, 0x25	; 37
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	25 e2       	ldi	r18, 0x25	; 37
     11a:	30 e0       	ldi	r19, 0x00	; 0
     11c:	f9 01       	movw	r30, r18
     11e:	20 81       	ld	r18, Z
     120:	2f 7b       	andi	r18, 0xBF	; 191
     122:	fc 01       	movw	r30, r24
     124:	20 83       	st	Z, r18
     126:	00 00       	nop
     128:	df 91       	pop	r29
     12a:	cf 91       	pop	r28
     12c:	08 95       	ret

0000012e <Led3_On>:
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	85 e2       	ldi	r24, 0x25	; 37
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	25 e2       	ldi	r18, 0x25	; 37
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	f9 01       	movw	r30, r18
     140:	20 81       	ld	r18, Z
     142:	20 62       	ori	r18, 0x20	; 32
     144:	fc 01       	movw	r30, r24
     146:	20 83       	st	Z, r18
     148:	00 00       	nop
     14a:	df 91       	pop	r29
     14c:	cf 91       	pop	r28
     14e:	08 95       	ret

00000150 <Led3_Off>:
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	cd b7       	in	r28, 0x3d	; 61
     156:	de b7       	in	r29, 0x3e	; 62
     158:	85 e2       	ldi	r24, 0x25	; 37
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	25 e2       	ldi	r18, 0x25	; 37
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	f9 01       	movw	r30, r18
     162:	20 81       	ld	r18, Z
     164:	2f 7d       	andi	r18, 0xDF	; 223
     166:	fc 01       	movw	r30, r24
     168:	20 83       	st	Z, r18
     16a:	00 00       	nop
     16c:	df 91       	pop	r29
     16e:	cf 91       	pop	r28
     170:	08 95       	ret

00000172 <Led4_On>:
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	cd b7       	in	r28, 0x3d	; 61
     178:	de b7       	in	r29, 0x3e	; 62
     17a:	85 e2       	ldi	r24, 0x25	; 37
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	25 e2       	ldi	r18, 0x25	; 37
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	f9 01       	movw	r30, r18
     184:	20 81       	ld	r18, Z
     186:	20 61       	ori	r18, 0x10	; 16
     188:	fc 01       	movw	r30, r24
     18a:	20 83       	st	Z, r18
     18c:	00 00       	nop
     18e:	df 91       	pop	r29
     190:	cf 91       	pop	r28
     192:	08 95       	ret

00000194 <Led4_Off>:
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	cd b7       	in	r28, 0x3d	; 61
     19a:	de b7       	in	r29, 0x3e	; 62
     19c:	85 e2       	ldi	r24, 0x25	; 37
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	25 e2       	ldi	r18, 0x25	; 37
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	f9 01       	movw	r30, r18
     1a6:	20 81       	ld	r18, Z
     1a8:	2f 7e       	andi	r18, 0xEF	; 239
     1aa:	fc 01       	movw	r30, r24
     1ac:	20 83       	st	Z, r18
     1ae:	00 00       	nop
     1b0:	df 91       	pop	r29
     1b2:	cf 91       	pop	r28
     1b4:	08 95       	ret

000001b6 <Led5_On>:
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	cd b7       	in	r28, 0x3d	; 61
     1bc:	de b7       	in	r29, 0x3e	; 62
     1be:	85 e2       	ldi	r24, 0x25	; 37
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	25 e2       	ldi	r18, 0x25	; 37
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	f9 01       	movw	r30, r18
     1c8:	20 81       	ld	r18, Z
     1ca:	28 60       	ori	r18, 0x08	; 8
     1cc:	fc 01       	movw	r30, r24
     1ce:	20 83       	st	Z, r18
     1d0:	00 00       	nop
     1d2:	df 91       	pop	r29
     1d4:	cf 91       	pop	r28
     1d6:	08 95       	ret

000001d8 <Led8_On>:

/**
led8 - ioB0
*/
void Led8_On(void) {
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	cd b7       	in	r28, 0x3d	; 61
     1de:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 0);
     1e0:	85 e2       	ldi	r24, 0x25	; 37
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	25 e2       	ldi	r18, 0x25	; 37
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	f9 01       	movw	r30, r18
     1ea:	20 81       	ld	r18, Z
     1ec:	21 60       	ori	r18, 0x01	; 1
     1ee:	fc 01       	movw	r30, r24
     1f0:	20 83       	st	Z, r18
}
     1f2:	00 00       	nop
     1f4:	df 91       	pop	r29
     1f6:	cf 91       	pop	r28
     1f8:	08 95       	ret

000001fa <Taster_init>:
 ---------------------
 - DDR Reg has to be set to 0
 - PORT Reg has to be set to 1
 -> Pin is input with pull-up
 */
void Taster_init() {
     1fa:	cf 93       	push	r28
     1fc:	df 93       	push	r29
     1fe:	cd b7       	in	r28, 0x3d	; 61
     200:	de b7       	in	r29, 0x3e	; 62
    // set to inputs
    DDRC &= (1 << 2);
     202:	87 e2       	ldi	r24, 0x27	; 39
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	27 e2       	ldi	r18, 0x27	; 39
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	f9 01       	movw	r30, r18
     20c:	20 81       	ld	r18, Z
     20e:	24 70       	andi	r18, 0x04	; 4
     210:	fc 01       	movw	r30, r24
     212:	20 83       	st	Z, r18
    DDRD &= ~( (1 << 7) | (1 << 6) | (1 << 5) );
     214:	8a e2       	ldi	r24, 0x2A	; 42
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	2a e2       	ldi	r18, 0x2A	; 42
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	f9 01       	movw	r30, r18
     21e:	20 81       	ld	r18, Z
     220:	2f 71       	andi	r18, 0x1F	; 31
     222:	fc 01       	movw	r30, r24
     224:	20 83       	st	Z, r18
    
    // enable pull-up
    PORTC |= (1 << 2);
     226:	88 e2       	ldi	r24, 0x28	; 40
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	28 e2       	ldi	r18, 0x28	; 40
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	f9 01       	movw	r30, r18
     230:	20 81       	ld	r18, Z
     232:	24 60       	ori	r18, 0x04	; 4
     234:	fc 01       	movw	r30, r24
     236:	20 83       	st	Z, r18
    PORTD |= (1 << 7) | (1 << 6) | (1 << 5);
     238:	8b e2       	ldi	r24, 0x2B	; 43
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	2b e2       	ldi	r18, 0x2B	; 43
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	f9 01       	movw	r30, r18
     242:	20 81       	ld	r18, Z
     244:	20 6e       	ori	r18, 0xE0	; 224
     246:	fc 01       	movw	r30, r24
     248:	20 83       	st	Z, r18
}
     24a:	00 00       	nop
     24c:	df 91       	pop	r29
     24e:	cf 91       	pop	r28
     250:	08 95       	ret

00000252 <Taster1_get>:

/**
 Taster1 - ioD7
 */
uint8_t Taster1_get(void) {
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	00 d0       	rcall	.+0      	; 0x258 <Taster1_get+0x6>
     258:	cd b7       	in	r28, 0x3d	; 61
     25a:	de b7       	in	r29, 0x3e	; 62
    int state = PIND;
     25c:	89 e2       	ldi	r24, 0x29	; 41
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	fc 01       	movw	r30, r24
     262:	80 81       	ld	r24, Z
     264:	88 2f       	mov	r24, r24
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	9a 83       	std	Y+2, r25	; 0x02
     26a:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<7)) == 0 ) {
     26c:	89 81       	ldd	r24, Y+1	; 0x01
     26e:	9a 81       	ldd	r25, Y+2	; 0x02
     270:	80 78       	andi	r24, 0x80	; 128
     272:	99 27       	eor	r25, r25
     274:	89 2b       	or	r24, r25
     276:	11 f4       	brne	.+4      	; 0x27c <Taster1_get+0x2a>
        return TASTER_RETURN_VALUE_LOW;
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	01 c0       	rjmp	.+2      	; 0x27e <Taster1_get+0x2c>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
     27c:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     27e:	0f 90       	pop	r0
     280:	0f 90       	pop	r0
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	08 95       	ret

00000288 <Taster2_get>:

/**
Taster2 - ioD6
*/
uint8_t Taster2_get(void) {
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	1f 92       	push	r1
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
    uint8_t state = PIND;
     292:	89 e2       	ldi	r24, 0x29	; 41
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	fc 01       	movw	r30, r24
     298:	80 81       	ld	r24, Z
     29a:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<6)) == 0 ) {
     29c:	89 81       	ldd	r24, Y+1	; 0x01
     29e:	88 2f       	mov	r24, r24
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	80 74       	andi	r24, 0x40	; 64
     2a4:	99 27       	eor	r25, r25
     2a6:	89 2b       	or	r24, r25
     2a8:	11 f4       	brne	.+4      	; 0x2ae <Taster2_get+0x26>
        return TASTER_RETURN_VALUE_LOW;
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <Taster2_get+0x28>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
     2ae:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     2b0:	0f 90       	pop	r0
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
     2b6:	08 95       	ret

000002b8 <Taster3_get>:

/**
Taster3 - ioD5
*/
uint8_t Taster3_get(void) {
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	1f 92       	push	r1
     2be:	cd b7       	in	r28, 0x3d	; 61
     2c0:	de b7       	in	r29, 0x3e	; 62
    uint8_t state = PIND;
     2c2:	89 e2       	ldi	r24, 0x29	; 41
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	fc 01       	movw	r30, r24
     2c8:	80 81       	ld	r24, Z
     2ca:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<5)) == 0 ) {
     2cc:	89 81       	ldd	r24, Y+1	; 0x01
     2ce:	88 2f       	mov	r24, r24
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	80 72       	andi	r24, 0x20	; 32
     2d4:	99 27       	eor	r25, r25
     2d6:	89 2b       	or	r24, r25
     2d8:	11 f4       	brne	.+4      	; 0x2de <Taster3_get+0x26>
        return TASTER_RETURN_VALUE_LOW;
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	01 c0       	rjmp	.+2      	; 0x2e0 <Taster3_get+0x28>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
     2de:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     2e0:	0f 90       	pop	r0
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <Taster4_get>:

/**
Taster4 - ioC2
*/
uint8_t Taster4_get(void) {
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	1f 92       	push	r1
     2ee:	cd b7       	in	r28, 0x3d	; 61
     2f0:	de b7       	in	r29, 0x3e	; 62
    uint8_t state = PINC;
     2f2:	86 e2       	ldi	r24, 0x26	; 38
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	fc 01       	movw	r30, r24
     2f8:	80 81       	ld	r24, Z
     2fa:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<2)) == 0 ) {
     2fc:	89 81       	ldd	r24, Y+1	; 0x01
     2fe:	88 2f       	mov	r24, r24
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	84 70       	andi	r24, 0x04	; 4
     304:	99 27       	eor	r25, r25
     306:	89 2b       	or	r24, r25
     308:	11 f4       	brne	.+4      	; 0x30e <Taster4_get+0x26>
        return TASTER_RETURN_VALUE_LOW;
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	01 c0       	rjmp	.+2      	; 0x310 <Taster4_get+0x28>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
     30e:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     310:	0f 90       	pop	r0
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	08 95       	ret

00000318 <main>:
#include "gpio/Taster.h"
#include "gpio/Led.h"
#include "playground/Playground.h"


int main(void) {
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
     31c:	cd b7       	in	r28, 0x3d	; 61
     31e:	de b7       	in	r29, 0x3e	; 62
	
    Led_init();
     320:	b5 de       	rcall	.-662    	; 0x8c <Led_init>
	Taster_init();
     322:	6b df       	rcall	.-298    	; 0x1fa <Taster_init>
	
    while (1) {
        playground();
     324:	01 d0       	rcall	.+2      	; 0x328 <playground>
     326:	fe cf       	rjmp	.-4      	; 0x324 <main+0xc>

00000328 <playground>:
    }
     328:	0f 93       	push	r16
- button1 pressed -> testTasterLed()
- button2 pressed -> testBoard()
- button3 pressed -> lauflicht()
- button4 pressed -> increment()
*/
void playground() {
     32a:	1f 93       	push	r17
     32c:	cf 93       	push	r28
     32e:	df 93       	push	r29
     330:	cd b7       	in	r28, 0x3d	; 61
     332:	de b7       	in	r29, 0x3e	; 62
     334:	c4 55       	subi	r28, 0x54	; 84
     336:	d1 09       	sbc	r29, r1
     338:	0f b6       	in	r0, 0x3f	; 63
     33a:	f8 94       	cli
     33c:	de bf       	out	0x3e, r29	; 62
     33e:	0f be       	out	0x3f, r0	; 63
     340:	cd bf       	out	0x3d, r28	; 61
    static int mode = 0;
    
    if (mode == 0) {    // mode selection
     342:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     346:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
     34a:	89 2b       	or	r24, r25
     34c:	09 f0       	breq	.+2      	; 0x350 <playground+0x28>
     34e:	02 c2       	rjmp	.+1028   	; 0x754 <__LOCK_REGION_LENGTH__+0x354>
        Led1_On();
     350:	aa de       	rcall	.-684    	; 0xa6 <Led1_On>
        Led4_On();
     352:	0f df       	rcall	.-482    	; 0x172 <Led4_On>
        Led5_On();
     354:	30 df       	rcall	.-416    	; 0x1b6 <Led5_On>
        Led8_On();
     356:	40 df       	rcall	.-384    	; 0x1d8 <Led8_On>
     358:	7c df       	rcall	.-264    	; 0x252 <Taster1_get>
        
        // test buttons
        if (Taster1_get()) {
     35a:	89 2b       	or	r24, r25
     35c:	09 f4       	brne	.+2      	; 0x360 <playground+0x38>
     35e:	79 c0       	rjmp	.+242    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	90 e0       	ldi	r25, 0x00	; 0
            mode = 1;
     364:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
     368:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     36c:	85 e2       	ldi	r24, 0x25	; 37
            PORTB = 0x00;
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	fc 01       	movw	r30, r24
     372:	10 82       	st	Z, r1
     374:	98 de       	rcall	.-720    	; 0xa6 <Led1_On>
            Led1_On();
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	aa ef       	ldi	r26, 0xFA	; 250
     37c:	b3 e4       	ldi	r27, 0x43	; 67
     37e:	8d 8b       	std	Y+21, r24	; 0x15
     380:	9e 8b       	std	Y+22, r25	; 0x16
     382:	af 8b       	std	Y+23, r26	; 0x17
     384:	b8 8f       	std	Y+24, r27	; 0x18
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	30 e0       	ldi	r19, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     38a:	4a e7       	ldi	r20, 0x7A	; 122
     38c:	53 e4       	ldi	r21, 0x43	; 67
     38e:	6d 89       	ldd	r22, Y+21	; 0x15
     390:	7e 89       	ldd	r23, Y+22	; 0x16
     392:	8f 89       	ldd	r24, Y+23	; 0x17
     394:	98 8d       	ldd	r25, Y+24	; 0x18
     396:	84 d6       	rcall	.+3336   	; 0x10a0 <__mulsf3>
     398:	dc 01       	movw	r26, r24
     39a:	cb 01       	movw	r24, r22
     39c:	89 8f       	std	Y+25, r24	; 0x19
     39e:	9a 8f       	std	Y+26, r25	; 0x1a
     3a0:	ab 8f       	std	Y+27, r26	; 0x1b
     3a2:	bc 8f       	std	Y+28, r27	; 0x1c
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
     3a8:	40 e8       	ldi	r20, 0x80	; 128
     3aa:	5f e3       	ldi	r21, 0x3F	; 63
     3ac:	69 8d       	ldd	r22, Y+25	; 0x19
     3ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
     3b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     3b4:	f4 d5       	rcall	.+3048   	; 0xf9e <__cmpsf2>
     3b6:	88 23       	and	r24, r24
     3b8:	2c f4       	brge	.+10     	; 0x3c4 <playground+0x9c>
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
     3be:	9e 8f       	std	Y+30, r25	; 0x1e
     3c0:	8d 8f       	std	Y+29, r24	; 0x1d
     3c2:	3b c0       	rjmp	.+118    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     3c4:	20 e0       	ldi	r18, 0x00	; 0
     3c6:	3f ef       	ldi	r19, 0xFF	; 255
	else if (__tmp > 65535)
     3c8:	4f e7       	ldi	r20, 0x7F	; 127
     3ca:	57 e4       	ldi	r21, 0x47	; 71
     3cc:	69 8d       	ldd	r22, Y+25	; 0x19
     3ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
     3d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     3d4:	61 d6       	rcall	.+3266   	; 0x1098 <__gesf2>
     3d6:	18 16       	cp	r1, r24
     3d8:	3c f5       	brge	.+78     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     3da:	20 e0       	ldi	r18, 0x00	; 0
     3dc:	30 e0       	ldi	r19, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3de:	40 e2       	ldi	r20, 0x20	; 32
     3e0:	51 e4       	ldi	r21, 0x41	; 65
     3e2:	6d 89       	ldd	r22, Y+21	; 0x15
     3e4:	7e 89       	ldd	r23, Y+22	; 0x16
     3e6:	8f 89       	ldd	r24, Y+23	; 0x17
     3e8:	98 8d       	ldd	r25, Y+24	; 0x18
     3ea:	5a d6       	rcall	.+3252   	; 0x10a0 <__mulsf3>
     3ec:	dc 01       	movw	r26, r24
     3ee:	cb 01       	movw	r24, r22
     3f0:	bc 01       	movw	r22, r24
     3f2:	cd 01       	movw	r24, r26
     3f4:	d8 d5       	rcall	.+2992   	; 0xfa6 <__fixunssfsi>
     3f6:	dc 01       	movw	r26, r24
     3f8:	cb 01       	movw	r24, r22
     3fa:	9e 8f       	std	Y+30, r25	; 0x1e
     3fc:	8d 8f       	std	Y+29, r24	; 0x1d
     3fe:	0f c0       	rjmp	.+30     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     400:	89 e1       	ldi	r24, 0x19	; 25
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	98 a3       	std	Y+32, r25	; 0x20
     406:	8f 8f       	std	Y+31, r24	; 0x1f
     408:	8f 8d       	ldd	r24, Y+31	; 0x1f
     40a:	98 a1       	ldd	r25, Y+32	; 0x20
     40c:	01 97       	sbiw	r24, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     40e:	f1 f7       	brne	.-4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     410:	98 a3       	std	Y+32, r25	; 0x20
     412:	8f 8f       	std	Y+31, r24	; 0x1f
     414:	8d 8d       	ldd	r24, Y+29	; 0x1d
     416:	9e 8d       	ldd	r25, Y+30	; 0x1e
     418:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     41a:	9e 8f       	std	Y+30, r25	; 0x1e
     41c:	8d 8f       	std	Y+29, r24	; 0x1d
     41e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     420:	9e 8d       	ldd	r25, Y+30	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     422:	89 2b       	or	r24, r25
     424:	69 f7       	brne	.-38     	; 0x400 <__LOCK_REGION_LENGTH__>
     426:	13 c0       	rjmp	.+38     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     428:	69 8d       	ldd	r22, Y+25	; 0x19
     42a:	7a 8d       	ldd	r23, Y+26	; 0x1a
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     42c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     42e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     430:	ba d5       	rcall	.+2932   	; 0xfa6 <__fixunssfsi>
     432:	dc 01       	movw	r26, r24
     434:	cb 01       	movw	r24, r22
     436:	9e 8f       	std	Y+30, r25	; 0x1e
     438:	8d 8f       	std	Y+29, r24	; 0x1d
     43a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     43c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     43e:	9a a3       	std	Y+34, r25	; 0x22
     440:	89 a3       	std	Y+33, r24	; 0x21
     442:	89 a1       	ldd	r24, Y+33	; 0x21
     444:	9a a1       	ldd	r25, Y+34	; 0x22
     446:	01 97       	sbiw	r24, 0x01	; 1
     448:	f1 f7       	brne	.-4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     44a:	9a a3       	std	Y+34, r25	; 0x22
     44c:	89 a3       	std	Y+33, r24	; 0x21
     44e:	3c de       	rcall	.-904    	; 0xc8 <Led1_Off>
            _delay_ms(500);
            Led1_Off();
     450:	19 c3       	rjmp	.+1586   	; 0xa84 <__stack+0x185>
     452:	1a df       	rcall	.-460    	; 0x288 <Taster2_get>
            default:
                mode = 0;
                break;
        }
    }
}
     454:	89 2b       	or	r24, r25
            mode = 1;
            PORTB = 0x00;
            Led1_On();
            _delay_ms(500);
            Led1_Off();
        } else if (Taster2_get()) {
     456:	09 f4       	brne	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     458:	79 c0       	rjmp	.+242    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
     45a:	82 e0       	ldi	r24, 0x02	; 2
     45c:	90 e0       	ldi	r25, 0x00	; 0
            mode = 2;
     45e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
     462:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     466:	85 e2       	ldi	r24, 0x25	; 37
     468:	90 e0       	ldi	r25, 0x00	; 0
            PORTB = 0x00;
     46a:	fc 01       	movw	r30, r24
     46c:	10 82       	st	Z, r1
     46e:	3d de       	rcall	.-902    	; 0xea <Led2_On>
     470:	80 e0       	ldi	r24, 0x00	; 0
            Led2_On();
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	aa ef       	ldi	r26, 0xFA	; 250
     476:	b3 e4       	ldi	r27, 0x43	; 67
     478:	89 83       	std	Y+1, r24	; 0x01
     47a:	9a 83       	std	Y+2, r25	; 0x02
     47c:	ab 83       	std	Y+3, r26	; 0x03
     47e:	bc 83       	std	Y+4, r27	; 0x04
     480:	20 e0       	ldi	r18, 0x00	; 0
     482:	30 e0       	ldi	r19, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     484:	4a e7       	ldi	r20, 0x7A	; 122
     486:	53 e4       	ldi	r21, 0x43	; 67
     488:	69 81       	ldd	r22, Y+1	; 0x01
     48a:	7a 81       	ldd	r23, Y+2	; 0x02
     48c:	8b 81       	ldd	r24, Y+3	; 0x03
     48e:	9c 81       	ldd	r25, Y+4	; 0x04
     490:	07 d6       	rcall	.+3086   	; 0x10a0 <__mulsf3>
     492:	dc 01       	movw	r26, r24
     494:	cb 01       	movw	r24, r22
     496:	8b a3       	std	Y+35, r24	; 0x23
     498:	9c a3       	std	Y+36, r25	; 0x24
     49a:	ad a3       	std	Y+37, r26	; 0x25
     49c:	be a3       	std	Y+38, r27	; 0x26
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
     4a2:	40 e8       	ldi	r20, 0x80	; 128
     4a4:	5f e3       	ldi	r21, 0x3F	; 63
     4a6:	6b a1       	ldd	r22, Y+35	; 0x23
     4a8:	7c a1       	ldd	r23, Y+36	; 0x24
     4aa:	8d a1       	ldd	r24, Y+37	; 0x25
     4ac:	9e a1       	ldd	r25, Y+38	; 0x26
     4ae:	77 d5       	rcall	.+2798   	; 0xf9e <__cmpsf2>
     4b0:	88 23       	and	r24, r24
     4b2:	2c f4       	brge	.+10     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
     4b8:	98 a7       	std	Y+40, r25	; 0x28
     4ba:	8f a3       	std	Y+39, r24	; 0x27
     4bc:	3b c0       	rjmp	.+118    	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	3f ef       	ldi	r19, 0xFF	; 255
	else if (__tmp > 65535)
     4c2:	4f e7       	ldi	r20, 0x7F	; 127
     4c4:	57 e4       	ldi	r21, 0x47	; 71
     4c6:	6b a1       	ldd	r22, Y+35	; 0x23
     4c8:	7c a1       	ldd	r23, Y+36	; 0x24
     4ca:	8d a1       	ldd	r24, Y+37	; 0x25
     4cc:	9e a1       	ldd	r25, Y+38	; 0x26
     4ce:	e4 d5       	rcall	.+3016   	; 0x1098 <__gesf2>
     4d0:	18 16       	cp	r1, r24
     4d2:	3c f5       	brge	.+78     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
     4d4:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	40 e2       	ldi	r20, 0x20	; 32
     4da:	51 e4       	ldi	r21, 0x41	; 65
     4dc:	69 81       	ldd	r22, Y+1	; 0x01
     4de:	7a 81       	ldd	r23, Y+2	; 0x02
     4e0:	8b 81       	ldd	r24, Y+3	; 0x03
     4e2:	9c 81       	ldd	r25, Y+4	; 0x04
     4e4:	dd d5       	rcall	.+3002   	; 0x10a0 <__mulsf3>
     4e6:	dc 01       	movw	r26, r24
     4e8:	cb 01       	movw	r24, r22
     4ea:	bc 01       	movw	r22, r24
     4ec:	cd 01       	movw	r24, r26
     4ee:	5b d5       	rcall	.+2742   	; 0xfa6 <__fixunssfsi>
     4f0:	dc 01       	movw	r26, r24
     4f2:	cb 01       	movw	r24, r22
     4f4:	98 a7       	std	Y+40, r25	; 0x28
     4f6:	8f a3       	std	Y+39, r24	; 0x27
     4f8:	0f c0       	rjmp	.+30     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
     4fa:	89 e1       	ldi	r24, 0x19	; 25
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	9a a7       	std	Y+42, r25	; 0x2a
     500:	89 a7       	std	Y+41, r24	; 0x29
     502:	89 a5       	ldd	r24, Y+41	; 0x29
     504:	9a a5       	ldd	r25, Y+42	; 0x2a
     506:	01 97       	sbiw	r24, 0x01	; 1
     508:	f1 f7       	brne	.-4      	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
     50a:	9a a7       	std	Y+42, r25	; 0x2a
     50c:	89 a7       	std	Y+41, r24	; 0x29
     50e:	8f a1       	ldd	r24, Y+39	; 0x27
     510:	98 a5       	ldd	r25, Y+40	; 0x28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     512:	01 97       	sbiw	r24, 0x01	; 1
     514:	98 a7       	std	Y+40, r25	; 0x28
     516:	8f a3       	std	Y+39, r24	; 0x27
     518:	8f a1       	ldd	r24, Y+39	; 0x27
     51a:	98 a5       	ldd	r25, Y+40	; 0x28
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     51c:	89 2b       	or	r24, r25
     51e:	69 f7       	brne	.-38     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     520:	13 c0       	rjmp	.+38     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
     522:	6b a1       	ldd	r22, Y+35	; 0x23
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     524:	7c a1       	ldd	r23, Y+36	; 0x24
     526:	8d a1       	ldd	r24, Y+37	; 0x25
     528:	9e a1       	ldd	r25, Y+38	; 0x26
     52a:	3d d5       	rcall	.+2682   	; 0xfa6 <__fixunssfsi>
     52c:	dc 01       	movw	r26, r24
     52e:	cb 01       	movw	r24, r22
     530:	98 a7       	std	Y+40, r25	; 0x28
     532:	8f a3       	std	Y+39, r24	; 0x27
     534:	8f a1       	ldd	r24, Y+39	; 0x27
     536:	98 a5       	ldd	r25, Y+40	; 0x28
     538:	9c a7       	std	Y+44, r25	; 0x2c
     53a:	8b a7       	std	Y+43, r24	; 0x2b
     53c:	8b a5       	ldd	r24, Y+43	; 0x2b
     53e:	9c a5       	ldd	r25, Y+44	; 0x2c
     540:	01 97       	sbiw	r24, 0x01	; 1
     542:	f1 f7       	brne	.-4      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
     544:	9c a7       	std	Y+44, r25	; 0x2c
     546:	8b a7       	std	Y+43, r24	; 0x2b
            _delay_ms(500);
            Led2_Off();
     548:	e1 dd       	rcall	.-1086   	; 0x10c <Led2_Off>
     54a:	9c c2       	rjmp	.+1336   	; 0xa84 <__stack+0x185>
            default:
                mode = 0;
                break;
        }
    }
}
     54c:	b5 de       	rcall	.-662    	; 0x2b8 <Taster3_get>
            mode = 2;
            PORTB = 0x00;
            Led2_On();
            _delay_ms(500);
            Led2_Off();
        } else if (Taster3_get()) {
     54e:	89 2b       	or	r24, r25
     550:	09 f4       	brne	.+2      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     552:	79 c0       	rjmp	.+242    	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
     554:	83 e0       	ldi	r24, 0x03	; 3
     556:	90 e0       	ldi	r25, 0x00	; 0
            mode = 3;
     558:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
     55c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     560:	85 e2       	ldi	r24, 0x25	; 37
            PORTB = 0x00;
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	fc 01       	movw	r30, r24
     566:	10 82       	st	Z, r1
     568:	e2 dd       	rcall	.-1084   	; 0x12e <Led3_On>
            Led3_On();
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	aa ef       	ldi	r26, 0xFA	; 250
     570:	b3 e4       	ldi	r27, 0x43	; 67
     572:	8d 83       	std	Y+5, r24	; 0x05
     574:	9e 83       	std	Y+6, r25	; 0x06
     576:	af 83       	std	Y+7, r26	; 0x07
     578:	b8 87       	std	Y+8, r27	; 0x08
     57a:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	4a e7       	ldi	r20, 0x7A	; 122
     580:	53 e4       	ldi	r21, 0x43	; 67
     582:	6d 81       	ldd	r22, Y+5	; 0x05
     584:	7e 81       	ldd	r23, Y+6	; 0x06
     586:	8f 81       	ldd	r24, Y+7	; 0x07
     588:	98 85       	ldd	r25, Y+8	; 0x08
     58a:	8a d5       	rcall	.+2836   	; 0x10a0 <__mulsf3>
     58c:	dc 01       	movw	r26, r24
     58e:	cb 01       	movw	r24, r22
     590:	8d a7       	std	Y+45, r24	; 0x2d
     592:	9e a7       	std	Y+46, r25	; 0x2e
     594:	af a7       	std	Y+47, r26	; 0x2f
     596:	b8 ab       	std	Y+48, r27	; 0x30
     598:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	40 e8       	ldi	r20, 0x80	; 128
     59e:	5f e3       	ldi	r21, 0x3F	; 63
     5a0:	6d a5       	ldd	r22, Y+45	; 0x2d
     5a2:	7e a5       	ldd	r23, Y+46	; 0x2e
     5a4:	8f a5       	ldd	r24, Y+47	; 0x2f
     5a6:	98 a9       	ldd	r25, Y+48	; 0x30
     5a8:	fa d4       	rcall	.+2548   	; 0xf9e <__cmpsf2>
     5aa:	88 23       	and	r24, r24
     5ac:	2c f4       	brge	.+10     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
     5ae:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	9a ab       	std	Y+50, r25	; 0x32
     5b4:	89 ab       	std	Y+49, r24	; 0x31
     5b6:	3b c0       	rjmp	.+118    	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
	else if (__tmp > 65535)
     5b8:	20 e0       	ldi	r18, 0x00	; 0
     5ba:	3f ef       	ldi	r19, 0xFF	; 255
     5bc:	4f e7       	ldi	r20, 0x7F	; 127
     5be:	57 e4       	ldi	r21, 0x47	; 71
     5c0:	6d a5       	ldd	r22, Y+45	; 0x2d
     5c2:	7e a5       	ldd	r23, Y+46	; 0x2e
     5c4:	8f a5       	ldd	r24, Y+47	; 0x2f
     5c6:	98 a9       	ldd	r25, Y+48	; 0x30
     5c8:	67 d5       	rcall	.+2766   	; 0x1098 <__gesf2>
     5ca:	18 16       	cp	r1, r24
     5cc:	3c f5       	brge	.+78     	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
     5ce:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	40 e2       	ldi	r20, 0x20	; 32
     5d4:	51 e4       	ldi	r21, 0x41	; 65
     5d6:	6d 81       	ldd	r22, Y+5	; 0x05
     5d8:	7e 81       	ldd	r23, Y+6	; 0x06
     5da:	8f 81       	ldd	r24, Y+7	; 0x07
     5dc:	98 85       	ldd	r25, Y+8	; 0x08
     5de:	60 d5       	rcall	.+2752   	; 0x10a0 <__mulsf3>
     5e0:	dc 01       	movw	r26, r24
     5e2:	cb 01       	movw	r24, r22
     5e4:	bc 01       	movw	r22, r24
     5e6:	cd 01       	movw	r24, r26
     5e8:	de d4       	rcall	.+2492   	; 0xfa6 <__fixunssfsi>
     5ea:	dc 01       	movw	r26, r24
     5ec:	cb 01       	movw	r24, r22
     5ee:	9a ab       	std	Y+50, r25	; 0x32
     5f0:	89 ab       	std	Y+49, r24	; 0x31
     5f2:	0f c0       	rjmp	.+30     	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
     5f4:	89 e1       	ldi	r24, 0x19	; 25
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	9c ab       	std	Y+52, r25	; 0x34
     5fa:	8b ab       	std	Y+51, r24	; 0x33
     5fc:	8b a9       	ldd	r24, Y+51	; 0x33
     5fe:	9c a9       	ldd	r25, Y+52	; 0x34
     600:	01 97       	sbiw	r24, 0x01	; 1
     602:	f1 f7       	brne	.-4      	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     604:	9c ab       	std	Y+52, r25	; 0x34
     606:	8b ab       	std	Y+51, r24	; 0x33
     608:	89 a9       	ldd	r24, Y+49	; 0x31
     60a:	9a a9       	ldd	r25, Y+50	; 0x32
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     60c:	01 97       	sbiw	r24, 0x01	; 1
     60e:	9a ab       	std	Y+50, r25	; 0x32
     610:	89 ab       	std	Y+49, r24	; 0x31
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     612:	89 a9       	ldd	r24, Y+49	; 0x31
     614:	9a a9       	ldd	r25, Y+50	; 0x32
     616:	89 2b       	or	r24, r25
     618:	69 f7       	brne	.-38     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
     61a:	13 c0       	rjmp	.+38     	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     61c:	6d a5       	ldd	r22, Y+45	; 0x2d
     61e:	7e a5       	ldd	r23, Y+46	; 0x2e
     620:	8f a5       	ldd	r24, Y+47	; 0x2f
     622:	98 a9       	ldd	r25, Y+48	; 0x30
     624:	c0 d4       	rcall	.+2432   	; 0xfa6 <__fixunssfsi>
     626:	dc 01       	movw	r26, r24
     628:	cb 01       	movw	r24, r22
     62a:	9a ab       	std	Y+50, r25	; 0x32
     62c:	89 ab       	std	Y+49, r24	; 0x31
     62e:	89 a9       	ldd	r24, Y+49	; 0x31
     630:	9a a9       	ldd	r25, Y+50	; 0x32
     632:	9e ab       	std	Y+54, r25	; 0x36
     634:	8d ab       	std	Y+53, r24	; 0x35
     636:	8d a9       	ldd	r24, Y+53	; 0x35
     638:	9e a9       	ldd	r25, Y+54	; 0x36
     63a:	01 97       	sbiw	r24, 0x01	; 1
     63c:	f1 f7       	brne	.-4      	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
     63e:	9e ab       	std	Y+54, r25	; 0x36
     640:	8d ab       	std	Y+53, r24	; 0x35
            _delay_ms(500);
            Led3_Off();
     642:	86 dd       	rcall	.-1268   	; 0x150 <Led3_Off>
     644:	1f c2       	rjmp	.+1086   	; 0xa84 <__stack+0x185>
            default:
                mode = 0;
                break;
        }
    }
}
     646:	50 de       	rcall	.-864    	; 0x2e8 <Taster4_get>
            mode = 3;
            PORTB = 0x00;
            Led3_On();
            _delay_ms(500);
            Led3_Off();
        } else if (Taster4_get()) {
     648:	89 2b       	or	r24, r25
     64a:	09 f4       	brne	.+2      	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
     64c:	1b c2       	rjmp	.+1078   	; 0xa84 <__stack+0x185>
     64e:	84 e0       	ldi	r24, 0x04	; 4
            mode = 4;
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
     656:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
     65a:	85 e2       	ldi	r24, 0x25	; 37
            PORTB = 0x00;
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	fc 01       	movw	r30, r24
     660:	10 82       	st	Z, r1
     662:	87 dd       	rcall	.-1266   	; 0x172 <Led4_On>
            Led4_On();
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	aa ef       	ldi	r26, 0xFA	; 250
     66a:	b3 e4       	ldi	r27, 0x43	; 67
     66c:	89 87       	std	Y+9, r24	; 0x09
     66e:	9a 87       	std	Y+10, r25	; 0x0a
     670:	ab 87       	std	Y+11, r26	; 0x0b
     672:	bc 87       	std	Y+12, r27	; 0x0c
     674:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	4a e7       	ldi	r20, 0x7A	; 122
     67a:	53 e4       	ldi	r21, 0x43	; 67
     67c:	69 85       	ldd	r22, Y+9	; 0x09
     67e:	7a 85       	ldd	r23, Y+10	; 0x0a
     680:	8b 85       	ldd	r24, Y+11	; 0x0b
     682:	9c 85       	ldd	r25, Y+12	; 0x0c
     684:	0d d5       	rcall	.+2586   	; 0x10a0 <__mulsf3>
     686:	dc 01       	movw	r26, r24
     688:	cb 01       	movw	r24, r22
     68a:	8f ab       	std	Y+55, r24	; 0x37
     68c:	98 af       	std	Y+56, r25	; 0x38
     68e:	a9 af       	std	Y+57, r26	; 0x39
     690:	ba af       	std	Y+58, r27	; 0x3a
     692:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	40 e8       	ldi	r20, 0x80	; 128
     698:	5f e3       	ldi	r21, 0x3F	; 63
     69a:	6f a9       	ldd	r22, Y+55	; 0x37
     69c:	78 ad       	ldd	r23, Y+56	; 0x38
     69e:	89 ad       	ldd	r24, Y+57	; 0x39
     6a0:	9a ad       	ldd	r25, Y+58	; 0x3a
     6a2:	7d d4       	rcall	.+2298   	; 0xf9e <__cmpsf2>
     6a4:	88 23       	and	r24, r24
     6a6:	2c f4       	brge	.+10     	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
		__ticks = 1;
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	9c af       	std	Y+60, r25	; 0x3c
     6ae:	8b af       	std	Y+59, r24	; 0x3b
     6b0:	3b c0       	rjmp	.+118    	; 0x728 <__LOCK_REGION_LENGTH__+0x328>
	else if (__tmp > 65535)
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	3f ef       	ldi	r19, 0xFF	; 255
     6b6:	4f e7       	ldi	r20, 0x7F	; 127
     6b8:	57 e4       	ldi	r21, 0x47	; 71
     6ba:	6f a9       	ldd	r22, Y+55	; 0x37
     6bc:	78 ad       	ldd	r23, Y+56	; 0x38
     6be:	89 ad       	ldd	r24, Y+57	; 0x39
     6c0:	9a ad       	ldd	r25, Y+58	; 0x3a
     6c2:	ea d4       	rcall	.+2516   	; 0x1098 <__gesf2>
     6c4:	18 16       	cp	r1, r24
     6c6:	3c f5       	brge	.+78     	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
     6c8:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	40 e2       	ldi	r20, 0x20	; 32
     6ce:	51 e4       	ldi	r21, 0x41	; 65
     6d0:	69 85       	ldd	r22, Y+9	; 0x09
     6d2:	7a 85       	ldd	r23, Y+10	; 0x0a
     6d4:	8b 85       	ldd	r24, Y+11	; 0x0b
     6d6:	9c 85       	ldd	r25, Y+12	; 0x0c
     6d8:	e3 d4       	rcall	.+2502   	; 0x10a0 <__mulsf3>
     6da:	dc 01       	movw	r26, r24
     6dc:	cb 01       	movw	r24, r22
     6de:	bc 01       	movw	r22, r24
     6e0:	cd 01       	movw	r24, r26
     6e2:	61 d4       	rcall	.+2242   	; 0xfa6 <__fixunssfsi>
     6e4:	dc 01       	movw	r26, r24
     6e6:	cb 01       	movw	r24, r22
     6e8:	9c af       	std	Y+60, r25	; 0x3c
     6ea:	8b af       	std	Y+59, r24	; 0x3b
     6ec:	0f c0       	rjmp	.+30     	; 0x70c <__LOCK_REGION_LENGTH__+0x30c>
     6ee:	89 e1       	ldi	r24, 0x19	; 25
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	9e af       	std	Y+62, r25	; 0x3e
     6f4:	8d af       	std	Y+61, r24	; 0x3d
     6f6:	8d ad       	ldd	r24, Y+61	; 0x3d
     6f8:	9e ad       	ldd	r25, Y+62	; 0x3e
     6fa:	01 97       	sbiw	r24, 0x01	; 1
     6fc:	f1 f7       	brne	.-4      	; 0x6fa <__LOCK_REGION_LENGTH__+0x2fa>
     6fe:	9e af       	std	Y+62, r25	; 0x3e
     700:	8d af       	std	Y+61, r24	; 0x3d
     702:	8b ad       	ldd	r24, Y+59	; 0x3b
     704:	9c ad       	ldd	r25, Y+60	; 0x3c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     706:	01 97       	sbiw	r24, 0x01	; 1
     708:	9c af       	std	Y+60, r25	; 0x3c
     70a:	8b af       	std	Y+59, r24	; 0x3b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     70c:	8b ad       	ldd	r24, Y+59	; 0x3b
     70e:	9c ad       	ldd	r25, Y+60	; 0x3c
     710:	89 2b       	or	r24, r25
     712:	69 f7       	brne	.-38     	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     714:	1d c0       	rjmp	.+58     	; 0x750 <__LOCK_REGION_LENGTH__+0x350>
     716:	6f a9       	ldd	r22, Y+55	; 0x37
     718:	78 ad       	ldd	r23, Y+56	; 0x38
     71a:	89 ad       	ldd	r24, Y+57	; 0x39
     71c:	9a ad       	ldd	r25, Y+58	; 0x3a
     71e:	43 d4       	rcall	.+2182   	; 0xfa6 <__fixunssfsi>
     720:	dc 01       	movw	r26, r24
     722:	cb 01       	movw	r24, r22
     724:	9c af       	std	Y+60, r25	; 0x3c
     726:	8b af       	std	Y+59, r24	; 0x3b
     728:	2b ad       	ldd	r18, Y+59	; 0x3b
     72a:	3c ad       	ldd	r19, Y+60	; 0x3c
     72c:	ce 01       	movw	r24, r28
     72e:	cf 96       	adiw	r24, 0x3f	; 63
     730:	fc 01       	movw	r30, r24
     732:	31 83       	std	Z+1, r19	; 0x01
     734:	20 83       	st	Z, r18
     736:	ce 01       	movw	r24, r28
     738:	cf 96       	adiw	r24, 0x3f	; 63
     73a:	fc 01       	movw	r30, r24
     73c:	80 81       	ld	r24, Z
     73e:	91 81       	ldd	r25, Z+1	; 0x01
     740:	01 97       	sbiw	r24, 0x01	; 1
     742:	f1 f7       	brne	.-4      	; 0x740 <__LOCK_REGION_LENGTH__+0x340>
     744:	9e 01       	movw	r18, r28
     746:	21 5c       	subi	r18, 0xC1	; 193
     748:	3f 4f       	sbci	r19, 0xFF	; 255
     74a:	f9 01       	movw	r30, r18
     74c:	91 83       	std	Z+1, r25	; 0x01
            _delay_ms(500);
            Led4_Off();
     74e:	80 83       	st	Z, r24
     750:	21 dd       	rcall	.-1470   	; 0x194 <Led4_Off>
            default:
                mode = 0;
                break;
        }
    }
}
     752:	98 c1       	rjmp	.+816    	; 0xa84 <__stack+0x185>
        }
        
    } else {    // run
        
        // reset if button 1 and button 2 are pressed
        if (Taster1_get() && Taster2_get()) {
     754:	7e dd       	rcall	.-1284   	; 0x252 <Taster1_get>
     756:	89 2b       	or	r24, r25
     758:	09 f4       	brne	.+2      	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
     75a:	75 c1       	rjmp	.+746    	; 0xa46 <__stack+0x147>
     75c:	95 dd       	rcall	.-1238   	; 0x288 <Taster2_get>
     75e:	89 2b       	or	r24, r25
     760:	09 f4       	brne	.+2      	; 0x764 <__LOCK_REGION_LENGTH__+0x364>
     762:	71 c1       	rjmp	.+738    	; 0xa46 <__stack+0x147>
     764:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
            mode = 0;
     768:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	aa e7       	ldi	r26, 0x7A	; 122
     772:	b4 e4       	ldi	r27, 0x44	; 68
     774:	89 8b       	std	Y+17, r24	; 0x11
     776:	9a 8b       	std	Y+18, r25	; 0x12
     778:	ab 8b       	std	Y+19, r26	; 0x13
     77a:	bc 8b       	std	Y+20, r27	; 0x14
     77c:	8e 01       	movw	r16, r28

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     77e:	05 5b       	subi	r16, 0xB5	; 181
     780:	1f 4f       	sbci	r17, 0xFF	; 255
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	4a e7       	ldi	r20, 0x7A	; 122
     788:	53 e4       	ldi	r21, 0x43	; 67
     78a:	69 89       	ldd	r22, Y+17	; 0x11
     78c:	7a 89       	ldd	r23, Y+18	; 0x12
     78e:	8b 89       	ldd	r24, Y+19	; 0x13
     790:	9c 89       	ldd	r25, Y+20	; 0x14
     792:	86 d4       	rcall	.+2316   	; 0x10a0 <__mulsf3>
     794:	dc 01       	movw	r26, r24
     796:	cb 01       	movw	r24, r22
     798:	f8 01       	movw	r30, r16
     79a:	80 83       	st	Z, r24
     79c:	91 83       	std	Z+1, r25	; 0x01
     79e:	a2 83       	std	Z+2, r26	; 0x02
     7a0:	b3 83       	std	Z+3, r27	; 0x03
     7a2:	ce 01       	movw	r24, r28
	if (__tmp < 1.0)
     7a4:	85 5b       	subi	r24, 0xB5	; 181
     7a6:	9f 4f       	sbci	r25, 0xFF	; 255
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	40 e8       	ldi	r20, 0x80	; 128
     7ae:	5f e3       	ldi	r21, 0x3F	; 63
     7b0:	fc 01       	movw	r30, r24
     7b2:	60 81       	ld	r22, Z
     7b4:	71 81       	ldd	r23, Z+1	; 0x01
     7b6:	82 81       	ldd	r24, Z+2	; 0x02
     7b8:	93 81       	ldd	r25, Z+3	; 0x03
     7ba:	f1 d3       	rcall	.+2018   	; 0xf9e <__cmpsf2>
     7bc:	88 23       	and	r24, r24
     7be:	4c f4       	brge	.+18     	; 0x7d2 <__LOCK_REGION_LENGTH__+0x3d2>
		__ticks = 1;
     7c0:	ce 01       	movw	r24, r28
     7c2:	81 5b       	subi	r24, 0xB1	; 177
     7c4:	9f 4f       	sbci	r25, 0xFF	; 255
     7c6:	21 e0       	ldi	r18, 0x01	; 1
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	fc 01       	movw	r30, r24
     7cc:	31 83       	std	Z+1, r19	; 0x01
     7ce:	20 83       	st	Z, r18
     7d0:	65 c0       	rjmp	.+202    	; 0x89c <__LOCK_REGION_LENGTH__+0x49c>
	else if (__tmp > 65535)
     7d2:	ce 01       	movw	r24, r28
     7d4:	85 5b       	subi	r24, 0xB5	; 181
     7d6:	9f 4f       	sbci	r25, 0xFF	; 255
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	3f ef       	ldi	r19, 0xFF	; 255
     7dc:	4f e7       	ldi	r20, 0x7F	; 127
     7de:	57 e4       	ldi	r21, 0x47	; 71
     7e0:	fc 01       	movw	r30, r24
     7e2:	60 81       	ld	r22, Z
     7e4:	71 81       	ldd	r23, Z+1	; 0x01
     7e6:	82 81       	ldd	r24, Z+2	; 0x02
     7e8:	93 81       	ldd	r25, Z+3	; 0x03
     7ea:	56 d4       	rcall	.+2220   	; 0x1098 <__gesf2>
     7ec:	18 16       	cp	r1, r24
     7ee:	0c f0       	brlt	.+2      	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
     7f0:	44 c0       	rjmp	.+136    	; 0x87a <__LOCK_REGION_LENGTH__+0x47a>
     7f2:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e2       	ldi	r20, 0x20	; 32
     7f8:	51 e4       	ldi	r21, 0x41	; 65
     7fa:	69 89       	ldd	r22, Y+17	; 0x11
     7fc:	7a 89       	ldd	r23, Y+18	; 0x12
     7fe:	8b 89       	ldd	r24, Y+19	; 0x13
     800:	9c 89       	ldd	r25, Y+20	; 0x14
     802:	4e d4       	rcall	.+2204   	; 0x10a0 <__mulsf3>
     804:	dc 01       	movw	r26, r24
     806:	cb 01       	movw	r24, r22
     808:	8e 01       	movw	r16, r28
     80a:	01 5b       	subi	r16, 0xB1	; 177
     80c:	1f 4f       	sbci	r17, 0xFF	; 255
     80e:	bc 01       	movw	r22, r24
     810:	cd 01       	movw	r24, r26
     812:	c9 d3       	rcall	.+1938   	; 0xfa6 <__fixunssfsi>
     814:	dc 01       	movw	r26, r24
     816:	cb 01       	movw	r24, r22
     818:	f8 01       	movw	r30, r16
     81a:	91 83       	std	Z+1, r25	; 0x01
     81c:	80 83       	st	Z, r24
     81e:	24 c0       	rjmp	.+72     	; 0x868 <__LOCK_REGION_LENGTH__+0x468>
     820:	ce 01       	movw	r24, r28
     822:	8f 5a       	subi	r24, 0xAF	; 175
     824:	9f 4f       	sbci	r25, 0xFF	; 255
     826:	29 e1       	ldi	r18, 0x19	; 25
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	fc 01       	movw	r30, r24
     82c:	31 83       	std	Z+1, r19	; 0x01
     82e:	20 83       	st	Z, r18
     830:	ce 01       	movw	r24, r28
     832:	8f 5a       	subi	r24, 0xAF	; 175
     834:	9f 4f       	sbci	r25, 0xFF	; 255
     836:	fc 01       	movw	r30, r24
     838:	80 81       	ld	r24, Z
     83a:	91 81       	ldd	r25, Z+1	; 0x01
     83c:	01 97       	sbiw	r24, 0x01	; 1
     83e:	f1 f7       	brne	.-4      	; 0x83c <__LOCK_REGION_LENGTH__+0x43c>
     840:	9e 01       	movw	r18, r28
     842:	2f 5a       	subi	r18, 0xAF	; 175
     844:	3f 4f       	sbci	r19, 0xFF	; 255
     846:	f9 01       	movw	r30, r18
     848:	91 83       	std	Z+1, r25	; 0x01
     84a:	80 83       	st	Z, r24
     84c:	ce 01       	movw	r24, r28
     84e:	81 5b       	subi	r24, 0xB1	; 177
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     850:	9f 4f       	sbci	r25, 0xFF	; 255
     852:	9e 01       	movw	r18, r28
     854:	21 5b       	subi	r18, 0xB1	; 177
     856:	3f 4f       	sbci	r19, 0xFF	; 255
     858:	f9 01       	movw	r30, r18
     85a:	20 81       	ld	r18, Z
     85c:	31 81       	ldd	r19, Z+1	; 0x01
     85e:	21 50       	subi	r18, 0x01	; 1
     860:	31 09       	sbc	r19, r1
     862:	fc 01       	movw	r30, r24
     864:	31 83       	std	Z+1, r19	; 0x01
     866:	20 83       	st	Z, r18
     868:	ce 01       	movw	r24, r28
     86a:	81 5b       	subi	r24, 0xB1	; 177
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     86c:	9f 4f       	sbci	r25, 0xFF	; 255
     86e:	fc 01       	movw	r30, r24
     870:	80 81       	ld	r24, Z
     872:	91 81       	ldd	r25, Z+1	; 0x01
     874:	89 2b       	or	r24, r25
     876:	a1 f6       	brne	.-88     	; 0x820 <__LOCK_REGION_LENGTH__+0x420>
     878:	2b c0       	rjmp	.+86     	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     87a:	8e 01       	movw	r16, r28
     87c:	01 5b       	subi	r16, 0xB1	; 177
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	85 5b       	subi	r24, 0xB5	; 181
     884:	9f 4f       	sbci	r25, 0xFF	; 255
     886:	fc 01       	movw	r30, r24
     888:	60 81       	ld	r22, Z
     88a:	71 81       	ldd	r23, Z+1	; 0x01
     88c:	82 81       	ldd	r24, Z+2	; 0x02
     88e:	93 81       	ldd	r25, Z+3	; 0x03
     890:	8a d3       	rcall	.+1812   	; 0xfa6 <__fixunssfsi>
     892:	dc 01       	movw	r26, r24
     894:	cb 01       	movw	r24, r22
     896:	f8 01       	movw	r30, r16
     898:	91 83       	std	Z+1, r25	; 0x01
     89a:	80 83       	st	Z, r24
     89c:	ce 01       	movw	r24, r28
     89e:	8d 5a       	subi	r24, 0xAD	; 173
     8a0:	9f 4f       	sbci	r25, 0xFF	; 255
     8a2:	9e 01       	movw	r18, r28
     8a4:	21 5b       	subi	r18, 0xB1	; 177
     8a6:	3f 4f       	sbci	r19, 0xFF	; 255
     8a8:	f9 01       	movw	r30, r18
     8aa:	20 81       	ld	r18, Z
     8ac:	31 81       	ldd	r19, Z+1	; 0x01
     8ae:	fc 01       	movw	r30, r24
     8b0:	31 83       	std	Z+1, r19	; 0x01
     8b2:	20 83       	st	Z, r18
     8b4:	ce 01       	movw	r24, r28
     8b6:	8d 5a       	subi	r24, 0xAD	; 173
     8b8:	9f 4f       	sbci	r25, 0xFF	; 255
     8ba:	fc 01       	movw	r30, r24
     8bc:	80 81       	ld	r24, Z
     8be:	91 81       	ldd	r25, Z+1	; 0x01
     8c0:	01 97       	sbiw	r24, 0x01	; 1
     8c2:	f1 f7       	brne	.-4      	; 0x8c0 <__LOCK_REGION_LENGTH__+0x4c0>
     8c4:	9e 01       	movw	r18, r28
     8c6:	2d 5a       	subi	r18, 0xAD	; 173
     8c8:	3f 4f       	sbci	r19, 0xFF	; 255
     8ca:	f9 01       	movw	r30, r18
     8cc:	91 83       	std	Z+1, r25	; 0x01
     8ce:	80 83       	st	Z, r24
     8d0:	85 e2       	ldi	r24, 0x25	; 37
            _delay_ms(1000);
            PORTB = 0xFF;
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	2f ef       	ldi	r18, 0xFF	; 255
     8d6:	fc 01       	movw	r30, r24
     8d8:	20 83       	st	Z, r18
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	aa ef       	ldi	r26, 0xFA	; 250
     8e0:	b3 e4       	ldi	r27, 0x43	; 67
     8e2:	8d 87       	std	Y+13, r24	; 0x0d
     8e4:	9e 87       	std	Y+14, r25	; 0x0e
     8e6:	af 87       	std	Y+15, r26	; 0x0f
     8e8:	b8 8b       	std	Y+16, r27	; 0x10
     8ea:	8e 01       	movw	r16, r28

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8ec:	0f 5b       	subi	r16, 0xBF	; 191
     8ee:	1f 4f       	sbci	r17, 0xFF	; 255
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	4a e7       	ldi	r20, 0x7A	; 122
     8f6:	53 e4       	ldi	r21, 0x43	; 67
     8f8:	6d 85       	ldd	r22, Y+13	; 0x0d
     8fa:	7e 85       	ldd	r23, Y+14	; 0x0e
     8fc:	8f 85       	ldd	r24, Y+15	; 0x0f
     8fe:	98 89       	ldd	r25, Y+16	; 0x10
     900:	cf d3       	rcall	.+1950   	; 0x10a0 <__mulsf3>
     902:	dc 01       	movw	r26, r24
     904:	cb 01       	movw	r24, r22
     906:	f8 01       	movw	r30, r16
     908:	80 83       	st	Z, r24
     90a:	91 83       	std	Z+1, r25	; 0x01
     90c:	a2 83       	std	Z+2, r26	; 0x02
     90e:	b3 83       	std	Z+3, r27	; 0x03
     910:	ce 01       	movw	r24, r28
	if (__tmp < 1.0)
     912:	8f 5b       	subi	r24, 0xBF	; 191
     914:	9f 4f       	sbci	r25, 0xFF	; 255
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	40 e8       	ldi	r20, 0x80	; 128
     91c:	5f e3       	ldi	r21, 0x3F	; 63
     91e:	fc 01       	movw	r30, r24
     920:	60 81       	ld	r22, Z
     922:	71 81       	ldd	r23, Z+1	; 0x01
     924:	82 81       	ldd	r24, Z+2	; 0x02
     926:	93 81       	ldd	r25, Z+3	; 0x03
     928:	3a d3       	rcall	.+1652   	; 0xf9e <__cmpsf2>
     92a:	88 23       	and	r24, r24
     92c:	4c f4       	brge	.+18     	; 0x940 <__stack+0x41>
     92e:	ce 01       	movw	r24, r28
		__ticks = 1;
     930:	8b 5b       	subi	r24, 0xBB	; 187
     932:	9f 4f       	sbci	r25, 0xFF	; 255
     934:	21 e0       	ldi	r18, 0x01	; 1
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	fc 01       	movw	r30, r24
     93a:	31 83       	std	Z+1, r19	; 0x01
     93c:	20 83       	st	Z, r18
     93e:	65 c0       	rjmp	.+202    	; 0xa0a <__stack+0x10b>
     940:	ce 01       	movw	r24, r28
	else if (__tmp > 65535)
     942:	8f 5b       	subi	r24, 0xBF	; 191
     944:	9f 4f       	sbci	r25, 0xFF	; 255
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	3f ef       	ldi	r19, 0xFF	; 255
     94a:	4f e7       	ldi	r20, 0x7F	; 127
     94c:	57 e4       	ldi	r21, 0x47	; 71
     94e:	fc 01       	movw	r30, r24
     950:	60 81       	ld	r22, Z
     952:	71 81       	ldd	r23, Z+1	; 0x01
     954:	82 81       	ldd	r24, Z+2	; 0x02
     956:	93 81       	ldd	r25, Z+3	; 0x03
     958:	9f d3       	rcall	.+1854   	; 0x1098 <__gesf2>
     95a:	18 16       	cp	r1, r24
     95c:	0c f0       	brlt	.+2      	; 0x960 <__stack+0x61>
     95e:	44 c0       	rjmp	.+136    	; 0x9e8 <__stack+0xe9>
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	30 e0       	ldi	r19, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     964:	40 e2       	ldi	r20, 0x20	; 32
     966:	51 e4       	ldi	r21, 0x41	; 65
     968:	6d 85       	ldd	r22, Y+13	; 0x0d
     96a:	7e 85       	ldd	r23, Y+14	; 0x0e
     96c:	8f 85       	ldd	r24, Y+15	; 0x0f
     96e:	98 89       	ldd	r25, Y+16	; 0x10
     970:	97 d3       	rcall	.+1838   	; 0x10a0 <__mulsf3>
     972:	dc 01       	movw	r26, r24
     974:	cb 01       	movw	r24, r22
     976:	8e 01       	movw	r16, r28
     978:	0b 5b       	subi	r16, 0xBB	; 187
     97a:	1f 4f       	sbci	r17, 0xFF	; 255
     97c:	bc 01       	movw	r22, r24
     97e:	cd 01       	movw	r24, r26
     980:	12 d3       	rcall	.+1572   	; 0xfa6 <__fixunssfsi>
     982:	dc 01       	movw	r26, r24
     984:	cb 01       	movw	r24, r22
     986:	f8 01       	movw	r30, r16
     988:	91 83       	std	Z+1, r25	; 0x01
     98a:	80 83       	st	Z, r24
     98c:	24 c0       	rjmp	.+72     	; 0x9d6 <__stack+0xd7>
     98e:	ce 01       	movw	r24, r28
     990:	89 5b       	subi	r24, 0xB9	; 185
     992:	9f 4f       	sbci	r25, 0xFF	; 255
     994:	29 e1       	ldi	r18, 0x19	; 25
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	fc 01       	movw	r30, r24
     99a:	31 83       	std	Z+1, r19	; 0x01
     99c:	20 83       	st	Z, r18
     99e:	ce 01       	movw	r24, r28
     9a0:	89 5b       	subi	r24, 0xB9	; 185
     9a2:	9f 4f       	sbci	r25, 0xFF	; 255
     9a4:	fc 01       	movw	r30, r24
     9a6:	80 81       	ld	r24, Z
     9a8:	91 81       	ldd	r25, Z+1	; 0x01
     9aa:	01 97       	sbiw	r24, 0x01	; 1
     9ac:	f1 f7       	brne	.-4      	; 0x9aa <__stack+0xab>
     9ae:	9e 01       	movw	r18, r28
     9b0:	29 5b       	subi	r18, 0xB9	; 185
     9b2:	3f 4f       	sbci	r19, 0xFF	; 255
     9b4:	f9 01       	movw	r30, r18
     9b6:	91 83       	std	Z+1, r25	; 0x01
     9b8:	80 83       	st	Z, r24
     9ba:	ce 01       	movw	r24, r28
     9bc:	8b 5b       	subi	r24, 0xBB	; 187
     9be:	9f 4f       	sbci	r25, 0xFF	; 255
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9c0:	9e 01       	movw	r18, r28
     9c2:	2b 5b       	subi	r18, 0xBB	; 187
     9c4:	3f 4f       	sbci	r19, 0xFF	; 255
     9c6:	f9 01       	movw	r30, r18
     9c8:	20 81       	ld	r18, Z
     9ca:	31 81       	ldd	r19, Z+1	; 0x01
     9cc:	21 50       	subi	r18, 0x01	; 1
     9ce:	31 09       	sbc	r19, r1
     9d0:	fc 01       	movw	r30, r24
     9d2:	31 83       	std	Z+1, r19	; 0x01
     9d4:	20 83       	st	Z, r18
     9d6:	ce 01       	movw	r24, r28
     9d8:	8b 5b       	subi	r24, 0xBB	; 187
     9da:	9f 4f       	sbci	r25, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9dc:	fc 01       	movw	r30, r24
     9de:	80 81       	ld	r24, Z
     9e0:	91 81       	ldd	r25, Z+1	; 0x01
     9e2:	89 2b       	or	r24, r25
     9e4:	a1 f6       	brne	.-88     	; 0x98e <__stack+0x8f>
     9e6:	2b c0       	rjmp	.+86     	; 0xa3e <__stack+0x13f>
     9e8:	8e 01       	movw	r16, r28
     9ea:	0b 5b       	subi	r16, 0xBB	; 187
     9ec:	1f 4f       	sbci	r17, 0xFF	; 255
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9ee:	ce 01       	movw	r24, r28
     9f0:	8f 5b       	subi	r24, 0xBF	; 191
     9f2:	9f 4f       	sbci	r25, 0xFF	; 255
     9f4:	fc 01       	movw	r30, r24
     9f6:	60 81       	ld	r22, Z
     9f8:	71 81       	ldd	r23, Z+1	; 0x01
     9fa:	82 81       	ldd	r24, Z+2	; 0x02
     9fc:	93 81       	ldd	r25, Z+3	; 0x03
     9fe:	d3 d2       	rcall	.+1446   	; 0xfa6 <__fixunssfsi>
     a00:	dc 01       	movw	r26, r24
     a02:	cb 01       	movw	r24, r22
     a04:	f8 01       	movw	r30, r16
     a06:	91 83       	std	Z+1, r25	; 0x01
     a08:	80 83       	st	Z, r24
     a0a:	ce 01       	movw	r24, r28
     a0c:	87 5b       	subi	r24, 0xB7	; 183
     a0e:	9f 4f       	sbci	r25, 0xFF	; 255
     a10:	9e 01       	movw	r18, r28
     a12:	2b 5b       	subi	r18, 0xBB	; 187
     a14:	3f 4f       	sbci	r19, 0xFF	; 255
     a16:	f9 01       	movw	r30, r18
     a18:	20 81       	ld	r18, Z
     a1a:	31 81       	ldd	r19, Z+1	; 0x01
     a1c:	fc 01       	movw	r30, r24
     a1e:	31 83       	std	Z+1, r19	; 0x01
     a20:	20 83       	st	Z, r18
     a22:	ce 01       	movw	r24, r28
     a24:	87 5b       	subi	r24, 0xB7	; 183
     a26:	9f 4f       	sbci	r25, 0xFF	; 255
     a28:	fc 01       	movw	r30, r24
     a2a:	80 81       	ld	r24, Z
     a2c:	91 81       	ldd	r25, Z+1	; 0x01
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	f1 f7       	brne	.-4      	; 0xa2e <__stack+0x12f>
     a32:	9e 01       	movw	r18, r28
     a34:	27 5b       	subi	r18, 0xB7	; 183
     a36:	3f 4f       	sbci	r19, 0xFF	; 255
     a38:	f9 01       	movw	r30, r18
     a3a:	91 83       	std	Z+1, r25	; 0x01
     a3c:	80 83       	st	Z, r24
            _delay_ms(500);
            PORTB = 0x00;
     a3e:	85 e2       	ldi	r24, 0x25	; 37
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	fc 01       	movw	r30, r24
     a44:	10 82       	st	Z, r1
        }
        
        // execute
        switch (mode) {
     a46:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     a4a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
     a4e:	82 30       	cpi	r24, 0x02	; 2
     a50:	91 05       	cpc	r25, r1
     a52:	71 f0       	breq	.+28     	; 0xa70 <__stack+0x171>
     a54:	83 30       	cpi	r24, 0x03	; 3
     a56:	91 05       	cpc	r25, r1
     a58:	1c f4       	brge	.+6      	; 0xa60 <__stack+0x161>
     a5a:	01 97       	sbiw	r24, 0x01	; 1
     a5c:	39 f0       	breq	.+14     	; 0xa6c <__stack+0x16d>
     a5e:	0d c0       	rjmp	.+26     	; 0xa7a <__stack+0x17b>
     a60:	83 30       	cpi	r24, 0x03	; 3
     a62:	91 05       	cpc	r25, r1
     a64:	39 f0       	breq	.+14     	; 0xa74 <__stack+0x175>
     a66:	04 97       	sbiw	r24, 0x04	; 4
     a68:	31 f0       	breq	.+12     	; 0xa76 <__stack+0x177>
     a6a:	07 c0       	rjmp	.+14     	; 0xa7a <__stack+0x17b>
            case 1:
                testTasterLed();
     a6c:	78 d2       	rcall	.+1264   	; 0xf5e <testTasterLed>
     a6e:	0a c0       	rjmp	.+20     	; 0xa84 <__stack+0x185>
                break;
     a70:	6f d1       	rcall	.+734    	; 0xd50 <testBoard>
            case 2:
                testBoard();
     a72:	08 c0       	rjmp	.+16     	; 0xa84 <__stack+0x185>
     a74:	14 d0       	rcall	.+40     	; 0xa9e <lauflicht>
                break;
     a76:	ef d0       	rcall	.+478    	; 0xc56 <increment>
            case 3:
                lauflicht();
     a78:	05 c0       	rjmp	.+10     	; 0xa84 <__stack+0x185>
     a7a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
            case 4:
                increment();
     a7e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
                break;
            default:
                mode = 0;
     a82:	00 00       	nop
     a84:	00 00       	nop
     a86:	cc 5a       	subi	r28, 0xAC	; 172
     a88:	df 4f       	sbci	r29, 0xFF	; 255
                break;
     a8a:	0f b6       	in	r0, 0x3f	; 63
        }
    }
}
     a8c:	f8 94       	cli
     a8e:	de bf       	out	0x3e, r29	; 62
     a90:	0f be       	out	0x3f, r0	; 63
     a92:	cd bf       	out	0x3d, r28	; 61
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	08 95       	ret

00000a9e <lauflicht>:
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	cd b7       	in	r28, 0x3d	; 61
     aa4:	de b7       	in	r29, 0x3e	; 62

void lauflicht() {
     aa6:	60 97       	sbiw	r28, 0x10	; 16
     aa8:	0f b6       	in	r0, 0x3f	; 63
     aaa:	f8 94       	cli
     aac:	de bf       	out	0x3e, r29	; 62
     aae:	0f be       	out	0x3f, r0	; 63
     ab0:	cd bf       	out	0x3d, r28	; 61
    static int laufCount = 0;
    static int direction = 0;   // 0=right, 1=left
    
    if (direction) {    // left
     ab2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <direction.1779>
     ab6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <direction.1779+0x1>
     aba:	89 2b       	or	r24, r25
     abc:	f1 f0       	breq	.+60     	; 0xafa <lauflicht+0x5c>
        if (laufCount <= 1) {
     abe:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <laufCount.1778>
     ac2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <laufCount.1778+0x1>
     ac6:	02 97       	sbiw	r24, 0x02	; 2
     ac8:	74 f4       	brge	.+28     	; 0xae6 <lauflicht+0x48>
            direction = 0;
     aca:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <direction.1779+0x1>
     ace:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <direction.1779>
            laufCount++;
     ad2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <laufCount.1778>
     ad6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <laufCount.1778+0x1>
     ada:	01 96       	adiw	r24, 0x01	; 1
     adc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <laufCount.1778+0x1>
     ae0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <laufCount.1778>
     ae4:	29 c0       	rjmp	.+82     	; 0xb38 <lauflicht+0x9a>
        } else {
            laufCount--;
     ae6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <laufCount.1778>
     aea:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <laufCount.1778+0x1>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <laufCount.1778+0x1>
     af4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <laufCount.1778>
     af8:	1f c0       	rjmp	.+62     	; 0xb38 <lauflicht+0x9a>
        }
    }else { // right
        if (laufCount >= 8) {
     afa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <laufCount.1778>
     afe:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <laufCount.1778+0x1>
     b02:	08 97       	sbiw	r24, 0x08	; 8
     b04:	84 f0       	brlt	.+32     	; 0xb26 <lauflicht+0x88>
            direction = 1;
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <direction.1779+0x1>
     b0e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <direction.1779>
            laufCount--;
     b12:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <laufCount.1778>
     b16:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <laufCount.1778+0x1>
     b1a:	01 97       	sbiw	r24, 0x01	; 1
     b1c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <laufCount.1778+0x1>
     b20:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <laufCount.1778>
     b24:	09 c0       	rjmp	.+18     	; 0xb38 <lauflicht+0x9a>
        } else {
            laufCount++;
     b26:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <laufCount.1778>
     b2a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <laufCount.1778+0x1>
     b2e:	01 96       	adiw	r24, 0x01	; 1
     b30:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <laufCount.1778+0x1>
     b34:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <laufCount.1778>
        }
    }
    
    // create byte
    int ledByte = 1;
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	9a 83       	std	Y+2, r25	; 0x02
     b3e:	89 83       	std	Y+1, r24	; 0x01
    ledByte = ledByte << (laufCount - 1);
     b40:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <laufCount.1778>
     b44:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <laufCount.1778+0x1>
     b48:	9c 01       	movw	r18, r24
     b4a:	21 50       	subi	r18, 0x01	; 1
     b4c:	31 09       	sbc	r19, r1
     b4e:	89 81       	ldd	r24, Y+1	; 0x01
     b50:	9a 81       	ldd	r25, Y+2	; 0x02
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <lauflicht+0xba>
     b54:	88 0f       	add	r24, r24
     b56:	99 1f       	adc	r25, r25
     b58:	2a 95       	dec	r18
     b5a:	e2 f7       	brpl	.-8      	; 0xb54 <lauflicht+0xb6>
     b5c:	9a 83       	std	Y+2, r25	; 0x02
     b5e:	89 83       	std	Y+1, r24	; 0x01
    
    // set Port
    PORTB = ledByte;
     b60:	85 e2       	ldi	r24, 0x25	; 37
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	29 81       	ldd	r18, Y+1	; 0x01
     b66:	fc 01       	movw	r30, r24
     b68:	20 83       	st	Z, r18
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	a8 e4       	ldi	r26, 0x48	; 72
     b70:	b3 e4       	ldi	r27, 0x43	; 67
     b72:	8b 83       	std	Y+3, r24	; 0x03
     b74:	9c 83       	std	Y+4, r25	; 0x04
     b76:	ad 83       	std	Y+5, r26	; 0x05
     b78:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b7a:	20 e0       	ldi	r18, 0x00	; 0
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	4a e7       	ldi	r20, 0x7A	; 122
     b80:	53 e4       	ldi	r21, 0x43	; 67
     b82:	6b 81       	ldd	r22, Y+3	; 0x03
     b84:	7c 81       	ldd	r23, Y+4	; 0x04
     b86:	8d 81       	ldd	r24, Y+5	; 0x05
     b88:	9e 81       	ldd	r25, Y+6	; 0x06
     b8a:	8a d2       	rcall	.+1300   	; 0x10a0 <__mulsf3>
     b8c:	dc 01       	movw	r26, r24
     b8e:	cb 01       	movw	r24, r22
     b90:	8f 83       	std	Y+7, r24	; 0x07
     b92:	98 87       	std	Y+8, r25	; 0x08
     b94:	a9 87       	std	Y+9, r26	; 0x09
     b96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	40 e8       	ldi	r20, 0x80	; 128
     b9e:	5f e3       	ldi	r21, 0x3F	; 63
     ba0:	6f 81       	ldd	r22, Y+7	; 0x07
     ba2:	78 85       	ldd	r23, Y+8	; 0x08
     ba4:	89 85       	ldd	r24, Y+9	; 0x09
     ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba8:	fa d1       	rcall	.+1012   	; 0xf9e <__cmpsf2>
     baa:	88 23       	and	r24, r24
     bac:	2c f4       	brge	.+10     	; 0xbb8 <lauflicht+0x11a>
		__ticks = 1;
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	9c 87       	std	Y+12, r25	; 0x0c
     bb4:	8b 87       	std	Y+11, r24	; 0x0b
     bb6:	3b c0       	rjmp	.+118    	; 0xc2e <lauflicht+0x190>
	else if (__tmp > 65535)
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	3f ef       	ldi	r19, 0xFF	; 255
     bbc:	4f e7       	ldi	r20, 0x7F	; 127
     bbe:	57 e4       	ldi	r21, 0x47	; 71
     bc0:	6f 81       	ldd	r22, Y+7	; 0x07
     bc2:	78 85       	ldd	r23, Y+8	; 0x08
     bc4:	89 85       	ldd	r24, Y+9	; 0x09
     bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc8:	67 d2       	rcall	.+1230   	; 0x1098 <__gesf2>
     bca:	18 16       	cp	r1, r24
     bcc:	3c f5       	brge	.+78     	; 0xc1c <lauflicht+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	40 e2       	ldi	r20, 0x20	; 32
     bd4:	51 e4       	ldi	r21, 0x41	; 65
     bd6:	6b 81       	ldd	r22, Y+3	; 0x03
     bd8:	7c 81       	ldd	r23, Y+4	; 0x04
     bda:	8d 81       	ldd	r24, Y+5	; 0x05
     bdc:	9e 81       	ldd	r25, Y+6	; 0x06
     bde:	60 d2       	rcall	.+1216   	; 0x10a0 <__mulsf3>
     be0:	dc 01       	movw	r26, r24
     be2:	cb 01       	movw	r24, r22
     be4:	bc 01       	movw	r22, r24
     be6:	cd 01       	movw	r24, r26
     be8:	de d1       	rcall	.+956    	; 0xfa6 <__fixunssfsi>
     bea:	dc 01       	movw	r26, r24
     bec:	cb 01       	movw	r24, r22
     bee:	9c 87       	std	Y+12, r25	; 0x0c
     bf0:	8b 87       	std	Y+11, r24	; 0x0b
     bf2:	0f c0       	rjmp	.+30     	; 0xc12 <lauflicht+0x174>
     bf4:	89 e1       	ldi	r24, 0x19	; 25
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	9e 87       	std	Y+14, r25	; 0x0e
     bfa:	8d 87       	std	Y+13, r24	; 0x0d
     bfc:	8d 85       	ldd	r24, Y+13	; 0x0d
     bfe:	9e 85       	ldd	r25, Y+14	; 0x0e
     c00:	01 97       	sbiw	r24, 0x01	; 1
     c02:	f1 f7       	brne	.-4      	; 0xc00 <lauflicht+0x162>
     c04:	9e 87       	std	Y+14, r25	; 0x0e
     c06:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c08:	8b 85       	ldd	r24, Y+11	; 0x0b
     c0a:	9c 85       	ldd	r25, Y+12	; 0x0c
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	9c 87       	std	Y+12, r25	; 0x0c
     c10:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c12:	8b 85       	ldd	r24, Y+11	; 0x0b
     c14:	9c 85       	ldd	r25, Y+12	; 0x0c
     c16:	89 2b       	or	r24, r25
     c18:	69 f7       	brne	.-38     	; 0xbf4 <lauflicht+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c1a:	13 c0       	rjmp	.+38     	; 0xc42 <lauflicht+0x1a4>
     c1c:	6f 81       	ldd	r22, Y+7	; 0x07
     c1e:	78 85       	ldd	r23, Y+8	; 0x08
     c20:	89 85       	ldd	r24, Y+9	; 0x09
     c22:	9a 85       	ldd	r25, Y+10	; 0x0a
     c24:	c0 d1       	rcall	.+896    	; 0xfa6 <__fixunssfsi>
     c26:	dc 01       	movw	r26, r24
     c28:	cb 01       	movw	r24, r22
     c2a:	9c 87       	std	Y+12, r25	; 0x0c
     c2c:	8b 87       	std	Y+11, r24	; 0x0b
     c2e:	8b 85       	ldd	r24, Y+11	; 0x0b
     c30:	9c 85       	ldd	r25, Y+12	; 0x0c
     c32:	98 8b       	std	Y+16, r25	; 0x10
     c34:	8f 87       	std	Y+15, r24	; 0x0f
     c36:	8f 85       	ldd	r24, Y+15	; 0x0f
     c38:	98 89       	ldd	r25, Y+16	; 0x10
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	f1 f7       	brne	.-4      	; 0xc3a <lauflicht+0x19c>
     c3e:	98 8b       	std	Y+16, r25	; 0x10
     c40:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(200);
}
     c42:	00 00       	nop
     c44:	60 96       	adiw	r28, 0x10	; 16
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	f8 94       	cli
     c4a:	de bf       	out	0x3e, r29	; 62
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	cd bf       	out	0x3d, r28	; 61
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	08 95       	ret

00000c56 <increment>:

/**
 Increment if button 1 is pressed, decrement if button 2 is pressed.
 Value of count will display with leds. if count is dez 5, 5 leds will turn on
 */
void increment() {
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	00 d0       	rcall	.+0      	; 0xc5c <increment+0x6>
     c5c:	00 d0       	rcall	.+0      	; 0xc5e <increment+0x8>
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
    static int count = 0;
    static int lockt1 = 0, lockt2 = 0;
    
    // If button is pressed and lock is released
    if (!lockt1 && Taster1_get()) {
     c62:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lockt1.1784>
     c66:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <lockt1.1784+0x1>
     c6a:	89 2b       	or	r24, r25
     c6c:	c9 f4       	brne	.+50     	; 0xca0 <increment+0x4a>
     c6e:	f1 da       	rcall	.-2590   	; 0x252 <Taster1_get>
     c70:	89 2b       	or	r24, r25
     c72:	b1 f0       	breq	.+44     	; 0xca0 <increment+0x4a>
        //count to max 8
        if (count <= 8) {
     c74:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count.1783>
     c78:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count.1783+0x1>
     c7c:	09 97       	sbiw	r24, 0x09	; 9
     c7e:	4c f4       	brge	.+18     	; 0xc92 <increment+0x3c>
            count++;
     c80:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count.1783>
     c84:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count.1783+0x1>
     c88:	01 96       	adiw	r24, 0x01	; 1
     c8a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <count.1783+0x1>
     c8e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <count.1783>
        }
        // lock
        lockt1 = 1;
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <lockt1.1784+0x1>
     c9a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <lockt1.1784>
     c9e:	1f c0       	rjmp	.+62     	; 0xcde <increment+0x88>
    }else if (!lockt2 && Taster2_get()) {
     ca0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lockt2.1785>
     ca4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lockt2.1785+0x1>
     ca8:	89 2b       	or	r24, r25
     caa:	c9 f4       	brne	.+50     	; 0xcde <increment+0x88>
     cac:	ed da       	rcall	.-2598   	; 0x288 <Taster2_get>
     cae:	89 2b       	or	r24, r25
     cb0:	b1 f0       	breq	.+44     	; 0xcde <increment+0x88>
        //count to min 0
        if (count > 0) {
     cb2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count.1783>
     cb6:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count.1783+0x1>
     cba:	18 16       	cp	r1, r24
     cbc:	19 06       	cpc	r1, r25
     cbe:	4c f4       	brge	.+18     	; 0xcd2 <increment+0x7c>
            count--;
     cc0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count.1783>
     cc4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count.1783+0x1>
     cc8:	01 97       	sbiw	r24, 0x01	; 1
     cca:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <count.1783+0x1>
     cce:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <count.1783>
        }
        // lock
        lockt2 = 1;
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <lockt2.1785+0x1>
     cda:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lockt2.1785>
    }
    
    // if button is released, release lock
    if (!Taster1_get()) {
     cde:	b9 da       	rcall	.-2702   	; 0x252 <Taster1_get>
     ce0:	89 2b       	or	r24, r25
     ce2:	21 f4       	brne	.+8      	; 0xcec <increment+0x96>
        lockt1 = 0;
     ce4:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <lockt1.1784+0x1>
     ce8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <lockt1.1784>
    }
    if (!Taster2_get()) {
     cec:	cd da       	rcall	.-2662   	; 0x288 <Taster2_get>
     cee:	89 2b       	or	r24, r25
     cf0:	21 f4       	brne	.+8      	; 0xcfa <increment+0xa4>
        lockt2 = 0;
     cf2:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lockt2.1785+0x1>
     cf6:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lockt2.1785>
    }
    
    // shift as many ones as count to byte
    int ledByte = 0;
     cfa:	1a 82       	std	Y+2, r1	; 0x02
     cfc:	19 82       	std	Y+1, r1	; 0x01
    for (int i = 0; i < count; i++) {
     cfe:	1c 82       	std	Y+4, r1	; 0x04
     d00:	1b 82       	std	Y+3, r1	; 0x03
     d02:	10 c0       	rjmp	.+32     	; 0xd24 <increment+0xce>
        ledByte = ledByte << 1;
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	9a 81       	ldd	r25, Y+2	; 0x02
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	9a 83       	std	Y+2, r25	; 0x02
     d0e:	89 83       	std	Y+1, r24	; 0x01
        ledByte++;
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	9a 81       	ldd	r25, Y+2	; 0x02
     d14:	01 96       	adiw	r24, 0x01	; 1
     d16:	9a 83       	std	Y+2, r25	; 0x02
     d18:	89 83       	std	Y+1, r24	; 0x01
        lockt2 = 0;
    }
    
    // shift as many ones as count to byte
    int ledByte = 0;
    for (int i = 0; i < count; i++) {
     d1a:	8b 81       	ldd	r24, Y+3	; 0x03
     d1c:	9c 81       	ldd	r25, Y+4	; 0x04
     d1e:	01 96       	adiw	r24, 0x01	; 1
     d20:	9c 83       	std	Y+4, r25	; 0x04
     d22:	8b 83       	std	Y+3, r24	; 0x03
     d24:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count.1783>
     d28:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count.1783+0x1>
     d2c:	2b 81       	ldd	r18, Y+3	; 0x03
     d2e:	3c 81       	ldd	r19, Y+4	; 0x04
     d30:	28 17       	cp	r18, r24
     d32:	39 07       	cpc	r19, r25
     d34:	3c f3       	brlt	.-50     	; 0xd04 <increment+0xae>
        ledByte = ledByte << 1;
        ledByte++;
    }
    // set Port
    PORTB = ledByte;
     d36:	85 e2       	ldi	r24, 0x25	; 37
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	29 81       	ldd	r18, Y+1	; 0x01
     d3c:	fc 01       	movw	r30, r24
     d3e:	20 83       	st	Z, r18
}
     d40:	00 00       	nop
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	08 95       	ret

00000d50 <testBoard>:

void testBoard() {
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
     d58:	6c 97       	sbiw	r28, 0x1c	; 28
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	f8 94       	cli
     d5e:	de bf       	out	0x3e, r29	; 62
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	cd bf       	out	0x3d, r28	; 61
    static int state_testBoard = 0;
    if (state_testBoard) {
     d64:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <state_testBoard.1797>
     d68:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <state_testBoard.1797+0x1>
     d6c:	89 2b       	or	r24, r25
     d6e:	09 f4       	brne	.+2      	; 0xd72 <testBoard+0x22>
     d70:	75 c0       	rjmp	.+234    	; 0xe5c <testBoard+0x10c>
		state_testBoard = 0;
     d72:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <state_testBoard.1797+0x1>
     d76:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <state_testBoard.1797>
        PORTB = 0x00;
     d7a:	85 e2       	ldi	r24, 0x25	; 37
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	fc 01       	movw	r30, r24
     d80:	10 82       	st	Z, r1
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	aa ef       	ldi	r26, 0xFA	; 250
     d88:	b3 e4       	ldi	r27, 0x43	; 67
     d8a:	8d 83       	std	Y+5, r24	; 0x05
     d8c:	9e 83       	std	Y+6, r25	; 0x06
     d8e:	af 83       	std	Y+7, r26	; 0x07
     d90:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	4a e7       	ldi	r20, 0x7A	; 122
     d98:	53 e4       	ldi	r21, 0x43	; 67
     d9a:	6d 81       	ldd	r22, Y+5	; 0x05
     d9c:	7e 81       	ldd	r23, Y+6	; 0x06
     d9e:	8f 81       	ldd	r24, Y+7	; 0x07
     da0:	98 85       	ldd	r25, Y+8	; 0x08
     da2:	7e d1       	rcall	.+764    	; 0x10a0 <__mulsf3>
     da4:	dc 01       	movw	r26, r24
     da6:	cb 01       	movw	r24, r22
     da8:	89 87       	std	Y+9, r24	; 0x09
     daa:	9a 87       	std	Y+10, r25	; 0x0a
     dac:	ab 87       	std	Y+11, r26	; 0x0b
     dae:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	40 e8       	ldi	r20, 0x80	; 128
     db6:	5f e3       	ldi	r21, 0x3F	; 63
     db8:	69 85       	ldd	r22, Y+9	; 0x09
     dba:	7a 85       	ldd	r23, Y+10	; 0x0a
     dbc:	8b 85       	ldd	r24, Y+11	; 0x0b
     dbe:	9c 85       	ldd	r25, Y+12	; 0x0c
     dc0:	ee d0       	rcall	.+476    	; 0xf9e <__cmpsf2>
     dc2:	88 23       	and	r24, r24
     dc4:	2c f4       	brge	.+10     	; 0xdd0 <testBoard+0x80>
		__ticks = 1;
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	9e 87       	std	Y+14, r25	; 0x0e
     dcc:	8d 87       	std	Y+13, r24	; 0x0d
     dce:	3b c0       	rjmp	.+118    	; 0xe46 <testBoard+0xf6>
	else if (__tmp > 65535)
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	3f ef       	ldi	r19, 0xFF	; 255
     dd4:	4f e7       	ldi	r20, 0x7F	; 127
     dd6:	57 e4       	ldi	r21, 0x47	; 71
     dd8:	69 85       	ldd	r22, Y+9	; 0x09
     dda:	7a 85       	ldd	r23, Y+10	; 0x0a
     ddc:	8b 85       	ldd	r24, Y+11	; 0x0b
     dde:	9c 85       	ldd	r25, Y+12	; 0x0c
     de0:	5b d1       	rcall	.+694    	; 0x1098 <__gesf2>
     de2:	18 16       	cp	r1, r24
     de4:	3c f5       	brge	.+78     	; 0xe34 <testBoard+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	40 e2       	ldi	r20, 0x20	; 32
     dec:	51 e4       	ldi	r21, 0x41	; 65
     dee:	6d 81       	ldd	r22, Y+5	; 0x05
     df0:	7e 81       	ldd	r23, Y+6	; 0x06
     df2:	8f 81       	ldd	r24, Y+7	; 0x07
     df4:	98 85       	ldd	r25, Y+8	; 0x08
     df6:	54 d1       	rcall	.+680    	; 0x10a0 <__mulsf3>
     df8:	dc 01       	movw	r26, r24
     dfa:	cb 01       	movw	r24, r22
     dfc:	bc 01       	movw	r22, r24
     dfe:	cd 01       	movw	r24, r26
     e00:	d2 d0       	rcall	.+420    	; 0xfa6 <__fixunssfsi>
     e02:	dc 01       	movw	r26, r24
     e04:	cb 01       	movw	r24, r22
     e06:	9e 87       	std	Y+14, r25	; 0x0e
     e08:	8d 87       	std	Y+13, r24	; 0x0d
     e0a:	0f c0       	rjmp	.+30     	; 0xe2a <testBoard+0xda>
     e0c:	89 e1       	ldi	r24, 0x19	; 25
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	98 8b       	std	Y+16, r25	; 0x10
     e12:	8f 87       	std	Y+15, r24	; 0x0f
     e14:	8f 85       	ldd	r24, Y+15	; 0x0f
     e16:	98 89       	ldd	r25, Y+16	; 0x10
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	f1 f7       	brne	.-4      	; 0xe18 <testBoard+0xc8>
     e1c:	98 8b       	std	Y+16, r25	; 0x10
     e1e:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e20:	8d 85       	ldd	r24, Y+13	; 0x0d
     e22:	9e 85       	ldd	r25, Y+14	; 0x0e
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	9e 87       	std	Y+14, r25	; 0x0e
     e28:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e2c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e2e:	89 2b       	or	r24, r25
     e30:	69 f7       	brne	.-38     	; 0xe0c <testBoard+0xbc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e32:	8b c0       	rjmp	.+278    	; 0xf4a <testBoard+0x1fa>
     e34:	69 85       	ldd	r22, Y+9	; 0x09
     e36:	7a 85       	ldd	r23, Y+10	; 0x0a
     e38:	8b 85       	ldd	r24, Y+11	; 0x0b
     e3a:	9c 85       	ldd	r25, Y+12	; 0x0c
     e3c:	b4 d0       	rcall	.+360    	; 0xfa6 <__fixunssfsi>
     e3e:	dc 01       	movw	r26, r24
     e40:	cb 01       	movw	r24, r22
     e42:	9e 87       	std	Y+14, r25	; 0x0e
     e44:	8d 87       	std	Y+13, r24	; 0x0d
     e46:	8d 85       	ldd	r24, Y+13	; 0x0d
     e48:	9e 85       	ldd	r25, Y+14	; 0x0e
     e4a:	9a 8b       	std	Y+18, r25	; 0x12
     e4c:	89 8b       	std	Y+17, r24	; 0x11
     e4e:	89 89       	ldd	r24, Y+17	; 0x11
     e50:	9a 89       	ldd	r25, Y+18	; 0x12
     e52:	01 97       	sbiw	r24, 0x01	; 1
     e54:	f1 f7       	brne	.-4      	; 0xe52 <testBoard+0x102>
     e56:	9a 8b       	std	Y+18, r25	; 0x12
     e58:	89 8b       	std	Y+17, r24	; 0x11
    }else {
		state_testBoard = 1;
        PORTB = 0xFF;
        _delay_ms(500);
    }
}
     e5a:	77 c0       	rjmp	.+238    	; 0xf4a <testBoard+0x1fa>
    if (state_testBoard) {
		state_testBoard = 0;
        PORTB = 0x00;
        _delay_ms(500);
    }else {
		state_testBoard = 1;
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <state_testBoard.1797+0x1>
     e64:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state_testBoard.1797>
        PORTB = 0xFF;
     e68:	85 e2       	ldi	r24, 0x25	; 37
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	2f ef       	ldi	r18, 0xFF	; 255
     e6e:	fc 01       	movw	r30, r24
     e70:	20 83       	st	Z, r18
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	aa ef       	ldi	r26, 0xFA	; 250
     e78:	b3 e4       	ldi	r27, 0x43	; 67
     e7a:	89 83       	std	Y+1, r24	; 0x01
     e7c:	9a 83       	std	Y+2, r25	; 0x02
     e7e:	ab 83       	std	Y+3, r26	; 0x03
     e80:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	4a e7       	ldi	r20, 0x7A	; 122
     e88:	53 e4       	ldi	r21, 0x43	; 67
     e8a:	69 81       	ldd	r22, Y+1	; 0x01
     e8c:	7a 81       	ldd	r23, Y+2	; 0x02
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	9c 81       	ldd	r25, Y+4	; 0x04
     e92:	06 d1       	rcall	.+524    	; 0x10a0 <__mulsf3>
     e94:	dc 01       	movw	r26, r24
     e96:	cb 01       	movw	r24, r22
     e98:	8b 8b       	std	Y+19, r24	; 0x13
     e9a:	9c 8b       	std	Y+20, r25	; 0x14
     e9c:	ad 8b       	std	Y+21, r26	; 0x15
     e9e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	40 e8       	ldi	r20, 0x80	; 128
     ea6:	5f e3       	ldi	r21, 0x3F	; 63
     ea8:	6b 89       	ldd	r22, Y+19	; 0x13
     eaa:	7c 89       	ldd	r23, Y+20	; 0x14
     eac:	8d 89       	ldd	r24, Y+21	; 0x15
     eae:	9e 89       	ldd	r25, Y+22	; 0x16
     eb0:	76 d0       	rcall	.+236    	; 0xf9e <__cmpsf2>
     eb2:	88 23       	and	r24, r24
     eb4:	2c f4       	brge	.+10     	; 0xec0 <testBoard+0x170>
		__ticks = 1;
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	98 8f       	std	Y+24, r25	; 0x18
     ebc:	8f 8b       	std	Y+23, r24	; 0x17
     ebe:	3b c0       	rjmp	.+118    	; 0xf36 <testBoard+0x1e6>
	else if (__tmp > 65535)
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	3f ef       	ldi	r19, 0xFF	; 255
     ec4:	4f e7       	ldi	r20, 0x7F	; 127
     ec6:	57 e4       	ldi	r21, 0x47	; 71
     ec8:	6b 89       	ldd	r22, Y+19	; 0x13
     eca:	7c 89       	ldd	r23, Y+20	; 0x14
     ecc:	8d 89       	ldd	r24, Y+21	; 0x15
     ece:	9e 89       	ldd	r25, Y+22	; 0x16
     ed0:	e3 d0       	rcall	.+454    	; 0x1098 <__gesf2>
     ed2:	18 16       	cp	r1, r24
     ed4:	3c f5       	brge	.+78     	; 0xf24 <testBoard+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	40 e2       	ldi	r20, 0x20	; 32
     edc:	51 e4       	ldi	r21, 0x41	; 65
     ede:	69 81       	ldd	r22, Y+1	; 0x01
     ee0:	7a 81       	ldd	r23, Y+2	; 0x02
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	9c 81       	ldd	r25, Y+4	; 0x04
     ee6:	dc d0       	rcall	.+440    	; 0x10a0 <__mulsf3>
     ee8:	dc 01       	movw	r26, r24
     eea:	cb 01       	movw	r24, r22
     eec:	bc 01       	movw	r22, r24
     eee:	cd 01       	movw	r24, r26
     ef0:	5a d0       	rcall	.+180    	; 0xfa6 <__fixunssfsi>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	98 8f       	std	Y+24, r25	; 0x18
     ef8:	8f 8b       	std	Y+23, r24	; 0x17
     efa:	0f c0       	rjmp	.+30     	; 0xf1a <testBoard+0x1ca>
     efc:	89 e1       	ldi	r24, 0x19	; 25
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	9a 8f       	std	Y+26, r25	; 0x1a
     f02:	89 8f       	std	Y+25, r24	; 0x19
     f04:	89 8d       	ldd	r24, Y+25	; 0x19
     f06:	9a 8d       	ldd	r25, Y+26	; 0x1a
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	f1 f7       	brne	.-4      	; 0xf08 <testBoard+0x1b8>
     f0c:	9a 8f       	std	Y+26, r25	; 0x1a
     f0e:	89 8f       	std	Y+25, r24	; 0x19
     f10:	8f 89       	ldd	r24, Y+23	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f12:	98 8d       	ldd	r25, Y+24	; 0x18
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	98 8f       	std	Y+24, r25	; 0x18
     f18:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f1a:	8f 89       	ldd	r24, Y+23	; 0x17
     f1c:	98 8d       	ldd	r25, Y+24	; 0x18
     f1e:	89 2b       	or	r24, r25
     f20:	69 f7       	brne	.-38     	; 0xefc <testBoard+0x1ac>
        _delay_ms(500);
    }
}
     f22:	13 c0       	rjmp	.+38     	; 0xf4a <testBoard+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f24:	6b 89       	ldd	r22, Y+19	; 0x13
     f26:	7c 89       	ldd	r23, Y+20	; 0x14
     f28:	8d 89       	ldd	r24, Y+21	; 0x15
     f2a:	9e 89       	ldd	r25, Y+22	; 0x16
     f2c:	3c d0       	rcall	.+120    	; 0xfa6 <__fixunssfsi>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	98 8f       	std	Y+24, r25	; 0x18
     f34:	8f 8b       	std	Y+23, r24	; 0x17
     f36:	8f 89       	ldd	r24, Y+23	; 0x17
     f38:	98 8d       	ldd	r25, Y+24	; 0x18
     f3a:	9c 8f       	std	Y+28, r25	; 0x1c
     f3c:	8b 8f       	std	Y+27, r24	; 0x1b
     f3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f40:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f42:	01 97       	sbiw	r24, 0x01	; 1
     f44:	f1 f7       	brne	.-4      	; 0xf42 <testBoard+0x1f2>
     f46:	9c 8f       	std	Y+28, r25	; 0x1c
     f48:	8b 8f       	std	Y+27, r24	; 0x1b
     f4a:	00 00       	nop
     f4c:	6c 96       	adiw	r28, 0x1c	; 28
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	de bf       	out	0x3e, r29	; 62
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	cd bf       	out	0x3d, r28	; 61
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	08 95       	ret

00000f5e <testTasterLed>:
     f5e:	cf 93       	push	r28

void testTasterLed() {
     f60:	df 93       	push	r29
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
    if (Taster1_get()) {
     f66:	75 d9       	rcall	.-3350   	; 0x252 <Taster1_get>
     f68:	89 2b       	or	r24, r25
     f6a:	11 f0       	breq	.+4      	; 0xf70 <testTasterLed+0x12>
        Led1_On();
     f6c:	9c d8       	rcall	.-3784   	; 0xa6 <Led1_On>
     f6e:	01 c0       	rjmp	.+2      	; 0xf72 <testTasterLed+0x14>
    }else {
        Led1_Off();
     f70:	ab d8       	rcall	.-3754   	; 0xc8 <Led1_Off>
     f72:	8a d9       	rcall	.-3308   	; 0x288 <Taster2_get>
    }
    if (Taster2_get()) {
     f74:	89 2b       	or	r24, r25
     f76:	11 f0       	breq	.+4      	; 0xf7c <testTasterLed+0x1e>
        Led2_On();
     f78:	b8 d8       	rcall	.-3728   	; 0xea <Led2_On>
     f7a:	01 c0       	rjmp	.+2      	; 0xf7e <testTasterLed+0x20>
    }else {
        Led2_Off();
     f7c:	c7 d8       	rcall	.-3698   	; 0x10c <Led2_Off>
    }
    if (Taster3_get()) {
     f7e:	9c d9       	rcall	.-3272   	; 0x2b8 <Taster3_get>
     f80:	89 2b       	or	r24, r25
     f82:	11 f0       	breq	.+4      	; 0xf88 <testTasterLed+0x2a>
        Led3_On();
     f84:	d4 d8       	rcall	.-3672   	; 0x12e <Led3_On>
     f86:	01 c0       	rjmp	.+2      	; 0xf8a <testTasterLed+0x2c>
        }else {
        Led3_Off();
     f88:	e3 d8       	rcall	.-3642   	; 0x150 <Led3_Off>
     f8a:	ae d9       	rcall	.-3236   	; 0x2e8 <Taster4_get>
    }
    if (Taster4_get()) {
     f8c:	89 2b       	or	r24, r25
     f8e:	11 f0       	breq	.+4      	; 0xf94 <testTasterLed+0x36>
     f90:	f0 d8       	rcall	.-3616   	; 0x172 <Led4_On>
     f92:	01 c0       	rjmp	.+2      	; 0xf96 <testTasterLed+0x38>
        Led4_On();
     f94:	ff d8       	rcall	.-3586   	; 0x194 <Led4_Off>
     f96:	00 00       	nop
        }else {
        Led4_Off();
    }
}
     f98:	df 91       	pop	r29
        Led3_Off();
    }
    if (Taster4_get()) {
        Led4_On();
        }else {
        Led4_Off();
     f9a:	cf 91       	pop	r28
     f9c:	08 95       	ret

00000f9e <__cmpsf2>:
    }
}
     f9e:	2f d0       	rcall	.+94     	; 0xffe <__fp_cmp>
     fa0:	08 f4       	brcc	.+2      	; 0xfa4 <__cmpsf2+0x6>
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	08 95       	ret

00000fa6 <__fixunssfsi>:
     fa6:	57 d0       	rcall	.+174    	; 0x1056 <__fp_splitA>
     fa8:	88 f0       	brcs	.+34     	; 0xfcc <__fixunssfsi+0x26>
     faa:	9f 57       	subi	r25, 0x7F	; 127
     fac:	90 f0       	brcs	.+36     	; 0xfd2 <__fixunssfsi+0x2c>
     fae:	b9 2f       	mov	r27, r25
     fb0:	99 27       	eor	r25, r25
     fb2:	b7 51       	subi	r27, 0x17	; 23
     fb4:	a0 f0       	brcs	.+40     	; 0xfde <__fixunssfsi+0x38>
     fb6:	d1 f0       	breq	.+52     	; 0xfec <__fixunssfsi+0x46>
     fb8:	66 0f       	add	r22, r22
     fba:	77 1f       	adc	r23, r23
     fbc:	88 1f       	adc	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	1a f0       	brmi	.+6      	; 0xfc8 <__fixunssfsi+0x22>
     fc2:	ba 95       	dec	r27
     fc4:	c9 f7       	brne	.-14     	; 0xfb8 <__fixunssfsi+0x12>
     fc6:	12 c0       	rjmp	.+36     	; 0xfec <__fixunssfsi+0x46>
     fc8:	b1 30       	cpi	r27, 0x01	; 1
     fca:	81 f0       	breq	.+32     	; 0xfec <__fixunssfsi+0x46>
     fcc:	5e d0       	rcall	.+188    	; 0x108a <__fp_zero>
     fce:	b1 e0       	ldi	r27, 0x01	; 1
     fd0:	08 95       	ret
     fd2:	5b c0       	rjmp	.+182    	; 0x108a <__fp_zero>
     fd4:	67 2f       	mov	r22, r23
     fd6:	78 2f       	mov	r23, r24
     fd8:	88 27       	eor	r24, r24
     fda:	b8 5f       	subi	r27, 0xF8	; 248
     fdc:	39 f0       	breq	.+14     	; 0xfec <__fixunssfsi+0x46>
     fde:	b9 3f       	cpi	r27, 0xF9	; 249
     fe0:	cc f3       	brlt	.-14     	; 0xfd4 <__fixunssfsi+0x2e>
     fe2:	86 95       	lsr	r24
     fe4:	77 95       	ror	r23
     fe6:	67 95       	ror	r22
     fe8:	b3 95       	inc	r27
     fea:	d9 f7       	brne	.-10     	; 0xfe2 <__fixunssfsi+0x3c>
     fec:	3e f4       	brtc	.+14     	; 0xffc <__fixunssfsi+0x56>
     fee:	90 95       	com	r25
     ff0:	80 95       	com	r24
     ff2:	70 95       	com	r23
     ff4:	61 95       	neg	r22
     ff6:	7f 4f       	sbci	r23, 0xFF	; 255
     ff8:	8f 4f       	sbci	r24, 0xFF	; 255
     ffa:	9f 4f       	sbci	r25, 0xFF	; 255
     ffc:	08 95       	ret

00000ffe <__fp_cmp>:
     ffe:	99 0f       	add	r25, r25
    1000:	00 08       	sbc	r0, r0
    1002:	55 0f       	add	r21, r21
    1004:	aa 0b       	sbc	r26, r26
    1006:	e0 e8       	ldi	r30, 0x80	; 128
    1008:	fe ef       	ldi	r31, 0xFE	; 254
    100a:	16 16       	cp	r1, r22
    100c:	17 06       	cpc	r1, r23
    100e:	e8 07       	cpc	r30, r24
    1010:	f9 07       	cpc	r31, r25
    1012:	c0 f0       	brcs	.+48     	; 0x1044 <__fp_cmp+0x46>
    1014:	12 16       	cp	r1, r18
    1016:	13 06       	cpc	r1, r19
    1018:	e4 07       	cpc	r30, r20
    101a:	f5 07       	cpc	r31, r21
    101c:	98 f0       	brcs	.+38     	; 0x1044 <__fp_cmp+0x46>
    101e:	62 1b       	sub	r22, r18
    1020:	73 0b       	sbc	r23, r19
    1022:	84 0b       	sbc	r24, r20
    1024:	95 0b       	sbc	r25, r21
    1026:	39 f4       	brne	.+14     	; 0x1036 <__fp_cmp+0x38>
    1028:	0a 26       	eor	r0, r26
    102a:	61 f0       	breq	.+24     	; 0x1044 <__fp_cmp+0x46>
    102c:	23 2b       	or	r18, r19
    102e:	24 2b       	or	r18, r20
    1030:	25 2b       	or	r18, r21
    1032:	21 f4       	brne	.+8      	; 0x103c <__fp_cmp+0x3e>
    1034:	08 95       	ret
    1036:	0a 26       	eor	r0, r26
    1038:	09 f4       	brne	.+2      	; 0x103c <__fp_cmp+0x3e>
    103a:	a1 40       	sbci	r26, 0x01	; 1
    103c:	a6 95       	lsr	r26
    103e:	8f ef       	ldi	r24, 0xFF	; 255
    1040:	81 1d       	adc	r24, r1
    1042:	81 1d       	adc	r24, r1
    1044:	08 95       	ret

00001046 <__fp_split3>:
    1046:	57 fd       	sbrc	r21, 7
    1048:	90 58       	subi	r25, 0x80	; 128
    104a:	44 0f       	add	r20, r20
    104c:	55 1f       	adc	r21, r21
    104e:	59 f0       	breq	.+22     	; 0x1066 <__fp_splitA+0x10>
    1050:	5f 3f       	cpi	r21, 0xFF	; 255
    1052:	71 f0       	breq	.+28     	; 0x1070 <__fp_splitA+0x1a>
    1054:	47 95       	ror	r20

00001056 <__fp_splitA>:
    1056:	88 0f       	add	r24, r24
    1058:	97 fb       	bst	r25, 7
    105a:	99 1f       	adc	r25, r25
    105c:	61 f0       	breq	.+24     	; 0x1076 <__fp_splitA+0x20>
    105e:	9f 3f       	cpi	r25, 0xFF	; 255
    1060:	79 f0       	breq	.+30     	; 0x1080 <__fp_splitA+0x2a>
    1062:	87 95       	ror	r24
    1064:	08 95       	ret
    1066:	12 16       	cp	r1, r18
    1068:	13 06       	cpc	r1, r19
    106a:	14 06       	cpc	r1, r20
    106c:	55 1f       	adc	r21, r21
    106e:	f2 cf       	rjmp	.-28     	; 0x1054 <__fp_split3+0xe>
    1070:	46 95       	lsr	r20
    1072:	f1 df       	rcall	.-30     	; 0x1056 <__fp_splitA>
    1074:	08 c0       	rjmp	.+16     	; 0x1086 <__fp_splitA+0x30>
    1076:	16 16       	cp	r1, r22
    1078:	17 06       	cpc	r1, r23
    107a:	18 06       	cpc	r1, r24
    107c:	99 1f       	adc	r25, r25
    107e:	f1 cf       	rjmp	.-30     	; 0x1062 <__fp_splitA+0xc>
    1080:	86 95       	lsr	r24
    1082:	71 05       	cpc	r23, r1
    1084:	61 05       	cpc	r22, r1
    1086:	08 94       	sec
    1088:	08 95       	ret

0000108a <__fp_zero>:
    108a:	e8 94       	clt

0000108c <__fp_szero>:
    108c:	bb 27       	eor	r27, r27
    108e:	66 27       	eor	r22, r22
    1090:	77 27       	eor	r23, r23
    1092:	cb 01       	movw	r24, r22
    1094:	97 f9       	bld	r25, 7
    1096:	08 95       	ret

00001098 <__gesf2>:
    1098:	b2 df       	rcall	.-156    	; 0xffe <__fp_cmp>
    109a:	08 f4       	brcc	.+2      	; 0x109e <__gesf2+0x6>
    109c:	8f ef       	ldi	r24, 0xFF	; 255
    109e:	08 95       	ret

000010a0 <__mulsf3>:
    10a0:	0b d0       	rcall	.+22     	; 0x10b8 <__mulsf3x>
    10a2:	78 c0       	rjmp	.+240    	; 0x1194 <__fp_round>
    10a4:	69 d0       	rcall	.+210    	; 0x1178 <__fp_pscA>
    10a6:	28 f0       	brcs	.+10     	; 0x10b2 <__mulsf3+0x12>
    10a8:	6e d0       	rcall	.+220    	; 0x1186 <__fp_pscB>
    10aa:	18 f0       	brcs	.+6      	; 0x10b2 <__mulsf3+0x12>
    10ac:	95 23       	and	r25, r21
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <__mulsf3+0x12>
    10b0:	5a c0       	rjmp	.+180    	; 0x1166 <__fp_inf>
    10b2:	5f c0       	rjmp	.+190    	; 0x1172 <__fp_nan>
    10b4:	11 24       	eor	r1, r1
    10b6:	ea cf       	rjmp	.-44     	; 0x108c <__fp_szero>

000010b8 <__mulsf3x>:
    10b8:	c6 df       	rcall	.-116    	; 0x1046 <__fp_split3>
    10ba:	a0 f3       	brcs	.-24     	; 0x10a4 <__mulsf3+0x4>

000010bc <__mulsf3_pse>:
    10bc:	95 9f       	mul	r25, r21
    10be:	d1 f3       	breq	.-12     	; 0x10b4 <__mulsf3+0x14>
    10c0:	95 0f       	add	r25, r21
    10c2:	50 e0       	ldi	r21, 0x00	; 0
    10c4:	55 1f       	adc	r21, r21
    10c6:	62 9f       	mul	r22, r18
    10c8:	f0 01       	movw	r30, r0
    10ca:	72 9f       	mul	r23, r18
    10cc:	bb 27       	eor	r27, r27
    10ce:	f0 0d       	add	r31, r0
    10d0:	b1 1d       	adc	r27, r1
    10d2:	63 9f       	mul	r22, r19
    10d4:	aa 27       	eor	r26, r26
    10d6:	f0 0d       	add	r31, r0
    10d8:	b1 1d       	adc	r27, r1
    10da:	aa 1f       	adc	r26, r26
    10dc:	64 9f       	mul	r22, r20
    10de:	66 27       	eor	r22, r22
    10e0:	b0 0d       	add	r27, r0
    10e2:	a1 1d       	adc	r26, r1
    10e4:	66 1f       	adc	r22, r22
    10e6:	82 9f       	mul	r24, r18
    10e8:	22 27       	eor	r18, r18
    10ea:	b0 0d       	add	r27, r0
    10ec:	a1 1d       	adc	r26, r1
    10ee:	62 1f       	adc	r22, r18
    10f0:	73 9f       	mul	r23, r19
    10f2:	b0 0d       	add	r27, r0
    10f4:	a1 1d       	adc	r26, r1
    10f6:	62 1f       	adc	r22, r18
    10f8:	83 9f       	mul	r24, r19
    10fa:	a0 0d       	add	r26, r0
    10fc:	61 1d       	adc	r22, r1
    10fe:	22 1f       	adc	r18, r18
    1100:	74 9f       	mul	r23, r20
    1102:	33 27       	eor	r19, r19
    1104:	a0 0d       	add	r26, r0
    1106:	61 1d       	adc	r22, r1
    1108:	23 1f       	adc	r18, r19
    110a:	84 9f       	mul	r24, r20
    110c:	60 0d       	add	r22, r0
    110e:	21 1d       	adc	r18, r1
    1110:	82 2f       	mov	r24, r18
    1112:	76 2f       	mov	r23, r22
    1114:	6a 2f       	mov	r22, r26
    1116:	11 24       	eor	r1, r1
    1118:	9f 57       	subi	r25, 0x7F	; 127
    111a:	50 40       	sbci	r21, 0x00	; 0
    111c:	8a f0       	brmi	.+34     	; 0x1140 <__mulsf3_pse+0x84>
    111e:	e1 f0       	breq	.+56     	; 0x1158 <__mulsf3_pse+0x9c>
    1120:	88 23       	and	r24, r24
    1122:	4a f0       	brmi	.+18     	; 0x1136 <__mulsf3_pse+0x7a>
    1124:	ee 0f       	add	r30, r30
    1126:	ff 1f       	adc	r31, r31
    1128:	bb 1f       	adc	r27, r27
    112a:	66 1f       	adc	r22, r22
    112c:	77 1f       	adc	r23, r23
    112e:	88 1f       	adc	r24, r24
    1130:	91 50       	subi	r25, 0x01	; 1
    1132:	50 40       	sbci	r21, 0x00	; 0
    1134:	a9 f7       	brne	.-22     	; 0x1120 <__mulsf3_pse+0x64>
    1136:	9e 3f       	cpi	r25, 0xFE	; 254
    1138:	51 05       	cpc	r21, r1
    113a:	70 f0       	brcs	.+28     	; 0x1158 <__mulsf3_pse+0x9c>
    113c:	14 c0       	rjmp	.+40     	; 0x1166 <__fp_inf>
    113e:	a6 cf       	rjmp	.-180    	; 0x108c <__fp_szero>
    1140:	5f 3f       	cpi	r21, 0xFF	; 255
    1142:	ec f3       	brlt	.-6      	; 0x113e <__mulsf3_pse+0x82>
    1144:	98 3e       	cpi	r25, 0xE8	; 232
    1146:	dc f3       	brlt	.-10     	; 0x113e <__mulsf3_pse+0x82>
    1148:	86 95       	lsr	r24
    114a:	77 95       	ror	r23
    114c:	67 95       	ror	r22
    114e:	b7 95       	ror	r27
    1150:	f7 95       	ror	r31
    1152:	e7 95       	ror	r30
    1154:	9f 5f       	subi	r25, 0xFF	; 255
    1156:	c1 f7       	brne	.-16     	; 0x1148 <__mulsf3_pse+0x8c>
    1158:	fe 2b       	or	r31, r30
    115a:	88 0f       	add	r24, r24
    115c:	91 1d       	adc	r25, r1
    115e:	96 95       	lsr	r25
    1160:	87 95       	ror	r24
    1162:	97 f9       	bld	r25, 7
    1164:	08 95       	ret

00001166 <__fp_inf>:
    1166:	97 f9       	bld	r25, 7
    1168:	9f 67       	ori	r25, 0x7F	; 127
    116a:	80 e8       	ldi	r24, 0x80	; 128
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	60 e0       	ldi	r22, 0x00	; 0
    1170:	08 95       	ret

00001172 <__fp_nan>:
    1172:	9f ef       	ldi	r25, 0xFF	; 255
    1174:	80 ec       	ldi	r24, 0xC0	; 192
    1176:	08 95       	ret

00001178 <__fp_pscA>:
    1178:	00 24       	eor	r0, r0
    117a:	0a 94       	dec	r0
    117c:	16 16       	cp	r1, r22
    117e:	17 06       	cpc	r1, r23
    1180:	18 06       	cpc	r1, r24
    1182:	09 06       	cpc	r0, r25
    1184:	08 95       	ret

00001186 <__fp_pscB>:
    1186:	00 24       	eor	r0, r0
    1188:	0a 94       	dec	r0
    118a:	12 16       	cp	r1, r18
    118c:	13 06       	cpc	r1, r19
    118e:	14 06       	cpc	r1, r20
    1190:	05 06       	cpc	r0, r21
    1192:	08 95       	ret

00001194 <__fp_round>:
    1194:	09 2e       	mov	r0, r25
    1196:	03 94       	inc	r0
    1198:	00 0c       	add	r0, r0
    119a:	11 f4       	brne	.+4      	; 0x11a0 <__fp_round+0xc>
    119c:	88 23       	and	r24, r24
    119e:	52 f0       	brmi	.+20     	; 0x11b4 <__fp_round+0x20>
    11a0:	bb 0f       	add	r27, r27
    11a2:	40 f4       	brcc	.+16     	; 0x11b4 <__fp_round+0x20>
    11a4:	bf 2b       	or	r27, r31
    11a6:	11 f4       	brne	.+4      	; 0x11ac <__fp_round+0x18>
    11a8:	60 ff       	sbrs	r22, 0
    11aa:	04 c0       	rjmp	.+8      	; 0x11b4 <__fp_round+0x20>
    11ac:	6f 5f       	subi	r22, 0xFF	; 255
    11ae:	7f 4f       	sbci	r23, 0xFF	; 255
    11b0:	8f 4f       	sbci	r24, 0xFF	; 255
    11b2:	9f 4f       	sbci	r25, 0xFF	; 255
    11b4:	08 95       	ret

000011b6 <_exit>:
    11b6:	f8 94       	cli

000011b8 <__stop_program>:
    11b8:	ff cf       	rjmp	.-2      	; 0x11b8 <__stop_program>
