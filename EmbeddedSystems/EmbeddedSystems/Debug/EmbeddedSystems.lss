
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000003ec  00000480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800110  00800110  00000490  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f17  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a9f  00000000  00000000  00001597  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009a4  00000000  00000000  00002036  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000498  00000000  00000000  000029dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064e  00000000  00000000  00002e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000885  00000000  00000000  000034c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00003d47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c1       	rjmp	.+652    	; 0x2ce <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ee       	ldi	r30, 0xEC	; 236
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 31       	cpi	r26, 0x12	; 18
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	57 d0       	rcall	.+174    	; 0x172 <main>
  c4:	91 c1       	rjmp	.+802    	; 0x3e8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Led_init>:

#include "Led.h"

void Led_init(uint8_t initD) {
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	1f 92       	push	r1
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	89 83       	std	Y+1, r24	; 0x01
    // Set PORTB to outputs
    DDRB = 0xFF;
  d4:	84 e2       	ldi	r24, 0x24	; 36
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	fc 01       	movw	r30, r24
  dc:	20 83       	st	Z, r18
    PORTB = 0x00;
  de:	85 e2       	ldi	r24, 0x25	; 37
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	10 82       	st	Z, r1
    
    if (initD) {
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	88 23       	and	r24, r24
  ea:	91 f0       	breq	.+36     	; 0x110 <Led_init+0x48>
        // Set PORTD 0..4 to outputs
        DDRD |= ( (1 << 4) | (1 << 3) | (1 << 2) | (1 << 1) | (1 << 0));
  ec:	8a e2       	ldi	r24, 0x2A	; 42
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	2a e2       	ldi	r18, 0x2A	; 42
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	f9 01       	movw	r30, r18
  f6:	20 81       	ld	r18, Z
  f8:	2f 61       	ori	r18, 0x1F	; 31
  fa:	fc 01       	movw	r30, r24
  fc:	20 83       	st	Z, r18
        PORTD &= ~( (1 << 4) | (1 << 3) | (1 << 2) | (1 << 1) | (1 << 0));
  fe:	8b e2       	ldi	r24, 0x2B	; 43
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	2b e2       	ldi	r18, 0x2B	; 43
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	f9 01       	movw	r30, r18
 108:	20 81       	ld	r18, Z
 10a:	20 7e       	andi	r18, 0xE0	; 224
 10c:	fc 01       	movw	r30, r24
 10e:	20 83       	st	Z, r18
    }
}
 110:	00 00       	nop
 112:	0f 90       	pop	r0
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <Taster_init>:
 ---------------------
 - DDR Reg has to be set to 0
 - PORT Reg has to be set to 1
 -> Pin is input with pull-up
 */
void Taster_init() {
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
    
    // set to inputs
    DDRC &= ~(1 << 2);
 122:	87 e2       	ldi	r24, 0x27	; 39
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	27 e2       	ldi	r18, 0x27	; 39
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	f9 01       	movw	r30, r18
 12c:	20 81       	ld	r18, Z
 12e:	2b 7f       	andi	r18, 0xFB	; 251
 130:	fc 01       	movw	r30, r24
 132:	20 83       	st	Z, r18
    DDRD &= ~( (1 << 7) | (1 << 6) | (1 << 5) );
 134:	8a e2       	ldi	r24, 0x2A	; 42
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	2a e2       	ldi	r18, 0x2A	; 42
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	f9 01       	movw	r30, r18
 13e:	20 81       	ld	r18, Z
 140:	2f 71       	andi	r18, 0x1F	; 31
 142:	fc 01       	movw	r30, r24
 144:	20 83       	st	Z, r18
    
    // enable pull-up
    PORTC |= (1 << 2);
 146:	88 e2       	ldi	r24, 0x28	; 40
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	28 e2       	ldi	r18, 0x28	; 40
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	f9 01       	movw	r30, r18
 150:	20 81       	ld	r18, Z
 152:	24 60       	ori	r18, 0x04	; 4
 154:	fc 01       	movw	r30, r24
 156:	20 83       	st	Z, r18
    PORTD |= (1 << 7) | (1 << 6) | (1 << 5);
 158:	8b e2       	ldi	r24, 0x2B	; 43
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	2b e2       	ldi	r18, 0x2B	; 43
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	f9 01       	movw	r30, r18
 162:	20 81       	ld	r18, Z
 164:	20 6e       	ori	r18, 0xE0	; 224
 166:	fc 01       	movw	r30, r24
 168:	20 83       	st	Z, r18
}
 16a:	00 00       	nop
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <main>:
#include "uart/Uart.h"
#include <avr/interrupt.h>

#define CLK_F_MHZ 16

int main(void) {
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	00 d0       	rcall	.+0      	; 0x178 <main+0x6>
 178:	00 d0       	rcall	.+0      	; 0x17a <main+0x8>
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
	
    cli();
 17e:	f8 94       	cli
    Led_init(0);	// Don't set LEDs at PORTD
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	a2 df       	rcall	.-188    	; 0xc8 <Led_init>
	Taster_init();
 184:	ca df       	rcall	.-108    	; 0x11a <Taster_init>
    Timer_init(CLK_F_MHZ); // Init timer with 16MHZ clock
 186:	80 e1       	ldi	r24, 0x10	; 16
 188:	0b d0       	rcall	.+22     	; 0x1a0 <Timer_init>
	uart_init();
 18a:	c1 d0       	rcall	.+386    	; 0x30e <uart_init>
 18c:	78 94       	sei
	sei();
 18e:	19 82       	std	Y+1, r1	; 0x01
	
    uint8_t state_testBoard = 0;
 190:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t last_time = 0;
 192:	1a 82       	std	Y+2, r1	; 0x02
 194:	81 e0       	ldi	r24, 0x01	; 1
	uint8_t  toggle_asdf = 1;
 196:	8c 83       	std	Y+4, r24	; 0x04
                Led8_Off();
                aksfjbalsdkjb = 0;
            }
        }*/
        
        uart_send("Hallo asdfajns\n");
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	de d0       	rcall	.+444    	; 0x35a <uart_send>
 19e:	fc cf       	rjmp	.-8      	; 0x198 <main+0x26>

000001a0 <Timer_init>:
        //PORTB = 0x00;
        //PORTB = uart_recv();
        
        //trafficLight(0);
        //playground();
    }
 1a0:	cf 93       	push	r28
    
    // enable global interrupt
    sei();

    return temp_timer_count;
}
 1a2:	df 93       	push	r29
 1a4:	1f 92       	push	r1
 1a6:	cd b7       	in	r28, 0x3d	; 61
 1a8:	de b7       	in	r29, 0x3e	; 62
 1aa:	89 83       	std	Y+1, r24	; 0x01
 1ac:	89 81       	ldd	r24, Y+1	; 0x01
 1ae:	88 2f       	mov	r24, r24
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	05 d0       	rcall	.+10     	; 0x1be <Timer_init_withoutStruct>
 1b4:	00 00       	nop
 1b6:	0f 90       	pop	r0
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <Timer_init_withoutStruct>:
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	1f 92       	push	r1
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
 1c8:	89 83       	std	Y+1, r24	; 0x01
 1ca:	85 e4       	ldi	r24, 0x45	; 69
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	25 e4       	ldi	r18, 0x45	; 69
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	f9 01       	movw	r30, r18
 1d4:	20 81       	ld	r18, Z
 1d6:	27 7f       	andi	r18, 0xF7	; 247
 1d8:	fc 01       	movw	r30, r24
 1da:	20 83       	st	Z, r18
 1dc:	84 e4       	ldi	r24, 0x44	; 68
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	24 e4       	ldi	r18, 0x44	; 68
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	f9 01       	movw	r30, r18
 1e6:	20 81       	ld	r18, Z
 1e8:	22 60       	ori	r18, 0x02	; 2
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 83       	st	Z, r18
 1ee:	84 e4       	ldi	r24, 0x44	; 68
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	24 e4       	ldi	r18, 0x44	; 68
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	f9 01       	movw	r30, r18
 1f8:	20 81       	ld	r18, Z
 1fa:	2e 7f       	andi	r18, 0xFE	; 254
 1fc:	fc 01       	movw	r30, r24
 1fe:	20 83       	st	Z, r18
 200:	89 81       	ldd	r24, Y+1	; 0x01
 202:	88 2f       	mov	r24, r24
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	40 97       	sbiw	r24, 0x10	; 16
 208:	09 f5       	brne	.+66     	; 0x24c <Timer_init_withoutStruct+0x8e>
 20a:	87 e4       	ldi	r24, 0x47	; 71
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	29 ef       	ldi	r18, 0xF9	; 249
 210:	fc 01       	movw	r30, r24
 212:	20 83       	st	Z, r18
 214:	85 e4       	ldi	r24, 0x45	; 69
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	25 e4       	ldi	r18, 0x45	; 69
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	f9 01       	movw	r30, r18
 21e:	20 81       	ld	r18, Z
 220:	2b 7f       	andi	r18, 0xFB	; 251
 222:	fc 01       	movw	r30, r24
 224:	20 83       	st	Z, r18
 226:	85 e4       	ldi	r24, 0x45	; 69
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	25 e4       	ldi	r18, 0x45	; 69
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	f9 01       	movw	r30, r18
 230:	20 81       	ld	r18, Z
 232:	22 60       	ori	r18, 0x02	; 2
 234:	fc 01       	movw	r30, r24
 236:	20 83       	st	Z, r18
 238:	85 e4       	ldi	r24, 0x45	; 69
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	25 e4       	ldi	r18, 0x45	; 69
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	f9 01       	movw	r30, r18
 242:	20 81       	ld	r18, Z
 244:	21 60       	ori	r18, 0x01	; 1
 246:	fc 01       	movw	r30, r24
 248:	20 83       	st	Z, r18
 24a:	21 c0       	rjmp	.+66     	; 0x28e <Timer_init_withoutStruct+0xd0>
 24c:	87 e4       	ldi	r24, 0x47	; 71
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	2c e7       	ldi	r18, 0x7C	; 124
 252:	fc 01       	movw	r30, r24
 254:	20 83       	st	Z, r18
 256:	85 e4       	ldi	r24, 0x45	; 69
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	25 e4       	ldi	r18, 0x45	; 69
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	f9 01       	movw	r30, r18
 260:	20 81       	ld	r18, Z
 262:	2b 7f       	andi	r18, 0xFB	; 251
 264:	fc 01       	movw	r30, r24
 266:	20 83       	st	Z, r18
 268:	85 e4       	ldi	r24, 0x45	; 69
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	25 e4       	ldi	r18, 0x45	; 69
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	f9 01       	movw	r30, r18
 272:	20 81       	ld	r18, Z
 274:	22 60       	ori	r18, 0x02	; 2
 276:	fc 01       	movw	r30, r24
 278:	20 83       	st	Z, r18
 27a:	85 e4       	ldi	r24, 0x45	; 69
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	25 e4       	ldi	r18, 0x45	; 69
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	f9 01       	movw	r30, r18
 284:	20 81       	ld	r18, Z
 286:	2e 7f       	andi	r18, 0xFE	; 254
 288:	fc 01       	movw	r30, r24
 28a:	20 83       	st	Z, r18
 28c:	00 00       	nop
 28e:	8e e6       	ldi	r24, 0x6E	; 110
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	2e e6       	ldi	r18, 0x6E	; 110
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	f9 01       	movw	r30, r18
 298:	20 81       	ld	r18, Z
 29a:	2b 7f       	andi	r18, 0xFB	; 251
 29c:	fc 01       	movw	r30, r24
 29e:	20 83       	st	Z, r18
 2a0:	8e e6       	ldi	r24, 0x6E	; 110
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	2e e6       	ldi	r18, 0x6E	; 110
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	f9 01       	movw	r30, r18
 2aa:	20 81       	ld	r18, Z
 2ac:	22 60       	ori	r18, 0x02	; 2
 2ae:	fc 01       	movw	r30, r24
 2b0:	20 83       	st	Z, r18
 2b2:	8e e6       	ldi	r24, 0x6E	; 110
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	2e e6       	ldi	r18, 0x6E	; 110
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	f9 01       	movw	r30, r18
 2bc:	20 81       	ld	r18, Z
 2be:	2e 7f       	andi	r18, 0xFE	; 254
 2c0:	fc 01       	movw	r30, r24
 2c2:	20 83       	st	Z, r18
 2c4:	00 00       	nop
 2c6:	0f 90       	pop	r0
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <__vector_16>:
 ( not used atm)
 Timer compare A interrput:
 - increase timer_count
 - if timer_count is at max of uint16, set it to 0
 */
ISR(TIMER0_COMPA_vect){
 2ce:	1f 92       	push	r1
 2d0:	0f 92       	push	r0
 2d2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2d6:	0f 92       	push	r0
 2d8:	11 24       	eor	r1, r1
 2da:	8f 93       	push	r24
 2dc:	9f 93       	push	r25
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	cd b7       	in	r28, 0x3d	; 61
 2e4:	de b7       	in	r29, 0x3e	; 62
    timer_count++;
 2e6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 2ea:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 2ee:	01 96       	adiw	r24, 0x01	; 1
 2f0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 2f4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
}
 2f8:	00 00       	nop
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	9f 91       	pop	r25
 300:	8f 91       	pop	r24
 302:	0f 90       	pop	r0
 304:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <uart_init>:

#include "Uart.h"

void uart_init() {
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	00 d0       	rcall	.+0      	; 0x314 <uart_init+0x6>
 314:	cd b7       	in	r28, 0x3d	; 61
 316:	de b7       	in	r29, 0x3e	; 62
    
    // Set baud rate
    unsigned int baud = 103;
 318:	87 e6       	ldi	r24, 0x67	; 103
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	9a 83       	std	Y+2, r25	; 0x02
 31e:	89 83       	std	Y+1, r24	; 0x01
    UBRR0H = (unsigned char) (baud >> 8);
 320:	85 ec       	ldi	r24, 0xC5	; 197
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	29 81       	ldd	r18, Y+1	; 0x01
 326:	3a 81       	ldd	r19, Y+2	; 0x02
 328:	23 2f       	mov	r18, r19
 32a:	33 27       	eor	r19, r19
 32c:	fc 01       	movw	r30, r24
 32e:	20 83       	st	Z, r18
    UBRR0L = (unsigned char) baud;
 330:	84 ec       	ldi	r24, 0xC4	; 196
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	29 81       	ldd	r18, Y+1	; 0x01
 336:	fc 01       	movw	r30, r24
 338:	20 83       	st	Z, r18
	
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);   // set RX enable and TX enable
 33a:	81 ec       	ldi	r24, 0xC1	; 193
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	28 e1       	ldi	r18, 0x18	; 24
 340:	fc 01       	movw	r30, r24
 342:	20 83       	st	Z, r18
    
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // b00000110 -> async USART, no parity, 1 stop-bit, 8 bit (set UCSZn2 in UCSR0C to 0)
 344:	82 ec       	ldi	r24, 0xC2	; 194
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	26 e0       	ldi	r18, 0x06	; 6
 34a:	fc 01       	movw	r30, r24
 34c:	20 83       	st	Z, r18
    
}
 34e:	00 00       	nop
 350:	0f 90       	pop	r0
 352:	0f 90       	pop	r0
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	08 95       	ret

0000035a <uart_send>:

void uart_send(char* string) {
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	00 d0       	rcall	.+0      	; 0x360 <uart_send+0x6>
 360:	00 d0       	rcall	.+0      	; 0x362 <uart_send+0x8>
 362:	00 d0       	rcall	.+0      	; 0x364 <uart_send+0xa>
 364:	cd b7       	in	r28, 0x3d	; 61
 366:	de b7       	in	r29, 0x3e	; 62
 368:	9e 83       	std	Y+6, r25	; 0x06
 36a:	8d 83       	std	Y+5, r24	; 0x05
    
    int len = strlen(string);
 36c:	8d 81       	ldd	r24, Y+5	; 0x05
 36e:	9e 81       	ldd	r25, Y+6	; 0x06
 370:	32 d0       	rcall	.+100    	; 0x3d6 <strlen>
 372:	9c 83       	std	Y+4, r25	; 0x04
 374:	8b 83       	std	Y+3, r24	; 0x03
    
    // Iterate over string
    for (int i = 0; i < len; i++) {
 376:	1a 82       	std	Y+2, r1	; 0x02
 378:	19 82       	std	Y+1, r1	; 0x01
 37a:	1c c0       	rjmp	.+56     	; 0x3b4 <uart_send+0x5a>
        
        // Wait for transmit register to be empty
        while ( !(UCSR0A & (1 << UDRE0)) )
 37c:	00 00       	nop
 37e:	80 ec       	ldi	r24, 0xC0	; 192
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	fc 01       	movw	r30, r24
 384:	80 81       	ld	r24, Z
 386:	88 2f       	mov	r24, r24
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	80 72       	andi	r24, 0x20	; 32
 38c:	99 27       	eor	r25, r25
 38e:	89 2b       	or	r24, r25
 390:	b1 f3       	breq	.-20     	; 0x37e <uart_send+0x24>
            ;
        
        // Write byte to transmit register
        UDR0 = string[i];
 392:	86 ec       	ldi	r24, 0xC6	; 198
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	29 81       	ldd	r18, Y+1	; 0x01
 398:	3a 81       	ldd	r19, Y+2	; 0x02
 39a:	4d 81       	ldd	r20, Y+5	; 0x05
 39c:	5e 81       	ldd	r21, Y+6	; 0x06
 39e:	24 0f       	add	r18, r20
 3a0:	35 1f       	adc	r19, r21
 3a2:	f9 01       	movw	r30, r18
 3a4:	20 81       	ld	r18, Z
 3a6:	fc 01       	movw	r30, r24
 3a8:	20 83       	st	Z, r18
void uart_send(char* string) {
    
    int len = strlen(string);
    
    // Iterate over string
    for (int i = 0; i < len; i++) {
 3aa:	89 81       	ldd	r24, Y+1	; 0x01
 3ac:	9a 81       	ldd	r25, Y+2	; 0x02
 3ae:	01 96       	adiw	r24, 0x01	; 1
 3b0:	9a 83       	std	Y+2, r25	; 0x02
 3b2:	89 83       	std	Y+1, r24	; 0x01
 3b4:	29 81       	ldd	r18, Y+1	; 0x01
 3b6:	3a 81       	ldd	r19, Y+2	; 0x02
 3b8:	8b 81       	ldd	r24, Y+3	; 0x03
 3ba:	9c 81       	ldd	r25, Y+4	; 0x04
 3bc:	28 17       	cp	r18, r24
 3be:	39 07       	cpc	r19, r25
 3c0:	ec f2       	brlt	.-70     	; 0x37c <uart_send+0x22>
        // Write byte to transmit register
        UDR0 = string[i];
    }
    
    
}
 3c2:	00 00       	nop
 3c4:	26 96       	adiw	r28, 0x06	; 6
 3c6:	0f b6       	in	r0, 0x3f	; 63
 3c8:	f8 94       	cli
 3ca:	de bf       	out	0x3e, r29	; 62
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	cd bf       	out	0x3d, r28	; 61
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	08 95       	ret

000003d6 <strlen>:
 3d6:	fc 01       	movw	r30, r24
 3d8:	01 90       	ld	r0, Z+
 3da:	00 20       	and	r0, r0
 3dc:	e9 f7       	brne	.-6      	; 0x3d8 <strlen+0x2>
 3de:	80 95       	com	r24
 3e0:	90 95       	com	r25
 3e2:	8e 0f       	add	r24, r30
 3e4:	9f 1f       	adc	r25, r31
 3e6:	08 95       	ret

000003e8 <_exit>:
 3e8:	f8 94       	cli

000003ea <__stop_program>:
 3ea:	ff cf       	rjmp	.-2      	; 0x3ea <__stop_program>
