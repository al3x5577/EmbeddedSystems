
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00001124  000011b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001124  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000042d  0080011a  0080011a  000011d2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001230  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013b5  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c92  00000000  00000000  0000281d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e32  00000000  00000000  000034af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006e0  00000000  00000000  000042e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000772  00000000  00000000  000049c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d9f  00000000  00000000  00005136  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00005ed5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	35 c3       	rjmp	.+1642   	; 0x6ac <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	4b c5       	rjmp	.+2710   	; 0xae8 <__vector_20>
      52:	00 00       	nop
      54:	00 c5       	rjmp	.+2560   	; 0xa56 <__vector_21>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	21 c1       	rjmp	.+578    	; 0x2a4 <__vector_24>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e2       	ldi	r30, 0x24	; 36
      a0:	f1 e1       	ldi	r31, 0x11	; 17
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 31       	cpi	r26, 0x1A	; 26
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	25 e0       	ldi	r18, 0x05	; 5
      b4:	aa e1       	ldi	r26, 0x1A	; 26
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a7 34       	cpi	r26, 0x47	; 71
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	d5 d1       	rcall	.+938    	; 0x46e <main>
      c4:	0c 94 90 08 	jmp	0x1120	; 0x1120 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <adc_init>:
uint16_t LM35_Array[8] = {0};
uint8_t index_LM35 = 0;
uint16_t Poti_Array[8] = {0};
uint8_t index_Poti = 0;

void adc_init() {
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	00 d0       	rcall	.+0      	; 0xd0 <adc_init+0x6>
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
    ADMUX = 0;  // AREF, Right Adjust, ADC0
      d4:	8c e7       	ldi	r24, 0x7C	; 124
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	fc 01       	movw	r30, r24
      da:	10 82       	st	Z, r1
    
    ADCSRB = 3; // Set trigger to Timer0 Compare Match
      dc:	8b e7       	ldi	r24, 0x7B	; 123
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	23 e0       	ldi	r18, 0x03	; 3
      e2:	fc 01       	movw	r30, r24
      e4:	20 83       	st	Z, r18
    
    ADCSRA = 7; // Set prescaler to 128
      e6:	8a e7       	ldi	r24, 0x7A	; 122
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	27 e0       	ldi	r18, 0x07	; 7
      ec:	fc 01       	movw	r30, r24
      ee:	20 83       	st	Z, r18
    ADCSRA |= (1 << ADEN) | (1 << ADSC); // Set ADC enable, no Auto trigger | (1 << ADATE)
      f0:	8a e7       	ldi	r24, 0x7A	; 122
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	2a e7       	ldi	r18, 0x7A	; 122
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	f9 01       	movw	r30, r18
      fa:	20 81       	ld	r18, Z
      fc:	20 6c       	ori	r18, 0xC0	; 192
      fe:	fc 01       	movw	r30, r24
     100:	20 83       	st	Z, r18
    
    while (ADCSRA & (1 << ADSC));   // wait till first conversion is finished
     102:	00 00       	nop
     104:	8a e7       	ldi	r24, 0x7A	; 122
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	fc 01       	movw	r30, r24
     10a:	80 81       	ld	r24, Z
     10c:	88 2f       	mov	r24, r24
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	80 74       	andi	r24, 0x40	; 64
     112:	99 27       	eor	r25, r25
     114:	89 2b       	or	r24, r25
     116:	b1 f7       	brne	.-20     	; 0x104 <adc_init+0x3a>
    uint16_t trash = ADC;
     118:	88 e7       	ldi	r24, 0x78	; 120
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	fc 01       	movw	r30, r24
     11e:	80 81       	ld	r24, Z
     120:	91 81       	ldd	r25, Z+1	; 0x01
     122:	9a 83       	std	Y+2, r25	; 0x02
     124:	89 83       	std	Y+1, r24	; 0x01
    
    ADCSRA |= (1 << ADIE) | (1 << ADSC); // ADC interrupt
     126:	8a e7       	ldi	r24, 0x7A	; 122
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	2a e7       	ldi	r18, 0x7A	; 122
     12c:	30 e0       	ldi	r19, 0x00	; 0
     12e:	f9 01       	movw	r30, r18
     130:	20 81       	ld	r18, Z
     132:	28 64       	ori	r18, 0x48	; 72
     134:	fc 01       	movw	r30, r24
     136:	20 83       	st	Z, r18
}
     138:	00 00       	nop
     13a:	0f 90       	pop	r0
     13c:	0f 90       	pop	r0
     13e:	df 91       	pop	r29
     140:	cf 91       	pop	r28
     142:	08 95       	ret

00000144 <adc_get_LM35>:

uint32_t adc_get_LM35() {
     144:	cf 93       	push	r28
     146:	df 93       	push	r29
     148:	00 d0       	rcall	.+0      	; 0x14a <adc_get_LM35+0x6>
     14a:	00 d0       	rcall	.+0      	; 0x14c <adc_get_LM35+0x8>
     14c:	00 d0       	rcall	.+0      	; 0x14e <adc_get_LM35+0xa>
     14e:	cd b7       	in	r28, 0x3d	; 61
     150:	de b7       	in	r29, 0x3e	; 62
    if (LM35_Array[7] == 0) {
     152:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <LM35_Array+0xe>
     156:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <LM35_Array+0xf>
     15a:	89 2b       	or	r24, r25
     15c:	21 f4       	brne	.+8      	; 0x166 <adc_get_LM35+0x22>
        return 0; // Not enoght data in Array
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	dc 01       	movw	r26, r24
     164:	3c c0       	rjmp	.+120    	; 0x1de <adc_get_LM35+0x9a>
    }
    
    uint32_t avg = 0;
     166:	19 82       	std	Y+1, r1	; 0x01
     168:	1a 82       	std	Y+2, r1	; 0x02
     16a:	1b 82       	std	Y+3, r1	; 0x03
     16c:	1c 82       	std	Y+4, r1	; 0x04
    
    for (int i = 0; i < 8; i++) {
     16e:	1e 82       	std	Y+6, r1	; 0x06
     170:	1d 82       	std	Y+5, r1	; 0x05
     172:	1d c0       	rjmp	.+58     	; 0x1ae <adc_get_LM35+0x6a>
        avg += LM35_Array[i];
     174:	8d 81       	ldd	r24, Y+5	; 0x05
     176:	9e 81       	ldd	r25, Y+6	; 0x06
     178:	88 0f       	add	r24, r24
     17a:	99 1f       	adc	r25, r25
     17c:	85 5e       	subi	r24, 0xE5	; 229
     17e:	9e 4f       	sbci	r25, 0xFE	; 254
     180:	fc 01       	movw	r30, r24
     182:	80 81       	ld	r24, Z
     184:	91 81       	ldd	r25, Z+1	; 0x01
     186:	cc 01       	movw	r24, r24
     188:	a0 e0       	ldi	r26, 0x00	; 0
     18a:	b0 e0       	ldi	r27, 0x00	; 0
     18c:	29 81       	ldd	r18, Y+1	; 0x01
     18e:	3a 81       	ldd	r19, Y+2	; 0x02
     190:	4b 81       	ldd	r20, Y+3	; 0x03
     192:	5c 81       	ldd	r21, Y+4	; 0x04
     194:	82 0f       	add	r24, r18
     196:	93 1f       	adc	r25, r19
     198:	a4 1f       	adc	r26, r20
     19a:	b5 1f       	adc	r27, r21
     19c:	89 83       	std	Y+1, r24	; 0x01
     19e:	9a 83       	std	Y+2, r25	; 0x02
     1a0:	ab 83       	std	Y+3, r26	; 0x03
     1a2:	bc 83       	std	Y+4, r27	; 0x04
        return 0; // Not enoght data in Array
    }
    
    uint32_t avg = 0;
    
    for (int i = 0; i < 8; i++) {
     1a4:	8d 81       	ldd	r24, Y+5	; 0x05
     1a6:	9e 81       	ldd	r25, Y+6	; 0x06
     1a8:	01 96       	adiw	r24, 0x01	; 1
     1aa:	9e 83       	std	Y+6, r25	; 0x06
     1ac:	8d 83       	std	Y+5, r24	; 0x05
     1ae:	8d 81       	ldd	r24, Y+5	; 0x05
     1b0:	9e 81       	ldd	r25, Y+6	; 0x06
     1b2:	08 97       	sbiw	r24, 0x08	; 8
     1b4:	fc f2       	brlt	.-66     	; 0x174 <adc_get_LM35+0x30>
        avg += LM35_Array[i];
    }
    avg = avg / 8;
     1b6:	89 81       	ldd	r24, Y+1	; 0x01
     1b8:	9a 81       	ldd	r25, Y+2	; 0x02
     1ba:	ab 81       	ldd	r26, Y+3	; 0x03
     1bc:	bc 81       	ldd	r27, Y+4	; 0x04
     1be:	68 94       	set
     1c0:	12 f8       	bld	r1, 2
     1c2:	b6 95       	lsr	r27
     1c4:	a7 95       	ror	r26
     1c6:	97 95       	ror	r25
     1c8:	87 95       	ror	r24
     1ca:	16 94       	lsr	r1
     1cc:	d1 f7       	brne	.-12     	; 0x1c2 <adc_get_LM35+0x7e>
     1ce:	89 83       	std	Y+1, r24	; 0x01
     1d0:	9a 83       	std	Y+2, r25	; 0x02
     1d2:	ab 83       	std	Y+3, r26	; 0x03
     1d4:	bc 83       	std	Y+4, r27	; 0x04
    
    return avg;
     1d6:	89 81       	ldd	r24, Y+1	; 0x01
     1d8:	9a 81       	ldd	r25, Y+2	; 0x02
     1da:	ab 81       	ldd	r26, Y+3	; 0x03
     1dc:	bc 81       	ldd	r27, Y+4	; 0x04
}
     1de:	bc 01       	movw	r22, r24
     1e0:	cd 01       	movw	r24, r26
     1e2:	26 96       	adiw	r28, 0x06	; 6
     1e4:	0f b6       	in	r0, 0x3f	; 63
     1e6:	f8 94       	cli
     1e8:	de bf       	out	0x3e, r29	; 62
     1ea:	0f be       	out	0x3f, r0	; 63
     1ec:	cd bf       	out	0x3d, r28	; 61
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	08 95       	ret

000001f4 <adc_get_Poti>:

uint32_t adc_get_Poti() {
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	00 d0       	rcall	.+0      	; 0x1fa <adc_get_Poti+0x6>
     1fa:	00 d0       	rcall	.+0      	; 0x1fc <adc_get_Poti+0x8>
     1fc:	00 d0       	rcall	.+0      	; 0x1fe <adc_get_Poti+0xa>
     1fe:	cd b7       	in	r28, 0x3d	; 61
     200:	de b7       	in	r29, 0x3e	; 62
    if (Poti_Array[7] == 0) {
     202:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <Poti_Array+0xe>
     206:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <Poti_Array+0xf>
     20a:	89 2b       	or	r24, r25
     20c:	21 f4       	brne	.+8      	; 0x216 <adc_get_Poti+0x22>
        return 0; // Not enoght data in Array
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	dc 01       	movw	r26, r24
     214:	3c c0       	rjmp	.+120    	; 0x28e <adc_get_Poti+0x9a>
    }
    
    uint32_t avg = 0;
     216:	19 82       	std	Y+1, r1	; 0x01
     218:	1a 82       	std	Y+2, r1	; 0x02
     21a:	1b 82       	std	Y+3, r1	; 0x03
     21c:	1c 82       	std	Y+4, r1	; 0x04
    
    for (int i = 0; i < 8; i++) {
     21e:	1e 82       	std	Y+6, r1	; 0x06
     220:	1d 82       	std	Y+5, r1	; 0x05
     222:	1d c0       	rjmp	.+58     	; 0x25e <adc_get_Poti+0x6a>
        avg += Poti_Array[i];
     224:	8d 81       	ldd	r24, Y+5	; 0x05
     226:	9e 81       	ldd	r25, Y+6	; 0x06
     228:	88 0f       	add	r24, r24
     22a:	99 1f       	adc	r25, r25
     22c:	84 5d       	subi	r24, 0xD4	; 212
     22e:	9e 4f       	sbci	r25, 0xFE	; 254
     230:	fc 01       	movw	r30, r24
     232:	80 81       	ld	r24, Z
     234:	91 81       	ldd	r25, Z+1	; 0x01
     236:	cc 01       	movw	r24, r24
     238:	a0 e0       	ldi	r26, 0x00	; 0
     23a:	b0 e0       	ldi	r27, 0x00	; 0
     23c:	29 81       	ldd	r18, Y+1	; 0x01
     23e:	3a 81       	ldd	r19, Y+2	; 0x02
     240:	4b 81       	ldd	r20, Y+3	; 0x03
     242:	5c 81       	ldd	r21, Y+4	; 0x04
     244:	82 0f       	add	r24, r18
     246:	93 1f       	adc	r25, r19
     248:	a4 1f       	adc	r26, r20
     24a:	b5 1f       	adc	r27, r21
     24c:	89 83       	std	Y+1, r24	; 0x01
     24e:	9a 83       	std	Y+2, r25	; 0x02
     250:	ab 83       	std	Y+3, r26	; 0x03
     252:	bc 83       	std	Y+4, r27	; 0x04
        return 0; // Not enoght data in Array
    }
    
    uint32_t avg = 0;
    
    for (int i = 0; i < 8; i++) {
     254:	8d 81       	ldd	r24, Y+5	; 0x05
     256:	9e 81       	ldd	r25, Y+6	; 0x06
     258:	01 96       	adiw	r24, 0x01	; 1
     25a:	9e 83       	std	Y+6, r25	; 0x06
     25c:	8d 83       	std	Y+5, r24	; 0x05
     25e:	8d 81       	ldd	r24, Y+5	; 0x05
     260:	9e 81       	ldd	r25, Y+6	; 0x06
     262:	08 97       	sbiw	r24, 0x08	; 8
     264:	fc f2       	brlt	.-66     	; 0x224 <adc_get_Poti+0x30>
        avg += Poti_Array[i];
    }
    avg = avg / 8;
     266:	89 81       	ldd	r24, Y+1	; 0x01
     268:	9a 81       	ldd	r25, Y+2	; 0x02
     26a:	ab 81       	ldd	r26, Y+3	; 0x03
     26c:	bc 81       	ldd	r27, Y+4	; 0x04
     26e:	68 94       	set
     270:	12 f8       	bld	r1, 2
     272:	b6 95       	lsr	r27
     274:	a7 95       	ror	r26
     276:	97 95       	ror	r25
     278:	87 95       	ror	r24
     27a:	16 94       	lsr	r1
     27c:	d1 f7       	brne	.-12     	; 0x272 <adc_get_Poti+0x7e>
     27e:	89 83       	std	Y+1, r24	; 0x01
     280:	9a 83       	std	Y+2, r25	; 0x02
     282:	ab 83       	std	Y+3, r26	; 0x03
     284:	bc 83       	std	Y+4, r27	; 0x04
    
    return avg;
     286:	89 81       	ldd	r24, Y+1	; 0x01
     288:	9a 81       	ldd	r25, Y+2	; 0x02
     28a:	ab 81       	ldd	r26, Y+3	; 0x03
     28c:	bc 81       	ldd	r27, Y+4	; 0x04
}
     28e:	bc 01       	movw	r22, r24
     290:	cd 01       	movw	r24, r26
     292:	26 96       	adiw	r28, 0x06	; 6
     294:	0f b6       	in	r0, 0x3f	; 63
     296:	f8 94       	cli
     298:	de bf       	out	0x3e, r29	; 62
     29a:	0f be       	out	0x3f, r0	; 63
     29c:	cd bf       	out	0x3d, r28	; 61
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	08 95       	ret

000002a4 <__vector_24>:

ISR(ADC_vect){
     2a4:	1f 92       	push	r1
     2a6:	0f 92       	push	r0
     2a8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     2ac:	0f 92       	push	r0
     2ae:	11 24       	eor	r1, r1
     2b0:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     2b4:	0f 92       	push	r0
     2b6:	2f 93       	push	r18
     2b8:	3f 93       	push	r19
     2ba:	8f 93       	push	r24
     2bc:	9f 93       	push	r25
     2be:	ef 93       	push	r30
     2c0:	ff 93       	push	r31
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	00 d0       	rcall	.+0      	; 0x2c8 <__vector_24+0x24>
     2c8:	cd b7       	in	r28, 0x3d	; 61
     2ca:	de b7       	in	r29, 0x3e	; 62
    volatile uint16_t res = ADC;
     2cc:	88 e7       	ldi	r24, 0x78	; 120
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	fc 01       	movw	r30, r24
     2d2:	80 81       	ld	r24, Z
     2d4:	91 81       	ldd	r25, Z+1	; 0x01
     2d6:	9a 83       	std	Y+2, r25	; 0x02
     2d8:	89 83       	std	Y+1, r24	; 0x01
    switch (pin) {
     2da:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
     2de:	88 2f       	mov	r24, r24
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	00 97       	sbiw	r24, 0x00	; 0
     2e4:	19 f0       	breq	.+6      	; 0x2ec <__vector_24+0x48>
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	49 f1       	breq	.+82     	; 0x33c <__vector_24+0x98>
            }
            pin = Temperatur;
            break;
            
        default:
            break;
     2ea:	4f c0       	rjmp	.+158    	; 0x38a <__vector_24+0xe6>

ISR(ADC_vect){
    volatile uint16_t res = ADC;
    switch (pin) {
        case Temperatur:
            if (index_LM35 >= 8 || index_LM35 == 0) {
     2ec:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <index_LM35>
     2f0:	88 30       	cpi	r24, 0x08	; 8
     2f2:	20 f4       	brcc	.+8      	; 0x2fc <__vector_24+0x58>
     2f4:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <index_LM35>
     2f8:	88 23       	and	r24, r24
     2fa:	51 f4       	brne	.+20     	; 0x310 <__vector_24+0x6c>
                LM35_Array[0] = res;
     2fc:	89 81       	ldd	r24, Y+1	; 0x01
     2fe:	9a 81       	ldd	r25, Y+2	; 0x02
     300:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <LM35_Array+0x1>
     304:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <LM35_Array>
                index_LM35 = 1;
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <index_LM35>
     30e:	12 c0       	rjmp	.+36     	; 0x334 <__vector_24+0x90>
            }else {
                LM35_Array[index_LM35] = res;
     310:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <index_LM35>
     314:	88 2f       	mov	r24, r24
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	29 81       	ldd	r18, Y+1	; 0x01
     31a:	3a 81       	ldd	r19, Y+2	; 0x02
     31c:	88 0f       	add	r24, r24
     31e:	99 1f       	adc	r25, r25
     320:	85 5e       	subi	r24, 0xE5	; 229
     322:	9e 4f       	sbci	r25, 0xFE	; 254
     324:	fc 01       	movw	r30, r24
     326:	31 83       	std	Z+1, r19	; 0x01
     328:	20 83       	st	Z, r18
                index_LM35++;
     32a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <index_LM35>
     32e:	8f 5f       	subi	r24, 0xFF	; 255
     330:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <index_LM35>
            }
            pin = Poti;
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
            break;
     33a:	27 c0       	rjmp	.+78     	; 0x38a <__vector_24+0xe6>
            
        case Poti:
            if (index_Poti >= 8 || index_Poti == 0) {
     33c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <index_Poti>
     340:	88 30       	cpi	r24, 0x08	; 8
     342:	20 f4       	brcc	.+8      	; 0x34c <__vector_24+0xa8>
     344:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <index_Poti>
     348:	88 23       	and	r24, r24
     34a:	51 f4       	brne	.+20     	; 0x360 <__vector_24+0xbc>
                Poti_Array[0] = res;
     34c:	89 81       	ldd	r24, Y+1	; 0x01
     34e:	9a 81       	ldd	r25, Y+2	; 0x02
     350:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <Poti_Array+0x1>
     354:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <Poti_Array>
                index_Poti = 1;
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <index_Poti>
     35e:	12 c0       	rjmp	.+36     	; 0x384 <__vector_24+0xe0>
            }else {
                Poti_Array[index_Poti] = res;
     360:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <index_Poti>
     364:	88 2f       	mov	r24, r24
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	29 81       	ldd	r18, Y+1	; 0x01
     36a:	3a 81       	ldd	r19, Y+2	; 0x02
     36c:	88 0f       	add	r24, r24
     36e:	99 1f       	adc	r25, r25
     370:	84 5d       	subi	r24, 0xD4	; 212
     372:	9e 4f       	sbci	r25, 0xFE	; 254
     374:	fc 01       	movw	r30, r24
     376:	31 83       	std	Z+1, r19	; 0x01
     378:	20 83       	st	Z, r18
                index_Poti++;
     37a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <index_Poti>
     37e:	8f 5f       	subi	r24, 0xFF	; 255
     380:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <index_Poti>
            }
            pin = Temperatur;
     384:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
            break;
     388:	00 00       	nop
            
        default:
            break;
    }
    
    ADCSRA |= (1 << ADSC);
     38a:	8a e7       	ldi	r24, 0x7A	; 122
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	2a e7       	ldi	r18, 0x7A	; 122
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	f9 01       	movw	r30, r18
     394:	20 81       	ld	r18, Z
     396:	20 64       	ori	r18, 0x40	; 64
     398:	fc 01       	movw	r30, r24
     39a:	20 83       	st	Z, r18
}
     39c:	00 00       	nop
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	ff 91       	pop	r31
     3a8:	ef 91       	pop	r30
     3aa:	9f 91       	pop	r25
     3ac:	8f 91       	pop	r24
     3ae:	3f 91       	pop	r19
     3b0:	2f 91       	pop	r18
     3b2:	0f 90       	pop	r0
     3b4:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     3b8:	0f 90       	pop	r0
     3ba:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     3be:	0f 90       	pop	r0
     3c0:	1f 90       	pop	r1
     3c2:	18 95       	reti

000003c4 <Led_init>:

#include "Led.h"

void Led_init(uint8_t initD) {
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	1f 92       	push	r1
     3ca:	cd b7       	in	r28, 0x3d	; 61
     3cc:	de b7       	in	r29, 0x3e	; 62
     3ce:	89 83       	std	Y+1, r24	; 0x01
    // Set PORTB to outputs
    DDRB = 0xFF;
     3d0:	84 e2       	ldi	r24, 0x24	; 36
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	2f ef       	ldi	r18, 0xFF	; 255
     3d6:	fc 01       	movw	r30, r24
     3d8:	20 83       	st	Z, r18
    PORTB = 0x00;
     3da:	85 e2       	ldi	r24, 0x25	; 37
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	fc 01       	movw	r30, r24
     3e0:	10 82       	st	Z, r1
    
    if (initD) {
     3e2:	89 81       	ldd	r24, Y+1	; 0x01
     3e4:	88 23       	and	r24, r24
     3e6:	91 f0       	breq	.+36     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
        // Set PORTD 0..4 to outputs
        DDRD |= ( (1 << 4) | (1 << 3) | (1 << 2) | (1 << 1) | (1 << 0));
     3e8:	8a e2       	ldi	r24, 0x2A	; 42
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	2a e2       	ldi	r18, 0x2A	; 42
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	f9 01       	movw	r30, r18
     3f2:	20 81       	ld	r18, Z
     3f4:	2f 61       	ori	r18, 0x1F	; 31
     3f6:	fc 01       	movw	r30, r24
     3f8:	20 83       	st	Z, r18
        PORTD &= ~( (1 << 4) | (1 << 3) | (1 << 2) | (1 << 1) | (1 << 0));
     3fa:	8b e2       	ldi	r24, 0x2B	; 43
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	2b e2       	ldi	r18, 0x2B	; 43
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	f9 01       	movw	r30, r18
     404:	20 81       	ld	r18, Z
     406:	20 7e       	andi	r18, 0xE0	; 224
     408:	fc 01       	movw	r30, r24
     40a:	20 83       	st	Z, r18
    }
}
     40c:	00 00       	nop
     40e:	0f 90       	pop	r0
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	08 95       	ret

00000416 <Taster_init>:
 ---------------------
 - DDR Reg has to be set to 0
 - PORT Reg has to be set to 1
 -> Pin is input with pull-up
 */
void Taster_init() {
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	cd b7       	in	r28, 0x3d	; 61
     41c:	de b7       	in	r29, 0x3e	; 62
    
    // set to inputs
    DDRC &= ~(1 << 2);
     41e:	87 e2       	ldi	r24, 0x27	; 39
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	27 e2       	ldi	r18, 0x27	; 39
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	f9 01       	movw	r30, r18
     428:	20 81       	ld	r18, Z
     42a:	2b 7f       	andi	r18, 0xFB	; 251
     42c:	fc 01       	movw	r30, r24
     42e:	20 83       	st	Z, r18
    DDRD &= ~( (1 << 7) | (1 << 6) | (1 << 5) );
     430:	8a e2       	ldi	r24, 0x2A	; 42
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	2a e2       	ldi	r18, 0x2A	; 42
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	f9 01       	movw	r30, r18
     43a:	20 81       	ld	r18, Z
     43c:	2f 71       	andi	r18, 0x1F	; 31
     43e:	fc 01       	movw	r30, r24
     440:	20 83       	st	Z, r18
    
    // enable pull-up
    PORTC |= (1 << 2);
     442:	88 e2       	ldi	r24, 0x28	; 40
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	28 e2       	ldi	r18, 0x28	; 40
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	f9 01       	movw	r30, r18
     44c:	20 81       	ld	r18, Z
     44e:	24 60       	ori	r18, 0x04	; 4
     450:	fc 01       	movw	r30, r24
     452:	20 83       	st	Z, r18
    PORTD |= (1 << 7) | (1 << 6) | (1 << 5);
     454:	8b e2       	ldi	r24, 0x2B	; 43
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	2b e2       	ldi	r18, 0x2B	; 43
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	f9 01       	movw	r30, r18
     45e:	20 81       	ld	r18, Z
     460:	20 6e       	ori	r18, 0xE0	; 224
     462:	fc 01       	movw	r30, r24
     464:	20 83       	st	Z, r18
}
     466:	00 00       	nop
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	08 95       	ret

0000046e <main>:
#include <avr/interrupt.h>
#include "adc/adc.h"

#define CLK_F_MHZ 16

int main(void) {
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	c7 57       	subi	r28, 0x77	; 119
     478:	d1 09       	sbc	r29, r1
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	de bf       	out	0x3e, r29	; 62
     480:	0f be       	out	0x3f, r0	; 63
     482:	cd bf       	out	0x3d, r28	; 61
	
    cli();
     484:	f8 94       	cli
    Led_init(0);	// Don't set LEDs at PORTD
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	9d df       	rcall	.-198    	; 0x3c4 <Led_init>
	Taster_init();
     48a:	c5 df       	rcall	.-118    	; 0x416 <Taster_init>
    Timer_init(CLK_F_MHZ); // Init timer with 16MHZ clock
     48c:	80 e1       	ldi	r24, 0x10	; 16
	uart_init_isr();
     48e:	63 d0       	rcall	.+198    	; 0x556 <Timer_init>
    adc_init();
     490:	78 d2       	rcall	.+1264   	; 0x982 <uart_init_isr>
     492:	1b de       	rcall	.-970    	; 0xca <adc_init>
	sei();
     494:	78 94       	sei
    
    uint16_t timeVarMain = Timer_getTick();
     496:	f6 d0       	rcall	.+492    	; 0x684 <Timer_getTick>
     498:	9a 83       	std	Y+2, r25	; 0x02
     49a:	89 83       	std	Y+1, r24	; 0x01
     49c:	22 e3       	ldi	r18, 0x32	; 50
    char data_s;
    char data[50] = {0};
     49e:	ce 01       	movw	r24, r28
     4a0:	05 96       	adiw	r24, 0x05	; 5
     4a2:	fc 01       	movw	r30, r24
     4a4:	32 2f       	mov	r19, r18
     4a6:	11 92       	st	Z+, r1
     4a8:	3a 95       	dec	r19
     4aa:	e9 f7       	brne	.-6      	; 0x4a6 <main+0x38>
    int i = 0;
     4ac:	1c 82       	std	Y+4, r1	; 0x04
     4ae:	1b 82       	std	Y+3, r1	; 0x03
	char str[65];
	
    while (1) {
        
        if((Timer_getTick() - timeVarMain) >= 2000){
     4b0:	e9 d0       	rcall	.+466    	; 0x684 <Timer_getTick>
     4b2:	9c 01       	movw	r18, r24
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	9a 81       	ldd	r25, Y+2	; 0x02
     4b8:	a9 01       	movw	r20, r18
     4ba:	48 1b       	sub	r20, r24
     4bc:	59 0b       	sbc	r21, r25
     4be:	ca 01       	movw	r24, r20
     4c0:	80 3d       	cpi	r24, 0xD0	; 208
     4c2:	97 40       	sbci	r25, 0x07	; 7
            timeVarMain = Timer_getTick();
     4c4:	a8 f3       	brcs	.-22     	; 0x4b0 <main+0x42>
     4c6:	de d0       	rcall	.+444    	; 0x684 <Timer_getTick>
     4c8:	9a 83       	std	Y+2, r25	; 0x02
     4ca:	89 83       	std	Y+1, r24	; 0x01
            
            sprintf(str, "Temperatur: %i\n", adc_get_LM35());
     4cc:	3b de       	rcall	.-906    	; 0x144 <adc_get_LM35>
     4ce:	dc 01       	movw	r26, r24
     4d0:	cb 01       	movw	r24, r22
     4d2:	2b 2f       	mov	r18, r27
     4d4:	2f 93       	push	r18
     4d6:	2a 2f       	mov	r18, r26
     4d8:	2f 93       	push	r18
     4da:	29 2f       	mov	r18, r25
     4dc:	2f 93       	push	r18
     4de:	8f 93       	push	r24
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	89 2f       	mov	r24, r25
     4e6:	8f 93       	push	r24
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	8f 93       	push	r24
     4ee:	ce 01       	movw	r24, r28
     4f0:	c7 96       	adiw	r24, 0x37	; 55
     4f2:	29 2f       	mov	r18, r25
     4f4:	2f 93       	push	r18
     4f6:	8f 93       	push	r24
     4f8:	38 d3       	rcall	.+1648   	; 0xb6a <sprintf>
     4fa:	8d b7       	in	r24, 0x3d	; 61
     4fc:	9e b7       	in	r25, 0x3e	; 62
     4fe:	08 96       	adiw	r24, 0x08	; 8
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	f8 94       	cli
     504:	de bf       	out	0x3e, r29	; 62
     506:	0f be       	out	0x3f, r0	; 63
            uart_send_isr(str);
     508:	cd bf       	out	0x3d, r28	; 61
     50a:	ce 01       	movw	r24, r28
     50c:	c7 96       	adiw	r24, 0x37	; 55
     50e:	54 d2       	rcall	.+1192   	; 0x9b8 <uart_send_isr>
            
            sprintf(str, "Poti: %i\n", adc_get_Poti());
     510:	71 de       	rcall	.-798    	; 0x1f4 <adc_get_Poti>
     512:	dc 01       	movw	r26, r24
     514:	cb 01       	movw	r24, r22
     516:	2b 2f       	mov	r18, r27
     518:	2f 93       	push	r18
     51a:	2a 2f       	mov	r18, r26
     51c:	2f 93       	push	r18
     51e:	29 2f       	mov	r18, r25
     520:	2f 93       	push	r18
     522:	8f 93       	push	r24
     524:	80 e1       	ldi	r24, 0x10	; 16
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	89 2f       	mov	r24, r25
     52a:	8f 93       	push	r24
     52c:	80 e1       	ldi	r24, 0x10	; 16
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	8f 93       	push	r24
     532:	ce 01       	movw	r24, r28
     534:	c7 96       	adiw	r24, 0x37	; 55
     536:	29 2f       	mov	r18, r25
     538:	2f 93       	push	r18
     53a:	8f 93       	push	r24
     53c:	16 d3       	rcall	.+1580   	; 0xb6a <sprintf>
     53e:	ed b7       	in	r30, 0x3d	; 61
     540:	fe b7       	in	r31, 0x3e	; 62
     542:	38 96       	adiw	r30, 0x08	; 8
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	f8 94       	cli
     548:	de bf       	out	0x3e, r29	; 62
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	cd bf       	out	0x3d, r28	; 61
            uart_send_isr(str);
     54e:	ce 01       	movw	r24, r28
     550:	c7 96       	adiw	r24, 0x37	; 55
     552:	32 d2       	rcall	.+1124   	; 0x9b8 <uart_send_isr>
     554:	ad cf       	rjmp	.-166    	; 0x4b0 <main+0x42>

00000556 <Timer_init>:
            }
        }*/
        
        //trafficLight(0);
        //playground();
    }
     556:	cf 93       	push	r28
    }
    
    TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
}
     558:	df 93       	push	r29
     55a:	1f 92       	push	r1
     55c:	cd b7       	in	r28, 0x3d	; 61
     55e:	de b7       	in	r29, 0x3e	; 62
     560:	89 83       	std	Y+1, r24	; 0x01
     562:	89 81       	ldd	r24, Y+1	; 0x01
     564:	88 2f       	mov	r24, r24
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	05 d0       	rcall	.+10     	; 0x574 <Timer_init_withoutStruct>
     56a:	00 00       	nop
     56c:	0f 90       	pop	r0
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	08 95       	ret

00000574 <Timer_init_withoutStruct>:

void Timer_init_withoutStruct(uint8_t clockFreqMhz) {
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	1f 92       	push	r1
     57a:	cd b7       	in	r28, 0x3d	; 61
     57c:	de b7       	in	r29, 0x3e	; 62
     57e:	89 83       	std	Y+1, r24	; 0x01
    // datasheet page 97
    // set mode to clear timer on compare (CTC)
    TCCR0B &= ~(1 << WGM02);
     580:	85 e4       	ldi	r24, 0x45	; 69
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	25 e4       	ldi	r18, 0x45	; 69
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	f9 01       	movw	r30, r18
     58a:	20 81       	ld	r18, Z
     58c:	27 7f       	andi	r18, 0xF7	; 247
     58e:	fc 01       	movw	r30, r24
     590:	20 83       	st	Z, r18
    TCCR0A |= (1 << WGM01);
     592:	84 e4       	ldi	r24, 0x44	; 68
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	24 e4       	ldi	r18, 0x44	; 68
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	f9 01       	movw	r30, r18
     59c:	20 81       	ld	r18, Z
     59e:	22 60       	ori	r18, 0x02	; 2
     5a0:	fc 01       	movw	r30, r24
     5a2:	20 83       	st	Z, r18
    TCCR0A &= ~(1 << WGM00);
     5a4:	84 e4       	ldi	r24, 0x44	; 68
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	24 e4       	ldi	r18, 0x44	; 68
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	f9 01       	movw	r30, r18
     5ae:	20 81       	ld	r18, Z
     5b0:	2e 7f       	andi	r18, 0xFE	; 254
     5b2:	fc 01       	movw	r30, r24
     5b4:	20 83       	st	Z, r18
    
    
    switch (clockFreqMhz) {
     5b6:	89 81       	ldd	r24, Y+1	; 0x01
     5b8:	88 2f       	mov	r24, r24
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	40 97       	sbiw	r24, 0x10	; 16
     5be:	09 f5       	brne	.+66     	; 0x602 <Timer_init_withoutStruct+0x8e>
        case 16:
            // extern osc (16 MHZ)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = 249;   // dez 249; range 0 - 249 -> 250 cycles till interrupt
     5c0:	87 e4       	ldi	r24, 0x47	; 71
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	29 ef       	ldi	r18, 0xF9	; 249
     5c6:	fc 01       	movw	r30, r24
     5c8:	20 83       	st	Z, r18
            
            // set prescaler to 1/64
            TCCR0B &= ~(1 << CS02);
     5ca:	85 e4       	ldi	r24, 0x45	; 69
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	25 e4       	ldi	r18, 0x45	; 69
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	f9 01       	movw	r30, r18
     5d4:	20 81       	ld	r18, Z
     5d6:	2b 7f       	andi	r18, 0xFB	; 251
     5d8:	fc 01       	movw	r30, r24
     5da:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
     5dc:	85 e4       	ldi	r24, 0x45	; 69
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	25 e4       	ldi	r18, 0x45	; 69
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	f9 01       	movw	r30, r18
     5e6:	20 81       	ld	r18, Z
     5e8:	22 60       	ori	r18, 0x02	; 2
     5ea:	fc 01       	movw	r30, r24
     5ec:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS00);
     5ee:	85 e4       	ldi	r24, 0x45	; 69
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	25 e4       	ldi	r18, 0x45	; 69
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	f9 01       	movw	r30, r18
     5f8:	20 81       	ld	r18, Z
     5fa:	21 60       	ori	r18, 0x01	; 1
     5fc:	fc 01       	movw	r30, r24
     5fe:	20 83       	st	Z, r18
            break;
     600:	21 c0       	rjmp	.+66     	; 0x644 <Timer_init_withoutStruct+0xd0>
            
        default:
            // inter osc (8 MHZ divided by 8 -> 1 MHZ clock)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = 0x7C;   // dez 124; range 0 - 124 -> 125 cycles till interrupt
     602:	87 e4       	ldi	r24, 0x47	; 71
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	2c e7       	ldi	r18, 0x7C	; 124
     608:	fc 01       	movw	r30, r24
     60a:	20 83       	st	Z, r18
            
            // set prescaler to 1/8
            TCCR0B &= ~(1 << CS02);
     60c:	85 e4       	ldi	r24, 0x45	; 69
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	25 e4       	ldi	r18, 0x45	; 69
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	f9 01       	movw	r30, r18
     616:	20 81       	ld	r18, Z
     618:	2b 7f       	andi	r18, 0xFB	; 251
     61a:	fc 01       	movw	r30, r24
     61c:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
     61e:	85 e4       	ldi	r24, 0x45	; 69
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	25 e4       	ldi	r18, 0x45	; 69
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	f9 01       	movw	r30, r18
     628:	20 81       	ld	r18, Z
     62a:	22 60       	ori	r18, 0x02	; 2
     62c:	fc 01       	movw	r30, r24
     62e:	20 83       	st	Z, r18
            TCCR0B &= ~(1 << CS00);
     630:	85 e4       	ldi	r24, 0x45	; 69
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	25 e4       	ldi	r18, 0x45	; 69
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	f9 01       	movw	r30, r18
     63a:	20 81       	ld	r18, Z
     63c:	2e 7f       	andi	r18, 0xFE	; 254
     63e:	fc 01       	movw	r30, r24
     640:	20 83       	st	Z, r18
            break;
     642:	00 00       	nop
    }
    
    TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
     644:	8e e6       	ldi	r24, 0x6E	; 110
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	2e e6       	ldi	r18, 0x6E	; 110
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	f9 01       	movw	r30, r18
     64e:	20 81       	ld	r18, Z
     650:	2b 7f       	andi	r18, 0xFB	; 251
     652:	fc 01       	movw	r30, r24
     654:	20 83       	st	Z, r18
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
     656:	8e e6       	ldi	r24, 0x6E	; 110
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	2e e6       	ldi	r18, 0x6E	; 110
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	f9 01       	movw	r30, r18
     660:	20 81       	ld	r18, Z
     662:	22 60       	ori	r18, 0x02	; 2
     664:	fc 01       	movw	r30, r24
     666:	20 83       	st	Z, r18
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
     668:	8e e6       	ldi	r24, 0x6E	; 110
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	2e e6       	ldi	r18, 0x6E	; 110
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	f9 01       	movw	r30, r18
     672:	20 81       	ld	r18, Z
     674:	2e 7f       	andi	r18, 0xFE	; 254
     676:	fc 01       	movw	r30, r24
     678:	20 83       	st	Z, r18
}
     67a:	00 00       	nop
     67c:	0f 90       	pop	r0
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	08 95       	ret

00000684 <Timer_getTick>:

uint16_t Timer_getTick() {
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	00 d0       	rcall	.+0      	; 0x68a <Timer_getTick+0x6>
     68a:	cd b7       	in	r28, 0x3d	; 61
     68c:	de b7       	in	r29, 0x3e	; 62
    // disable global interrupt
    cli();
     68e:	f8 94       	cli
    
    // store timer_count in a temp int that can't get changed by ISR
    uint16_t temp_timer_count = timer_count;
     690:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <timer_count>
     694:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <timer_count+0x1>
     698:	9a 83       	std	Y+2, r25	; 0x02
     69a:	89 83       	std	Y+1, r24	; 0x01
    
    // enable global interrupt
    sei();
     69c:	78 94       	sei

    return temp_timer_count;
     69e:	89 81       	ldd	r24, Y+1	; 0x01
     6a0:	9a 81       	ldd	r25, Y+2	; 0x02
}
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	08 95       	ret

000006ac <__vector_16>:
 ( not used atm)
 Timer compare A interrput:
 - increase timer_count
 - if timer_count is at max of uint16, set it to 0
 */
ISR(TIMER0_COMPA_vect){
     6ac:	1f 92       	push	r1
     6ae:	0f 92       	push	r0
     6b0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     6b4:	0f 92       	push	r0
     6b6:	11 24       	eor	r1, r1
     6b8:	8f 93       	push	r24
     6ba:	9f 93       	push	r25
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	cd b7       	in	r28, 0x3d	; 61
     6c2:	de b7       	in	r29, 0x3e	; 62
    timer_count++;
     6c4:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <timer_count>
     6c8:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <timer_count+0x1>
     6cc:	01 96       	adiw	r24, 0x01	; 1
     6ce:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <timer_count+0x1>
     6d2:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <timer_count>
}
     6d6:	00 00       	nop
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	9f 91       	pop	r25
     6de:	8f 91       	pop	r24
     6e0:	0f 90       	pop	r0
     6e2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     6e6:	0f 90       	pop	r0
     6e8:	1f 90       	pop	r1
     6ea:	18 95       	reti

000006ec <buff_put>:
        // Return byte
        return pByte;
    }else {
        return 0;
    }
}
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	00 d0       	rcall	.+0      	; 0x6f2 <buff_put+0x6>
     6f2:	1f 92       	push	r1
     6f4:	cd b7       	in	r28, 0x3d	; 61
     6f6:	de b7       	in	r29, 0x3e	; 62
     6f8:	89 83       	std	Y+1, r24	; 0x01
     6fa:	7b 83       	std	Y+3, r23	; 0x03
     6fc:	6a 83       	std	Y+2, r22	; 0x02
     6fe:	81 ec       	ldi	r24, 0xC1	; 193
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	21 ec       	ldi	r18, 0xC1	; 193
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	f9 01       	movw	r30, r18
     708:	20 81       	ld	r18, Z
     70a:	2f 7d       	andi	r18, 0xDF	; 223
     70c:	fc 01       	movw	r30, r24
     70e:	20 83       	st	Z, r18
     710:	81 ec       	ldi	r24, 0xC1	; 193
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	21 ec       	ldi	r18, 0xC1	; 193
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	f9 01       	movw	r30, r18
     71a:	20 81       	ld	r18, Z
     71c:	2f 77       	andi	r18, 0x7F	; 127
     71e:	fc 01       	movw	r30, r24
     720:	20 83       	st	Z, r18
     722:	8a 81       	ldd	r24, Y+2	; 0x02
     724:	9b 81       	ldd	r25, Y+3	; 0x03
     726:	8e 5f       	subi	r24, 0xFE	; 254
     728:	9d 4f       	sbci	r25, 0xFD	; 253
     72a:	fc 01       	movw	r30, r24
     72c:	80 81       	ld	r24, Z
     72e:	91 81       	ldd	r25, Z+1	; 0x01
     730:	9c 01       	movw	r18, r24
     732:	2f 5f       	subi	r18, 0xFF	; 255
     734:	3f 4f       	sbci	r19, 0xFF	; 255
     736:	8a 81       	ldd	r24, Y+2	; 0x02
     738:	9b 81       	ldd	r25, Y+3	; 0x03
     73a:	9e 5f       	subi	r25, 0xFE	; 254
     73c:	fc 01       	movw	r30, r24
     73e:	80 81       	ld	r24, Z
     740:	91 81       	ldd	r25, Z+1	; 0x01
     742:	28 17       	cp	r18, r24
     744:	39 07       	cpc	r19, r25
     746:	91 f0       	breq	.+36     	; 0x76c <buff_put+0x80>
     748:	8a 81       	ldd	r24, Y+2	; 0x02
     74a:	9b 81       	ldd	r25, Y+3	; 0x03
     74c:	9e 5f       	subi	r25, 0xFE	; 254
     74e:	fc 01       	movw	r30, r24
     750:	80 81       	ld	r24, Z
     752:	91 81       	ldd	r25, Z+1	; 0x01
     754:	89 2b       	or	r24, r25
     756:	f1 f4       	brne	.+60     	; 0x794 <buff_put+0xa8>
     758:	8a 81       	ldd	r24, Y+2	; 0x02
     75a:	9b 81       	ldd	r25, Y+3	; 0x03
     75c:	8e 5f       	subi	r24, 0xFE	; 254
     75e:	9d 4f       	sbci	r25, 0xFD	; 253
     760:	fc 01       	movw	r30, r24
     762:	80 81       	ld	r24, Z
     764:	91 81       	ldd	r25, Z+1	; 0x01
     766:	8f 3f       	cpi	r24, 0xFF	; 255
     768:	91 40       	sbci	r25, 0x01	; 1
     76a:	a1 f4       	brne	.+40     	; 0x794 <buff_put+0xa8>
     76c:	81 ec       	ldi	r24, 0xC1	; 193
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	21 ec       	ldi	r18, 0xC1	; 193
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	f9 01       	movw	r30, r18
     776:	20 81       	ld	r18, Z
     778:	20 62       	ori	r18, 0x20	; 32
     77a:	fc 01       	movw	r30, r24
     77c:	20 83       	st	Z, r18
     77e:	81 ec       	ldi	r24, 0xC1	; 193
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	21 ec       	ldi	r18, 0xC1	; 193
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	f9 01       	movw	r30, r18
     788:	20 81       	ld	r18, Z
     78a:	20 68       	ori	r18, 0x80	; 128
     78c:	fc 01       	movw	r30, r24
     78e:	20 83       	st	Z, r18
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	43 c0       	rjmp	.+134    	; 0x81a <buff_put+0x12e>
     794:	8a 81       	ldd	r24, Y+2	; 0x02
     796:	9b 81       	ldd	r25, Y+3	; 0x03
     798:	8e 5f       	subi	r24, 0xFE	; 254
     79a:	9d 4f       	sbci	r25, 0xFD	; 253
     79c:	fc 01       	movw	r30, r24
     79e:	80 81       	ld	r24, Z
     7a0:	91 81       	ldd	r25, Z+1	; 0x01
     7a2:	2a 81       	ldd	r18, Y+2	; 0x02
     7a4:	3b 81       	ldd	r19, Y+3	; 0x03
     7a6:	82 0f       	add	r24, r18
     7a8:	93 1f       	adc	r25, r19
     7aa:	29 81       	ldd	r18, Y+1	; 0x01
     7ac:	fc 01       	movw	r30, r24
     7ae:	20 83       	st	Z, r18
     7b0:	8a 81       	ldd	r24, Y+2	; 0x02
     7b2:	9b 81       	ldd	r25, Y+3	; 0x03
     7b4:	8e 5f       	subi	r24, 0xFE	; 254
     7b6:	9d 4f       	sbci	r25, 0xFD	; 253
     7b8:	fc 01       	movw	r30, r24
     7ba:	80 81       	ld	r24, Z
     7bc:	91 81       	ldd	r25, Z+1	; 0x01
     7be:	9c 01       	movw	r18, r24
     7c0:	2f 5f       	subi	r18, 0xFF	; 255
     7c2:	3f 4f       	sbci	r19, 0xFF	; 255
     7c4:	8a 81       	ldd	r24, Y+2	; 0x02
     7c6:	9b 81       	ldd	r25, Y+3	; 0x03
     7c8:	8e 5f       	subi	r24, 0xFE	; 254
     7ca:	9d 4f       	sbci	r25, 0xFD	; 253
     7cc:	fc 01       	movw	r30, r24
     7ce:	31 83       	std	Z+1, r19	; 0x01
     7d0:	20 83       	st	Z, r18
     7d2:	8a 81       	ldd	r24, Y+2	; 0x02
     7d4:	9b 81       	ldd	r25, Y+3	; 0x03
     7d6:	8e 5f       	subi	r24, 0xFE	; 254
     7d8:	9d 4f       	sbci	r25, 0xFD	; 253
     7da:	fc 01       	movw	r30, r24
     7dc:	80 81       	ld	r24, Z
     7de:	91 81       	ldd	r25, Z+1	; 0x01
     7e0:	81 15       	cp	r24, r1
     7e2:	92 40       	sbci	r25, 0x02	; 2
     7e4:	38 f0       	brcs	.+14     	; 0x7f4 <buff_put+0x108>
     7e6:	8a 81       	ldd	r24, Y+2	; 0x02
     7e8:	9b 81       	ldd	r25, Y+3	; 0x03
     7ea:	8e 5f       	subi	r24, 0xFE	; 254
     7ec:	9d 4f       	sbci	r25, 0xFD	; 253
     7ee:	fc 01       	movw	r30, r24
     7f0:	11 82       	std	Z+1, r1	; 0x01
     7f2:	10 82       	st	Z, r1
     7f4:	81 ec       	ldi	r24, 0xC1	; 193
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	21 ec       	ldi	r18, 0xC1	; 193
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	f9 01       	movw	r30, r18
     7fe:	20 81       	ld	r18, Z
     800:	20 62       	ori	r18, 0x20	; 32
     802:	fc 01       	movw	r30, r24
     804:	20 83       	st	Z, r18
     806:	81 ec       	ldi	r24, 0xC1	; 193
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	21 ec       	ldi	r18, 0xC1	; 193
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	f9 01       	movw	r30, r18
     810:	20 81       	ld	r18, Z
     812:	20 68       	ori	r18, 0x80	; 128
     814:	fc 01       	movw	r30, r24
     816:	20 83       	st	Z, r18
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	08 95       	ret

00000826 <buff_get>:
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	00 d0       	rcall	.+0      	; 0x82c <buff_get+0x6>
     82c:	00 d0       	rcall	.+0      	; 0x82e <buff_get+0x8>
     82e:	cd b7       	in	r28, 0x3d	; 61
     830:	de b7       	in	r29, 0x3e	; 62
     832:	9a 83       	std	Y+2, r25	; 0x02
     834:	89 83       	std	Y+1, r24	; 0x01
     836:	7c 83       	std	Y+4, r23	; 0x04
     838:	6b 83       	std	Y+3, r22	; 0x03
     83a:	81 ec       	ldi	r24, 0xC1	; 193
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	21 ec       	ldi	r18, 0xC1	; 193
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	f9 01       	movw	r30, r18
     844:	20 81       	ld	r18, Z
     846:	2f 7d       	andi	r18, 0xDF	; 223
     848:	fc 01       	movw	r30, r24
     84a:	20 83       	st	Z, r18
     84c:	81 ec       	ldi	r24, 0xC1	; 193
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	21 ec       	ldi	r18, 0xC1	; 193
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	f9 01       	movw	r30, r18
     856:	20 81       	ld	r18, Z
     858:	2f 77       	andi	r18, 0x7F	; 127
     85a:	fc 01       	movw	r30, r24
     85c:	20 83       	st	Z, r18
     85e:	8b 81       	ldd	r24, Y+3	; 0x03
     860:	9c 81       	ldd	r25, Y+4	; 0x04
     862:	9e 5f       	subi	r25, 0xFE	; 254
     864:	fc 01       	movw	r30, r24
     866:	20 81       	ld	r18, Z
     868:	31 81       	ldd	r19, Z+1	; 0x01
     86a:	8b 81       	ldd	r24, Y+3	; 0x03
     86c:	9c 81       	ldd	r25, Y+4	; 0x04
     86e:	8e 5f       	subi	r24, 0xFE	; 254
     870:	9d 4f       	sbci	r25, 0xFD	; 253
     872:	fc 01       	movw	r30, r24
     874:	80 81       	ld	r24, Z
     876:	91 81       	ldd	r25, Z+1	; 0x01
     878:	28 17       	cp	r18, r24
     87a:	39 07       	cpc	r19, r25
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <buff_get+0x80>
     87e:	81 ec       	ldi	r24, 0xC1	; 193
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	21 ec       	ldi	r18, 0xC1	; 193
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	f9 01       	movw	r30, r18
     888:	20 81       	ld	r18, Z
     88a:	20 62       	ori	r18, 0x20	; 32
     88c:	fc 01       	movw	r30, r24
     88e:	20 83       	st	Z, r18
     890:	81 ec       	ldi	r24, 0xC1	; 193
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	21 ec       	ldi	r18, 0xC1	; 193
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	f9 01       	movw	r30, r18
     89a:	20 81       	ld	r18, Z
     89c:	20 68       	ori	r18, 0x80	; 128
     89e:	fc 01       	movw	r30, r24
     8a0:	20 83       	st	Z, r18
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	41 c0       	rjmp	.+130    	; 0x928 <buff_get+0x102>
     8a6:	8b 81       	ldd	r24, Y+3	; 0x03
     8a8:	9c 81       	ldd	r25, Y+4	; 0x04
     8aa:	9e 5f       	subi	r25, 0xFE	; 254
     8ac:	fc 01       	movw	r30, r24
     8ae:	80 81       	ld	r24, Z
     8b0:	91 81       	ldd	r25, Z+1	; 0x01
     8b2:	2b 81       	ldd	r18, Y+3	; 0x03
     8b4:	3c 81       	ldd	r19, Y+4	; 0x04
     8b6:	82 0f       	add	r24, r18
     8b8:	93 1f       	adc	r25, r19
     8ba:	fc 01       	movw	r30, r24
     8bc:	20 81       	ld	r18, Z
     8be:	89 81       	ldd	r24, Y+1	; 0x01
     8c0:	9a 81       	ldd	r25, Y+2	; 0x02
     8c2:	fc 01       	movw	r30, r24
     8c4:	20 83       	st	Z, r18
     8c6:	8b 81       	ldd	r24, Y+3	; 0x03
     8c8:	9c 81       	ldd	r25, Y+4	; 0x04
     8ca:	9e 5f       	subi	r25, 0xFE	; 254
     8cc:	fc 01       	movw	r30, r24
     8ce:	80 81       	ld	r24, Z
     8d0:	91 81       	ldd	r25, Z+1	; 0x01
     8d2:	9c 01       	movw	r18, r24
     8d4:	2f 5f       	subi	r18, 0xFF	; 255
     8d6:	3f 4f       	sbci	r19, 0xFF	; 255
     8d8:	8b 81       	ldd	r24, Y+3	; 0x03
     8da:	9c 81       	ldd	r25, Y+4	; 0x04
     8dc:	9e 5f       	subi	r25, 0xFE	; 254
     8de:	fc 01       	movw	r30, r24
     8e0:	31 83       	std	Z+1, r19	; 0x01
     8e2:	20 83       	st	Z, r18
     8e4:	8b 81       	ldd	r24, Y+3	; 0x03
     8e6:	9c 81       	ldd	r25, Y+4	; 0x04
     8e8:	9e 5f       	subi	r25, 0xFE	; 254
     8ea:	fc 01       	movw	r30, r24
     8ec:	80 81       	ld	r24, Z
     8ee:	91 81       	ldd	r25, Z+1	; 0x01
     8f0:	81 15       	cp	r24, r1
     8f2:	92 40       	sbci	r25, 0x02	; 2
     8f4:	30 f0       	brcs	.+12     	; 0x902 <buff_get+0xdc>
     8f6:	8b 81       	ldd	r24, Y+3	; 0x03
     8f8:	9c 81       	ldd	r25, Y+4	; 0x04
     8fa:	9e 5f       	subi	r25, 0xFE	; 254
     8fc:	fc 01       	movw	r30, r24
     8fe:	11 82       	std	Z+1, r1	; 0x01
     900:	10 82       	st	Z, r1
     902:	81 ec       	ldi	r24, 0xC1	; 193
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	21 ec       	ldi	r18, 0xC1	; 193
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	f9 01       	movw	r30, r18
     90c:	20 81       	ld	r18, Z
     90e:	20 62       	ori	r18, 0x20	; 32
     910:	fc 01       	movw	r30, r24
     912:	20 83       	st	Z, r18
     914:	81 ec       	ldi	r24, 0xC1	; 193
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	21 ec       	ldi	r18, 0xC1	; 193
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	f9 01       	movw	r30, r18
     91e:	20 81       	ld	r18, Z
     920:	20 68       	ori	r18, 0x80	; 128
     922:	fc 01       	movw	r30, r24
     924:	20 83       	st	Z, r18
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	0f 90       	pop	r0
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	08 95       	ret

00000936 <uart_init>:
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	00 d0       	rcall	.+0      	; 0x93c <uart_init+0x6>
     93c:	cd b7       	in	r28, 0x3d	; 61
     93e:	de b7       	in	r29, 0x3e	; 62
     940:	87 e6       	ldi	r24, 0x67	; 103
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	9a 83       	std	Y+2, r25	; 0x02
     946:	89 83       	std	Y+1, r24	; 0x01
     948:	85 ec       	ldi	r24, 0xC5	; 197
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	29 81       	ldd	r18, Y+1	; 0x01
     94e:	3a 81       	ldd	r19, Y+2	; 0x02
     950:	23 2f       	mov	r18, r19
     952:	33 27       	eor	r19, r19
     954:	fc 01       	movw	r30, r24
     956:	20 83       	st	Z, r18
     958:	84 ec       	ldi	r24, 0xC4	; 196
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	29 81       	ldd	r18, Y+1	; 0x01
     95e:	fc 01       	movw	r30, r24
     960:	20 83       	st	Z, r18
     962:	81 ec       	ldi	r24, 0xC1	; 193
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	28 e1       	ldi	r18, 0x18	; 24
     968:	fc 01       	movw	r30, r24
     96a:	20 83       	st	Z, r18
     96c:	82 ec       	ldi	r24, 0xC2	; 194
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	26 e0       	ldi	r18, 0x06	; 6
     972:	fc 01       	movw	r30, r24
     974:	20 83       	st	Z, r18
     976:	00 00       	nop
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	08 95       	ret

00000982 <uart_init_isr>:
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62
     98a:	d5 df       	rcall	.-86     	; 0x936 <uart_init>
     98c:	81 ec       	ldi	r24, 0xC1	; 193
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	21 ec       	ldi	r18, 0xC1	; 193
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	f9 01       	movw	r30, r18
     996:	20 81       	ld	r18, Z
     998:	20 62       	ori	r18, 0x20	; 32
     99a:	fc 01       	movw	r30, r24
     99c:	20 83       	st	Z, r18
     99e:	81 ec       	ldi	r24, 0xC1	; 193
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	21 ec       	ldi	r18, 0xC1	; 193
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	f9 01       	movw	r30, r18
     9a8:	20 81       	ld	r18, Z
     9aa:	20 68       	ori	r18, 0x80	; 128
     9ac:	fc 01       	movw	r30, r24
     9ae:	20 83       	st	Z, r18
     9b0:	00 00       	nop
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	08 95       	ret

000009b8 <uart_send_isr>:
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	00 d0       	rcall	.+0      	; 0x9be <uart_send_isr+0x6>
     9be:	00 d0       	rcall	.+0      	; 0x9c0 <uart_send_isr+0x8>
     9c0:	00 d0       	rcall	.+0      	; 0x9c2 <uart_send_isr+0xa>
     9c2:	cd b7       	in	r28, 0x3d	; 61
     9c4:	de b7       	in	r29, 0x3e	; 62
     9c6:	9e 83       	std	Y+6, r25	; 0x06
     9c8:	8d 83       	std	Y+5, r24	; 0x05
     9ca:	8d 81       	ldd	r24, Y+5	; 0x05
     9cc:	9e 81       	ldd	r25, Y+6	; 0x06
     9ce:	c4 d0       	rcall	.+392    	; 0xb58 <strlen>
     9d0:	9c 83       	std	Y+4, r25	; 0x04
     9d2:	8b 83       	std	Y+3, r24	; 0x03
     9d4:	1a 82       	std	Y+2, r1	; 0x02
     9d6:	19 82       	std	Y+1, r1	; 0x01
     9d8:	23 c0       	rjmp	.+70     	; 0xa20 <uart_send_isr+0x68>
     9da:	89 81       	ldd	r24, Y+1	; 0x01
     9dc:	9a 81       	ldd	r25, Y+2	; 0x02
     9de:	2d 81       	ldd	r18, Y+5	; 0x05
     9e0:	3e 81       	ldd	r19, Y+6	; 0x06
     9e2:	82 0f       	add	r24, r18
     9e4:	93 1f       	adc	r25, r19
     9e6:	fc 01       	movw	r30, r24
     9e8:	80 81       	ld	r24, Z
     9ea:	6f e3       	ldi	r22, 0x3F	; 63
     9ec:	71 e0       	ldi	r23, 0x01	; 1
     9ee:	7e de       	rcall	.-772    	; 0x6ec <buff_put>
     9f0:	81 30       	cpi	r24, 0x01	; 1
     9f2:	89 f4       	brne	.+34     	; 0xa16 <uart_send_isr+0x5e>
     9f4:	80 ec       	ldi	r24, 0xC0	; 192
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	20 ec       	ldi	r18, 0xC0	; 192
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	f9 01       	movw	r30, r18
     9fe:	20 81       	ld	r18, Z
     a00:	20 62       	ori	r18, 0x20	; 32
     a02:	fc 01       	movw	r30, r24
     a04:	20 83       	st	Z, r18
     a06:	89 81       	ldd	r24, Y+1	; 0x01
     a08:	9a 81       	ldd	r25, Y+2	; 0x02
     a0a:	9c 01       	movw	r18, r24
     a0c:	2f 5f       	subi	r18, 0xFF	; 255
     a0e:	3f 4f       	sbci	r19, 0xFF	; 255
     a10:	3a 83       	std	Y+2, r19	; 0x02
     a12:	29 83       	std	Y+1, r18	; 0x01
     a14:	17 c0       	rjmp	.+46     	; 0xa44 <uart_send_isr+0x8c>
     a16:	89 81       	ldd	r24, Y+1	; 0x01
     a18:	9a 81       	ldd	r25, Y+2	; 0x02
     a1a:	01 96       	adiw	r24, 0x01	; 1
     a1c:	9a 83       	std	Y+2, r25	; 0x02
     a1e:	89 83       	std	Y+1, r24	; 0x01
     a20:	29 81       	ldd	r18, Y+1	; 0x01
     a22:	3a 81       	ldd	r19, Y+2	; 0x02
     a24:	8b 81       	ldd	r24, Y+3	; 0x03
     a26:	9c 81       	ldd	r25, Y+4	; 0x04
     a28:	28 17       	cp	r18, r24
     a2a:	39 07       	cpc	r19, r25
     a2c:	b4 f2       	brlt	.-84     	; 0x9da <uart_send_isr+0x22>
     a2e:	80 ec       	ldi	r24, 0xC0	; 192
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	20 ec       	ldi	r18, 0xC0	; 192
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	f9 01       	movw	r30, r18
     a38:	20 81       	ld	r18, Z
     a3a:	20 62       	ori	r18, 0x20	; 32
     a3c:	fc 01       	movw	r30, r24
     a3e:	20 83       	st	Z, r18
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	26 96       	adiw	r28, 0x06	; 6
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	f8 94       	cli
     a4a:	de bf       	out	0x3e, r29	; 62
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	cd bf       	out	0x3d, r28	; 61
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	08 95       	ret

00000a56 <__vector_21>:

/**
 ISR for USART Data Register Empty flag
 */
ISR(USART0_UDRE_vect){
     a56:	1f 92       	push	r1
     a58:	0f 92       	push	r0
     a5a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a5e:	0f 92       	push	r0
     a60:	11 24       	eor	r1, r1
     a62:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     a66:	0f 92       	push	r0
     a68:	2f 93       	push	r18
     a6a:	3f 93       	push	r19
     a6c:	4f 93       	push	r20
     a6e:	5f 93       	push	r21
     a70:	6f 93       	push	r22
     a72:	7f 93       	push	r23
     a74:	8f 93       	push	r24
     a76:	9f 93       	push	r25
     a78:	af 93       	push	r26
     a7a:	bf 93       	push	r27
     a7c:	ef 93       	push	r30
     a7e:	ff 93       	push	r31
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
     a84:	1f 92       	push	r1
     a86:	cd b7       	in	r28, 0x3d	; 61
     a88:	de b7       	in	r29, 0x3e	; 62
    unsigned char pByte;
    // Pull one byte from buffer and store it in pByte
    if (buff_get(&pByte, &bufferSend) == 0) {
     a8a:	6f e3       	ldi	r22, 0x3F	; 63
     a8c:	71 e0       	ldi	r23, 0x01	; 1
     a8e:	ce 01       	movw	r24, r28
     a90:	01 96       	adiw	r24, 0x01	; 1
     a92:	c9 de       	rcall	.-622    	; 0x826 <buff_get>
     a94:	88 23       	and	r24, r24
     a96:	31 f4       	brne	.+12     	; 0xaa4 <__vector_21+0x4e>
        // Send byte
        UDR0 = pByte;
     a98:	86 ec       	ldi	r24, 0xC6	; 198
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	29 81       	ldd	r18, Y+1	; 0x01
     a9e:	fc 01       	movw	r30, r24
     aa0:	20 83       	st	Z, r18
    }else {
        // Buffer empty: disable interrupt
        UCSR0A &= ~(1 << UDRE0);
    }
}
     aa2:	09 c0       	rjmp	.+18     	; 0xab6 <__vector_21+0x60>
    if (buff_get(&pByte, &bufferSend) == 0) {
        // Send byte
        UDR0 = pByte;
    }else {
        // Buffer empty: disable interrupt
        UCSR0A &= ~(1 << UDRE0);
     aa4:	80 ec       	ldi	r24, 0xC0	; 192
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	20 ec       	ldi	r18, 0xC0	; 192
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	f9 01       	movw	r30, r18
     aae:	20 81       	ld	r18, Z
     ab0:	2f 7d       	andi	r18, 0xDF	; 223
     ab2:	fc 01       	movw	r30, r24
     ab4:	20 83       	st	Z, r18
    }
}
     ab6:	00 00       	nop
     ab8:	0f 90       	pop	r0
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	ff 91       	pop	r31
     ac0:	ef 91       	pop	r30
     ac2:	bf 91       	pop	r27
     ac4:	af 91       	pop	r26
     ac6:	9f 91       	pop	r25
     ac8:	8f 91       	pop	r24
     aca:	7f 91       	pop	r23
     acc:	6f 91       	pop	r22
     ace:	5f 91       	pop	r21
     ad0:	4f 91       	pop	r20
     ad2:	3f 91       	pop	r19
     ad4:	2f 91       	pop	r18
     ad6:	0f 90       	pop	r0
     ad8:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     adc:	0f 90       	pop	r0
     ade:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     ae2:	0f 90       	pop	r0
     ae4:	1f 90       	pop	r1
     ae6:	18 95       	reti

00000ae8 <__vector_20>:

ISR(USART0_RX_vect){
     ae8:	1f 92       	push	r1
     aea:	0f 92       	push	r0
     aec:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     af0:	0f 92       	push	r0
     af2:	11 24       	eor	r1, r1
     af4:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     af8:	0f 92       	push	r0
     afa:	2f 93       	push	r18
     afc:	3f 93       	push	r19
     afe:	4f 93       	push	r20
     b00:	5f 93       	push	r21
     b02:	6f 93       	push	r22
     b04:	7f 93       	push	r23
     b06:	8f 93       	push	r24
     b08:	9f 93       	push	r25
     b0a:	af 93       	push	r26
     b0c:	bf 93       	push	r27
     b0e:	ef 93       	push	r30
     b10:	ff 93       	push	r31
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	cd b7       	in	r28, 0x3d	; 61
     b18:	de b7       	in	r29, 0x3e	; 62
    // Put received byte to bufferRecv (will read but don't save the value if buffer overflows)
    buff_put(UDR0, &bufferRecv);
     b1a:	86 ec       	ldi	r24, 0xC6	; 198
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	fc 01       	movw	r30, r24
     b20:	80 81       	ld	r24, Z
     b22:	63 e4       	ldi	r22, 0x43	; 67
     b24:	73 e0       	ldi	r23, 0x03	; 3
     b26:	e2 dd       	rcall	.-1084   	; 0x6ec <buff_put>
}
     b28:	00 00       	nop
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	ff 91       	pop	r31
     b30:	ef 91       	pop	r30
     b32:	bf 91       	pop	r27
     b34:	af 91       	pop	r26
     b36:	9f 91       	pop	r25
     b38:	8f 91       	pop	r24
     b3a:	7f 91       	pop	r23
     b3c:	6f 91       	pop	r22
     b3e:	5f 91       	pop	r21
     b40:	4f 91       	pop	r20
     b42:	3f 91       	pop	r19
     b44:	2f 91       	pop	r18
     b46:	0f 90       	pop	r0
     b48:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     b4c:	0f 90       	pop	r0
     b4e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b52:	0f 90       	pop	r0
     b54:	1f 90       	pop	r1
     b56:	18 95       	reti

00000b58 <strlen>:
     b58:	fc 01       	movw	r30, r24
     b5a:	01 90       	ld	r0, Z+
     b5c:	00 20       	and	r0, r0
     b5e:	e9 f7       	brne	.-6      	; 0xb5a <strlen+0x2>
     b60:	80 95       	com	r24
     b62:	90 95       	com	r25
     b64:	8e 0f       	add	r24, r30
     b66:	9f 1f       	adc	r25, r31
     b68:	08 95       	ret

00000b6a <sprintf>:
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	2e 97       	sbiw	r28, 0x0e	; 14
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	f8 94       	cli
     b7c:	de bf       	out	0x3e, r29	; 62
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	cd bf       	out	0x3d, r28	; 61
     b82:	0d 89       	ldd	r16, Y+21	; 0x15
     b84:	1e 89       	ldd	r17, Y+22	; 0x16
     b86:	86 e0       	ldi	r24, 0x06	; 6
     b88:	8c 83       	std	Y+4, r24	; 0x04
     b8a:	1a 83       	std	Y+2, r17	; 0x02
     b8c:	09 83       	std	Y+1, r16	; 0x01
     b8e:	8f ef       	ldi	r24, 0xFF	; 255
     b90:	9f e7       	ldi	r25, 0x7F	; 127
     b92:	9e 83       	std	Y+6, r25	; 0x06
     b94:	8d 83       	std	Y+5, r24	; 0x05
     b96:	ae 01       	movw	r20, r28
     b98:	47 5e       	subi	r20, 0xE7	; 231
     b9a:	5f 4f       	sbci	r21, 0xFF	; 255
     b9c:	6f 89       	ldd	r22, Y+23	; 0x17
     b9e:	78 8d       	ldd	r23, Y+24	; 0x18
     ba0:	ce 01       	movw	r24, r28
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	10 d0       	rcall	.+32     	; 0xbc6 <vfprintf>
     ba6:	ef 81       	ldd	r30, Y+7	; 0x07
     ba8:	f8 85       	ldd	r31, Y+8	; 0x08
     baa:	e0 0f       	add	r30, r16
     bac:	f1 1f       	adc	r31, r17
     bae:	10 82       	st	Z, r1
     bb0:	2e 96       	adiw	r28, 0x0e	; 14
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	de bf       	out	0x3e, r29	; 62
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	cd bf       	out	0x3d, r28	; 61
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	08 95       	ret

00000bc6 <vfprintf>:
     bc6:	2f 92       	push	r2
     bc8:	3f 92       	push	r3
     bca:	4f 92       	push	r4
     bcc:	5f 92       	push	r5
     bce:	6f 92       	push	r6
     bd0:	7f 92       	push	r7
     bd2:	8f 92       	push	r8
     bd4:	9f 92       	push	r9
     bd6:	af 92       	push	r10
     bd8:	bf 92       	push	r11
     bda:	cf 92       	push	r12
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	cd b7       	in	r28, 0x3d	; 61
     bec:	de b7       	in	r29, 0x3e	; 62
     bee:	2b 97       	sbiw	r28, 0x0b	; 11
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	f8 94       	cli
     bf4:	de bf       	out	0x3e, r29	; 62
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	cd bf       	out	0x3d, r28	; 61
     bfa:	6c 01       	movw	r12, r24
     bfc:	7b 01       	movw	r14, r22
     bfe:	8a 01       	movw	r16, r20
     c00:	fc 01       	movw	r30, r24
     c02:	17 82       	std	Z+7, r1	; 0x07
     c04:	16 82       	std	Z+6, r1	; 0x06
     c06:	83 81       	ldd	r24, Z+3	; 0x03
     c08:	81 ff       	sbrs	r24, 1
     c0a:	bf c1       	rjmp	.+894    	; 0xf8a <vfprintf+0x3c4>
     c0c:	ce 01       	movw	r24, r28
     c0e:	01 96       	adiw	r24, 0x01	; 1
     c10:	3c 01       	movw	r6, r24
     c12:	f6 01       	movw	r30, r12
     c14:	93 81       	ldd	r25, Z+3	; 0x03
     c16:	f7 01       	movw	r30, r14
     c18:	93 fd       	sbrc	r25, 3
     c1a:	85 91       	lpm	r24, Z+
     c1c:	93 ff       	sbrs	r25, 3
     c1e:	81 91       	ld	r24, Z+
     c20:	7f 01       	movw	r14, r30
     c22:	88 23       	and	r24, r24
     c24:	09 f4       	brne	.+2      	; 0xc28 <vfprintf+0x62>
     c26:	ad c1       	rjmp	.+858    	; 0xf82 <vfprintf+0x3bc>
     c28:	85 32       	cpi	r24, 0x25	; 37
     c2a:	39 f4       	brne	.+14     	; 0xc3a <vfprintf+0x74>
     c2c:	93 fd       	sbrc	r25, 3
     c2e:	85 91       	lpm	r24, Z+
     c30:	93 ff       	sbrs	r25, 3
     c32:	81 91       	ld	r24, Z+
     c34:	7f 01       	movw	r14, r30
     c36:	85 32       	cpi	r24, 0x25	; 37
     c38:	21 f4       	brne	.+8      	; 0xc42 <vfprintf+0x7c>
     c3a:	b6 01       	movw	r22, r12
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	d6 d1       	rcall	.+940    	; 0xfec <fputc>
     c40:	e8 cf       	rjmp	.-48     	; 0xc12 <vfprintf+0x4c>
     c42:	91 2c       	mov	r9, r1
     c44:	21 2c       	mov	r2, r1
     c46:	31 2c       	mov	r3, r1
     c48:	ff e1       	ldi	r31, 0x1F	; 31
     c4a:	f3 15       	cp	r31, r3
     c4c:	d8 f0       	brcs	.+54     	; 0xc84 <vfprintf+0xbe>
     c4e:	8b 32       	cpi	r24, 0x2B	; 43
     c50:	79 f0       	breq	.+30     	; 0xc70 <vfprintf+0xaa>
     c52:	38 f4       	brcc	.+14     	; 0xc62 <vfprintf+0x9c>
     c54:	80 32       	cpi	r24, 0x20	; 32
     c56:	79 f0       	breq	.+30     	; 0xc76 <vfprintf+0xb0>
     c58:	83 32       	cpi	r24, 0x23	; 35
     c5a:	a1 f4       	brne	.+40     	; 0xc84 <vfprintf+0xbe>
     c5c:	23 2d       	mov	r18, r3
     c5e:	20 61       	ori	r18, 0x10	; 16
     c60:	1d c0       	rjmp	.+58     	; 0xc9c <vfprintf+0xd6>
     c62:	8d 32       	cpi	r24, 0x2D	; 45
     c64:	61 f0       	breq	.+24     	; 0xc7e <vfprintf+0xb8>
     c66:	80 33       	cpi	r24, 0x30	; 48
     c68:	69 f4       	brne	.+26     	; 0xc84 <vfprintf+0xbe>
     c6a:	23 2d       	mov	r18, r3
     c6c:	21 60       	ori	r18, 0x01	; 1
     c6e:	16 c0       	rjmp	.+44     	; 0xc9c <vfprintf+0xd6>
     c70:	83 2d       	mov	r24, r3
     c72:	82 60       	ori	r24, 0x02	; 2
     c74:	38 2e       	mov	r3, r24
     c76:	e3 2d       	mov	r30, r3
     c78:	e4 60       	ori	r30, 0x04	; 4
     c7a:	3e 2e       	mov	r3, r30
     c7c:	2a c0       	rjmp	.+84     	; 0xcd2 <vfprintf+0x10c>
     c7e:	f3 2d       	mov	r31, r3
     c80:	f8 60       	ori	r31, 0x08	; 8
     c82:	1d c0       	rjmp	.+58     	; 0xcbe <vfprintf+0xf8>
     c84:	37 fc       	sbrc	r3, 7
     c86:	2d c0       	rjmp	.+90     	; 0xce2 <vfprintf+0x11c>
     c88:	20 ed       	ldi	r18, 0xD0	; 208
     c8a:	28 0f       	add	r18, r24
     c8c:	2a 30       	cpi	r18, 0x0A	; 10
     c8e:	40 f0       	brcs	.+16     	; 0xca0 <vfprintf+0xda>
     c90:	8e 32       	cpi	r24, 0x2E	; 46
     c92:	b9 f4       	brne	.+46     	; 0xcc2 <vfprintf+0xfc>
     c94:	36 fc       	sbrc	r3, 6
     c96:	75 c1       	rjmp	.+746    	; 0xf82 <vfprintf+0x3bc>
     c98:	23 2d       	mov	r18, r3
     c9a:	20 64       	ori	r18, 0x40	; 64
     c9c:	32 2e       	mov	r3, r18
     c9e:	19 c0       	rjmp	.+50     	; 0xcd2 <vfprintf+0x10c>
     ca0:	36 fe       	sbrs	r3, 6
     ca2:	06 c0       	rjmp	.+12     	; 0xcb0 <vfprintf+0xea>
     ca4:	8a e0       	ldi	r24, 0x0A	; 10
     ca6:	98 9e       	mul	r9, r24
     ca8:	20 0d       	add	r18, r0
     caa:	11 24       	eor	r1, r1
     cac:	92 2e       	mov	r9, r18
     cae:	11 c0       	rjmp	.+34     	; 0xcd2 <vfprintf+0x10c>
     cb0:	ea e0       	ldi	r30, 0x0A	; 10
     cb2:	2e 9e       	mul	r2, r30
     cb4:	20 0d       	add	r18, r0
     cb6:	11 24       	eor	r1, r1
     cb8:	22 2e       	mov	r2, r18
     cba:	f3 2d       	mov	r31, r3
     cbc:	f0 62       	ori	r31, 0x20	; 32
     cbe:	3f 2e       	mov	r3, r31
     cc0:	08 c0       	rjmp	.+16     	; 0xcd2 <vfprintf+0x10c>
     cc2:	8c 36       	cpi	r24, 0x6C	; 108
     cc4:	21 f4       	brne	.+8      	; 0xcce <vfprintf+0x108>
     cc6:	83 2d       	mov	r24, r3
     cc8:	80 68       	ori	r24, 0x80	; 128
     cca:	38 2e       	mov	r3, r24
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <vfprintf+0x10c>
     cce:	88 36       	cpi	r24, 0x68	; 104
     cd0:	41 f4       	brne	.+16     	; 0xce2 <vfprintf+0x11c>
     cd2:	f7 01       	movw	r30, r14
     cd4:	93 fd       	sbrc	r25, 3
     cd6:	85 91       	lpm	r24, Z+
     cd8:	93 ff       	sbrs	r25, 3
     cda:	81 91       	ld	r24, Z+
     cdc:	7f 01       	movw	r14, r30
     cde:	81 11       	cpse	r24, r1
     ce0:	b3 cf       	rjmp	.-154    	; 0xc48 <vfprintf+0x82>
     ce2:	98 2f       	mov	r25, r24
     ce4:	9f 7d       	andi	r25, 0xDF	; 223
     ce6:	95 54       	subi	r25, 0x45	; 69
     ce8:	93 30       	cpi	r25, 0x03	; 3
     cea:	28 f4       	brcc	.+10     	; 0xcf6 <vfprintf+0x130>
     cec:	0c 5f       	subi	r16, 0xFC	; 252
     cee:	1f 4f       	sbci	r17, 0xFF	; 255
     cf0:	9f e3       	ldi	r25, 0x3F	; 63
     cf2:	99 83       	std	Y+1, r25	; 0x01
     cf4:	0d c0       	rjmp	.+26     	; 0xd10 <vfprintf+0x14a>
     cf6:	83 36       	cpi	r24, 0x63	; 99
     cf8:	31 f0       	breq	.+12     	; 0xd06 <vfprintf+0x140>
     cfa:	83 37       	cpi	r24, 0x73	; 115
     cfc:	71 f0       	breq	.+28     	; 0xd1a <vfprintf+0x154>
     cfe:	83 35       	cpi	r24, 0x53	; 83
     d00:	09 f0       	breq	.+2      	; 0xd04 <vfprintf+0x13e>
     d02:	55 c0       	rjmp	.+170    	; 0xdae <vfprintf+0x1e8>
     d04:	20 c0       	rjmp	.+64     	; 0xd46 <vfprintf+0x180>
     d06:	f8 01       	movw	r30, r16
     d08:	80 81       	ld	r24, Z
     d0a:	89 83       	std	Y+1, r24	; 0x01
     d0c:	0e 5f       	subi	r16, 0xFE	; 254
     d0e:	1f 4f       	sbci	r17, 0xFF	; 255
     d10:	88 24       	eor	r8, r8
     d12:	83 94       	inc	r8
     d14:	91 2c       	mov	r9, r1
     d16:	53 01       	movw	r10, r6
     d18:	12 c0       	rjmp	.+36     	; 0xd3e <vfprintf+0x178>
     d1a:	28 01       	movw	r4, r16
     d1c:	f2 e0       	ldi	r31, 0x02	; 2
     d1e:	4f 0e       	add	r4, r31
     d20:	51 1c       	adc	r5, r1
     d22:	f8 01       	movw	r30, r16
     d24:	a0 80       	ld	r10, Z
     d26:	b1 80       	ldd	r11, Z+1	; 0x01
     d28:	36 fe       	sbrs	r3, 6
     d2a:	03 c0       	rjmp	.+6      	; 0xd32 <vfprintf+0x16c>
     d2c:	69 2d       	mov	r22, r9
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <vfprintf+0x170>
     d32:	6f ef       	ldi	r22, 0xFF	; 255
     d34:	7f ef       	ldi	r23, 0xFF	; 255
     d36:	c5 01       	movw	r24, r10
     d38:	4e d1       	rcall	.+668    	; 0xfd6 <strnlen>
     d3a:	4c 01       	movw	r8, r24
     d3c:	82 01       	movw	r16, r4
     d3e:	f3 2d       	mov	r31, r3
     d40:	ff 77       	andi	r31, 0x7F	; 127
     d42:	3f 2e       	mov	r3, r31
     d44:	15 c0       	rjmp	.+42     	; 0xd70 <vfprintf+0x1aa>
     d46:	28 01       	movw	r4, r16
     d48:	22 e0       	ldi	r18, 0x02	; 2
     d4a:	42 0e       	add	r4, r18
     d4c:	51 1c       	adc	r5, r1
     d4e:	f8 01       	movw	r30, r16
     d50:	a0 80       	ld	r10, Z
     d52:	b1 80       	ldd	r11, Z+1	; 0x01
     d54:	36 fe       	sbrs	r3, 6
     d56:	03 c0       	rjmp	.+6      	; 0xd5e <vfprintf+0x198>
     d58:	69 2d       	mov	r22, r9
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <vfprintf+0x19c>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	c5 01       	movw	r24, r10
     d64:	2d d1       	rcall	.+602    	; 0xfc0 <strnlen_P>
     d66:	4c 01       	movw	r8, r24
     d68:	f3 2d       	mov	r31, r3
     d6a:	f0 68       	ori	r31, 0x80	; 128
     d6c:	3f 2e       	mov	r3, r31
     d6e:	82 01       	movw	r16, r4
     d70:	33 fc       	sbrc	r3, 3
     d72:	19 c0       	rjmp	.+50     	; 0xda6 <vfprintf+0x1e0>
     d74:	82 2d       	mov	r24, r2
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	88 16       	cp	r8, r24
     d7a:	99 06       	cpc	r9, r25
     d7c:	a0 f4       	brcc	.+40     	; 0xda6 <vfprintf+0x1e0>
     d7e:	b6 01       	movw	r22, r12
     d80:	80 e2       	ldi	r24, 0x20	; 32
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	33 d1       	rcall	.+614    	; 0xfec <fputc>
     d86:	2a 94       	dec	r2
     d88:	f5 cf       	rjmp	.-22     	; 0xd74 <vfprintf+0x1ae>
     d8a:	f5 01       	movw	r30, r10
     d8c:	37 fc       	sbrc	r3, 7
     d8e:	85 91       	lpm	r24, Z+
     d90:	37 fe       	sbrs	r3, 7
     d92:	81 91       	ld	r24, Z+
     d94:	5f 01       	movw	r10, r30
     d96:	b6 01       	movw	r22, r12
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	28 d1       	rcall	.+592    	; 0xfec <fputc>
     d9c:	21 10       	cpse	r2, r1
     d9e:	2a 94       	dec	r2
     da0:	21 e0       	ldi	r18, 0x01	; 1
     da2:	82 1a       	sub	r8, r18
     da4:	91 08       	sbc	r9, r1
     da6:	81 14       	cp	r8, r1
     da8:	91 04       	cpc	r9, r1
     daa:	79 f7       	brne	.-34     	; 0xd8a <vfprintf+0x1c4>
     dac:	e1 c0       	rjmp	.+450    	; 0xf70 <vfprintf+0x3aa>
     dae:	84 36       	cpi	r24, 0x64	; 100
     db0:	11 f0       	breq	.+4      	; 0xdb6 <vfprintf+0x1f0>
     db2:	89 36       	cpi	r24, 0x69	; 105
     db4:	39 f5       	brne	.+78     	; 0xe04 <vfprintf+0x23e>
     db6:	f8 01       	movw	r30, r16
     db8:	37 fe       	sbrs	r3, 7
     dba:	07 c0       	rjmp	.+14     	; 0xdca <vfprintf+0x204>
     dbc:	60 81       	ld	r22, Z
     dbe:	71 81       	ldd	r23, Z+1	; 0x01
     dc0:	82 81       	ldd	r24, Z+2	; 0x02
     dc2:	93 81       	ldd	r25, Z+3	; 0x03
     dc4:	0c 5f       	subi	r16, 0xFC	; 252
     dc6:	1f 4f       	sbci	r17, 0xFF	; 255
     dc8:	08 c0       	rjmp	.+16     	; 0xdda <vfprintf+0x214>
     dca:	60 81       	ld	r22, Z
     dcc:	71 81       	ldd	r23, Z+1	; 0x01
     dce:	07 2e       	mov	r0, r23
     dd0:	00 0c       	add	r0, r0
     dd2:	88 0b       	sbc	r24, r24
     dd4:	99 0b       	sbc	r25, r25
     dd6:	0e 5f       	subi	r16, 0xFE	; 254
     dd8:	1f 4f       	sbci	r17, 0xFF	; 255
     dda:	f3 2d       	mov	r31, r3
     ddc:	ff 76       	andi	r31, 0x6F	; 111
     dde:	3f 2e       	mov	r3, r31
     de0:	97 ff       	sbrs	r25, 7
     de2:	09 c0       	rjmp	.+18     	; 0xdf6 <vfprintf+0x230>
     de4:	90 95       	com	r25
     de6:	80 95       	com	r24
     de8:	70 95       	com	r23
     dea:	61 95       	neg	r22
     dec:	7f 4f       	sbci	r23, 0xFF	; 255
     dee:	8f 4f       	sbci	r24, 0xFF	; 255
     df0:	9f 4f       	sbci	r25, 0xFF	; 255
     df2:	f0 68       	ori	r31, 0x80	; 128
     df4:	3f 2e       	mov	r3, r31
     df6:	2a e0       	ldi	r18, 0x0A	; 10
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	a3 01       	movw	r20, r6
     dfc:	33 d1       	rcall	.+614    	; 0x1064 <__ultoa_invert>
     dfe:	88 2e       	mov	r8, r24
     e00:	86 18       	sub	r8, r6
     e02:	44 c0       	rjmp	.+136    	; 0xe8c <vfprintf+0x2c6>
     e04:	85 37       	cpi	r24, 0x75	; 117
     e06:	31 f4       	brne	.+12     	; 0xe14 <vfprintf+0x24e>
     e08:	23 2d       	mov	r18, r3
     e0a:	2f 7e       	andi	r18, 0xEF	; 239
     e0c:	b2 2e       	mov	r11, r18
     e0e:	2a e0       	ldi	r18, 0x0A	; 10
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	25 c0       	rjmp	.+74     	; 0xe5e <vfprintf+0x298>
     e14:	93 2d       	mov	r25, r3
     e16:	99 7f       	andi	r25, 0xF9	; 249
     e18:	b9 2e       	mov	r11, r25
     e1a:	8f 36       	cpi	r24, 0x6F	; 111
     e1c:	c1 f0       	breq	.+48     	; 0xe4e <vfprintf+0x288>
     e1e:	18 f4       	brcc	.+6      	; 0xe26 <vfprintf+0x260>
     e20:	88 35       	cpi	r24, 0x58	; 88
     e22:	79 f0       	breq	.+30     	; 0xe42 <vfprintf+0x27c>
     e24:	ae c0       	rjmp	.+348    	; 0xf82 <vfprintf+0x3bc>
     e26:	80 37       	cpi	r24, 0x70	; 112
     e28:	19 f0       	breq	.+6      	; 0xe30 <vfprintf+0x26a>
     e2a:	88 37       	cpi	r24, 0x78	; 120
     e2c:	21 f0       	breq	.+8      	; 0xe36 <vfprintf+0x270>
     e2e:	a9 c0       	rjmp	.+338    	; 0xf82 <vfprintf+0x3bc>
     e30:	e9 2f       	mov	r30, r25
     e32:	e0 61       	ori	r30, 0x10	; 16
     e34:	be 2e       	mov	r11, r30
     e36:	b4 fe       	sbrs	r11, 4
     e38:	0d c0       	rjmp	.+26     	; 0xe54 <vfprintf+0x28e>
     e3a:	fb 2d       	mov	r31, r11
     e3c:	f4 60       	ori	r31, 0x04	; 4
     e3e:	bf 2e       	mov	r11, r31
     e40:	09 c0       	rjmp	.+18     	; 0xe54 <vfprintf+0x28e>
     e42:	34 fe       	sbrs	r3, 4
     e44:	0a c0       	rjmp	.+20     	; 0xe5a <vfprintf+0x294>
     e46:	29 2f       	mov	r18, r25
     e48:	26 60       	ori	r18, 0x06	; 6
     e4a:	b2 2e       	mov	r11, r18
     e4c:	06 c0       	rjmp	.+12     	; 0xe5a <vfprintf+0x294>
     e4e:	28 e0       	ldi	r18, 0x08	; 8
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	05 c0       	rjmp	.+10     	; 0xe5e <vfprintf+0x298>
     e54:	20 e1       	ldi	r18, 0x10	; 16
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <vfprintf+0x298>
     e5a:	20 e1       	ldi	r18, 0x10	; 16
     e5c:	32 e0       	ldi	r19, 0x02	; 2
     e5e:	f8 01       	movw	r30, r16
     e60:	b7 fe       	sbrs	r11, 7
     e62:	07 c0       	rjmp	.+14     	; 0xe72 <vfprintf+0x2ac>
     e64:	60 81       	ld	r22, Z
     e66:	71 81       	ldd	r23, Z+1	; 0x01
     e68:	82 81       	ldd	r24, Z+2	; 0x02
     e6a:	93 81       	ldd	r25, Z+3	; 0x03
     e6c:	0c 5f       	subi	r16, 0xFC	; 252
     e6e:	1f 4f       	sbci	r17, 0xFF	; 255
     e70:	06 c0       	rjmp	.+12     	; 0xe7e <vfprintf+0x2b8>
     e72:	60 81       	ld	r22, Z
     e74:	71 81       	ldd	r23, Z+1	; 0x01
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 5f       	subi	r16, 0xFE	; 254
     e7c:	1f 4f       	sbci	r17, 0xFF	; 255
     e7e:	a3 01       	movw	r20, r6
     e80:	f1 d0       	rcall	.+482    	; 0x1064 <__ultoa_invert>
     e82:	88 2e       	mov	r8, r24
     e84:	86 18       	sub	r8, r6
     e86:	fb 2d       	mov	r31, r11
     e88:	ff 77       	andi	r31, 0x7F	; 127
     e8a:	3f 2e       	mov	r3, r31
     e8c:	36 fe       	sbrs	r3, 6
     e8e:	0d c0       	rjmp	.+26     	; 0xeaa <vfprintf+0x2e4>
     e90:	23 2d       	mov	r18, r3
     e92:	2e 7f       	andi	r18, 0xFE	; 254
     e94:	a2 2e       	mov	r10, r18
     e96:	89 14       	cp	r8, r9
     e98:	58 f4       	brcc	.+22     	; 0xeb0 <vfprintf+0x2ea>
     e9a:	34 fe       	sbrs	r3, 4
     e9c:	0b c0       	rjmp	.+22     	; 0xeb4 <vfprintf+0x2ee>
     e9e:	32 fc       	sbrc	r3, 2
     ea0:	09 c0       	rjmp	.+18     	; 0xeb4 <vfprintf+0x2ee>
     ea2:	83 2d       	mov	r24, r3
     ea4:	8e 7e       	andi	r24, 0xEE	; 238
     ea6:	a8 2e       	mov	r10, r24
     ea8:	05 c0       	rjmp	.+10     	; 0xeb4 <vfprintf+0x2ee>
     eaa:	b8 2c       	mov	r11, r8
     eac:	a3 2c       	mov	r10, r3
     eae:	03 c0       	rjmp	.+6      	; 0xeb6 <vfprintf+0x2f0>
     eb0:	b8 2c       	mov	r11, r8
     eb2:	01 c0       	rjmp	.+2      	; 0xeb6 <vfprintf+0x2f0>
     eb4:	b9 2c       	mov	r11, r9
     eb6:	a4 fe       	sbrs	r10, 4
     eb8:	0f c0       	rjmp	.+30     	; 0xed8 <vfprintf+0x312>
     eba:	fe 01       	movw	r30, r28
     ebc:	e8 0d       	add	r30, r8
     ebe:	f1 1d       	adc	r31, r1
     ec0:	80 81       	ld	r24, Z
     ec2:	80 33       	cpi	r24, 0x30	; 48
     ec4:	21 f4       	brne	.+8      	; 0xece <vfprintf+0x308>
     ec6:	9a 2d       	mov	r25, r10
     ec8:	99 7e       	andi	r25, 0xE9	; 233
     eca:	a9 2e       	mov	r10, r25
     ecc:	09 c0       	rjmp	.+18     	; 0xee0 <vfprintf+0x31a>
     ece:	a2 fe       	sbrs	r10, 2
     ed0:	06 c0       	rjmp	.+12     	; 0xede <vfprintf+0x318>
     ed2:	b3 94       	inc	r11
     ed4:	b3 94       	inc	r11
     ed6:	04 c0       	rjmp	.+8      	; 0xee0 <vfprintf+0x31a>
     ed8:	8a 2d       	mov	r24, r10
     eda:	86 78       	andi	r24, 0x86	; 134
     edc:	09 f0       	breq	.+2      	; 0xee0 <vfprintf+0x31a>
     ede:	b3 94       	inc	r11
     ee0:	a3 fc       	sbrc	r10, 3
     ee2:	10 c0       	rjmp	.+32     	; 0xf04 <vfprintf+0x33e>
     ee4:	a0 fe       	sbrs	r10, 0
     ee6:	06 c0       	rjmp	.+12     	; 0xef4 <vfprintf+0x32e>
     ee8:	b2 14       	cp	r11, r2
     eea:	80 f4       	brcc	.+32     	; 0xf0c <vfprintf+0x346>
     eec:	28 0c       	add	r2, r8
     eee:	92 2c       	mov	r9, r2
     ef0:	9b 18       	sub	r9, r11
     ef2:	0d c0       	rjmp	.+26     	; 0xf0e <vfprintf+0x348>
     ef4:	b2 14       	cp	r11, r2
     ef6:	58 f4       	brcc	.+22     	; 0xf0e <vfprintf+0x348>
     ef8:	b6 01       	movw	r22, r12
     efa:	80 e2       	ldi	r24, 0x20	; 32
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	76 d0       	rcall	.+236    	; 0xfec <fputc>
     f00:	b3 94       	inc	r11
     f02:	f8 cf       	rjmp	.-16     	; 0xef4 <vfprintf+0x32e>
     f04:	b2 14       	cp	r11, r2
     f06:	18 f4       	brcc	.+6      	; 0xf0e <vfprintf+0x348>
     f08:	2b 18       	sub	r2, r11
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <vfprintf+0x34a>
     f0c:	98 2c       	mov	r9, r8
     f0e:	21 2c       	mov	r2, r1
     f10:	a4 fe       	sbrs	r10, 4
     f12:	0f c0       	rjmp	.+30     	; 0xf32 <vfprintf+0x36c>
     f14:	b6 01       	movw	r22, r12
     f16:	80 e3       	ldi	r24, 0x30	; 48
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	68 d0       	rcall	.+208    	; 0xfec <fputc>
     f1c:	a2 fe       	sbrs	r10, 2
     f1e:	16 c0       	rjmp	.+44     	; 0xf4c <vfprintf+0x386>
     f20:	a1 fc       	sbrc	r10, 1
     f22:	03 c0       	rjmp	.+6      	; 0xf2a <vfprintf+0x364>
     f24:	88 e7       	ldi	r24, 0x78	; 120
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <vfprintf+0x368>
     f2a:	88 e5       	ldi	r24, 0x58	; 88
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	b6 01       	movw	r22, r12
     f30:	0c c0       	rjmp	.+24     	; 0xf4a <vfprintf+0x384>
     f32:	8a 2d       	mov	r24, r10
     f34:	86 78       	andi	r24, 0x86	; 134
     f36:	51 f0       	breq	.+20     	; 0xf4c <vfprintf+0x386>
     f38:	a1 fe       	sbrs	r10, 1
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <vfprintf+0x37a>
     f3c:	8b e2       	ldi	r24, 0x2B	; 43
     f3e:	01 c0       	rjmp	.+2      	; 0xf42 <vfprintf+0x37c>
     f40:	80 e2       	ldi	r24, 0x20	; 32
     f42:	a7 fc       	sbrc	r10, 7
     f44:	8d e2       	ldi	r24, 0x2D	; 45
     f46:	b6 01       	movw	r22, r12
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	50 d0       	rcall	.+160    	; 0xfec <fputc>
     f4c:	89 14       	cp	r8, r9
     f4e:	30 f4       	brcc	.+12     	; 0xf5c <vfprintf+0x396>
     f50:	b6 01       	movw	r22, r12
     f52:	80 e3       	ldi	r24, 0x30	; 48
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	4a d0       	rcall	.+148    	; 0xfec <fputc>
     f58:	9a 94       	dec	r9
     f5a:	f8 cf       	rjmp	.-16     	; 0xf4c <vfprintf+0x386>
     f5c:	8a 94       	dec	r8
     f5e:	f3 01       	movw	r30, r6
     f60:	e8 0d       	add	r30, r8
     f62:	f1 1d       	adc	r31, r1
     f64:	80 81       	ld	r24, Z
     f66:	b6 01       	movw	r22, r12
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	40 d0       	rcall	.+128    	; 0xfec <fputc>
     f6c:	81 10       	cpse	r8, r1
     f6e:	f6 cf       	rjmp	.-20     	; 0xf5c <vfprintf+0x396>
     f70:	22 20       	and	r2, r2
     f72:	09 f4       	brne	.+2      	; 0xf76 <vfprintf+0x3b0>
     f74:	4e ce       	rjmp	.-868    	; 0xc12 <vfprintf+0x4c>
     f76:	b6 01       	movw	r22, r12
     f78:	80 e2       	ldi	r24, 0x20	; 32
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	37 d0       	rcall	.+110    	; 0xfec <fputc>
     f7e:	2a 94       	dec	r2
     f80:	f7 cf       	rjmp	.-18     	; 0xf70 <vfprintf+0x3aa>
     f82:	f6 01       	movw	r30, r12
     f84:	86 81       	ldd	r24, Z+6	; 0x06
     f86:	97 81       	ldd	r25, Z+7	; 0x07
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <vfprintf+0x3c8>
     f8a:	8f ef       	ldi	r24, 0xFF	; 255
     f8c:	9f ef       	ldi	r25, 0xFF	; 255
     f8e:	2b 96       	adiw	r28, 0x0b	; 11
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	1f 91       	pop	r17
     fa0:	0f 91       	pop	r16
     fa2:	ff 90       	pop	r15
     fa4:	ef 90       	pop	r14
     fa6:	df 90       	pop	r13
     fa8:	cf 90       	pop	r12
     faa:	bf 90       	pop	r11
     fac:	af 90       	pop	r10
     fae:	9f 90       	pop	r9
     fb0:	8f 90       	pop	r8
     fb2:	7f 90       	pop	r7
     fb4:	6f 90       	pop	r6
     fb6:	5f 90       	pop	r5
     fb8:	4f 90       	pop	r4
     fba:	3f 90       	pop	r3
     fbc:	2f 90       	pop	r2
     fbe:	08 95       	ret

00000fc0 <strnlen_P>:
     fc0:	fc 01       	movw	r30, r24
     fc2:	05 90       	lpm	r0, Z+
     fc4:	61 50       	subi	r22, 0x01	; 1
     fc6:	70 40       	sbci	r23, 0x00	; 0
     fc8:	01 10       	cpse	r0, r1
     fca:	d8 f7       	brcc	.-10     	; 0xfc2 <strnlen_P+0x2>
     fcc:	80 95       	com	r24
     fce:	90 95       	com	r25
     fd0:	8e 0f       	add	r24, r30
     fd2:	9f 1f       	adc	r25, r31
     fd4:	08 95       	ret

00000fd6 <strnlen>:
     fd6:	fc 01       	movw	r30, r24
     fd8:	61 50       	subi	r22, 0x01	; 1
     fda:	70 40       	sbci	r23, 0x00	; 0
     fdc:	01 90       	ld	r0, Z+
     fde:	01 10       	cpse	r0, r1
     fe0:	d8 f7       	brcc	.-10     	; 0xfd8 <strnlen+0x2>
     fe2:	80 95       	com	r24
     fe4:	90 95       	com	r25
     fe6:	8e 0f       	add	r24, r30
     fe8:	9f 1f       	adc	r25, r31
     fea:	08 95       	ret

00000fec <fputc>:
     fec:	0f 93       	push	r16
     fee:	1f 93       	push	r17
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	fb 01       	movw	r30, r22
     ff6:	23 81       	ldd	r18, Z+3	; 0x03
     ff8:	21 fd       	sbrc	r18, 1
     ffa:	03 c0       	rjmp	.+6      	; 0x1002 <fputc+0x16>
     ffc:	8f ef       	ldi	r24, 0xFF	; 255
     ffe:	9f ef       	ldi	r25, 0xFF	; 255
    1000:	2c c0       	rjmp	.+88     	; 0x105a <fputc+0x6e>
    1002:	22 ff       	sbrs	r18, 2
    1004:	16 c0       	rjmp	.+44     	; 0x1032 <fputc+0x46>
    1006:	46 81       	ldd	r20, Z+6	; 0x06
    1008:	57 81       	ldd	r21, Z+7	; 0x07
    100a:	24 81       	ldd	r18, Z+4	; 0x04
    100c:	35 81       	ldd	r19, Z+5	; 0x05
    100e:	42 17       	cp	r20, r18
    1010:	53 07       	cpc	r21, r19
    1012:	44 f4       	brge	.+16     	; 0x1024 <fputc+0x38>
    1014:	a0 81       	ld	r26, Z
    1016:	b1 81       	ldd	r27, Z+1	; 0x01
    1018:	9d 01       	movw	r18, r26
    101a:	2f 5f       	subi	r18, 0xFF	; 255
    101c:	3f 4f       	sbci	r19, 0xFF	; 255
    101e:	31 83       	std	Z+1, r19	; 0x01
    1020:	20 83       	st	Z, r18
    1022:	8c 93       	st	X, r24
    1024:	26 81       	ldd	r18, Z+6	; 0x06
    1026:	37 81       	ldd	r19, Z+7	; 0x07
    1028:	2f 5f       	subi	r18, 0xFF	; 255
    102a:	3f 4f       	sbci	r19, 0xFF	; 255
    102c:	37 83       	std	Z+7, r19	; 0x07
    102e:	26 83       	std	Z+6, r18	; 0x06
    1030:	14 c0       	rjmp	.+40     	; 0x105a <fputc+0x6e>
    1032:	8b 01       	movw	r16, r22
    1034:	ec 01       	movw	r28, r24
    1036:	fb 01       	movw	r30, r22
    1038:	00 84       	ldd	r0, Z+8	; 0x08
    103a:	f1 85       	ldd	r31, Z+9	; 0x09
    103c:	e0 2d       	mov	r30, r0
    103e:	09 95       	icall
    1040:	89 2b       	or	r24, r25
    1042:	e1 f6       	brne	.-72     	; 0xffc <fputc+0x10>
    1044:	d8 01       	movw	r26, r16
    1046:	16 96       	adiw	r26, 0x06	; 6
    1048:	8d 91       	ld	r24, X+
    104a:	9c 91       	ld	r25, X
    104c:	17 97       	sbiw	r26, 0x07	; 7
    104e:	01 96       	adiw	r24, 0x01	; 1
    1050:	17 96       	adiw	r26, 0x07	; 7
    1052:	9c 93       	st	X, r25
    1054:	8e 93       	st	-X, r24
    1056:	16 97       	sbiw	r26, 0x06	; 6
    1058:	ce 01       	movw	r24, r28
    105a:	df 91       	pop	r29
    105c:	cf 91       	pop	r28
    105e:	1f 91       	pop	r17
    1060:	0f 91       	pop	r16
    1062:	08 95       	ret

00001064 <__ultoa_invert>:
    1064:	fa 01       	movw	r30, r20
    1066:	aa 27       	eor	r26, r26
    1068:	28 30       	cpi	r18, 0x08	; 8
    106a:	51 f1       	breq	.+84     	; 0x10c0 <__ultoa_invert+0x5c>
    106c:	20 31       	cpi	r18, 0x10	; 16
    106e:	81 f1       	breq	.+96     	; 0x10d0 <__ultoa_invert+0x6c>
    1070:	e8 94       	clt
    1072:	6f 93       	push	r22
    1074:	6e 7f       	andi	r22, 0xFE	; 254
    1076:	6e 5f       	subi	r22, 0xFE	; 254
    1078:	7f 4f       	sbci	r23, 0xFF	; 255
    107a:	8f 4f       	sbci	r24, 0xFF	; 255
    107c:	9f 4f       	sbci	r25, 0xFF	; 255
    107e:	af 4f       	sbci	r26, 0xFF	; 255
    1080:	b1 e0       	ldi	r27, 0x01	; 1
    1082:	3e d0       	rcall	.+124    	; 0x1100 <__ultoa_invert+0x9c>
    1084:	b4 e0       	ldi	r27, 0x04	; 4
    1086:	3c d0       	rcall	.+120    	; 0x1100 <__ultoa_invert+0x9c>
    1088:	67 0f       	add	r22, r23
    108a:	78 1f       	adc	r23, r24
    108c:	89 1f       	adc	r24, r25
    108e:	9a 1f       	adc	r25, r26
    1090:	a1 1d       	adc	r26, r1
    1092:	68 0f       	add	r22, r24
    1094:	79 1f       	adc	r23, r25
    1096:	8a 1f       	adc	r24, r26
    1098:	91 1d       	adc	r25, r1
    109a:	a1 1d       	adc	r26, r1
    109c:	6a 0f       	add	r22, r26
    109e:	71 1d       	adc	r23, r1
    10a0:	81 1d       	adc	r24, r1
    10a2:	91 1d       	adc	r25, r1
    10a4:	a1 1d       	adc	r26, r1
    10a6:	20 d0       	rcall	.+64     	; 0x10e8 <__ultoa_invert+0x84>
    10a8:	09 f4       	brne	.+2      	; 0x10ac <__ultoa_invert+0x48>
    10aa:	68 94       	set
    10ac:	3f 91       	pop	r19
    10ae:	2a e0       	ldi	r18, 0x0A	; 10
    10b0:	26 9f       	mul	r18, r22
    10b2:	11 24       	eor	r1, r1
    10b4:	30 19       	sub	r19, r0
    10b6:	30 5d       	subi	r19, 0xD0	; 208
    10b8:	31 93       	st	Z+, r19
    10ba:	de f6       	brtc	.-74     	; 0x1072 <__ultoa_invert+0xe>
    10bc:	cf 01       	movw	r24, r30
    10be:	08 95       	ret
    10c0:	46 2f       	mov	r20, r22
    10c2:	47 70       	andi	r20, 0x07	; 7
    10c4:	40 5d       	subi	r20, 0xD0	; 208
    10c6:	41 93       	st	Z+, r20
    10c8:	b3 e0       	ldi	r27, 0x03	; 3
    10ca:	0f d0       	rcall	.+30     	; 0x10ea <__ultoa_invert+0x86>
    10cc:	c9 f7       	brne	.-14     	; 0x10c0 <__ultoa_invert+0x5c>
    10ce:	f6 cf       	rjmp	.-20     	; 0x10bc <__ultoa_invert+0x58>
    10d0:	46 2f       	mov	r20, r22
    10d2:	4f 70       	andi	r20, 0x0F	; 15
    10d4:	40 5d       	subi	r20, 0xD0	; 208
    10d6:	4a 33       	cpi	r20, 0x3A	; 58
    10d8:	18 f0       	brcs	.+6      	; 0x10e0 <__ultoa_invert+0x7c>
    10da:	49 5d       	subi	r20, 0xD9	; 217
    10dc:	31 fd       	sbrc	r19, 1
    10de:	40 52       	subi	r20, 0x20	; 32
    10e0:	41 93       	st	Z+, r20
    10e2:	02 d0       	rcall	.+4      	; 0x10e8 <__ultoa_invert+0x84>
    10e4:	a9 f7       	brne	.-22     	; 0x10d0 <__ultoa_invert+0x6c>
    10e6:	ea cf       	rjmp	.-44     	; 0x10bc <__ultoa_invert+0x58>
    10e8:	b4 e0       	ldi	r27, 0x04	; 4
    10ea:	a6 95       	lsr	r26
    10ec:	97 95       	ror	r25
    10ee:	87 95       	ror	r24
    10f0:	77 95       	ror	r23
    10f2:	67 95       	ror	r22
    10f4:	ba 95       	dec	r27
    10f6:	c9 f7       	brne	.-14     	; 0x10ea <__ultoa_invert+0x86>
    10f8:	00 97       	sbiw	r24, 0x00	; 0
    10fa:	61 05       	cpc	r22, r1
    10fc:	71 05       	cpc	r23, r1
    10fe:	08 95       	ret
    1100:	9b 01       	movw	r18, r22
    1102:	ac 01       	movw	r20, r24
    1104:	0a 2e       	mov	r0, r26
    1106:	06 94       	lsr	r0
    1108:	57 95       	ror	r21
    110a:	47 95       	ror	r20
    110c:	37 95       	ror	r19
    110e:	27 95       	ror	r18
    1110:	ba 95       	dec	r27
    1112:	c9 f7       	brne	.-14     	; 0x1106 <__ultoa_invert+0xa2>
    1114:	62 0f       	add	r22, r18
    1116:	73 1f       	adc	r23, r19
    1118:	84 1f       	adc	r24, r20
    111a:	95 1f       	adc	r25, r21
    111c:	a0 1d       	adc	r26, r0
    111e:	08 95       	ret

00001120 <_exit>:
    1120:	f8 94       	cli

00001122 <__stop_program>:
    1122:	ff cf       	rjmp	.-2      	; 0x1122 <__stop_program>
