
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000b7e  00000c12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000042e  00800102  00800102  00000c14  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c14  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000160a  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d8f  00000000  00000000  000024de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010be  00000000  00000000  0000326d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000838  00000000  00000000  0000432c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000801  00000000  00000000  00004b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000107a  00000000  00000000  00005365  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  000063df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	96 c3       	rjmp	.+1836   	; 0x752 <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c3       	rjmp	.+1744   	; 0x712 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5c c5       	rjmp	.+2744   	; 0xb0a <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	19 c5       	rjmp	.+2610   	; 0xa8c <__vector_22>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4d c0       	rjmp	.+154    	; 0xfc <__vector_24>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e7       	ldi	r30, 0x7E	; 126
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	25 e0       	ldi	r18, 0x05	; 5
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 33       	cpi	r26, 0x30	; 48
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	b5 d1       	rcall	.+874    	; 0x42e <main>
  c4:	5a c5       	rjmp	.+2740   	; 0xb7a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <adc_init>:
    // Make average
    avg = avg / 8;
    
    // Return a 16 bit value
    return (avg & 0xffff);
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	8a e7       	ldi	r24, 0x7A	; 122
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	2a e7       	ldi	r18, 0x7A	; 122
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	f9 01       	movw	r30, r18
  da:	20 81       	ld	r18, Z
  dc:	27 60       	ori	r18, 0x07	; 7
  de:	fc 01       	movw	r30, r24
  e0:	20 83       	st	Z, r18
  e2:	8a e7       	ldi	r24, 0x7A	; 122
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	2a e7       	ldi	r18, 0x7A	; 122
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	f9 01       	movw	r30, r18
  ec:	20 81       	ld	r18, Z
  ee:	28 6c       	ori	r18, 0xC8	; 200
  f0:	fc 01       	movw	r30, r24
  f2:	20 83       	st	Z, r18
  f4:	00 00       	nop
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <__vector_24>:

ISR(ADC_vect){
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 10c:	0f 92       	push	r0
 10e:	2f 93       	push	r18
 110:	3f 93       	push	r19
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	00 d0       	rcall	.+0      	; 0x120 <__vector_24+0x24>
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
    // Pull data from AD conversion
    uint16_t res = ADC;
 124:	88 e7       	ldi	r24, 0x78	; 120
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	fc 01       	movw	r30, r24
 12a:	80 81       	ld	r24, Z
 12c:	91 81       	ldd	r25, Z+1	; 0x01
 12e:	9a 83       	std	Y+2, r25	; 0x02
 130:	89 83       	std	Y+1, r24	; 0x01
#ifdef DEBUG_LEDS_ADC
    Led3_Off();
#endif
    
    // Switch between LM35 and Poti
    switch (ADMUX & (1 << MUX0)) {
 132:	8c e7       	ldi	r24, 0x7C	; 124
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	fc 01       	movw	r30, r24
 138:	80 81       	ld	r24, Z
 13a:	88 2f       	mov	r24, r24
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	81 70       	andi	r24, 0x01	; 1
 140:	99 27       	eor	r25, r25
 142:	00 97       	sbiw	r24, 0x00	; 0
 144:	19 f0       	breq	.+6      	; 0x14c <__vector_24+0x50>
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	b9 f1       	breq	.+110    	; 0x1b8 <__vector_24+0xbc>
#endif
            }
            break;
            
        default:
            break;
 14a:	63 c0       	rjmp	.+198    	; 0x212 <__vector_24+0x116>
    
    // Switch between LM35 and Poti
    switch (ADMUX & (1 << MUX0)) {
        case 0: // LM35
            
            if (index_LM35 == 42) {
 14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 150:	8a 32       	cpi	r24, 0x2A	; 42
 152:	19 f4       	brne	.+6      	; 0x15a <__vector_24+0x5e>
                // Trash first conversion
                index_LM35 = 0;
 154:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
                
#ifdef DEBUG_LEDS_ADC
                Led4_Off();
#endif
            }
            break;
 158:	5c c0       	rjmp	.+184    	; 0x212 <__vector_24+0x116>
                // Trash first conversion
                index_LM35 = 0;
#ifdef DEBUG_LEDS_ADC
                Led4_On();
#endif
            }else if (index_LM35 >= 0 && index_LM35 <= 7) {
 15a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 15e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 162:	88 30       	cpi	r24, 0x08	; 8
 164:	98 f4       	brcc	.+38     	; 0x18c <__vector_24+0x90>
                // Store 8 AD conversions in the Array
                LM35_Array[index_LM35] = res;
 166:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 16a:	88 2f       	mov	r24, r24
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	8e 5f       	subi	r24, 0xFE	; 254
 174:	9e 4f       	sbci	r25, 0xFE	; 254
 176:	29 81       	ldd	r18, Y+1	; 0x01
 178:	3a 81       	ldd	r19, Y+2	; 0x02
 17a:	fc 01       	movw	r30, r24
 17c:	31 83       	std	Z+1, r19	; 0x01
 17e:	20 83       	st	Z, r18
                index_LM35++;
 180:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 184:	8f 5f       	subi	r24, 0xFF	; 255
 186:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
                
#ifdef DEBUG_LEDS_ADC
                Led4_Off();
#endif
            }
            break;
 18a:	43 c0       	rjmp	.+134    	; 0x212 <__vector_24+0x116>
                // Store 8 AD conversions in the Array
                LM35_Array[index_LM35] = res;
                index_LM35++;
            }else {
                // Switch to Poti
                ADMUX &= ~(30); // Set MUX1..4 to 0
 18c:	8c e7       	ldi	r24, 0x7C	; 124
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	2c e7       	ldi	r18, 0x7C	; 124
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	f9 01       	movw	r30, r18
 196:	20 81       	ld	r18, Z
 198:	21 7e       	andi	r18, 0xE1	; 225
 19a:	fc 01       	movw	r30, r24
 19c:	20 83       	st	Z, r18
                ADMUX |= (1 << MUX0);
 19e:	8c e7       	ldi	r24, 0x7C	; 124
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	2c e7       	ldi	r18, 0x7C	; 124
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	f9 01       	movw	r30, r18
 1a8:	20 81       	ld	r18, Z
 1aa:	21 60       	ori	r18, 0x01	; 1
 1ac:	fc 01       	movw	r30, r24
 1ae:	20 83       	st	Z, r18
                
                // Set index to default value, so that the first conversion will be trashed
                index_LM35 = 42;
 1b0:	8a e2       	ldi	r24, 0x2A	; 42
 1b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
                
#ifdef DEBUG_LEDS_ADC
                Led4_Off();
#endif
            }
            break;
 1b6:	2d c0       	rjmp	.+90     	; 0x212 <__vector_24+0x116>
            
        case 1: // Poti
            if (index_Poti == 42) { // Trash first conversion
 1b8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
 1bc:	8a 32       	cpi	r24, 0x2A	; 42
 1be:	19 f4       	brne	.+6      	; 0x1c6 <__vector_24+0xca>
#ifdef DEBUG_LEDS_ADC
                Led5_On();
#endif
                index_Poti = 0;
 1c0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <index_Poti>
                
#ifdef DEBUG_LEDS_ADC
                Led5_Off();
#endif
            }
            break;
 1c4:	25 c0       	rjmp	.+74     	; 0x210 <__vector_24+0x114>
            if (index_Poti == 42) { // Trash first conversion
#ifdef DEBUG_LEDS_ADC
                Led5_On();
#endif
                index_Poti = 0;
            }else if (index_Poti >= 0 && index_Poti <= 7) {
 1c6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
 1ca:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
 1ce:	88 30       	cpi	r24, 0x08	; 8
 1d0:	98 f4       	brcc	.+38     	; 0x1f8 <__vector_24+0xfc>
                // Store 8 AD conversions in the Array
                Poti_Array[index_Poti] = res;
 1d2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
 1d6:	88 2f       	mov	r24, r24
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	8e 5e       	subi	r24, 0xEE	; 238
 1e0:	9e 4f       	sbci	r25, 0xFE	; 254
 1e2:	29 81       	ldd	r18, Y+1	; 0x01
 1e4:	3a 81       	ldd	r19, Y+2	; 0x02
 1e6:	fc 01       	movw	r30, r24
 1e8:	31 83       	std	Z+1, r19	; 0x01
 1ea:	20 83       	st	Z, r18
                index_Poti++;
 1ec:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
 1f0:	8f 5f       	subi	r24, 0xFF	; 255
 1f2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <index_Poti>
                
#ifdef DEBUG_LEDS_ADC
                Led5_Off();
#endif
            }
            break;
 1f6:	0c c0       	rjmp	.+24     	; 0x210 <__vector_24+0x114>
                // Store 8 AD conversions in the Array
                Poti_Array[index_Poti] = res;
                index_Poti++;
            }else {
                // Switch to LM35
                ADMUX &= ~(31); // Set MUX0..4 to 0
 1f8:	8c e7       	ldi	r24, 0x7C	; 124
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	2c e7       	ldi	r18, 0x7C	; 124
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	f9 01       	movw	r30, r18
 202:	20 81       	ld	r18, Z
 204:	20 7e       	andi	r18, 0xE0	; 224
 206:	fc 01       	movw	r30, r24
 208:	20 83       	st	Z, r18
                
                // Set index to default value, so that the first conversion will be trashed
                index_Poti = 42;
 20a:	8a e2       	ldi	r24, 0x2A	; 42
 20c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <index_Poti>
                
#ifdef DEBUG_LEDS_ADC
                Led5_Off();
#endif
            }
            break;
 210:	00 00       	nop
#ifdef DEBUG_LEDS_ADC
    Led3_On();
#endif
    
    // Trigger next conversion
    ADCSRA |= (1 << ADSC) | (1 << ADIE);
 212:	8a e7       	ldi	r24, 0x7A	; 122
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	2a e7       	ldi	r18, 0x7A	; 122
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	f9 01       	movw	r30, r18
 21c:	20 81       	ld	r18, Z
 21e:	28 64       	ori	r18, 0x48	; 72
 220:	fc 01       	movw	r30, r24
 222:	20 83       	st	Z, r18
}
 224:	00 00       	nop
 226:	0f 90       	pop	r0
 228:	0f 90       	pop	r0
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	ff 91       	pop	r31
 230:	ef 91       	pop	r30
 232:	9f 91       	pop	r25
 234:	8f 91       	pop	r24
 236:	3f 91       	pop	r19
 238:	2f 91       	pop	r18
 23a:	0f 90       	pop	r0
 23c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 240:	0f 90       	pop	r0
 242:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <encoder_isr>:
  cli();
  val = enc_delta;
  enc_delta = val & 3;
  sei();
  return val >> 2;
}
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	00 d0       	rcall	.+0      	; 0x252 <encoder_isr+0x6>
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
 256:	19 82       	std	Y+1, r1	; 0x01
 258:	86 e2       	ldi	r24, 0x26	; 38
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	fc 01       	movw	r30, r24
 25e:	80 81       	ld	r24, Z
 260:	88 2f       	mov	r24, r24
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	80 74       	andi	r24, 0x40	; 64
 266:	99 27       	eor	r25, r25
 268:	89 2b       	or	r24, r25
 26a:	11 f0       	breq	.+4      	; 0x270 <encoder_isr+0x24>
 26c:	83 e0       	ldi	r24, 0x03	; 3
 26e:	89 83       	std	Y+1, r24	; 0x01
 270:	86 e2       	ldi	r24, 0x26	; 38
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	fc 01       	movw	r30, r24
 276:	80 81       	ld	r24, Z
 278:	88 23       	and	r24, r24
 27a:	24 f4       	brge	.+8      	; 0x284 <encoder_isr+0x38>
 27c:	99 81       	ldd	r25, Y+1	; 0x01
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	89 27       	eor	r24, r25
 282:	89 83       	std	Y+1, r24	; 0x01
 284:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <last>
 288:	98 2f       	mov	r25, r24
 28a:	89 81       	ldd	r24, Y+1	; 0x01
 28c:	f9 2f       	mov	r31, r25
 28e:	f8 1b       	sub	r31, r24
 290:	8f 2f       	mov	r24, r31
 292:	8a 83       	std	Y+2, r24	; 0x02
 294:	8a 81       	ldd	r24, Y+2	; 0x02
 296:	08 2e       	mov	r0, r24
 298:	00 0c       	add	r0, r0
 29a:	99 0b       	sbc	r25, r25
 29c:	81 70       	andi	r24, 0x01	; 1
 29e:	99 27       	eor	r25, r25
 2a0:	89 2b       	or	r24, r25
 2a2:	59 f0       	breq	.+22     	; 0x2ba <encoder_isr+0x6e>
 2a4:	89 81       	ldd	r24, Y+1	; 0x01
 2a6:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <last>
 2aa:	8a 81       	ldd	r24, Y+2	; 0x02
 2ac:	82 70       	andi	r24, 0x02	; 2
 2ae:	90 91 2d 05 	lds	r25, 0x052D	; 0x80052d <enc_delta>
 2b2:	89 0f       	add	r24, r25
 2b4:	81 50       	subi	r24, 0x01	; 1
 2b6:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <enc_delta>
 2ba:	00 00       	nop
 2bc:	0f 90       	pop	r0
 2be:	0f 90       	pop	r0
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <encode_init>:
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	1f 92       	push	r1
 2cc:	cd b7       	in	r28, 0x3d	; 61
 2ce:	de b7       	in	r29, 0x3e	; 62
 2d0:	66 e2       	ldi	r22, 0x26	; 38
 2d2:	71 e0       	ldi	r23, 0x01	; 1
 2d4:	80 e1       	ldi	r24, 0x10	; 16
 2d6:	59 d1       	rcall	.+690    	; 0x58a <Timer2_init>
 2d8:	19 82       	std	Y+1, r1	; 0x01
 2da:	86 e2       	ldi	r24, 0x26	; 38
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	fc 01       	movw	r30, r24
 2e0:	80 81       	ld	r24, Z
 2e2:	88 2f       	mov	r24, r24
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	80 74       	andi	r24, 0x40	; 64
 2e8:	99 27       	eor	r25, r25
 2ea:	89 2b       	or	r24, r25
 2ec:	11 f0       	breq	.+4      	; 0x2f2 <encode_init+0x2c>
 2ee:	83 e0       	ldi	r24, 0x03	; 3
 2f0:	89 83       	std	Y+1, r24	; 0x01
 2f2:	86 e2       	ldi	r24, 0x26	; 38
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	fc 01       	movw	r30, r24
 2f8:	80 81       	ld	r24, Z
 2fa:	88 23       	and	r24, r24
 2fc:	24 f4       	brge	.+8      	; 0x306 <encode_init+0x40>
 2fe:	99 81       	ldd	r25, Y+1	; 0x01
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	89 27       	eor	r24, r25
 304:	89 83       	std	Y+1, r24	; 0x01
 306:	89 81       	ldd	r24, Y+1	; 0x01
 308:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <last>
 30c:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <enc_delta>
 310:	00 00       	nop
 312:	0f 90       	pop	r0
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	08 95       	ret

0000031a <encode_read1>:
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	1f 92       	push	r1
 320:	cd b7       	in	r28, 0x3d	; 61
 322:	de b7       	in	r29, 0x3e	; 62
 324:	f8 94       	cli
 326:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <enc_delta>
 32a:	89 83       	std	Y+1, r24	; 0x01
 32c:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <enc_delta>
 330:	78 94       	sei
 332:	89 81       	ldd	r24, Y+1	; 0x01
 334:	0f 90       	pop	r0
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

0000033c <loop>:


int loop( void )
{
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	00 d0       	rcall	.+0      	; 0x342 <loop+0x6>
 342:	00 d0       	rcall	.+0      	; 0x344 <loop+0x8>
 344:	cd b7       	in	r28, 0x3d	; 61
 346:	de b7       	in	r29, 0x3e	; 62
  int32_t val = 0;
 348:	19 82       	std	Y+1, r1	; 0x01
 34a:	1a 82       	std	Y+2, r1	; 0x02
 34c:	1b 82       	std	Y+3, r1	; 0x03
 34e:	1c 82       	std	Y+4, r1	; 0x04

  encode_init();
 350:	ba df       	rcall	.-140    	; 0x2c6 <encode_init>
  sei();

  for(;;){
    val += encode_read1();          // read a single step encoder
 352:	78 94       	sei
 354:	e2 df       	rcall	.-60     	; 0x31a <encode_read1>
 356:	08 2e       	mov	r0, r24
 358:	00 0c       	add	r0, r0
 35a:	99 0b       	sbc	r25, r25
 35c:	aa 0b       	sbc	r26, r26
 35e:	bb 0b       	sbc	r27, r27
 360:	29 81       	ldd	r18, Y+1	; 0x01
 362:	3a 81       	ldd	r19, Y+2	; 0x02
 364:	4b 81       	ldd	r20, Y+3	; 0x03
 366:	5c 81       	ldd	r21, Y+4	; 0x04
 368:	82 0f       	add	r24, r18
 36a:	93 1f       	adc	r25, r19
 36c:	a4 1f       	adc	r26, r20
 36e:	b5 1f       	adc	r27, r21
 370:	89 83       	std	Y+1, r24	; 0x01
 372:	9a 83       	std	Y+2, r25	; 0x02
 374:	ab 83       	std	Y+3, r26	; 0x03
 376:	bc 83       	std	Y+4, r27	; 0x04
    PORTB = val;
 378:	85 e2       	ldi	r24, 0x25	; 37
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	29 81       	ldd	r18, Y+1	; 0x01
 37e:	fc 01       	movw	r30, r24
 380:	20 83       	st	Z, r18
  }
 382:	e8 cf       	rjmp	.-48     	; 0x354 <loop+0x18>

00000384 <Led_init>:

#include "Led.h"

void Led_init(uint8_t initD) {
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	1f 92       	push	r1
 38a:	cd b7       	in	r28, 0x3d	; 61
 38c:	de b7       	in	r29, 0x3e	; 62
 38e:	89 83       	std	Y+1, r24	; 0x01
    // Set PORTB to outputs
    DDRB = 0xFF;
 390:	84 e2       	ldi	r24, 0x24	; 36
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	2f ef       	ldi	r18, 0xFF	; 255
 396:	fc 01       	movw	r30, r24
 398:	20 83       	st	Z, r18
    PORTB = 0x00;
 39a:	85 e2       	ldi	r24, 0x25	; 37
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	fc 01       	movw	r30, r24
 3a0:	10 82       	st	Z, r1
    
    if (initD) {
 3a2:	89 81       	ldd	r24, Y+1	; 0x01
 3a4:	88 23       	and	r24, r24
 3a6:	91 f0       	breq	.+36     	; 0x3cc <Led_init+0x48>
        // Set PORTD 0..4 to outputs
        DDRD |= ( (1 << 4) | (1 << 3) | (1 << 2) | (1 << 1) | (1 << 0));
 3a8:	8a e2       	ldi	r24, 0x2A	; 42
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	2a e2       	ldi	r18, 0x2A	; 42
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	f9 01       	movw	r30, r18
 3b2:	20 81       	ld	r18, Z
 3b4:	2f 61       	ori	r18, 0x1F	; 31
 3b6:	fc 01       	movw	r30, r24
 3b8:	20 83       	st	Z, r18
        PORTD &= ~( (1 << 4) | (1 << 3) | (1 << 2) | (1 << 1) | (1 << 0));
 3ba:	8b e2       	ldi	r24, 0x2B	; 43
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	2b e2       	ldi	r18, 0x2B	; 43
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	f9 01       	movw	r30, r18
 3c4:	20 81       	ld	r18, Z
 3c6:	20 7e       	andi	r18, 0xE0	; 224
 3c8:	fc 01       	movw	r30, r24
 3ca:	20 83       	st	Z, r18
    }
}
 3cc:	00 00       	nop
 3ce:	0f 90       	pop	r0
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	08 95       	ret

000003d6 <Taster_init>:
 ---------------------
 - DDR Reg has to be set to 0
 - PORT Reg has to be set to 1
 -> Pin is input with pull-up
 */
void Taster_init() {
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	cd b7       	in	r28, 0x3d	; 61
 3dc:	de b7       	in	r29, 0x3e	; 62
    
    // set to inputs
    DDRC &= ~(1 << 2);
 3de:	87 e2       	ldi	r24, 0x27	; 39
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	27 e2       	ldi	r18, 0x27	; 39
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	f9 01       	movw	r30, r18
 3e8:	20 81       	ld	r18, Z
 3ea:	2b 7f       	andi	r18, 0xFB	; 251
 3ec:	fc 01       	movw	r30, r24
 3ee:	20 83       	st	Z, r18
    DDRD &= ~( (1 << 7) | (1 << 6) | (1 << 5) );
 3f0:	8a e2       	ldi	r24, 0x2A	; 42
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	2a e2       	ldi	r18, 0x2A	; 42
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	f9 01       	movw	r30, r18
 3fa:	20 81       	ld	r18, Z
 3fc:	2f 71       	andi	r18, 0x1F	; 31
 3fe:	fc 01       	movw	r30, r24
 400:	20 83       	st	Z, r18
    
    // enable pull-up
    PORTC |= (1 << 2);
 402:	88 e2       	ldi	r24, 0x28	; 40
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	28 e2       	ldi	r18, 0x28	; 40
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	f9 01       	movw	r30, r18
 40c:	20 81       	ld	r18, Z
 40e:	24 60       	ori	r18, 0x04	; 4
 410:	fc 01       	movw	r30, r24
 412:	20 83       	st	Z, r18
    PORTD |= (1 << 7) | (1 << 6) | (1 << 5);
 414:	8b e2       	ldi	r24, 0x2B	; 43
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	2b e2       	ldi	r18, 0x2B	; 43
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	f9 01       	movw	r30, r18
 41e:	20 81       	ld	r18, Z
 420:	20 6e       	ori	r18, 0xE0	; 224
 422:	fc 01       	movw	r30, r24
 424:	20 83       	st	Z, r18
}
 426:	00 00       	nop
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	08 95       	ret

0000042e <main>:
#define CLK_F_MHZ 16

uint8_t iahsdfoads = 0;
uint16_t afdsfasdf = 0;

int main(void) {
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	cd b7       	in	r28, 0x3d	; 61
 434:	de b7       	in	r29, 0x3e	; 62
 436:	c9 57       	subi	r28, 0x79	; 121
 438:	d1 09       	sbc	r29, r1
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	f8 94       	cli
 43e:	de bf       	out	0x3e, r29	; 62
 440:	0f be       	out	0x3f, r0	; 63
 442:	cd bf       	out	0x3d, r28	; 61
	
    cli();
 444:	f8 94       	cli
    Led_init(0);	// Don't set LEDs at PORTD
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	9d df       	rcall	.-198    	; 0x384 <Led_init>
	Taster_init();
 44a:	c5 df       	rcall	.-118    	; 0x3d6 <Taster_init>
    Timer_init(CLK_F_MHZ); // Init timer with 16MHZ clock
 44c:	80 e1       	ldi	r24, 0x10	; 16
	uart_init_isr();
 44e:	30 d1       	rcall	.+608    	; 0x6b0 <Timer_init>
    adc_init();
 450:	02 d3       	rcall	.+1540   	; 0xa56 <uart_init_isr>
 452:	3a de       	rcall	.-908    	; 0xc8 <adc_init>
    encode_init();
 454:	38 df       	rcall	.-400    	; 0x2c6 <encode_init>
 456:	78 94       	sei
	sei();
 458:	38 d1       	rcall	.+624    	; 0x6ca <Timer_getTick>
    
    uint16_t timeVarMain = Timer_getTick();
 45a:	9a 83       	std	Y+2, r25	; 0x02
 45c:	89 83       	std	Y+1, r24	; 0x01
 45e:	22 e3       	ldi	r18, 0x32	; 50
 460:	ce 01       	movw	r24, r28
    char data_s;
    char data[50] = {0};
 462:	07 96       	adiw	r24, 0x07	; 7
 464:	fc 01       	movw	r30, r24
 466:	32 2f       	mov	r19, r18
 468:	11 92       	st	Z+, r1
 46a:	3a 95       	dec	r19
 46c:	e9 f7       	brne	.-6      	; 0x468 <main+0x3a>
 46e:	1c 82       	std	Y+4, r1	; 0x04
    int isafd = 0;
 470:	1b 82       	std	Y+3, r1	; 0x03
 472:	1e 82       	std	Y+6, r1	; 0x06
	char str[65];
    uint16_t Poti = 0;
 474:	1d 82       	std	Y+5, r1	; 0x05
 476:	62 df       	rcall	.-316    	; 0x33c <loop>
	
    while (1) {
        loop();
 478:	fe cf       	rjmp	.-4      	; 0x476 <main+0x48>

0000047a <Timer_init_withoutStruct>:
 47a:	cf 93       	push	r28
            }
        }*/
        
        //trafficLight(0);
        //playground();
    }
 47c:	df 93       	push	r29
    TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
}

void Timer_init_withoutStruct(uint8_t clockFreqMhz) {
 47e:	1f 92       	push	r1
 480:	cd b7       	in	r28, 0x3d	; 61
 482:	de b7       	in	r29, 0x3e	; 62
 484:	89 83       	std	Y+1, r24	; 0x01
    // datasheet page 97
    // set mode to clear timer on compare (CTC)
    TCCR0B &= ~(1 << WGM02);
 486:	85 e4       	ldi	r24, 0x45	; 69
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	25 e4       	ldi	r18, 0x45	; 69
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	f9 01       	movw	r30, r18
 490:	20 81       	ld	r18, Z
 492:	27 7f       	andi	r18, 0xF7	; 247
 494:	fc 01       	movw	r30, r24
 496:	20 83       	st	Z, r18
    TCCR0A |= (1 << WGM01);
 498:	84 e4       	ldi	r24, 0x44	; 68
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	24 e4       	ldi	r18, 0x44	; 68
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	f9 01       	movw	r30, r18
 4a2:	20 81       	ld	r18, Z
 4a4:	22 60       	ori	r18, 0x02	; 2
 4a6:	fc 01       	movw	r30, r24
 4a8:	20 83       	st	Z, r18
    TCCR0A &= ~(1 << WGM00);
 4aa:	84 e4       	ldi	r24, 0x44	; 68
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	24 e4       	ldi	r18, 0x44	; 68
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	f9 01       	movw	r30, r18
 4b4:	20 81       	ld	r18, Z
 4b6:	2e 7f       	andi	r18, 0xFE	; 254
 4b8:	fc 01       	movw	r30, r24
 4ba:	20 83       	st	Z, r18
    
    
    switch (clockFreqMhz) {
 4bc:	89 81       	ldd	r24, Y+1	; 0x01
 4be:	88 2f       	mov	r24, r24
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	40 97       	sbiw	r24, 0x10	; 16
 4c4:	09 f5       	brne	.+66     	; 0x508 <Timer_init_withoutStruct+0x8e>
        case 16:
            // extern osc (16 MHZ)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = COMPA_VAL-1;   // dez 249; range 0 - 249 -> 250 cycles till interrupt
 4c6:	87 e4       	ldi	r24, 0x47	; 71
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	29 ef       	ldi	r18, 0xF9	; 249
 4cc:	fc 01       	movw	r30, r24
 4ce:	20 83       	st	Z, r18
            
            // set prescaler to 1/64
            TCCR0B &= ~(1 << CS02);
 4d0:	85 e4       	ldi	r24, 0x45	; 69
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	25 e4       	ldi	r18, 0x45	; 69
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	f9 01       	movw	r30, r18
 4da:	20 81       	ld	r18, Z
 4dc:	2b 7f       	andi	r18, 0xFB	; 251
 4de:	fc 01       	movw	r30, r24
 4e0:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
 4e2:	85 e4       	ldi	r24, 0x45	; 69
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	25 e4       	ldi	r18, 0x45	; 69
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	f9 01       	movw	r30, r18
 4ec:	20 81       	ld	r18, Z
 4ee:	22 60       	ori	r18, 0x02	; 2
 4f0:	fc 01       	movw	r30, r24
 4f2:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS00);
 4f4:	85 e4       	ldi	r24, 0x45	; 69
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	25 e4       	ldi	r18, 0x45	; 69
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	f9 01       	movw	r30, r18
 4fe:	20 81       	ld	r18, Z
 500:	21 60       	ori	r18, 0x01	; 1
 502:	fc 01       	movw	r30, r24
 504:	20 83       	st	Z, r18
            break;
 506:	21 c0       	rjmp	.+66     	; 0x54a <Timer_init_withoutStruct+0xd0>
            
        default:
            // inter osc (8 MHZ divided by 8 -> 1 MHZ clock)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = COMPA_VAL_8MHZ-1;   // dez 124; range 0 - 124 -> 125 cycles till interrupt
 508:	87 e4       	ldi	r24, 0x47	; 71
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	2c e7       	ldi	r18, 0x7C	; 124
 50e:	fc 01       	movw	r30, r24
 510:	20 83       	st	Z, r18
            
            // set prescaler to 1/8
            TCCR0B &= ~(1 << CS02);
 512:	85 e4       	ldi	r24, 0x45	; 69
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	25 e4       	ldi	r18, 0x45	; 69
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	f9 01       	movw	r30, r18
 51c:	20 81       	ld	r18, Z
 51e:	2b 7f       	andi	r18, 0xFB	; 251
 520:	fc 01       	movw	r30, r24
 522:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
 524:	85 e4       	ldi	r24, 0x45	; 69
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	25 e4       	ldi	r18, 0x45	; 69
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	f9 01       	movw	r30, r18
 52e:	20 81       	ld	r18, Z
 530:	22 60       	ori	r18, 0x02	; 2
 532:	fc 01       	movw	r30, r24
 534:	20 83       	st	Z, r18
            TCCR0B &= ~(1 << CS00);
 536:	85 e4       	ldi	r24, 0x45	; 69
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	25 e4       	ldi	r18, 0x45	; 69
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	f9 01       	movw	r30, r18
 540:	20 81       	ld	r18, Z
 542:	2e 7f       	andi	r18, 0xFE	; 254
 544:	fc 01       	movw	r30, r24
 546:	20 83       	st	Z, r18
            break;
 548:	00 00       	nop
    }
    
    TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
 54a:	8e e6       	ldi	r24, 0x6E	; 110
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	2e e6       	ldi	r18, 0x6E	; 110
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	f9 01       	movw	r30, r18
 554:	20 81       	ld	r18, Z
 556:	2b 7f       	andi	r18, 0xFB	; 251
 558:	fc 01       	movw	r30, r24
 55a:	20 83       	st	Z, r18
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
 55c:	8e e6       	ldi	r24, 0x6E	; 110
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	2e e6       	ldi	r18, 0x6E	; 110
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	f9 01       	movw	r30, r18
 566:	20 81       	ld	r18, Z
 568:	22 60       	ori	r18, 0x02	; 2
 56a:	fc 01       	movw	r30, r24
 56c:	20 83       	st	Z, r18
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
 56e:	8e e6       	ldi	r24, 0x6E	; 110
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	2e e6       	ldi	r18, 0x6E	; 110
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	f9 01       	movw	r30, r18
 578:	20 81       	ld	r18, Z
 57a:	2e 7f       	andi	r18, 0xFE	; 254
 57c:	fc 01       	movw	r30, r24
 57e:	20 83       	st	Z, r18
}
 580:	00 00       	nop
 582:	0f 90       	pop	r0
 584:	df 91       	pop	r29
 586:	cf 91       	pop	r28
 588:	08 95       	ret

0000058a <Timer2_init>:

void Timer2_init(uint8_t clockFreqMhz, volatile void (*f)(void)) {
 58a:	cf 93       	push	r28
 58c:	df 93       	push	r29
 58e:	00 d0       	rcall	.+0      	; 0x590 <Timer2_init+0x6>
 590:	1f 92       	push	r1
 592:	cd b7       	in	r28, 0x3d	; 61
 594:	de b7       	in	r29, 0x3e	; 62
 596:	89 83       	std	Y+1, r24	; 0x01
 598:	7b 83       	std	Y+3, r23	; 0x03
 59a:	6a 83       	std	Y+2, r22	; 0x02
    timer2_func = f;
 59c:	8a 81       	ldd	r24, Y+2	; 0x02
 59e:	9b 81       	ldd	r25, Y+3	; 0x03
 5a0:	90 93 2f 05 	sts	0x052F, r25	; 0x80052f <timer2_func+0x1>
 5a4:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <timer2_func>
    // datasheet page 97
    // set mode to clear timer on compare (CTC)
    TCCR2B &= ~(1 << WGM02);
 5a8:	81 eb       	ldi	r24, 0xB1	; 177
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	21 eb       	ldi	r18, 0xB1	; 177
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	f9 01       	movw	r30, r18
 5b2:	20 81       	ld	r18, Z
 5b4:	27 7f       	andi	r18, 0xF7	; 247
 5b6:	fc 01       	movw	r30, r24
 5b8:	20 83       	st	Z, r18
    TCCR2A |= (1 << WGM01);
 5ba:	80 eb       	ldi	r24, 0xB0	; 176
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	20 eb       	ldi	r18, 0xB0	; 176
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	f9 01       	movw	r30, r18
 5c4:	20 81       	ld	r18, Z
 5c6:	22 60       	ori	r18, 0x02	; 2
 5c8:	fc 01       	movw	r30, r24
 5ca:	20 83       	st	Z, r18
    TCCR2A &= ~(1 << WGM00);
 5cc:	80 eb       	ldi	r24, 0xB0	; 176
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	20 eb       	ldi	r18, 0xB0	; 176
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	f9 01       	movw	r30, r18
 5d6:	20 81       	ld	r18, Z
 5d8:	2e 7f       	andi	r18, 0xFE	; 254
 5da:	fc 01       	movw	r30, r24
 5dc:	20 83       	st	Z, r18
    
    
    switch (clockFreqMhz) {
 5de:	89 81       	ldd	r24, Y+1	; 0x01
 5e0:	88 2f       	mov	r24, r24
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	40 97       	sbiw	r24, 0x10	; 16
 5e6:	09 f5       	brne	.+66     	; 0x62a <Timer2_init+0xa0>
        case 16:
            // extern osc (16 MHZ)
            
            // set OCR0A-reg (top value of timer)
            OCR2A = T2_COMPA_VAL-1;   // dez 249; range 0 - 249 -> 250 cycles till interrupt
 5e8:	83 eb       	ldi	r24, 0xB3	; 179
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	29 ef       	ldi	r18, 0xF9	; 249
 5ee:	fc 01       	movw	r30, r24
 5f0:	20 83       	st	Z, r18
            
            // set prescaler to 1/64
            TCCR2B &= ~(1 << CS02);
 5f2:	81 eb       	ldi	r24, 0xB1	; 177
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	21 eb       	ldi	r18, 0xB1	; 177
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	f9 01       	movw	r30, r18
 5fc:	20 81       	ld	r18, Z
 5fe:	2b 7f       	andi	r18, 0xFB	; 251
 600:	fc 01       	movw	r30, r24
 602:	20 83       	st	Z, r18
            TCCR2B |= (1 << CS01);
 604:	81 eb       	ldi	r24, 0xB1	; 177
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	21 eb       	ldi	r18, 0xB1	; 177
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	f9 01       	movw	r30, r18
 60e:	20 81       	ld	r18, Z
 610:	22 60       	ori	r18, 0x02	; 2
 612:	fc 01       	movw	r30, r24
 614:	20 83       	st	Z, r18
            TCCR2B |= (1 << CS00);
 616:	81 eb       	ldi	r24, 0xB1	; 177
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	21 eb       	ldi	r18, 0xB1	; 177
 61c:	30 e0       	ldi	r19, 0x00	; 0
 61e:	f9 01       	movw	r30, r18
 620:	20 81       	ld	r18, Z
 622:	21 60       	ori	r18, 0x01	; 1
 624:	fc 01       	movw	r30, r24
 626:	20 83       	st	Z, r18
            break;
 628:	21 c0       	rjmp	.+66     	; 0x66c <Timer2_init+0xe2>
            
        default:
            // inter osc (8 MHZ divided by 8 -> 1 MHZ clock)
            
            // set OCR0A-reg (top value of timer)
            OCR2A = T2_COMPA_VAL_8MHZ-1;   // dez 124; range 0 - 124 -> 125 cycles till interrupt
 62a:	83 eb       	ldi	r24, 0xB3	; 179
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	2c e7       	ldi	r18, 0x7C	; 124
 630:	fc 01       	movw	r30, r24
 632:	20 83       	st	Z, r18
            
            // set prescaler to 1/8
            TCCR2B &= ~(1 << CS02);
 634:	81 eb       	ldi	r24, 0xB1	; 177
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	21 eb       	ldi	r18, 0xB1	; 177
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	f9 01       	movw	r30, r18
 63e:	20 81       	ld	r18, Z
 640:	2b 7f       	andi	r18, 0xFB	; 251
 642:	fc 01       	movw	r30, r24
 644:	20 83       	st	Z, r18
            TCCR2B |= (1 << CS01);
 646:	81 eb       	ldi	r24, 0xB1	; 177
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	21 eb       	ldi	r18, 0xB1	; 177
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	f9 01       	movw	r30, r18
 650:	20 81       	ld	r18, Z
 652:	22 60       	ori	r18, 0x02	; 2
 654:	fc 01       	movw	r30, r24
 656:	20 83       	st	Z, r18
            TCCR2B &= ~(1 << CS00);
 658:	81 eb       	ldi	r24, 0xB1	; 177
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	21 eb       	ldi	r18, 0xB1	; 177
 65e:	30 e0       	ldi	r19, 0x00	; 0
 660:	f9 01       	movw	r30, r18
 662:	20 81       	ld	r18, Z
 664:	2e 7f       	andi	r18, 0xFE	; 254
 666:	fc 01       	movw	r30, r24
 668:	20 83       	st	Z, r18
            break;
 66a:	00 00       	nop
    }
    
    TIMSK2 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
 66c:	80 e7       	ldi	r24, 0x70	; 112
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	20 e7       	ldi	r18, 0x70	; 112
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	f9 01       	movw	r30, r18
 676:	20 81       	ld	r18, Z
 678:	2b 7f       	andi	r18, 0xFB	; 251
 67a:	fc 01       	movw	r30, r24
 67c:	20 83       	st	Z, r18
    TIMSK2 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
 67e:	80 e7       	ldi	r24, 0x70	; 112
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	20 e7       	ldi	r18, 0x70	; 112
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	f9 01       	movw	r30, r18
 688:	20 81       	ld	r18, Z
 68a:	22 60       	ori	r18, 0x02	; 2
 68c:	fc 01       	movw	r30, r24
 68e:	20 83       	st	Z, r18
    TIMSK2 &= ~(1 << TOIE0);    // disable timer overflow interrupt
 690:	80 e7       	ldi	r24, 0x70	; 112
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	20 e7       	ldi	r18, 0x70	; 112
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	f9 01       	movw	r30, r18
 69a:	20 81       	ld	r18, Z
 69c:	2e 7f       	andi	r18, 0xFE	; 254
 69e:	fc 01       	movw	r30, r24
 6a0:	20 83       	st	Z, r18
}
 6a2:	00 00       	nop
 6a4:	0f 90       	pop	r0
 6a6:	0f 90       	pop	r0
 6a8:	0f 90       	pop	r0
 6aa:	df 91       	pop	r29
 6ac:	cf 91       	pop	r28
 6ae:	08 95       	ret

000006b0 <Timer_init>:

void Timer_init(uint8_t clockFreqMhz) {
 6b0:	cf 93       	push	r28
 6b2:	df 93       	push	r29
 6b4:	1f 92       	push	r1
 6b6:	cd b7       	in	r28, 0x3d	; 61
 6b8:	de b7       	in	r29, 0x3e	; 62
 6ba:	89 83       	std	Y+1, r24	; 0x01
    Timer_init_withoutStruct(clockFreqMhz);
 6bc:	89 81       	ldd	r24, Y+1	; 0x01
 6be:	dd de       	rcall	.-582    	; 0x47a <Timer_init_withoutStruct>
}
 6c0:	00 00       	nop
 6c2:	0f 90       	pop	r0
 6c4:	df 91       	pop	r29
 6c6:	cf 91       	pop	r28
 6c8:	08 95       	ret

000006ca <Timer_getTick>:

uint16_t Timer_getTick() {
 6ca:	cf 93       	push	r28
 6cc:	df 93       	push	r29
 6ce:	00 d0       	rcall	.+0      	; 0x6d0 <Timer_getTick+0x6>
 6d0:	cd b7       	in	r28, 0x3d	; 61
 6d2:	de b7       	in	r29, 0x3e	; 62
    // disable Output Compare Match A Interrupt
    TIMSK0 &= ~(1 << OCIE0A);
 6d4:	8e e6       	ldi	r24, 0x6E	; 110
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	2e e6       	ldi	r18, 0x6E	; 110
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	f9 01       	movw	r30, r18
 6de:	20 81       	ld	r18, Z
 6e0:	2d 7f       	andi	r18, 0xFD	; 253
 6e2:	fc 01       	movw	r30, r24
 6e4:	20 83       	st	Z, r18
    
    // store timer_count in a temp int that can't get changed by ISR
    uint16_t temp_timer_count = timer_count;
 6e6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <timer_count>
 6ea:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <timer_count+0x1>
 6ee:	9a 83       	std	Y+2, r25	; 0x02
 6f0:	89 83       	std	Y+1, r24	; 0x01
    
    // enable Output Compare Match A Interrupt
    TIMSK0 |= (1 << OCIE0A);
 6f2:	8e e6       	ldi	r24, 0x6E	; 110
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	2e e6       	ldi	r18, 0x6E	; 110
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	f9 01       	movw	r30, r18
 6fc:	20 81       	ld	r18, Z
 6fe:	22 60       	ori	r18, 0x02	; 2
 700:	fc 01       	movw	r30, r24
 702:	20 83       	st	Z, r18

    return temp_timer_count;
 704:	89 81       	ldd	r24, Y+1	; 0x01
 706:	9a 81       	ldd	r25, Y+2	; 0x02
}
 708:	0f 90       	pop	r0
 70a:	0f 90       	pop	r0
 70c:	df 91       	pop	r29
 70e:	cf 91       	pop	r28
 710:	08 95       	ret

00000712 <__vector_16>:
/**
 Timer compare A interrput:
 - increase timer_count
 - if timer_count is at max of uint16, set it to 0
 */
ISR(TIMER0_COMPA_vect){
 712:	1f 92       	push	r1
 714:	0f 92       	push	r0
 716:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 71a:	0f 92       	push	r0
 71c:	11 24       	eor	r1, r1
 71e:	8f 93       	push	r24
 720:	9f 93       	push	r25
 722:	cf 93       	push	r28
 724:	df 93       	push	r29
 726:	cd b7       	in	r28, 0x3d	; 61
 728:	de b7       	in	r29, 0x3e	; 62
    timer_count++;
 72a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <timer_count>
 72e:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <timer_count+0x1>
 732:	01 96       	adiw	r24, 0x01	; 1
 734:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timer_count+0x1>
 738:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timer_count>
}
 73c:	00 00       	nop
 73e:	df 91       	pop	r29
 740:	cf 91       	pop	r28
 742:	9f 91       	pop	r25
 744:	8f 91       	pop	r24
 746:	0f 90       	pop	r0
 748:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 74c:	0f 90       	pop	r0
 74e:	1f 90       	pop	r1
 750:	18 95       	reti

00000752 <__vector_9>:

ISR(TIMER2_COMPA_vect){
 752:	1f 92       	push	r1
 754:	0f 92       	push	r0
 756:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 75a:	0f 92       	push	r0
 75c:	11 24       	eor	r1, r1
 75e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 762:	0f 92       	push	r0
 764:	2f 93       	push	r18
 766:	3f 93       	push	r19
 768:	4f 93       	push	r20
 76a:	5f 93       	push	r21
 76c:	6f 93       	push	r22
 76e:	7f 93       	push	r23
 770:	8f 93       	push	r24
 772:	9f 93       	push	r25
 774:	af 93       	push	r26
 776:	bf 93       	push	r27
 778:	ef 93       	push	r30
 77a:	ff 93       	push	r31
 77c:	cf 93       	push	r28
 77e:	df 93       	push	r29
 780:	cd b7       	in	r28, 0x3d	; 61
 782:	de b7       	in	r29, 0x3e	; 62
    (*timer2_func)();
 784:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <timer2_func>
 788:	90 91 2f 05 	lds	r25, 0x052F	; 0x80052f <timer2_func+0x1>
 78c:	fc 01       	movw	r30, r24
 78e:	09 95       	icall
}
 790:	00 00       	nop
 792:	df 91       	pop	r29
 794:	cf 91       	pop	r28
 796:	ff 91       	pop	r31
 798:	ef 91       	pop	r30
 79a:	bf 91       	pop	r27
 79c:	af 91       	pop	r26
 79e:	9f 91       	pop	r25
 7a0:	8f 91       	pop	r24
 7a2:	7f 91       	pop	r23
 7a4:	6f 91       	pop	r22
 7a6:	5f 91       	pop	r21
 7a8:	4f 91       	pop	r20
 7aa:	3f 91       	pop	r19
 7ac:	2f 91       	pop	r18
 7ae:	0f 90       	pop	r0
 7b0:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 7b4:	0f 90       	pop	r0
 7b6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 7ba:	0f 90       	pop	r0
 7bc:	1f 90       	pop	r1
 7be:	18 95       	reti

000007c0 <buff_put>:
        // Return byte
        return pByte;
    }else {
        return 0;
    }
}
 7c0:	cf 93       	push	r28
 7c2:	df 93       	push	r29
 7c4:	00 d0       	rcall	.+0      	; 0x7c6 <buff_put+0x6>
 7c6:	1f 92       	push	r1
 7c8:	cd b7       	in	r28, 0x3d	; 61
 7ca:	de b7       	in	r29, 0x3e	; 62
 7cc:	89 83       	std	Y+1, r24	; 0x01
 7ce:	7b 83       	std	Y+3, r23	; 0x03
 7d0:	6a 83       	std	Y+2, r22	; 0x02
 7d2:	81 ec       	ldi	r24, 0xC1	; 193
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	21 ec       	ldi	r18, 0xC1	; 193
 7d8:	30 e0       	ldi	r19, 0x00	; 0
 7da:	f9 01       	movw	r30, r18
 7dc:	20 81       	ld	r18, Z
 7de:	2f 7b       	andi	r18, 0xBF	; 191
 7e0:	fc 01       	movw	r30, r24
 7e2:	20 83       	st	Z, r18
 7e4:	81 ec       	ldi	r24, 0xC1	; 193
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	21 ec       	ldi	r18, 0xC1	; 193
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	f9 01       	movw	r30, r18
 7ee:	20 81       	ld	r18, Z
 7f0:	2f 77       	andi	r18, 0x7F	; 127
 7f2:	fc 01       	movw	r30, r24
 7f4:	20 83       	st	Z, r18
 7f6:	8a 81       	ldd	r24, Y+2	; 0x02
 7f8:	9b 81       	ldd	r25, Y+3	; 0x03
 7fa:	8e 5f       	subi	r24, 0xFE	; 254
 7fc:	9d 4f       	sbci	r25, 0xFD	; 253
 7fe:	fc 01       	movw	r30, r24
 800:	80 81       	ld	r24, Z
 802:	91 81       	ldd	r25, Z+1	; 0x01
 804:	9c 01       	movw	r18, r24
 806:	2f 5f       	subi	r18, 0xFF	; 255
 808:	3f 4f       	sbci	r19, 0xFF	; 255
 80a:	8a 81       	ldd	r24, Y+2	; 0x02
 80c:	9b 81       	ldd	r25, Y+3	; 0x03
 80e:	9e 5f       	subi	r25, 0xFE	; 254
 810:	fc 01       	movw	r30, r24
 812:	80 81       	ld	r24, Z
 814:	91 81       	ldd	r25, Z+1	; 0x01
 816:	28 17       	cp	r18, r24
 818:	39 07       	cpc	r19, r25
 81a:	91 f0       	breq	.+36     	; 0x840 <buff_put+0x80>
 81c:	8a 81       	ldd	r24, Y+2	; 0x02
 81e:	9b 81       	ldd	r25, Y+3	; 0x03
 820:	9e 5f       	subi	r25, 0xFE	; 254
 822:	fc 01       	movw	r30, r24
 824:	80 81       	ld	r24, Z
 826:	91 81       	ldd	r25, Z+1	; 0x01
 828:	89 2b       	or	r24, r25
 82a:	f1 f4       	brne	.+60     	; 0x868 <buff_put+0xa8>
 82c:	8a 81       	ldd	r24, Y+2	; 0x02
 82e:	9b 81       	ldd	r25, Y+3	; 0x03
 830:	8e 5f       	subi	r24, 0xFE	; 254
 832:	9d 4f       	sbci	r25, 0xFD	; 253
 834:	fc 01       	movw	r30, r24
 836:	80 81       	ld	r24, Z
 838:	91 81       	ldd	r25, Z+1	; 0x01
 83a:	8f 3f       	cpi	r24, 0xFF	; 255
 83c:	91 40       	sbci	r25, 0x01	; 1
 83e:	a1 f4       	brne	.+40     	; 0x868 <buff_put+0xa8>
 840:	81 ec       	ldi	r24, 0xC1	; 193
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	21 ec       	ldi	r18, 0xC1	; 193
 846:	30 e0       	ldi	r19, 0x00	; 0
 848:	f9 01       	movw	r30, r18
 84a:	20 81       	ld	r18, Z
 84c:	20 64       	ori	r18, 0x40	; 64
 84e:	fc 01       	movw	r30, r24
 850:	20 83       	st	Z, r18
 852:	81 ec       	ldi	r24, 0xC1	; 193
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	21 ec       	ldi	r18, 0xC1	; 193
 858:	30 e0       	ldi	r19, 0x00	; 0
 85a:	f9 01       	movw	r30, r18
 85c:	20 81       	ld	r18, Z
 85e:	20 68       	ori	r18, 0x80	; 128
 860:	fc 01       	movw	r30, r24
 862:	20 83       	st	Z, r18
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	43 c0       	rjmp	.+134    	; 0x8ee <buff_put+0x12e>
 868:	8a 81       	ldd	r24, Y+2	; 0x02
 86a:	9b 81       	ldd	r25, Y+3	; 0x03
 86c:	8e 5f       	subi	r24, 0xFE	; 254
 86e:	9d 4f       	sbci	r25, 0xFD	; 253
 870:	fc 01       	movw	r30, r24
 872:	80 81       	ld	r24, Z
 874:	91 81       	ldd	r25, Z+1	; 0x01
 876:	2a 81       	ldd	r18, Y+2	; 0x02
 878:	3b 81       	ldd	r19, Y+3	; 0x03
 87a:	82 0f       	add	r24, r18
 87c:	93 1f       	adc	r25, r19
 87e:	29 81       	ldd	r18, Y+1	; 0x01
 880:	fc 01       	movw	r30, r24
 882:	20 83       	st	Z, r18
 884:	8a 81       	ldd	r24, Y+2	; 0x02
 886:	9b 81       	ldd	r25, Y+3	; 0x03
 888:	8e 5f       	subi	r24, 0xFE	; 254
 88a:	9d 4f       	sbci	r25, 0xFD	; 253
 88c:	fc 01       	movw	r30, r24
 88e:	80 81       	ld	r24, Z
 890:	91 81       	ldd	r25, Z+1	; 0x01
 892:	9c 01       	movw	r18, r24
 894:	2f 5f       	subi	r18, 0xFF	; 255
 896:	3f 4f       	sbci	r19, 0xFF	; 255
 898:	8a 81       	ldd	r24, Y+2	; 0x02
 89a:	9b 81       	ldd	r25, Y+3	; 0x03
 89c:	8e 5f       	subi	r24, 0xFE	; 254
 89e:	9d 4f       	sbci	r25, 0xFD	; 253
 8a0:	fc 01       	movw	r30, r24
 8a2:	31 83       	std	Z+1, r19	; 0x01
 8a4:	20 83       	st	Z, r18
 8a6:	8a 81       	ldd	r24, Y+2	; 0x02
 8a8:	9b 81       	ldd	r25, Y+3	; 0x03
 8aa:	8e 5f       	subi	r24, 0xFE	; 254
 8ac:	9d 4f       	sbci	r25, 0xFD	; 253
 8ae:	fc 01       	movw	r30, r24
 8b0:	80 81       	ld	r24, Z
 8b2:	91 81       	ldd	r25, Z+1	; 0x01
 8b4:	81 15       	cp	r24, r1
 8b6:	92 40       	sbci	r25, 0x02	; 2
 8b8:	38 f0       	brcs	.+14     	; 0x8c8 <buff_put+0x108>
 8ba:	8a 81       	ldd	r24, Y+2	; 0x02
 8bc:	9b 81       	ldd	r25, Y+3	; 0x03
 8be:	8e 5f       	subi	r24, 0xFE	; 254
 8c0:	9d 4f       	sbci	r25, 0xFD	; 253
 8c2:	fc 01       	movw	r30, r24
 8c4:	11 82       	std	Z+1, r1	; 0x01
 8c6:	10 82       	st	Z, r1
 8c8:	81 ec       	ldi	r24, 0xC1	; 193
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	21 ec       	ldi	r18, 0xC1	; 193
 8ce:	30 e0       	ldi	r19, 0x00	; 0
 8d0:	f9 01       	movw	r30, r18
 8d2:	20 81       	ld	r18, Z
 8d4:	20 64       	ori	r18, 0x40	; 64
 8d6:	fc 01       	movw	r30, r24
 8d8:	20 83       	st	Z, r18
 8da:	81 ec       	ldi	r24, 0xC1	; 193
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	21 ec       	ldi	r18, 0xC1	; 193
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	f9 01       	movw	r30, r18
 8e4:	20 81       	ld	r18, Z
 8e6:	20 68       	ori	r18, 0x80	; 128
 8e8:	fc 01       	movw	r30, r24
 8ea:	20 83       	st	Z, r18
 8ec:	80 e0       	ldi	r24, 0x00	; 0
 8ee:	0f 90       	pop	r0
 8f0:	0f 90       	pop	r0
 8f2:	0f 90       	pop	r0
 8f4:	df 91       	pop	r29
 8f6:	cf 91       	pop	r28
 8f8:	08 95       	ret

000008fa <buff_get>:
 8fa:	cf 93       	push	r28
 8fc:	df 93       	push	r29
 8fe:	00 d0       	rcall	.+0      	; 0x900 <buff_get+0x6>
 900:	00 d0       	rcall	.+0      	; 0x902 <buff_get+0x8>
 902:	cd b7       	in	r28, 0x3d	; 61
 904:	de b7       	in	r29, 0x3e	; 62
 906:	9a 83       	std	Y+2, r25	; 0x02
 908:	89 83       	std	Y+1, r24	; 0x01
 90a:	7c 83       	std	Y+4, r23	; 0x04
 90c:	6b 83       	std	Y+3, r22	; 0x03
 90e:	81 ec       	ldi	r24, 0xC1	; 193
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	21 ec       	ldi	r18, 0xC1	; 193
 914:	30 e0       	ldi	r19, 0x00	; 0
 916:	f9 01       	movw	r30, r18
 918:	20 81       	ld	r18, Z
 91a:	2f 7b       	andi	r18, 0xBF	; 191
 91c:	fc 01       	movw	r30, r24
 91e:	20 83       	st	Z, r18
 920:	81 ec       	ldi	r24, 0xC1	; 193
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	21 ec       	ldi	r18, 0xC1	; 193
 926:	30 e0       	ldi	r19, 0x00	; 0
 928:	f9 01       	movw	r30, r18
 92a:	20 81       	ld	r18, Z
 92c:	2f 77       	andi	r18, 0x7F	; 127
 92e:	fc 01       	movw	r30, r24
 930:	20 83       	st	Z, r18
 932:	8b 81       	ldd	r24, Y+3	; 0x03
 934:	9c 81       	ldd	r25, Y+4	; 0x04
 936:	9e 5f       	subi	r25, 0xFE	; 254
 938:	fc 01       	movw	r30, r24
 93a:	20 81       	ld	r18, Z
 93c:	31 81       	ldd	r19, Z+1	; 0x01
 93e:	8b 81       	ldd	r24, Y+3	; 0x03
 940:	9c 81       	ldd	r25, Y+4	; 0x04
 942:	8e 5f       	subi	r24, 0xFE	; 254
 944:	9d 4f       	sbci	r25, 0xFD	; 253
 946:	fc 01       	movw	r30, r24
 948:	80 81       	ld	r24, Z
 94a:	91 81       	ldd	r25, Z+1	; 0x01
 94c:	28 17       	cp	r18, r24
 94e:	39 07       	cpc	r19, r25
 950:	a1 f4       	brne	.+40     	; 0x97a <buff_get+0x80>
 952:	81 ec       	ldi	r24, 0xC1	; 193
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	21 ec       	ldi	r18, 0xC1	; 193
 958:	30 e0       	ldi	r19, 0x00	; 0
 95a:	f9 01       	movw	r30, r18
 95c:	20 81       	ld	r18, Z
 95e:	20 64       	ori	r18, 0x40	; 64
 960:	fc 01       	movw	r30, r24
 962:	20 83       	st	Z, r18
 964:	81 ec       	ldi	r24, 0xC1	; 193
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	21 ec       	ldi	r18, 0xC1	; 193
 96a:	30 e0       	ldi	r19, 0x00	; 0
 96c:	f9 01       	movw	r30, r18
 96e:	20 81       	ld	r18, Z
 970:	20 68       	ori	r18, 0x80	; 128
 972:	fc 01       	movw	r30, r24
 974:	20 83       	st	Z, r18
 976:	81 e0       	ldi	r24, 0x01	; 1
 978:	41 c0       	rjmp	.+130    	; 0x9fc <buff_get+0x102>
 97a:	8b 81       	ldd	r24, Y+3	; 0x03
 97c:	9c 81       	ldd	r25, Y+4	; 0x04
 97e:	9e 5f       	subi	r25, 0xFE	; 254
 980:	fc 01       	movw	r30, r24
 982:	80 81       	ld	r24, Z
 984:	91 81       	ldd	r25, Z+1	; 0x01
 986:	2b 81       	ldd	r18, Y+3	; 0x03
 988:	3c 81       	ldd	r19, Y+4	; 0x04
 98a:	82 0f       	add	r24, r18
 98c:	93 1f       	adc	r25, r19
 98e:	fc 01       	movw	r30, r24
 990:	20 81       	ld	r18, Z
 992:	89 81       	ldd	r24, Y+1	; 0x01
 994:	9a 81       	ldd	r25, Y+2	; 0x02
 996:	fc 01       	movw	r30, r24
 998:	20 83       	st	Z, r18
 99a:	8b 81       	ldd	r24, Y+3	; 0x03
 99c:	9c 81       	ldd	r25, Y+4	; 0x04
 99e:	9e 5f       	subi	r25, 0xFE	; 254
 9a0:	fc 01       	movw	r30, r24
 9a2:	80 81       	ld	r24, Z
 9a4:	91 81       	ldd	r25, Z+1	; 0x01
 9a6:	9c 01       	movw	r18, r24
 9a8:	2f 5f       	subi	r18, 0xFF	; 255
 9aa:	3f 4f       	sbci	r19, 0xFF	; 255
 9ac:	8b 81       	ldd	r24, Y+3	; 0x03
 9ae:	9c 81       	ldd	r25, Y+4	; 0x04
 9b0:	9e 5f       	subi	r25, 0xFE	; 254
 9b2:	fc 01       	movw	r30, r24
 9b4:	31 83       	std	Z+1, r19	; 0x01
 9b6:	20 83       	st	Z, r18
 9b8:	8b 81       	ldd	r24, Y+3	; 0x03
 9ba:	9c 81       	ldd	r25, Y+4	; 0x04
 9bc:	9e 5f       	subi	r25, 0xFE	; 254
 9be:	fc 01       	movw	r30, r24
 9c0:	80 81       	ld	r24, Z
 9c2:	91 81       	ldd	r25, Z+1	; 0x01
 9c4:	81 15       	cp	r24, r1
 9c6:	92 40       	sbci	r25, 0x02	; 2
 9c8:	30 f0       	brcs	.+12     	; 0x9d6 <buff_get+0xdc>
 9ca:	8b 81       	ldd	r24, Y+3	; 0x03
 9cc:	9c 81       	ldd	r25, Y+4	; 0x04
 9ce:	9e 5f       	subi	r25, 0xFE	; 254
 9d0:	fc 01       	movw	r30, r24
 9d2:	11 82       	std	Z+1, r1	; 0x01
 9d4:	10 82       	st	Z, r1
 9d6:	81 ec       	ldi	r24, 0xC1	; 193
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	21 ec       	ldi	r18, 0xC1	; 193
 9dc:	30 e0       	ldi	r19, 0x00	; 0
 9de:	f9 01       	movw	r30, r18
 9e0:	20 81       	ld	r18, Z
 9e2:	20 64       	ori	r18, 0x40	; 64
 9e4:	fc 01       	movw	r30, r24
 9e6:	20 83       	st	Z, r18
 9e8:	81 ec       	ldi	r24, 0xC1	; 193
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	21 ec       	ldi	r18, 0xC1	; 193
 9ee:	30 e0       	ldi	r19, 0x00	; 0
 9f0:	f9 01       	movw	r30, r18
 9f2:	20 81       	ld	r18, Z
 9f4:	20 68       	ori	r18, 0x80	; 128
 9f6:	fc 01       	movw	r30, r24
 9f8:	20 83       	st	Z, r18
 9fa:	80 e0       	ldi	r24, 0x00	; 0
 9fc:	0f 90       	pop	r0
 9fe:	0f 90       	pop	r0
 a00:	0f 90       	pop	r0
 a02:	0f 90       	pop	r0
 a04:	df 91       	pop	r29
 a06:	cf 91       	pop	r28
 a08:	08 95       	ret

00000a0a <uart_init>:
 a0a:	cf 93       	push	r28
 a0c:	df 93       	push	r29
 a0e:	00 d0       	rcall	.+0      	; 0xa10 <uart_init+0x6>
 a10:	cd b7       	in	r28, 0x3d	; 61
 a12:	de b7       	in	r29, 0x3e	; 62
 a14:	87 e6       	ldi	r24, 0x67	; 103
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	9a 83       	std	Y+2, r25	; 0x02
 a1a:	89 83       	std	Y+1, r24	; 0x01
 a1c:	85 ec       	ldi	r24, 0xC5	; 197
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	29 81       	ldd	r18, Y+1	; 0x01
 a22:	3a 81       	ldd	r19, Y+2	; 0x02
 a24:	23 2f       	mov	r18, r19
 a26:	33 27       	eor	r19, r19
 a28:	fc 01       	movw	r30, r24
 a2a:	20 83       	st	Z, r18
 a2c:	84 ec       	ldi	r24, 0xC4	; 196
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	29 81       	ldd	r18, Y+1	; 0x01
 a32:	fc 01       	movw	r30, r24
 a34:	20 83       	st	Z, r18
 a36:	81 ec       	ldi	r24, 0xC1	; 193
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	28 e1       	ldi	r18, 0x18	; 24
 a3c:	fc 01       	movw	r30, r24
 a3e:	20 83       	st	Z, r18
 a40:	82 ec       	ldi	r24, 0xC2	; 194
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	26 e0       	ldi	r18, 0x06	; 6
 a46:	fc 01       	movw	r30, r24
 a48:	20 83       	st	Z, r18
 a4a:	00 00       	nop
 a4c:	0f 90       	pop	r0
 a4e:	0f 90       	pop	r0
 a50:	df 91       	pop	r29
 a52:	cf 91       	pop	r28
 a54:	08 95       	ret

00000a56 <uart_init_isr>:
 a56:	cf 93       	push	r28
 a58:	df 93       	push	r29
 a5a:	cd b7       	in	r28, 0x3d	; 61
 a5c:	de b7       	in	r29, 0x3e	; 62
 a5e:	d5 df       	rcall	.-86     	; 0xa0a <uart_init>
 a60:	81 ec       	ldi	r24, 0xC1	; 193
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	21 ec       	ldi	r18, 0xC1	; 193
 a66:	30 e0       	ldi	r19, 0x00	; 0
 a68:	f9 01       	movw	r30, r18
 a6a:	20 81       	ld	r18, Z
 a6c:	20 64       	ori	r18, 0x40	; 64
 a6e:	fc 01       	movw	r30, r24
 a70:	20 83       	st	Z, r18
 a72:	81 ec       	ldi	r24, 0xC1	; 193
 a74:	90 e0       	ldi	r25, 0x00	; 0
 a76:	21 ec       	ldi	r18, 0xC1	; 193
 a78:	30 e0       	ldi	r19, 0x00	; 0
 a7a:	f9 01       	movw	r30, r18
 a7c:	20 81       	ld	r18, Z
 a7e:	20 68       	ori	r18, 0x80	; 128
 a80:	fc 01       	movw	r30, r24
 a82:	20 83       	st	Z, r18
 a84:	00 00       	nop
 a86:	df 91       	pop	r29
 a88:	cf 91       	pop	r28
 a8a:	08 95       	ret

00000a8c <__vector_22>:

/**
 ISR for USART Transmit Complete flag
 */
ISR(USART0_TX_vect){
 a8c:	1f 92       	push	r1
 a8e:	0f 92       	push	r0
 a90:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 a94:	0f 92       	push	r0
 a96:	11 24       	eor	r1, r1
 a98:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 a9c:	0f 92       	push	r0
 a9e:	2f 93       	push	r18
 aa0:	3f 93       	push	r19
 aa2:	4f 93       	push	r20
 aa4:	5f 93       	push	r21
 aa6:	6f 93       	push	r22
 aa8:	7f 93       	push	r23
 aaa:	8f 93       	push	r24
 aac:	9f 93       	push	r25
 aae:	af 93       	push	r26
 ab0:	bf 93       	push	r27
 ab2:	ef 93       	push	r30
 ab4:	ff 93       	push	r31
 ab6:	cf 93       	push	r28
 ab8:	df 93       	push	r29
 aba:	1f 92       	push	r1
 abc:	cd b7       	in	r28, 0x3d	; 61
 abe:	de b7       	in	r29, 0x3e	; 62
    unsigned char pByte;
    // Pull one byte from buffer and store it in pByte
    if (buff_get(&pByte, &bufferSend) == 0) {
 ac0:	65 e2       	ldi	r22, 0x25	; 37
 ac2:	71 e0       	ldi	r23, 0x01	; 1
 ac4:	ce 01       	movw	r24, r28
 ac6:	01 96       	adiw	r24, 0x01	; 1
 ac8:	18 df       	rcall	.-464    	; 0x8fa <buff_get>
 aca:	88 23       	and	r24, r24
 acc:	29 f4       	brne	.+10     	; 0xad8 <__vector_22+0x4c>
        // Send byte
        UDR0 = pByte;
 ace:	86 ec       	ldi	r24, 0xC6	; 198
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	29 81       	ldd	r18, Y+1	; 0x01
 ad4:	fc 01       	movw	r30, r24
 ad6:	20 83       	st	Z, r18
    }
}
 ad8:	00 00       	nop
 ada:	0f 90       	pop	r0
 adc:	df 91       	pop	r29
 ade:	cf 91       	pop	r28
 ae0:	ff 91       	pop	r31
 ae2:	ef 91       	pop	r30
 ae4:	bf 91       	pop	r27
 ae6:	af 91       	pop	r26
 ae8:	9f 91       	pop	r25
 aea:	8f 91       	pop	r24
 aec:	7f 91       	pop	r23
 aee:	6f 91       	pop	r22
 af0:	5f 91       	pop	r21
 af2:	4f 91       	pop	r20
 af4:	3f 91       	pop	r19
 af6:	2f 91       	pop	r18
 af8:	0f 90       	pop	r0
 afa:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 afe:	0f 90       	pop	r0
 b00:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 b04:	0f 90       	pop	r0
 b06:	1f 90       	pop	r1
 b08:	18 95       	reti

00000b0a <__vector_20>:

ISR(USART0_RX_vect){
 b0a:	1f 92       	push	r1
 b0c:	0f 92       	push	r0
 b0e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 b12:	0f 92       	push	r0
 b14:	11 24       	eor	r1, r1
 b16:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 b1a:	0f 92       	push	r0
 b1c:	2f 93       	push	r18
 b1e:	3f 93       	push	r19
 b20:	4f 93       	push	r20
 b22:	5f 93       	push	r21
 b24:	6f 93       	push	r22
 b26:	7f 93       	push	r23
 b28:	8f 93       	push	r24
 b2a:	9f 93       	push	r25
 b2c:	af 93       	push	r26
 b2e:	bf 93       	push	r27
 b30:	ef 93       	push	r30
 b32:	ff 93       	push	r31
 b34:	cf 93       	push	r28
 b36:	df 93       	push	r29
 b38:	cd b7       	in	r28, 0x3d	; 61
 b3a:	de b7       	in	r29, 0x3e	; 62
    // Put received byte to bufferRecv (will read but don't save the value if buffer overflows)
    buff_put(UDR0, &bufferRecv);
 b3c:	86 ec       	ldi	r24, 0xC6	; 198
 b3e:	90 e0       	ldi	r25, 0x00	; 0
 b40:	fc 01       	movw	r30, r24
 b42:	80 81       	ld	r24, Z
 b44:	69 e2       	ldi	r22, 0x29	; 41
 b46:	73 e0       	ldi	r23, 0x03	; 3
 b48:	3b de       	rcall	.-906    	; 0x7c0 <buff_put>
}
 b4a:	00 00       	nop
 b4c:	df 91       	pop	r29
 b4e:	cf 91       	pop	r28
 b50:	ff 91       	pop	r31
 b52:	ef 91       	pop	r30
 b54:	bf 91       	pop	r27
 b56:	af 91       	pop	r26
 b58:	9f 91       	pop	r25
 b5a:	8f 91       	pop	r24
 b5c:	7f 91       	pop	r23
 b5e:	6f 91       	pop	r22
 b60:	5f 91       	pop	r21
 b62:	4f 91       	pop	r20
 b64:	3f 91       	pop	r19
 b66:	2f 91       	pop	r18
 b68:	0f 90       	pop	r0
 b6a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 b6e:	0f 90       	pop	r0
 b70:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 b74:	0f 90       	pop	r0
 b76:	1f 90       	pop	r1
 b78:	18 95       	reti

00000b7a <_exit>:
 b7a:	f8 94       	cli

00000b7c <__stop_program>:
 b7c:	ff cf       	rjmp	.-2      	; 0xb7c <__stop_program>
