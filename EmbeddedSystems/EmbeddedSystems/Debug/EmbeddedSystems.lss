
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000284  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aa1  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077f  00000000  00000000  00000f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000735  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a4  00000000  00000000  00001df0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c1  00000000  00000000  00002194  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000680  00000000  00000000  00002655  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00002cd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	41 c0       	rjmp	.+130    	; 0x88 <__bad_interrupt>
   6:	00 00       	nop
   8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
   a:	00 00       	nop
   c:	3d c0       	rjmp	.+122    	; 0x88 <__bad_interrupt>
   e:	00 00       	nop
  10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
  12:	00 00       	nop
  14:	39 c0       	rjmp	.+114    	; 0x88 <__bad_interrupt>
  16:	00 00       	nop
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
  1e:	00 00       	nop
  20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c0       	rjmp	.+98     	; 0x88 <__bad_interrupt>
  26:	00 00       	nop
  28:	2f c0       	rjmp	.+94     	; 0x88 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2d c0       	rjmp	.+90     	; 0x88 <__bad_interrupt>
  2e:	00 00       	nop
  30:	2b c0       	rjmp	.+86     	; 0x88 <__bad_interrupt>
  32:	00 00       	nop
  34:	29 c0       	rjmp	.+82     	; 0x88 <__bad_interrupt>
  36:	00 00       	nop
  38:	03 c1       	rjmp	.+518    	; 0x240 <__vector_14>
  3a:	00 00       	nop
  3c:	25 c0       	rjmp	.+74     	; 0x88 <__bad_interrupt>
  3e:	00 00       	nop
  40:	23 c0       	rjmp	.+70     	; 0x88 <__bad_interrupt>
  42:	00 00       	nop
  44:	21 c0       	rjmp	.+66     	; 0x88 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c0       	rjmp	.+62     	; 0x88 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1d c0       	rjmp	.+58     	; 0x88 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1b c0       	rjmp	.+54     	; 0x88 <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c0       	rjmp	.+50     	; 0x88 <__bad_interrupt>
  56:	00 00       	nop
  58:	17 c0       	rjmp	.+46     	; 0x88 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c0       	rjmp	.+42     	; 0x88 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c0       	rjmp	.+38     	; 0x88 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c0       	rjmp	.+34     	; 0x88 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	3f d0       	rcall	.+126    	; 0x104 <main>
  86:	fc c0       	rjmp	.+504    	; 0x280 <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <Led_init>:

#include "Led.h"

void Led_init(void) {
  8a:	cf 93       	push	r28
  8c:	df 93       	push	r29
  8e:	cd b7       	in	r28, 0x3d	; 61
  90:	de b7       	in	r29, 0x3e	; 62
    // Set PORTB to outputs
    DDRB = 0xFF;
  92:	84 e2       	ldi	r24, 0x24	; 36
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	fc 01       	movw	r30, r24
  9a:	20 83       	st	Z, r18
    PORTB = 0x00;
  9c:	85 e2       	ldi	r24, 0x25	; 37
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	fc 01       	movw	r30, r24
  a2:	10 82       	st	Z, r1
}
  a4:	00 00       	nop
  a6:	df 91       	pop	r29
  a8:	cf 91       	pop	r28
  aa:	08 95       	ret

000000ac <Taster_init>:
 ---------------------
 - DDR Reg has to be set to 0
 - PORT Reg has to be set to 1
 -> Pin is input with pull-up
 */
void Taster_init() {
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
    // set to inputs
    DDRC &= ~(1 << 2);
  b4:	87 e2       	ldi	r24, 0x27	; 39
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	27 e2       	ldi	r18, 0x27	; 39
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	f9 01       	movw	r30, r18
  be:	20 81       	ld	r18, Z
  c0:	2b 7f       	andi	r18, 0xFB	; 251
  c2:	fc 01       	movw	r30, r24
  c4:	20 83       	st	Z, r18
    DDRD &= ~( (1 << 7) | (1 << 6) | (1 << 5) );
  c6:	8a e2       	ldi	r24, 0x2A	; 42
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	2a e2       	ldi	r18, 0x2A	; 42
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	f9 01       	movw	r30, r18
  d0:	20 81       	ld	r18, Z
  d2:	2f 71       	andi	r18, 0x1F	; 31
  d4:	fc 01       	movw	r30, r24
  d6:	20 83       	st	Z, r18
    
    // enable pull-up
    PORTC |= (1 << 2);
  d8:	88 e2       	ldi	r24, 0x28	; 40
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	28 e2       	ldi	r18, 0x28	; 40
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	f9 01       	movw	r30, r18
  e2:	20 81       	ld	r18, Z
  e4:	24 60       	ori	r18, 0x04	; 4
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
    PORTD |= (1 << 7) | (1 << 6) | (1 << 5);
  ea:	8b e2       	ldi	r24, 0x2B	; 43
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	2b e2       	ldi	r18, 0x2B	; 43
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	f9 01       	movw	r30, r18
  f4:	20 81       	ld	r18, Z
  f6:	20 6e       	ori	r18, 0xE0	; 224
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18
}
  fc:	00 00       	nop
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <main>:





int main(void) {
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	00 d0       	rcall	.+0      	; 0x10a <main+0x6>
 10a:	1f 92       	push	r1
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
	
    Led_init();
 110:	bc df       	rcall	.-136    	; 0x8a <Led_init>
	Taster_init();
 112:	cc df       	rcall	.-104    	; 0xac <Taster_init>
    Timer_init();
 114:	23 d0       	rcall	.+70     	; 0x15c <Timer_init>
 116:	78 94       	sei
	sei();
 118:	19 82       	std	Y+1, r1	; 0x01
	
    uint8_t state_testBoard = 0;
    uint16_t last_time = 0;
 11a:	1b 82       	std	Y+3, r1	; 0x03
 11c:	1a 82       	std	Y+2, r1	; 0x02
    Toggle PORTB every 500ms -> LEDs blink with 1 Hz, accuracy: +- 70 us
    (There could be a lag if timer_count was cleared, approximately every 65,5 seconds)
    */
    while (1) {
        // Check if time difference is more than 500 ms
        if ( (Timer_getTick() - last_time) >= 1000 ) {
 11e:	7c d0       	rcall	.+248    	; 0x218 <Timer_getTick>
 120:	9c 01       	movw	r18, r24
 122:	8a 81       	ldd	r24, Y+2	; 0x02
 124:	9b 81       	ldd	r25, Y+3	; 0x03
 126:	a9 01       	movw	r20, r18
 128:	48 1b       	sub	r20, r24
 12a:	59 0b       	sbc	r21, r25
 12c:	ca 01       	movw	r24, r20
 12e:	88 3e       	cpi	r24, 0xE8	; 232
 130:	93 40       	sbci	r25, 0x03	; 3
 132:	a8 f3       	brcs	.-22     	; 0x11e <main+0x1a>
            last_time = Timer_getTick();
 134:	71 d0       	rcall	.+226    	; 0x218 <Timer_getTick>
 136:	9b 83       	std	Y+3, r25	; 0x03
 138:	8a 83       	std	Y+2, r24	; 0x02
 13a:	89 81       	ldd	r24, Y+1	; 0x01
            
            // toggle leds
            if (state_testBoard) {
 13c:	88 23       	and	r24, r24
 13e:	31 f0       	breq	.+12     	; 0x14c <main+0x48>
 140:	19 82       	std	Y+1, r1	; 0x01
                state_testBoard = 0;
 142:	85 e2       	ldi	r24, 0x25	; 37
                PORTB = 0x00;
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	fc 01       	movw	r30, r24
 148:	10 82       	st	Z, r1
 14a:	e9 cf       	rjmp	.-46     	; 0x11e <main+0x1a>
 14c:	81 e0       	ldi	r24, 0x01	; 1
            }else {
                state_testBoard = 1;
 14e:	89 83       	std	Y+1, r24	; 0x01
 150:	85 e2       	ldi	r24, 0x25	; 37
                PORTB = 0xFF;
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	2f ef       	ldi	r18, 0xFF	; 255
 156:	fc 01       	movw	r30, r24
 158:	20 83       	st	Z, r18
 15a:	e1 cf       	rjmp	.-62     	; 0x11e <main+0x1a>

0000015c <Timer_init>:
            }
        }
        
        
        //playground();
    }
 15c:	cf 93       	push	r28

#include "Timer.h"

volatile uint16_t timer_count = 0;

void Timer_init() { // datasheet page 97
 15e:	df 93       	push	r29
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
    // set mode to clear timer on compare (CTC)
    TCCR0B &= ~(1 << WGM02);
 164:	85 e4       	ldi	r24, 0x45	; 69
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	25 e4       	ldi	r18, 0x45	; 69
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	f9 01       	movw	r30, r18
 16e:	20 81       	ld	r18, Z
 170:	27 7f       	andi	r18, 0xF7	; 247
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
    TCCR0A |= (1 << WGM01);
 176:	84 e4       	ldi	r24, 0x44	; 68
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	24 e4       	ldi	r18, 0x44	; 68
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	f9 01       	movw	r30, r18
 180:	20 81       	ld	r18, Z
 182:	22 60       	ori	r18, 0x02	; 2
 184:	fc 01       	movw	r30, r24
 186:	20 83       	st	Z, r18
    TCCR0A &= ~(1 << WGM00);
 188:	84 e4       	ldi	r24, 0x44	; 68
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	24 e4       	ldi	r18, 0x44	; 68
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	f9 01       	movw	r30, r18
 192:	20 81       	ld	r18, Z
 194:	2e 7f       	andi	r18, 0xFE	; 254
 196:	fc 01       	movw	r30, r24
 198:	20 83       	st	Z, r18
    
    // set OCR0A-reg (top value of timer)
    OCR0A = 0x7C;   // dez 124; range 0 - 124 -> 125 cycles till interrupt
 19a:	87 e4       	ldi	r24, 0x47	; 71
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	2c e7       	ldi	r18, 0x7C	; 124
 1a0:	fc 01       	movw	r30, r24
 1a2:	20 83       	st	Z, r18
    
    // set prescaler to 1/8
    TCCR0B &= ~(1 << CS02);
 1a4:	85 e4       	ldi	r24, 0x45	; 69
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	25 e4       	ldi	r18, 0x45	; 69
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	f9 01       	movw	r30, r18
 1ae:	20 81       	ld	r18, Z
 1b0:	2b 7f       	andi	r18, 0xFB	; 251
 1b2:	fc 01       	movw	r30, r24
 1b4:	20 83       	st	Z, r18
    TCCR0B |= (1 << CS01);
 1b6:	85 e4       	ldi	r24, 0x45	; 69
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	25 e4       	ldi	r18, 0x45	; 69
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	f9 01       	movw	r30, r18
 1c0:	20 81       	ld	r18, Z
 1c2:	22 60       	ori	r18, 0x02	; 2
 1c4:	fc 01       	movw	r30, r24
 1c6:	20 83       	st	Z, r18
    TCCR0B &= ~(1 << CS00);
 1c8:	85 e4       	ldi	r24, 0x45	; 69
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	25 e4       	ldi	r18, 0x45	; 69
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	f9 01       	movw	r30, r18
 1d2:	20 81       	ld	r18, Z
 1d4:	2e 7f       	andi	r18, 0xFE	; 254
 1d6:	fc 01       	movw	r30, r24
 1d8:	20 83       	st	Z, r18
	
	
	TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
 1da:	8e e6       	ldi	r24, 0x6E	; 110
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	2e e6       	ldi	r18, 0x6E	; 110
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	f9 01       	movw	r30, r18
 1e4:	20 81       	ld	r18, Z
 1e6:	2b 7f       	andi	r18, 0xFB	; 251
 1e8:	fc 01       	movw	r30, r24
 1ea:	20 83       	st	Z, r18
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
 1ec:	8e e6       	ldi	r24, 0x6E	; 110
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	2e e6       	ldi	r18, 0x6E	; 110
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	f9 01       	movw	r30, r18
 1f6:	20 81       	ld	r18, Z
 1f8:	22 60       	ori	r18, 0x02	; 2
 1fa:	fc 01       	movw	r30, r24
 1fc:	20 83       	st	Z, r18
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
 1fe:	8e e6       	ldi	r24, 0x6E	; 110
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	2e e6       	ldi	r18, 0x6E	; 110
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	f9 01       	movw	r30, r18
 208:	20 81       	ld	r18, Z
 20a:	2e 7f       	andi	r18, 0xFE	; 254
 20c:	fc 01       	movw	r30, r24
 20e:	20 83       	st	Z, r18
}
 210:	00 00       	nop
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <Timer_getTick>:

uint16_t Timer_getTick() {
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	00 d0       	rcall	.+0      	; 0x21e <Timer_getTick+0x6>
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
    // disable global interrupt
    cli();
 222:	f8 94       	cli
    
    // store timer_count in a temp int that can't get changed by ISR
    uint16_t temp_timer_count = timer_count;
 224:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 228:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 22c:	9a 83       	std	Y+2, r25	; 0x02
 22e:	89 83       	std	Y+1, r24	; 0x01
    
    // enable global interrupt
    sei();
 230:	78 94       	sei

    return temp_timer_count;
 232:	89 81       	ldd	r24, Y+1	; 0x01
 234:	9a 81       	ldd	r25, Y+2	; 0x02
}
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <__vector_14>:
 ( not used atm)
 Timer compare A interrput:
 - increase timer_count
 - if timer_count is at max of uint16, set it to 0
 */
ISR(TIMER0_COMPA_vect){
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	8f 93       	push	r24
 24e:	9f 93       	push	r25
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	cd b7       	in	r28, 0x3d	; 61
 256:	de b7       	in	r29, 0x3e	; 62
    timer_count++;
 258:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 25c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 266:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 26a:	00 00       	nop
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	9f 91       	pop	r25
 272:	8f 91       	pop	r24
 274:	0f 90       	pop	r0
 276:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 27a:	0f 90       	pop	r0
 27c:	1f 90       	pop	r1
 27e:	18 95       	reti

00000280 <_exit>:
 280:	f8 94       	cli

00000282 <__stop_program>:
 282:	ff cf       	rjmp	.-2      	; 0x282 <__stop_program>
