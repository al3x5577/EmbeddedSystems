
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00001352  000013e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001352  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000432  0080010c  0080010c  000013f2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000013f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001450  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00001490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000160c  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000db7  00000000  00000000  00002cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000114e  00000000  00000000  00003a93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007f8  00000000  00000000  00004be4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f7  00000000  00000000  000053dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fc3  00000000  00000000  00005bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00006b96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
       2:	00 00       	nop
       4:	68 c0       	rjmp	.+208    	; 0xd6 <__bad_interrupt>
       6:	00 00       	nop
       8:	66 c0       	rjmp	.+204    	; 0xd6 <__bad_interrupt>
       a:	00 00       	nop
       c:	64 c0       	rjmp	.+200    	; 0xd6 <__bad_interrupt>
       e:	00 00       	nop
      10:	62 c0       	rjmp	.+196    	; 0xd6 <__bad_interrupt>
      12:	00 00       	nop
      14:	60 c0       	rjmp	.+192    	; 0xd6 <__bad_interrupt>
      16:	00 00       	nop
      18:	5e c0       	rjmp	.+188    	; 0xd6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5c c0       	rjmp	.+184    	; 0xd6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5a c0       	rjmp	.+180    	; 0xd6 <__bad_interrupt>
      22:	00 00       	nop
      24:	39 c4       	rjmp	.+2162   	; 0x898 <__vector_9>
      26:	00 00       	nop
      28:	56 c0       	rjmp	.+172    	; 0xd6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	54 c0       	rjmp	.+168    	; 0xd6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	52 c0       	rjmp	.+164    	; 0xd6 <__bad_interrupt>
      32:	00 00       	nop
      34:	50 c0       	rjmp	.+160    	; 0xd6 <__bad_interrupt>
      36:	00 00       	nop
      38:	4e c0       	rjmp	.+156    	; 0xd6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4c c0       	rjmp	.+152    	; 0xd6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0b c4       	rjmp	.+2070   	; 0x858 <__vector_16>
      42:	00 00       	nop
      44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	44 c0       	rjmp	.+136    	; 0xd6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	59 c6       	rjmp	.+3250   	; 0xd04 <__vector_20>
      52:	00 00       	nop
      54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
      56:	00 00       	nop
      58:	16 c6       	rjmp	.+3116   	; 0xc86 <__vector_22>
      5a:	00 00       	nop
      5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	55 c0       	rjmp	.+170    	; 0x10c <__vector_24>
      62:	00 00       	nop
      64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
      66:	00 00       	nop
      68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	48 01       	movw	r8, r16
      8e:	59 01       	movw	r10, r18
      90:	6a 01       	movw	r12, r20
      92:	7b 01       	movw	r14, r22
      94:	95 01       	movw	r18, r10
      96:	a5 01       	movw	r20, r10
      98:	b5 01       	movw	r22, r10

0000009a <__ctors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d0 e4       	ldi	r29, 0x40	; 64
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
      a6:	11 e0       	ldi	r17, 0x01	; 1
      a8:	a0 e0       	ldi	r26, 0x00	; 0
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	e2 e5       	ldi	r30, 0x52	; 82
      ae:	f3 e1       	ldi	r31, 0x13	; 19
      b0:	00 e0       	ldi	r16, 0x00	; 0
      b2:	0b bf       	out	0x3b, r16	; 59
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
      b6:	07 90       	elpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	ac 30       	cpi	r26, 0x0C	; 12
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
      c0:	25 e0       	ldi	r18, 0x05	; 5
      c2:	ac e0       	ldi	r26, 0x0C	; 12
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	ae 33       	cpi	r26, 0x3E	; 62
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	2a d2       	rcall	.+1108   	; 0x526 <main>
      d2:	0c 94 a7 09 	jmp	0x134e	; 0x134e <_exit>

000000d6 <__bad_interrupt>:
      d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <adc_init>:
    // Make average
    avg = avg / 8;
    
    // Return a 16 bit value
    return (avg & 0xffff);
}
      d8:	cf 93       	push	r28
      da:	df 93       	push	r29
      dc:	cd b7       	in	r28, 0x3d	; 61
      de:	de b7       	in	r29, 0x3e	; 62
      e0:	8a e7       	ldi	r24, 0x7A	; 122
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	2a e7       	ldi	r18, 0x7A	; 122
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	f9 01       	movw	r30, r18
      ea:	20 81       	ld	r18, Z
      ec:	27 60       	ori	r18, 0x07	; 7
      ee:	fc 01       	movw	r30, r24
      f0:	20 83       	st	Z, r18
      f2:	8a e7       	ldi	r24, 0x7A	; 122
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	2a e7       	ldi	r18, 0x7A	; 122
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	f9 01       	movw	r30, r18
      fc:	20 81       	ld	r18, Z
      fe:	28 6c       	ori	r18, 0xC8	; 200
     100:	fc 01       	movw	r30, r24
     102:	20 83       	st	Z, r18
     104:	00 00       	nop
     106:	df 91       	pop	r29
     108:	cf 91       	pop	r28
     10a:	08 95       	ret

0000010c <__vector_24>:

ISR(ADC_vect){
     10c:	1f 92       	push	r1
     10e:	0f 92       	push	r0
     110:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     114:	0f 92       	push	r0
     116:	11 24       	eor	r1, r1
     118:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     11c:	0f 92       	push	r0
     11e:	2f 93       	push	r18
     120:	3f 93       	push	r19
     122:	8f 93       	push	r24
     124:	9f 93       	push	r25
     126:	ef 93       	push	r30
     128:	ff 93       	push	r31
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	00 d0       	rcall	.+0      	; 0x130 <__vector_24+0x24>
     130:	cd b7       	in	r28, 0x3d	; 61
     132:	de b7       	in	r29, 0x3e	; 62
    // Pull data from AD conversion
    uint16_t res = ADC;
     134:	88 e7       	ldi	r24, 0x78	; 120
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	fc 01       	movw	r30, r24
     13a:	80 81       	ld	r24, Z
     13c:	91 81       	ldd	r25, Z+1	; 0x01
     13e:	9a 83       	std	Y+2, r25	; 0x02
     140:	89 83       	std	Y+1, r24	; 0x01
#ifdef DEBUG_LEDS_ADC
    Led3_Off();
#endif
    
    // Switch between LM35 and Poti
    switch (ADMUX & (1 << MUX0)) {
     142:	8c e7       	ldi	r24, 0x7C	; 124
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	fc 01       	movw	r30, r24
     148:	80 81       	ld	r24, Z
     14a:	88 2f       	mov	r24, r24
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	81 70       	andi	r24, 0x01	; 1
     150:	99 27       	eor	r25, r25
     152:	00 97       	sbiw	r24, 0x00	; 0
     154:	19 f0       	breq	.+6      	; 0x15c <__vector_24+0x50>
     156:	01 97       	sbiw	r24, 0x01	; 1
     158:	b9 f1       	breq	.+110    	; 0x1c8 <__vector_24+0xbc>
#endif
            }
            break;
            
        default:
            break;
     15a:	63 c0       	rjmp	.+198    	; 0x222 <__vector_24+0x116>
    
    // Switch between LM35 and Poti
    switch (ADMUX & (1 << MUX0)) {
        case 0: // LM35
            
            if (index_LM35 == 42) {
     15c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     160:	8a 32       	cpi	r24, 0x2A	; 42
     162:	19 f4       	brne	.+6      	; 0x16a <__vector_24+0x5e>
                // Trash first conversion
                index_LM35 = 0;
     164:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
                
#ifdef DEBUG_LEDS_ADC
                Led4_Off();
#endif
            }
            break;
     168:	5c c0       	rjmp	.+184    	; 0x222 <__vector_24+0x116>
                // Trash first conversion
                index_LM35 = 0;
#ifdef DEBUG_LEDS_ADC
                Led4_On();
#endif
            }else if (index_LM35 >= 0 && index_LM35 <= 7) {
     16a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     16e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     172:	88 30       	cpi	r24, 0x08	; 8
     174:	98 f4       	brcc	.+38     	; 0x19c <__vector_24+0x90>
                // Store 8 AD conversions in the Array
                LM35_Array[index_LM35] = res;
     176:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     17a:	88 2f       	mov	r24, r24
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	88 0f       	add	r24, r24
     180:	99 1f       	adc	r25, r25
     182:	84 5f       	subi	r24, 0xF4	; 244
     184:	9e 4f       	sbci	r25, 0xFE	; 254
     186:	29 81       	ldd	r18, Y+1	; 0x01
     188:	3a 81       	ldd	r19, Y+2	; 0x02
     18a:	fc 01       	movw	r30, r24
     18c:	31 83       	std	Z+1, r19	; 0x01
     18e:	20 83       	st	Z, r18
                index_LM35++;
     190:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     194:	8f 5f       	subi	r24, 0xFF	; 255
     196:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
                
#ifdef DEBUG_LEDS_ADC
                Led4_Off();
#endif
            }
            break;
     19a:	43 c0       	rjmp	.+134    	; 0x222 <__vector_24+0x116>
                // Store 8 AD conversions in the Array
                LM35_Array[index_LM35] = res;
                index_LM35++;
            }else {
                // Switch to Poti
                ADMUX &= ~(30); // Set MUX1..4 to 0
     19c:	8c e7       	ldi	r24, 0x7C	; 124
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	2c e7       	ldi	r18, 0x7C	; 124
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	f9 01       	movw	r30, r18
     1a6:	20 81       	ld	r18, Z
     1a8:	21 7e       	andi	r18, 0xE1	; 225
     1aa:	fc 01       	movw	r30, r24
     1ac:	20 83       	st	Z, r18
                ADMUX |= (1 << MUX0);
     1ae:	8c e7       	ldi	r24, 0x7C	; 124
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	2c e7       	ldi	r18, 0x7C	; 124
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	f9 01       	movw	r30, r18
     1b8:	20 81       	ld	r18, Z
     1ba:	21 60       	ori	r18, 0x01	; 1
     1bc:	fc 01       	movw	r30, r24
     1be:	20 83       	st	Z, r18
                
                // Set index to default value, so that the first conversion will be trashed
                index_LM35 = 42;
     1c0:	8a e2       	ldi	r24, 0x2A	; 42
     1c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
                
#ifdef DEBUG_LEDS_ADC
                Led4_Off();
#endif
            }
            break;
     1c6:	2d c0       	rjmp	.+90     	; 0x222 <__vector_24+0x116>
            
        case 1: // Poti
            if (index_Poti == 42) { // Trash first conversion
     1c8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
     1cc:	8a 32       	cpi	r24, 0x2A	; 42
     1ce:	19 f4       	brne	.+6      	; 0x1d6 <__vector_24+0xca>
#ifdef DEBUG_LEDS_ADC
                Led5_On();
#endif
                index_Poti = 0;
     1d0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <index_Poti>
                
#ifdef DEBUG_LEDS_ADC
                Led5_Off();
#endif
            }
            break;
     1d4:	25 c0       	rjmp	.+74     	; 0x220 <__vector_24+0x114>
            if (index_Poti == 42) { // Trash first conversion
#ifdef DEBUG_LEDS_ADC
                Led5_On();
#endif
                index_Poti = 0;
            }else if (index_Poti >= 0 && index_Poti <= 7) {
     1d6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
     1da:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
     1de:	88 30       	cpi	r24, 0x08	; 8
     1e0:	98 f4       	brcc	.+38     	; 0x208 <__vector_24+0xfc>
                // Store 8 AD conversions in the Array
                Poti_Array[index_Poti] = res;
     1e2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
     1e6:	88 2f       	mov	r24, r24
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	88 0f       	add	r24, r24
     1ec:	99 1f       	adc	r25, r25
     1ee:	84 5e       	subi	r24, 0xE4	; 228
     1f0:	9e 4f       	sbci	r25, 0xFE	; 254
     1f2:	29 81       	ldd	r18, Y+1	; 0x01
     1f4:	3a 81       	ldd	r19, Y+2	; 0x02
     1f6:	fc 01       	movw	r30, r24
     1f8:	31 83       	std	Z+1, r19	; 0x01
     1fa:	20 83       	st	Z, r18
                index_Poti++;
     1fc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
     200:	8f 5f       	subi	r24, 0xFF	; 255
     202:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <index_Poti>
                
#ifdef DEBUG_LEDS_ADC
                Led5_Off();
#endif
            }
            break;
     206:	0c c0       	rjmp	.+24     	; 0x220 <__vector_24+0x114>
                // Store 8 AD conversions in the Array
                Poti_Array[index_Poti] = res;
                index_Poti++;
            }else {
                // Switch to LM35
                ADMUX &= ~(31); // Set MUX0..4 to 0
     208:	8c e7       	ldi	r24, 0x7C	; 124
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	2c e7       	ldi	r18, 0x7C	; 124
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	f9 01       	movw	r30, r18
     212:	20 81       	ld	r18, Z
     214:	20 7e       	andi	r18, 0xE0	; 224
     216:	fc 01       	movw	r30, r24
     218:	20 83       	st	Z, r18
                
                // Set index to default value, so that the first conversion will be trashed
                index_Poti = 42;
     21a:	8a e2       	ldi	r24, 0x2A	; 42
     21c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <index_Poti>
                
#ifdef DEBUG_LEDS_ADC
                Led5_Off();
#endif
            }
            break;
     220:	00 00       	nop
#ifdef DEBUG_LEDS_ADC
    Led3_On();
#endif
    
    // Trigger next conversion
    ADCSRA |= (1 << ADSC) | (1 << ADIE);
     222:	8a e7       	ldi	r24, 0x7A	; 122
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	2a e7       	ldi	r18, 0x7A	; 122
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	f9 01       	movw	r30, r18
     22c:	20 81       	ld	r18, Z
     22e:	28 64       	ori	r18, 0x48	; 72
     230:	fc 01       	movw	r30, r24
     232:	20 83       	st	Z, r18
}
     234:	00 00       	nop
     236:	0f 90       	pop	r0
     238:	0f 90       	pop	r0
     23a:	df 91       	pop	r29
     23c:	cf 91       	pop	r28
     23e:	ff 91       	pop	r31
     240:	ef 91       	pop	r30
     242:	9f 91       	pop	r25
     244:	8f 91       	pop	r24
     246:	3f 91       	pop	r19
     248:	2f 91       	pop	r18
     24a:	0f 90       	pop	r0
     24c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     250:	0f 90       	pop	r0
     252:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     256:	0f 90       	pop	r0
     258:	1f 90       	pop	r1
     25a:	18 95       	reti

0000025c <encoder_process>:
volatile int16_t val = 0;

/**
 State machine for encoder
 */
void encoder_process() {
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	cd b7       	in	r28, 0x3d	; 61
     262:	de b7       	in	r29, 0x3e	; 62
    switch (st_m_state) {
     264:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <st_m_state>
     268:	88 2f       	mov	r24, r24
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	09 2e       	mov	r0, r25
     26e:	00 0c       	add	r0, r0
     270:	aa 0b       	sbc	r26, r26
     272:	bb 0b       	sbc	r27, r27
     274:	41 e0       	ldi	r20, 0x01	; 1
     276:	50 e0       	ldi	r21, 0x00	; 0
     278:	26 e0       	ldi	r18, 0x06	; 6
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	84 1b       	sub	r24, r20
     27e:	95 0b       	sbc	r25, r21
     280:	28 17       	cp	r18, r24
     282:	39 07       	cpc	r19, r25
     284:	08 f4       	brcc	.+2      	; 0x288 <encoder_process+0x2c>
     286:	8a c0       	rjmp	.+276    	; 0x39c <encoder_process+0x140>
     288:	8a 5b       	subi	r24, 0xBA	; 186
     28a:	9f 4f       	sbci	r25, 0xFF	; 255
     28c:	fc 01       	movw	r30, r24
     28e:	72 c5       	rjmp	.+2788   	; 0xd74 <__tablejump2__>
        case 1: // Init state
            
            if (enc_state == 1) {
     290:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <enc_state>
     294:	81 30       	cpi	r24, 0x01	; 1
     296:	21 f4       	brne	.+8      	; 0x2a0 <encoder_process+0x44>
                // Rotation forward
                st_m_state = 2;
     298:	82 e0       	ldi	r24, 0x02	; 2
     29a:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
                
            } else if (enc_state == 2) {
                // Rotation backward
                st_m_state = 5;
            }
            break;
     29e:	82 c0       	rjmp	.+260    	; 0x3a4 <encoder_process+0x148>
            
            if (enc_state == 1) {
                // Rotation forward
                st_m_state = 2;
                
            } else if (enc_state == 2) {
     2a0:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <enc_state>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	09 f0       	breq	.+2      	; 0x2aa <encoder_process+0x4e>
     2a8:	7d c0       	rjmp	.+250    	; 0x3a4 <encoder_process+0x148>
                // Rotation backward
                st_m_state = 5;
     2aa:	85 e0       	ldi	r24, 0x05	; 5
     2ac:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
            }
            break;
     2b0:	79 c0       	rjmp	.+242    	; 0x3a4 <encoder_process+0x148>
            
        case 2: // Rotation forward
            
            if (enc_state == 3) {
     2b2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <enc_state>
     2b6:	83 30       	cpi	r24, 0x03	; 3
     2b8:	21 f4       	brne	.+8      	; 0x2c2 <encoder_process+0x66>
                // Still rotating forward
                st_m_state = 3;
     2ba:	83 e0       	ldi	r24, 0x03	; 3
     2bc:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
                
            } else if (enc_state == 0) {
                // Fail, go back to init state (maybe bouncing)
                st_m_state = 1;
            }
            break;
     2c0:	73 c0       	rjmp	.+230    	; 0x3a8 <encoder_process+0x14c>
            
            if (enc_state == 3) {
                // Still rotating forward
                st_m_state = 3;
                
            } else if (enc_state == 0) {
     2c2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <enc_state>
     2c6:	88 23       	and	r24, r24
     2c8:	09 f0       	breq	.+2      	; 0x2cc <encoder_process+0x70>
     2ca:	6e c0       	rjmp	.+220    	; 0x3a8 <encoder_process+0x14c>
                // Fail, go back to init state (maybe bouncing)
                st_m_state = 1;
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
            }
            break;
     2d2:	6a c0       	rjmp	.+212    	; 0x3a8 <encoder_process+0x14c>
            
        case 3: // Rotation forward
        
            if (enc_state == 2) {
     2d4:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <enc_state>
     2d8:	82 30       	cpi	r24, 0x02	; 2
     2da:	21 f4       	brne	.+8      	; 0x2e4 <encoder_process+0x88>
                // Still rotating forward
                st_m_state = 4;
     2dc:	84 e0       	ldi	r24, 0x04	; 4
     2de:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
                
            } else if (enc_state == 1) {
                // Fail, go back to previous state (maybe bouncing)
                st_m_state = 2;
            }
            break;
     2e2:	64 c0       	rjmp	.+200    	; 0x3ac <encoder_process+0x150>
        
            if (enc_state == 2) {
                // Still rotating forward
                st_m_state = 4;
                
            } else if (enc_state == 1) {
     2e4:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <enc_state>
     2e8:	81 30       	cpi	r24, 0x01	; 1
     2ea:	09 f0       	breq	.+2      	; 0x2ee <encoder_process+0x92>
     2ec:	5f c0       	rjmp	.+190    	; 0x3ac <encoder_process+0x150>
                // Fail, go back to previous state (maybe bouncing)
                st_m_state = 2;
     2ee:	82 e0       	ldi	r24, 0x02	; 2
     2f0:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
            }
            break;
     2f4:	5b c0       	rjmp	.+182    	; 0x3ac <encoder_process+0x150>
            
        case 4: // Rotation forward
        
            if (enc_state == 0) {
     2f6:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <enc_state>
     2fa:	88 23       	and	r24, r24
     2fc:	69 f4       	brne	.+26     	; 0x318 <encoder_process+0xbc>
                // Forward Rotation done
                st_m_state = 1;
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
                val++;
     304:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <val>
     308:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <val+0x1>
     30c:	01 96       	adiw	r24, 0x01	; 1
     30e:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <val+0x1>
     312:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <val>
                
            } else if (enc_state == 3) {
                // Fail, go back to previous state (maybe bouncing)
                st_m_state = 3;
            }
            break;
     316:	4c c0       	rjmp	.+152    	; 0x3b0 <encoder_process+0x154>
            if (enc_state == 0) {
                // Forward Rotation done
                st_m_state = 1;
                val++;
                
            } else if (enc_state == 3) {
     318:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <enc_state>
     31c:	83 30       	cpi	r24, 0x03	; 3
     31e:	09 f0       	breq	.+2      	; 0x322 <encoder_process+0xc6>
     320:	47 c0       	rjmp	.+142    	; 0x3b0 <encoder_process+0x154>
                // Fail, go back to previous state (maybe bouncing)
                st_m_state = 3;
     322:	83 e0       	ldi	r24, 0x03	; 3
     324:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
            }
            break;
     328:	43 c0       	rjmp	.+134    	; 0x3b0 <encoder_process+0x154>
            
            
        case 5: // Rotation backward
        
            if (enc_state == 0) {
     32a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <enc_state>
     32e:	88 23       	and	r24, r24
     330:	21 f4       	brne	.+8      	; 0x33a <encoder_process+0xde>
                // Fail, go back to init state (maybe bouncing)
                st_m_state = 1;
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
                
            } else if (enc_state == 3) {
                // Still rotating backward
                st_m_state = 6;
            }
            break;
     338:	3d c0       	rjmp	.+122    	; 0x3b4 <encoder_process+0x158>
        
            if (enc_state == 0) {
                // Fail, go back to init state (maybe bouncing)
                st_m_state = 1;
                
            } else if (enc_state == 3) {
     33a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <enc_state>
     33e:	83 30       	cpi	r24, 0x03	; 3
     340:	c9 f5       	brne	.+114    	; 0x3b4 <encoder_process+0x158>
                // Still rotating backward
                st_m_state = 6;
     342:	86 e0       	ldi	r24, 0x06	; 6
     344:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
            }
            break;
     348:	35 c0       	rjmp	.+106    	; 0x3b4 <encoder_process+0x158>
            
        case 6: // Rotation backward
        
            if (enc_state == 2) {
     34a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <enc_state>
     34e:	82 30       	cpi	r24, 0x02	; 2
     350:	21 f4       	brne	.+8      	; 0x35a <encoder_process+0xfe>
                // Fail, go back to previous state (maybe bouncing)
                st_m_state = 5;
     352:	85 e0       	ldi	r24, 0x05	; 5
     354:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
                
            } else if (enc_state == 1) {
                // Still rotating backward
                st_m_state = 7;
            }
            break;
     358:	2f c0       	rjmp	.+94     	; 0x3b8 <encoder_process+0x15c>
        
            if (enc_state == 2) {
                // Fail, go back to previous state (maybe bouncing)
                st_m_state = 5;
                
            } else if (enc_state == 1) {
     35a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <enc_state>
     35e:	81 30       	cpi	r24, 0x01	; 1
     360:	59 f5       	brne	.+86     	; 0x3b8 <encoder_process+0x15c>
                // Still rotating backward
                st_m_state = 7;
     362:	87 e0       	ldi	r24, 0x07	; 7
     364:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
            }
            break;
     368:	27 c0       	rjmp	.+78     	; 0x3b8 <encoder_process+0x15c>
            
        case 7: // Rotation backward
        
            if (enc_state == 3) {
     36a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <enc_state>
     36e:	83 30       	cpi	r24, 0x03	; 3
     370:	21 f4       	brne	.+8      	; 0x37a <encoder_process+0x11e>
                // Fail, go back to previous state (maybe bouncing)
                st_m_state = 6;
     372:	86 e0       	ldi	r24, 0x06	; 6
     374:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
            } else if (enc_state == 0) {
                // Rotating backward done
                st_m_state = 1;
                val--;
            }
            break;
     378:	21 c0       	rjmp	.+66     	; 0x3bc <encoder_process+0x160>
        
            if (enc_state == 3) {
                // Fail, go back to previous state (maybe bouncing)
                st_m_state = 6;
                
            } else if (enc_state == 0) {
     37a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <enc_state>
     37e:	88 23       	and	r24, r24
     380:	e9 f4       	brne	.+58     	; 0x3bc <encoder_process+0x160>
                // Rotating backward done
                st_m_state = 1;
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
                val--;
     388:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <val>
     38c:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <val+0x1>
     390:	01 97       	sbiw	r24, 0x01	; 1
     392:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <val+0x1>
     396:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <val>
            }
            break;
     39a:	10 c0       	rjmp	.+32     	; 0x3bc <encoder_process+0x160>

            
        default:
            st_m_state = 1;
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
            break;
     3a2:	0d c0       	rjmp	.+26     	; 0x3be <encoder_process+0x162>
                
            } else if (enc_state == 2) {
                // Rotation backward
                st_m_state = 5;
            }
            break;
     3a4:	00 00       	nop
     3a6:	0b c0       	rjmp	.+22     	; 0x3be <encoder_process+0x162>
                
            } else if (enc_state == 0) {
                // Fail, go back to init state (maybe bouncing)
                st_m_state = 1;
            }
            break;
     3a8:	00 00       	nop
     3aa:	09 c0       	rjmp	.+18     	; 0x3be <encoder_process+0x162>
                
            } else if (enc_state == 1) {
                // Fail, go back to previous state (maybe bouncing)
                st_m_state = 2;
            }
            break;
     3ac:	00 00       	nop
     3ae:	07 c0       	rjmp	.+14     	; 0x3be <encoder_process+0x162>
                
            } else if (enc_state == 3) {
                // Fail, go back to previous state (maybe bouncing)
                st_m_state = 3;
            }
            break;
     3b0:	00 00       	nop
     3b2:	05 c0       	rjmp	.+10     	; 0x3be <encoder_process+0x162>
                
            } else if (enc_state == 3) {
                // Still rotating backward
                st_m_state = 6;
            }
            break;
     3b4:	00 00       	nop
     3b6:	03 c0       	rjmp	.+6      	; 0x3be <encoder_process+0x162>
                
            } else if (enc_state == 1) {
                // Still rotating backward
                st_m_state = 7;
            }
            break;
     3b8:	00 00       	nop
     3ba:	01 c0       	rjmp	.+2      	; 0x3be <encoder_process+0x162>
            } else if (enc_state == 0) {
                // Rotating backward done
                st_m_state = 1;
                val--;
            }
            break;
     3bc:	00 00       	nop
            
        default:
            st_m_state = 1;
            break;
    }
}
     3be:	00 00       	nop
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <encoder_isr>:

void encoder_isr(){
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	cd b7       	in	r28, 0x3d	; 61
     3cc:	de b7       	in	r29, 0x3e	; 62
    }else{  // If data pin 2 of encoder is HIGH, set val to b0X
        enc_state &= ~(1 << 1);
    }
     */
    
    enc_state = (PINC & ( (1 << PC6) | (1 << PC7) )) >> 6;
     3ce:	86 e2       	ldi	r24, 0x26	; 38
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	fc 01       	movw	r30, r24
     3d4:	80 81       	ld	r24, Z
     3d6:	82 95       	swap	r24
     3d8:	86 95       	lsr	r24
     3da:	86 95       	lsr	r24
     3dc:	83 70       	andi	r24, 0x03	; 3
     3de:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <enc_state>
    
    new = enc_state;
     3e2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <enc_state>
     3e6:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <new>
    PORTB = enc_state;
     3ea:	85 e2       	ldi	r24, 0x25	; 37
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <enc_state>
     3f2:	fc 01       	movw	r30, r24
     3f4:	20 83       	st	Z, r18
    
    
    // If nothing changed, keep state
    if (last == new) {
     3f6:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <last>
     3fa:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <new>
     3fe:	98 17       	cp	r25, r24
     400:	31 f0       	breq	.+12     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
        return;
    }
    
    // State machine
    encoder_process();
     402:	2c df       	rcall	.-424    	; 0x25c <encoder_process>
    
    last = new;
     404:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <new>
     408:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <last>
     40c:	01 c0       	rjmp	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
    PORTB = enc_state;
    
    
    // If nothing changed, keep state
    if (last == new) {
        return;
     40e:	00 00       	nop
    
    // State machine
    encoder_process();
    
    last = new;
}
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	08 95       	ret

00000416 <encoder_init>:

void encoder_init( void ){
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	cd b7       	in	r28, 0x3d	; 61
     41c:	de b7       	in	r29, 0x3e	; 62
    
    // Init state machine
    st_m_state = 1;
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <st_m_state>
    
    // Init timer (16MHZ, call encoder_isr() at timer isr)
    Timer2_init(16, encoder_isr);
     424:	63 ee       	ldi	r22, 0xE3	; 227
     426:	71 e0       	ldi	r23, 0x01	; 1
     428:	80 e1       	ldi	r24, 0x10	; 16
     42a:	52 d1       	rcall	.+676    	; 0x6d0 <Timer2_init>
}
     42c:	00 00       	nop
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	08 95       	ret

00000434 <encoder_get>:

int16_t encoder_get(){
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	00 d0       	rcall	.+0      	; 0x43a <encoder_get+0x6>
     43a:	cd b7       	in	r28, 0x3d	; 61
     43c:	de b7       	in	r29, 0x3e	; 62
    TIMSK2 &= ~(1 << OCIE0A);
     43e:	80 e7       	ldi	r24, 0x70	; 112
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	20 e7       	ldi	r18, 0x70	; 112
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	f9 01       	movw	r30, r18
     448:	20 81       	ld	r18, Z
     44a:	2d 7f       	andi	r18, 0xFD	; 253
     44c:	fc 01       	movw	r30, r24
     44e:	20 83       	st	Z, r18
    int16_t temp = val;
     450:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <val>
     454:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <val+0x1>
     458:	9a 83       	std	Y+2, r25	; 0x02
     45a:	89 83       	std	Y+1, r24	; 0x01
    TIMSK2 |= (1 << OCIE0A);
     45c:	80 e7       	ldi	r24, 0x70	; 112
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	20 e7       	ldi	r18, 0x70	; 112
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	f9 01       	movw	r30, r18
     466:	20 81       	ld	r18, Z
     468:	22 60       	ori	r18, 0x02	; 2
     46a:	fc 01       	movw	r30, r24
     46c:	20 83       	st	Z, r18
    return temp;
     46e:	89 81       	ldd	r24, Y+1	; 0x01
     470:	9a 81       	ldd	r25, Y+2	; 0x02
}
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	08 95       	ret

0000047c <Led_init>:

#include "Led.h"

void Led_init(uint8_t initD) {
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	1f 92       	push	r1
     482:	cd b7       	in	r28, 0x3d	; 61
     484:	de b7       	in	r29, 0x3e	; 62
     486:	89 83       	std	Y+1, r24	; 0x01
    // Set PORTB to outputs
    DDRB = 0xFF;
     488:	84 e2       	ldi	r24, 0x24	; 36
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	2f ef       	ldi	r18, 0xFF	; 255
     48e:	fc 01       	movw	r30, r24
     490:	20 83       	st	Z, r18
    PORTB = 0x00;
     492:	85 e2       	ldi	r24, 0x25	; 37
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	fc 01       	movw	r30, r24
     498:	10 82       	st	Z, r1
    
    if (initD) {
     49a:	89 81       	ldd	r24, Y+1	; 0x01
     49c:	88 23       	and	r24, r24
     49e:	91 f0       	breq	.+36     	; 0x4c4 <Led_init+0x48>
        // Set PORTD 0..4 to outputs
        DDRD |= ( (1 << 4) | (1 << 3) | (1 << 2) | (1 << 1) | (1 << 0));
     4a0:	8a e2       	ldi	r24, 0x2A	; 42
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	2a e2       	ldi	r18, 0x2A	; 42
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	f9 01       	movw	r30, r18
     4aa:	20 81       	ld	r18, Z
     4ac:	2f 61       	ori	r18, 0x1F	; 31
     4ae:	fc 01       	movw	r30, r24
     4b0:	20 83       	st	Z, r18
        PORTD &= ~( (1 << 4) | (1 << 3) | (1 << 2) | (1 << 1) | (1 << 0));
     4b2:	8b e2       	ldi	r24, 0x2B	; 43
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	2b e2       	ldi	r18, 0x2B	; 43
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	f9 01       	movw	r30, r18
     4bc:	20 81       	ld	r18, Z
     4be:	20 7e       	andi	r18, 0xE0	; 224
     4c0:	fc 01       	movw	r30, r24
     4c2:	20 83       	st	Z, r18
    }
}
     4c4:	00 00       	nop
     4c6:	0f 90       	pop	r0
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	08 95       	ret

000004ce <Taster_init>:
 ---------------------
 - DDR Reg has to be set to 0
 - PORT Reg has to be set to 1
 -> Pin is input with pull-up
 */
void Taster_init() {
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
    
    // set to inputs
    DDRC &= ~(1 << 2);
     4d6:	87 e2       	ldi	r24, 0x27	; 39
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	27 e2       	ldi	r18, 0x27	; 39
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	f9 01       	movw	r30, r18
     4e0:	20 81       	ld	r18, Z
     4e2:	2b 7f       	andi	r18, 0xFB	; 251
     4e4:	fc 01       	movw	r30, r24
     4e6:	20 83       	st	Z, r18
    DDRD &= ~( (1 << 7) | (1 << 6) | (1 << 5) );
     4e8:	8a e2       	ldi	r24, 0x2A	; 42
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	2a e2       	ldi	r18, 0x2A	; 42
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	f9 01       	movw	r30, r18
     4f2:	20 81       	ld	r18, Z
     4f4:	2f 71       	andi	r18, 0x1F	; 31
     4f6:	fc 01       	movw	r30, r24
     4f8:	20 83       	st	Z, r18
    
    // enable pull-up
    PORTC |= (1 << 2);
     4fa:	88 e2       	ldi	r24, 0x28	; 40
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	28 e2       	ldi	r18, 0x28	; 40
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	f9 01       	movw	r30, r18
     504:	20 81       	ld	r18, Z
     506:	24 60       	ori	r18, 0x04	; 4
     508:	fc 01       	movw	r30, r24
     50a:	20 83       	st	Z, r18
    PORTD |= (1 << 7) | (1 << 6) | (1 << 5);
     50c:	8b e2       	ldi	r24, 0x2B	; 43
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	2b e2       	ldi	r18, 0x2B	; 43
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	f9 01       	movw	r30, r18
     516:	20 81       	ld	r18, Z
     518:	20 6e       	ori	r18, 0xE0	; 224
     51a:	fc 01       	movw	r30, r24
     51c:	20 83       	st	Z, r18
}
     51e:	00 00       	nop
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	08 95       	ret

00000526 <main>:
#define CLK_F_MHZ 16

uint8_t iahsdfoads = 0;
uint16_t afdsfasdf = 0;

int main(void) {
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	cd b7       	in	r28, 0x3d	; 61
     52c:	de b7       	in	r29, 0x3e	; 62
     52e:	c1 55       	subi	r28, 0x51	; 81
     530:	d1 09       	sbc	r29, r1
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	f8 94       	cli
     536:	de bf       	out	0x3e, r29	; 62
     538:	0f be       	out	0x3f, r0	; 63
     53a:	cd bf       	out	0x3d, r28	; 61
	
    cli();
     53c:	f8 94       	cli
    Led_init(0);	// Don't set LEDs at PORTD
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	9d df       	rcall	.-198    	; 0x47c <Led_init>
	Taster_init();
     542:	c5 df       	rcall	.-118    	; 0x4ce <Taster_init>
    Timer_init(CLK_F_MHZ); // Init timer with 16MHZ clock
     544:	80 e1       	ldi	r24, 0x10	; 16
	uart_init_isr();
     546:	57 d1       	rcall	.+686    	; 0x7f6 <Timer_init>
    adc_init();
     548:	29 d3       	rcall	.+1618   	; 0xb9c <uart_init_isr>
     54a:	c6 dd       	rcall	.-1140   	; 0xd8 <adc_init>
    encoder_init();
     54c:	64 df       	rcall	.-312    	; 0x416 <encoder_init>
     54e:	78 94       	sei
	sei();
     550:	5f d1       	rcall	.+702    	; 0x810 <Timer_getTick>
    
    uint16_t timeVarMain = Timer_getTick();
     552:	9a 83       	std	Y+2, r25	; 0x02
     554:	89 83       	std	Y+1, r24	; 0x01
     556:	22 e3       	ldi	r18, 0x32	; 50
     558:	ce 01       	movw	r24, r28
    char data_s;
    char data[50] = {0};
     55a:	07 96       	adiw	r24, 0x07	; 7
     55c:	fc 01       	movw	r30, r24
     55e:	32 2f       	mov	r19, r18
     560:	11 92       	st	Z+, r1
     562:	3a 95       	dec	r19
     564:	e9 f7       	brne	.-6      	; 0x560 <main+0x3a>
     566:	1c 82       	std	Y+4, r1	; 0x04
    int isafd = 0;
     568:	1b 82       	std	Y+3, r1	; 0x03
     56a:	1e 82       	std	Y+6, r1	; 0x06
	char str[25];
    uint16_t Poti = 0;
     56c:	1d 82       	std	Y+5, r1	; 0x05
     56e:	50 d1       	rcall	.+672    	; 0x810 <Timer_getTick>
	
    while (1) {
        if((Timer_getTick() - timeVarMain) >= 500){
     570:	9c 01       	movw	r18, r24
     572:	89 81       	ldd	r24, Y+1	; 0x01
     574:	9a 81       	ldd	r25, Y+2	; 0x02
     576:	a9 01       	movw	r20, r18
     578:	48 1b       	sub	r20, r24
     57a:	59 0b       	sbc	r21, r25
     57c:	ca 01       	movw	r24, r20
     57e:	84 3f       	cpi	r24, 0xF4	; 244
     580:	91 40       	sbci	r25, 0x01	; 1
     582:	a8 f3       	brcs	.-22     	; 0x56e <main+0x48>
            timeVarMain = Timer_getTick();
     584:	45 d1       	rcall	.+650    	; 0x810 <Timer_getTick>
     586:	9a 83       	std	Y+2, r25	; 0x02
     588:	89 83       	std	Y+1, r24	; 0x01
     58a:	54 df       	rcall	.-344    	; 0x434 <encoder_get>
                Led1_Off();
                Led2_On();
                isafd = 0;
            }*/
            
            sprintf(str, "Val: %d\n", encoder_get());
     58c:	29 2f       	mov	r18, r25
     58e:	2f 93       	push	r18
     590:	8f 93       	push	r24
     592:	82 e0       	ldi	r24, 0x02	; 2
     594:	91 e0       	ldi	r25, 0x01	; 1
     596:	89 2f       	mov	r24, r25
     598:	8f 93       	push	r24
     59a:	82 e0       	ldi	r24, 0x02	; 2
     59c:	91 e0       	ldi	r25, 0x01	; 1
     59e:	8f 93       	push	r24
     5a0:	ce 01       	movw	r24, r28
     5a2:	c9 96       	adiw	r24, 0x39	; 57
     5a4:	29 2f       	mov	r18, r25
     5a6:	2f 93       	push	r18
     5a8:	8f 93       	push	r24
     5aa:	f6 d3       	rcall	.+2028   	; 0xd98 <sprintf>
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	0f 90       	pop	r0
     5b2:	0f 90       	pop	r0
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	ce 01       	movw	r24, r28
            uart_send_isr(str);
     5ba:	c9 96       	adiw	r24, 0x39	; 57
     5bc:	0a d3       	rcall	.+1556   	; 0xbd2 <uart_send_isr>
     5be:	d7 cf       	rjmp	.-82     	; 0x56e <main+0x48>

000005c0 <Timer_init_withoutStruct>:
     5c0:	cf 93       	push	r28
            }
        }*/
        
        //trafficLight(0);
        //playground();
    }
     5c2:	df 93       	push	r29
    TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
}

void Timer_init_withoutStruct(uint8_t clockFreqMhz) {
     5c4:	1f 92       	push	r1
     5c6:	cd b7       	in	r28, 0x3d	; 61
     5c8:	de b7       	in	r29, 0x3e	; 62
     5ca:	89 83       	std	Y+1, r24	; 0x01
    // datasheet page 97
    // set mode to clear timer on compare (CTC)
    TCCR0B &= ~(1 << WGM02);
     5cc:	85 e4       	ldi	r24, 0x45	; 69
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	25 e4       	ldi	r18, 0x45	; 69
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	f9 01       	movw	r30, r18
     5d6:	20 81       	ld	r18, Z
     5d8:	27 7f       	andi	r18, 0xF7	; 247
     5da:	fc 01       	movw	r30, r24
     5dc:	20 83       	st	Z, r18
    TCCR0A |= (1 << WGM01);
     5de:	84 e4       	ldi	r24, 0x44	; 68
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	24 e4       	ldi	r18, 0x44	; 68
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	f9 01       	movw	r30, r18
     5e8:	20 81       	ld	r18, Z
     5ea:	22 60       	ori	r18, 0x02	; 2
     5ec:	fc 01       	movw	r30, r24
     5ee:	20 83       	st	Z, r18
    TCCR0A &= ~(1 << WGM00);
     5f0:	84 e4       	ldi	r24, 0x44	; 68
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	24 e4       	ldi	r18, 0x44	; 68
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	f9 01       	movw	r30, r18
     5fa:	20 81       	ld	r18, Z
     5fc:	2e 7f       	andi	r18, 0xFE	; 254
     5fe:	fc 01       	movw	r30, r24
     600:	20 83       	st	Z, r18
    
    
    switch (clockFreqMhz) {
     602:	89 81       	ldd	r24, Y+1	; 0x01
     604:	88 2f       	mov	r24, r24
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	40 97       	sbiw	r24, 0x10	; 16
     60a:	09 f5       	brne	.+66     	; 0x64e <Timer_init_withoutStruct+0x8e>
        case 16:
            // extern osc (16 MHZ)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = COMPA_VAL-1;   // dez 249; range 0 - 249 -> 250 cycles till interrupt
     60c:	87 e4       	ldi	r24, 0x47	; 71
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	29 ef       	ldi	r18, 0xF9	; 249
     612:	fc 01       	movw	r30, r24
     614:	20 83       	st	Z, r18
            
            // set prescaler to 1/64
            TCCR0B &= ~(1 << CS02);
     616:	85 e4       	ldi	r24, 0x45	; 69
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	25 e4       	ldi	r18, 0x45	; 69
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	f9 01       	movw	r30, r18
     620:	20 81       	ld	r18, Z
     622:	2b 7f       	andi	r18, 0xFB	; 251
     624:	fc 01       	movw	r30, r24
     626:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
     628:	85 e4       	ldi	r24, 0x45	; 69
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	25 e4       	ldi	r18, 0x45	; 69
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	f9 01       	movw	r30, r18
     632:	20 81       	ld	r18, Z
     634:	22 60       	ori	r18, 0x02	; 2
     636:	fc 01       	movw	r30, r24
     638:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS00);
     63a:	85 e4       	ldi	r24, 0x45	; 69
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	25 e4       	ldi	r18, 0x45	; 69
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	f9 01       	movw	r30, r18
     644:	20 81       	ld	r18, Z
     646:	21 60       	ori	r18, 0x01	; 1
     648:	fc 01       	movw	r30, r24
     64a:	20 83       	st	Z, r18
            break;
     64c:	21 c0       	rjmp	.+66     	; 0x690 <Timer_init_withoutStruct+0xd0>
            
        default:
            // inter osc (8 MHZ divided by 8 -> 1 MHZ clock)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = COMPA_VAL_8MHZ-1;   // dez 124; range 0 - 124 -> 125 cycles till interrupt
     64e:	87 e4       	ldi	r24, 0x47	; 71
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	2c e7       	ldi	r18, 0x7C	; 124
     654:	fc 01       	movw	r30, r24
     656:	20 83       	st	Z, r18
            
            // set prescaler to 1/8
            TCCR0B &= ~(1 << CS02);
     658:	85 e4       	ldi	r24, 0x45	; 69
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	25 e4       	ldi	r18, 0x45	; 69
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	f9 01       	movw	r30, r18
     662:	20 81       	ld	r18, Z
     664:	2b 7f       	andi	r18, 0xFB	; 251
     666:	fc 01       	movw	r30, r24
     668:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
     66a:	85 e4       	ldi	r24, 0x45	; 69
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	25 e4       	ldi	r18, 0x45	; 69
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	f9 01       	movw	r30, r18
     674:	20 81       	ld	r18, Z
     676:	22 60       	ori	r18, 0x02	; 2
     678:	fc 01       	movw	r30, r24
     67a:	20 83       	st	Z, r18
            TCCR0B &= ~(1 << CS00);
     67c:	85 e4       	ldi	r24, 0x45	; 69
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	25 e4       	ldi	r18, 0x45	; 69
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	f9 01       	movw	r30, r18
     686:	20 81       	ld	r18, Z
     688:	2e 7f       	andi	r18, 0xFE	; 254
     68a:	fc 01       	movw	r30, r24
     68c:	20 83       	st	Z, r18
            break;
     68e:	00 00       	nop
    }
    
    TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
     690:	8e e6       	ldi	r24, 0x6E	; 110
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	2e e6       	ldi	r18, 0x6E	; 110
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	f9 01       	movw	r30, r18
     69a:	20 81       	ld	r18, Z
     69c:	2b 7f       	andi	r18, 0xFB	; 251
     69e:	fc 01       	movw	r30, r24
     6a0:	20 83       	st	Z, r18
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
     6a2:	8e e6       	ldi	r24, 0x6E	; 110
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	2e e6       	ldi	r18, 0x6E	; 110
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	f9 01       	movw	r30, r18
     6ac:	20 81       	ld	r18, Z
     6ae:	22 60       	ori	r18, 0x02	; 2
     6b0:	fc 01       	movw	r30, r24
     6b2:	20 83       	st	Z, r18
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
     6b4:	8e e6       	ldi	r24, 0x6E	; 110
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	2e e6       	ldi	r18, 0x6E	; 110
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	f9 01       	movw	r30, r18
     6be:	20 81       	ld	r18, Z
     6c0:	2e 7f       	andi	r18, 0xFE	; 254
     6c2:	fc 01       	movw	r30, r24
     6c4:	20 83       	st	Z, r18
}
     6c6:	00 00       	nop
     6c8:	0f 90       	pop	r0
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	08 95       	ret

000006d0 <Timer2_init>:

void Timer2_init(uint8_t clockFreqMhz, void (*f)(void)) {
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
     6d4:	00 d0       	rcall	.+0      	; 0x6d6 <Timer2_init+0x6>
     6d6:	1f 92       	push	r1
     6d8:	cd b7       	in	r28, 0x3d	; 61
     6da:	de b7       	in	r29, 0x3e	; 62
     6dc:	89 83       	std	Y+1, r24	; 0x01
     6de:	7b 83       	std	Y+3, r23	; 0x03
     6e0:	6a 83       	std	Y+2, r22	; 0x02
    timer2_func = f;
     6e2:	8a 81       	ldd	r24, Y+2	; 0x02
     6e4:	9b 81       	ldd	r25, Y+3	; 0x03
     6e6:	90 93 3d 05 	sts	0x053D, r25	; 0x80053d <timer2_func+0x1>
     6ea:	80 93 3c 05 	sts	0x053C, r24	; 0x80053c <timer2_func>
    // datasheet page 97
    // set mode to clear timer on compare (CTC)
    TCCR2B &= ~(1 << WGM02);
     6ee:	81 eb       	ldi	r24, 0xB1	; 177
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	21 eb       	ldi	r18, 0xB1	; 177
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	f9 01       	movw	r30, r18
     6f8:	20 81       	ld	r18, Z
     6fa:	27 7f       	andi	r18, 0xF7	; 247
     6fc:	fc 01       	movw	r30, r24
     6fe:	20 83       	st	Z, r18
    TCCR2A |= (1 << WGM01);
     700:	80 eb       	ldi	r24, 0xB0	; 176
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	20 eb       	ldi	r18, 0xB0	; 176
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	f9 01       	movw	r30, r18
     70a:	20 81       	ld	r18, Z
     70c:	22 60       	ori	r18, 0x02	; 2
     70e:	fc 01       	movw	r30, r24
     710:	20 83       	st	Z, r18
    TCCR2A &= ~(1 << WGM00);
     712:	80 eb       	ldi	r24, 0xB0	; 176
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	20 eb       	ldi	r18, 0xB0	; 176
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	f9 01       	movw	r30, r18
     71c:	20 81       	ld	r18, Z
     71e:	2e 7f       	andi	r18, 0xFE	; 254
     720:	fc 01       	movw	r30, r24
     722:	20 83       	st	Z, r18
    
    
    switch (clockFreqMhz) {
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	88 2f       	mov	r24, r24
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	40 97       	sbiw	r24, 0x10	; 16
     72c:	09 f5       	brne	.+66     	; 0x770 <Timer2_init+0xa0>
        case 16:
            // extern osc (16 MHZ)
            
            // set OCR0A-reg (top value of timer)
            OCR2A = T2_COMPA_VAL-1;   // dez 249; range 0 - 249 -> 250 cycles till interrupt
     72e:	83 eb       	ldi	r24, 0xB3	; 179
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	2c e7       	ldi	r18, 0x7C	; 124
     734:	fc 01       	movw	r30, r24
     736:	20 83       	st	Z, r18
            
            // set prescaler to 1/64
            TCCR2B &= ~(1 << CS02);
     738:	81 eb       	ldi	r24, 0xB1	; 177
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	21 eb       	ldi	r18, 0xB1	; 177
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	f9 01       	movw	r30, r18
     742:	20 81       	ld	r18, Z
     744:	2b 7f       	andi	r18, 0xFB	; 251
     746:	fc 01       	movw	r30, r24
     748:	20 83       	st	Z, r18
            TCCR2B |= (1 << CS01);
     74a:	81 eb       	ldi	r24, 0xB1	; 177
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	21 eb       	ldi	r18, 0xB1	; 177
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	f9 01       	movw	r30, r18
     754:	20 81       	ld	r18, Z
     756:	22 60       	ori	r18, 0x02	; 2
     758:	fc 01       	movw	r30, r24
     75a:	20 83       	st	Z, r18
            TCCR2B |= (1 << CS00);
     75c:	81 eb       	ldi	r24, 0xB1	; 177
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	21 eb       	ldi	r18, 0xB1	; 177
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	f9 01       	movw	r30, r18
     766:	20 81       	ld	r18, Z
     768:	21 60       	ori	r18, 0x01	; 1
     76a:	fc 01       	movw	r30, r24
     76c:	20 83       	st	Z, r18
            break;
     76e:	21 c0       	rjmp	.+66     	; 0x7b2 <Timer2_init+0xe2>
            
        default:
            // inter osc (8 MHZ divided by 8 -> 1 MHZ clock)
            
            // set OCR0A-reg (top value of timer)
            OCR2A = T2_COMPA_VAL_8MHZ-1;   // dez 124; range 0 - 124 -> 125 cycles till interrupt
     770:	83 eb       	ldi	r24, 0xB3	; 179
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	2c e7       	ldi	r18, 0x7C	; 124
     776:	fc 01       	movw	r30, r24
     778:	20 83       	st	Z, r18
            
            // set prescaler to 1/8
            TCCR2B &= ~(1 << CS02);
     77a:	81 eb       	ldi	r24, 0xB1	; 177
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	21 eb       	ldi	r18, 0xB1	; 177
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	f9 01       	movw	r30, r18
     784:	20 81       	ld	r18, Z
     786:	2b 7f       	andi	r18, 0xFB	; 251
     788:	fc 01       	movw	r30, r24
     78a:	20 83       	st	Z, r18
            TCCR2B |= (1 << CS01);
     78c:	81 eb       	ldi	r24, 0xB1	; 177
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	21 eb       	ldi	r18, 0xB1	; 177
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	f9 01       	movw	r30, r18
     796:	20 81       	ld	r18, Z
     798:	22 60       	ori	r18, 0x02	; 2
     79a:	fc 01       	movw	r30, r24
     79c:	20 83       	st	Z, r18
            TCCR2B &= ~(1 << CS00);
     79e:	81 eb       	ldi	r24, 0xB1	; 177
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	21 eb       	ldi	r18, 0xB1	; 177
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	f9 01       	movw	r30, r18
     7a8:	20 81       	ld	r18, Z
     7aa:	2e 7f       	andi	r18, 0xFE	; 254
     7ac:	fc 01       	movw	r30, r24
     7ae:	20 83       	st	Z, r18
            break;
     7b0:	00 00       	nop
    }
    
    TIMSK2 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
     7b2:	80 e7       	ldi	r24, 0x70	; 112
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	20 e7       	ldi	r18, 0x70	; 112
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	f9 01       	movw	r30, r18
     7bc:	20 81       	ld	r18, Z
     7be:	2b 7f       	andi	r18, 0xFB	; 251
     7c0:	fc 01       	movw	r30, r24
     7c2:	20 83       	st	Z, r18
    TIMSK2 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
     7c4:	80 e7       	ldi	r24, 0x70	; 112
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	20 e7       	ldi	r18, 0x70	; 112
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	f9 01       	movw	r30, r18
     7ce:	20 81       	ld	r18, Z
     7d0:	22 60       	ori	r18, 0x02	; 2
     7d2:	fc 01       	movw	r30, r24
     7d4:	20 83       	st	Z, r18
    TIMSK2 &= ~(1 << TOIE0);    // disable timer overflow interrupt
     7d6:	80 e7       	ldi	r24, 0x70	; 112
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	20 e7       	ldi	r18, 0x70	; 112
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	f9 01       	movw	r30, r18
     7e0:	20 81       	ld	r18, Z
     7e2:	2e 7f       	andi	r18, 0xFE	; 254
     7e4:	fc 01       	movw	r30, r24
     7e6:	20 83       	st	Z, r18
}
     7e8:	00 00       	nop
     7ea:	0f 90       	pop	r0
     7ec:	0f 90       	pop	r0
     7ee:	0f 90       	pop	r0
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	08 95       	ret

000007f6 <Timer_init>:

void Timer_init(uint8_t clockFreqMhz) {
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
     7fa:	1f 92       	push	r1
     7fc:	cd b7       	in	r28, 0x3d	; 61
     7fe:	de b7       	in	r29, 0x3e	; 62
     800:	89 83       	std	Y+1, r24	; 0x01
    Timer_init_withoutStruct(clockFreqMhz);
     802:	89 81       	ldd	r24, Y+1	; 0x01
     804:	dd de       	rcall	.-582    	; 0x5c0 <Timer_init_withoutStruct>
}
     806:	00 00       	nop
     808:	0f 90       	pop	r0
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	08 95       	ret

00000810 <Timer_getTick>:

uint16_t Timer_getTick() {
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	00 d0       	rcall	.+0      	; 0x816 <Timer_getTick+0x6>
     816:	cd b7       	in	r28, 0x3d	; 61
     818:	de b7       	in	r29, 0x3e	; 62
    // disable Output Compare Match A Interrupt
    TIMSK0 &= ~(1 << OCIE0A);
     81a:	8e e6       	ldi	r24, 0x6E	; 110
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	2e e6       	ldi	r18, 0x6E	; 110
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	f9 01       	movw	r30, r18
     824:	20 81       	ld	r18, Z
     826:	2d 7f       	andi	r18, 0xFD	; 253
     828:	fc 01       	movw	r30, r24
     82a:	20 83       	st	Z, r18
    
    // store timer_count in a temp int that can't get changed by ISR
    uint16_t temp_timer_count = timer_count;
     82c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <timer_count>
     830:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <timer_count+0x1>
     834:	9a 83       	std	Y+2, r25	; 0x02
     836:	89 83       	std	Y+1, r24	; 0x01
    
    // enable Output Compare Match A Interrupt
    TIMSK0 |= (1 << OCIE0A);
     838:	8e e6       	ldi	r24, 0x6E	; 110
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	2e e6       	ldi	r18, 0x6E	; 110
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	f9 01       	movw	r30, r18
     842:	20 81       	ld	r18, Z
     844:	22 60       	ori	r18, 0x02	; 2
     846:	fc 01       	movw	r30, r24
     848:	20 83       	st	Z, r18

    return temp_timer_count;
     84a:	89 81       	ldd	r24, Y+1	; 0x01
     84c:	9a 81       	ldd	r25, Y+2	; 0x02
}
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	08 95       	ret

00000858 <__vector_16>:
/**
 Timer compare A interrput:
 - increase timer_count
 - if timer_count is at max of uint16, set it to 0
 */
ISR(TIMER0_COMPA_vect){
     858:	1f 92       	push	r1
     85a:	0f 92       	push	r0
     85c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     860:	0f 92       	push	r0
     862:	11 24       	eor	r1, r1
     864:	8f 93       	push	r24
     866:	9f 93       	push	r25
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
    timer_count++;
     870:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <timer_count>
     874:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <timer_count+0x1>
     878:	01 96       	adiw	r24, 0x01	; 1
     87a:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timer_count+0x1>
     87e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timer_count>
}
     882:	00 00       	nop
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	9f 91       	pop	r25
     88a:	8f 91       	pop	r24
     88c:	0f 90       	pop	r0
     88e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     892:	0f 90       	pop	r0
     894:	1f 90       	pop	r1
     896:	18 95       	reti

00000898 <__vector_9>:

ISR(TIMER2_COMPA_vect){
     898:	1f 92       	push	r1
     89a:	0f 92       	push	r0
     89c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     8a0:	0f 92       	push	r0
     8a2:	11 24       	eor	r1, r1
     8a4:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     8a8:	0f 92       	push	r0
     8aa:	2f 93       	push	r18
     8ac:	3f 93       	push	r19
     8ae:	4f 93       	push	r20
     8b0:	5f 93       	push	r21
     8b2:	6f 93       	push	r22
     8b4:	7f 93       	push	r23
     8b6:	8f 93       	push	r24
     8b8:	9f 93       	push	r25
     8ba:	af 93       	push	r26
     8bc:	bf 93       	push	r27
     8be:	ef 93       	push	r30
     8c0:	ff 93       	push	r31
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
    (*timer2_func)();
     8ca:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <timer2_func>
     8ce:	90 91 3d 05 	lds	r25, 0x053D	; 0x80053d <timer2_func+0x1>
     8d2:	fc 01       	movw	r30, r24
     8d4:	09 95       	icall
}
     8d6:	00 00       	nop
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	ff 91       	pop	r31
     8de:	ef 91       	pop	r30
     8e0:	bf 91       	pop	r27
     8e2:	af 91       	pop	r26
     8e4:	9f 91       	pop	r25
     8e6:	8f 91       	pop	r24
     8e8:	7f 91       	pop	r23
     8ea:	6f 91       	pop	r22
     8ec:	5f 91       	pop	r21
     8ee:	4f 91       	pop	r20
     8f0:	3f 91       	pop	r19
     8f2:	2f 91       	pop	r18
     8f4:	0f 90       	pop	r0
     8f6:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     8fa:	0f 90       	pop	r0
     8fc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     900:	0f 90       	pop	r0
     902:	1f 90       	pop	r1
     904:	18 95       	reti

00000906 <buff_put>:
        // Return byte
        return pByte;
    }else {
        return 0;
    }
}
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	00 d0       	rcall	.+0      	; 0x90c <buff_put+0x6>
     90c:	1f 92       	push	r1
     90e:	cd b7       	in	r28, 0x3d	; 61
     910:	de b7       	in	r29, 0x3e	; 62
     912:	89 83       	std	Y+1, r24	; 0x01
     914:	7b 83       	std	Y+3, r23	; 0x03
     916:	6a 83       	std	Y+2, r22	; 0x02
     918:	81 ec       	ldi	r24, 0xC1	; 193
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	21 ec       	ldi	r18, 0xC1	; 193
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	f9 01       	movw	r30, r18
     922:	20 81       	ld	r18, Z
     924:	2f 7b       	andi	r18, 0xBF	; 191
     926:	fc 01       	movw	r30, r24
     928:	20 83       	st	Z, r18
     92a:	81 ec       	ldi	r24, 0xC1	; 193
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	21 ec       	ldi	r18, 0xC1	; 193
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	f9 01       	movw	r30, r18
     934:	20 81       	ld	r18, Z
     936:	2f 77       	andi	r18, 0x7F	; 127
     938:	fc 01       	movw	r30, r24
     93a:	20 83       	st	Z, r18
     93c:	8a 81       	ldd	r24, Y+2	; 0x02
     93e:	9b 81       	ldd	r25, Y+3	; 0x03
     940:	8e 5f       	subi	r24, 0xFE	; 254
     942:	9d 4f       	sbci	r25, 0xFD	; 253
     944:	fc 01       	movw	r30, r24
     946:	80 81       	ld	r24, Z
     948:	91 81       	ldd	r25, Z+1	; 0x01
     94a:	9c 01       	movw	r18, r24
     94c:	2f 5f       	subi	r18, 0xFF	; 255
     94e:	3f 4f       	sbci	r19, 0xFF	; 255
     950:	8a 81       	ldd	r24, Y+2	; 0x02
     952:	9b 81       	ldd	r25, Y+3	; 0x03
     954:	9e 5f       	subi	r25, 0xFE	; 254
     956:	fc 01       	movw	r30, r24
     958:	80 81       	ld	r24, Z
     95a:	91 81       	ldd	r25, Z+1	; 0x01
     95c:	28 17       	cp	r18, r24
     95e:	39 07       	cpc	r19, r25
     960:	91 f0       	breq	.+36     	; 0x986 <buff_put+0x80>
     962:	8a 81       	ldd	r24, Y+2	; 0x02
     964:	9b 81       	ldd	r25, Y+3	; 0x03
     966:	9e 5f       	subi	r25, 0xFE	; 254
     968:	fc 01       	movw	r30, r24
     96a:	80 81       	ld	r24, Z
     96c:	91 81       	ldd	r25, Z+1	; 0x01
     96e:	89 2b       	or	r24, r25
     970:	f1 f4       	brne	.+60     	; 0x9ae <buff_put+0xa8>
     972:	8a 81       	ldd	r24, Y+2	; 0x02
     974:	9b 81       	ldd	r25, Y+3	; 0x03
     976:	8e 5f       	subi	r24, 0xFE	; 254
     978:	9d 4f       	sbci	r25, 0xFD	; 253
     97a:	fc 01       	movw	r30, r24
     97c:	80 81       	ld	r24, Z
     97e:	91 81       	ldd	r25, Z+1	; 0x01
     980:	8f 3f       	cpi	r24, 0xFF	; 255
     982:	91 40       	sbci	r25, 0x01	; 1
     984:	a1 f4       	brne	.+40     	; 0x9ae <buff_put+0xa8>
     986:	81 ec       	ldi	r24, 0xC1	; 193
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	21 ec       	ldi	r18, 0xC1	; 193
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	f9 01       	movw	r30, r18
     990:	20 81       	ld	r18, Z
     992:	20 64       	ori	r18, 0x40	; 64
     994:	fc 01       	movw	r30, r24
     996:	20 83       	st	Z, r18
     998:	81 ec       	ldi	r24, 0xC1	; 193
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	21 ec       	ldi	r18, 0xC1	; 193
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	f9 01       	movw	r30, r18
     9a2:	20 81       	ld	r18, Z
     9a4:	20 68       	ori	r18, 0x80	; 128
     9a6:	fc 01       	movw	r30, r24
     9a8:	20 83       	st	Z, r18
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	43 c0       	rjmp	.+134    	; 0xa34 <buff_put+0x12e>
     9ae:	8a 81       	ldd	r24, Y+2	; 0x02
     9b0:	9b 81       	ldd	r25, Y+3	; 0x03
     9b2:	8e 5f       	subi	r24, 0xFE	; 254
     9b4:	9d 4f       	sbci	r25, 0xFD	; 253
     9b6:	fc 01       	movw	r30, r24
     9b8:	80 81       	ld	r24, Z
     9ba:	91 81       	ldd	r25, Z+1	; 0x01
     9bc:	2a 81       	ldd	r18, Y+2	; 0x02
     9be:	3b 81       	ldd	r19, Y+3	; 0x03
     9c0:	82 0f       	add	r24, r18
     9c2:	93 1f       	adc	r25, r19
     9c4:	29 81       	ldd	r18, Y+1	; 0x01
     9c6:	fc 01       	movw	r30, r24
     9c8:	20 83       	st	Z, r18
     9ca:	8a 81       	ldd	r24, Y+2	; 0x02
     9cc:	9b 81       	ldd	r25, Y+3	; 0x03
     9ce:	8e 5f       	subi	r24, 0xFE	; 254
     9d0:	9d 4f       	sbci	r25, 0xFD	; 253
     9d2:	fc 01       	movw	r30, r24
     9d4:	80 81       	ld	r24, Z
     9d6:	91 81       	ldd	r25, Z+1	; 0x01
     9d8:	9c 01       	movw	r18, r24
     9da:	2f 5f       	subi	r18, 0xFF	; 255
     9dc:	3f 4f       	sbci	r19, 0xFF	; 255
     9de:	8a 81       	ldd	r24, Y+2	; 0x02
     9e0:	9b 81       	ldd	r25, Y+3	; 0x03
     9e2:	8e 5f       	subi	r24, 0xFE	; 254
     9e4:	9d 4f       	sbci	r25, 0xFD	; 253
     9e6:	fc 01       	movw	r30, r24
     9e8:	31 83       	std	Z+1, r19	; 0x01
     9ea:	20 83       	st	Z, r18
     9ec:	8a 81       	ldd	r24, Y+2	; 0x02
     9ee:	9b 81       	ldd	r25, Y+3	; 0x03
     9f0:	8e 5f       	subi	r24, 0xFE	; 254
     9f2:	9d 4f       	sbci	r25, 0xFD	; 253
     9f4:	fc 01       	movw	r30, r24
     9f6:	80 81       	ld	r24, Z
     9f8:	91 81       	ldd	r25, Z+1	; 0x01
     9fa:	81 15       	cp	r24, r1
     9fc:	92 40       	sbci	r25, 0x02	; 2
     9fe:	38 f0       	brcs	.+14     	; 0xa0e <buff_put+0x108>
     a00:	8a 81       	ldd	r24, Y+2	; 0x02
     a02:	9b 81       	ldd	r25, Y+3	; 0x03
     a04:	8e 5f       	subi	r24, 0xFE	; 254
     a06:	9d 4f       	sbci	r25, 0xFD	; 253
     a08:	fc 01       	movw	r30, r24
     a0a:	11 82       	std	Z+1, r1	; 0x01
     a0c:	10 82       	st	Z, r1
     a0e:	81 ec       	ldi	r24, 0xC1	; 193
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	21 ec       	ldi	r18, 0xC1	; 193
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	f9 01       	movw	r30, r18
     a18:	20 81       	ld	r18, Z
     a1a:	20 64       	ori	r18, 0x40	; 64
     a1c:	fc 01       	movw	r30, r24
     a1e:	20 83       	st	Z, r18
     a20:	81 ec       	ldi	r24, 0xC1	; 193
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	21 ec       	ldi	r18, 0xC1	; 193
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	f9 01       	movw	r30, r18
     a2a:	20 81       	ld	r18, Z
     a2c:	20 68       	ori	r18, 0x80	; 128
     a2e:	fc 01       	movw	r30, r24
     a30:	20 83       	st	Z, r18
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	08 95       	ret

00000a40 <buff_get>:
     a40:	cf 93       	push	r28
     a42:	df 93       	push	r29
     a44:	00 d0       	rcall	.+0      	; 0xa46 <buff_get+0x6>
     a46:	00 d0       	rcall	.+0      	; 0xa48 <buff_get+0x8>
     a48:	cd b7       	in	r28, 0x3d	; 61
     a4a:	de b7       	in	r29, 0x3e	; 62
     a4c:	9a 83       	std	Y+2, r25	; 0x02
     a4e:	89 83       	std	Y+1, r24	; 0x01
     a50:	7c 83       	std	Y+4, r23	; 0x04
     a52:	6b 83       	std	Y+3, r22	; 0x03
     a54:	81 ec       	ldi	r24, 0xC1	; 193
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	21 ec       	ldi	r18, 0xC1	; 193
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	f9 01       	movw	r30, r18
     a5e:	20 81       	ld	r18, Z
     a60:	2f 7b       	andi	r18, 0xBF	; 191
     a62:	fc 01       	movw	r30, r24
     a64:	20 83       	st	Z, r18
     a66:	81 ec       	ldi	r24, 0xC1	; 193
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	21 ec       	ldi	r18, 0xC1	; 193
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	f9 01       	movw	r30, r18
     a70:	20 81       	ld	r18, Z
     a72:	2f 77       	andi	r18, 0x7F	; 127
     a74:	fc 01       	movw	r30, r24
     a76:	20 83       	st	Z, r18
     a78:	8b 81       	ldd	r24, Y+3	; 0x03
     a7a:	9c 81       	ldd	r25, Y+4	; 0x04
     a7c:	9e 5f       	subi	r25, 0xFE	; 254
     a7e:	fc 01       	movw	r30, r24
     a80:	20 81       	ld	r18, Z
     a82:	31 81       	ldd	r19, Z+1	; 0x01
     a84:	8b 81       	ldd	r24, Y+3	; 0x03
     a86:	9c 81       	ldd	r25, Y+4	; 0x04
     a88:	8e 5f       	subi	r24, 0xFE	; 254
     a8a:	9d 4f       	sbci	r25, 0xFD	; 253
     a8c:	fc 01       	movw	r30, r24
     a8e:	80 81       	ld	r24, Z
     a90:	91 81       	ldd	r25, Z+1	; 0x01
     a92:	28 17       	cp	r18, r24
     a94:	39 07       	cpc	r19, r25
     a96:	a1 f4       	brne	.+40     	; 0xac0 <buff_get+0x80>
     a98:	81 ec       	ldi	r24, 0xC1	; 193
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	21 ec       	ldi	r18, 0xC1	; 193
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	f9 01       	movw	r30, r18
     aa2:	20 81       	ld	r18, Z
     aa4:	20 64       	ori	r18, 0x40	; 64
     aa6:	fc 01       	movw	r30, r24
     aa8:	20 83       	st	Z, r18
     aaa:	81 ec       	ldi	r24, 0xC1	; 193
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	21 ec       	ldi	r18, 0xC1	; 193
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	f9 01       	movw	r30, r18
     ab4:	20 81       	ld	r18, Z
     ab6:	20 68       	ori	r18, 0x80	; 128
     ab8:	fc 01       	movw	r30, r24
     aba:	20 83       	st	Z, r18
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	41 c0       	rjmp	.+130    	; 0xb42 <buff_get+0x102>
     ac0:	8b 81       	ldd	r24, Y+3	; 0x03
     ac2:	9c 81       	ldd	r25, Y+4	; 0x04
     ac4:	9e 5f       	subi	r25, 0xFE	; 254
     ac6:	fc 01       	movw	r30, r24
     ac8:	80 81       	ld	r24, Z
     aca:	91 81       	ldd	r25, Z+1	; 0x01
     acc:	2b 81       	ldd	r18, Y+3	; 0x03
     ace:	3c 81       	ldd	r19, Y+4	; 0x04
     ad0:	82 0f       	add	r24, r18
     ad2:	93 1f       	adc	r25, r19
     ad4:	fc 01       	movw	r30, r24
     ad6:	20 81       	ld	r18, Z
     ad8:	89 81       	ldd	r24, Y+1	; 0x01
     ada:	9a 81       	ldd	r25, Y+2	; 0x02
     adc:	fc 01       	movw	r30, r24
     ade:	20 83       	st	Z, r18
     ae0:	8b 81       	ldd	r24, Y+3	; 0x03
     ae2:	9c 81       	ldd	r25, Y+4	; 0x04
     ae4:	9e 5f       	subi	r25, 0xFE	; 254
     ae6:	fc 01       	movw	r30, r24
     ae8:	80 81       	ld	r24, Z
     aea:	91 81       	ldd	r25, Z+1	; 0x01
     aec:	9c 01       	movw	r18, r24
     aee:	2f 5f       	subi	r18, 0xFF	; 255
     af0:	3f 4f       	sbci	r19, 0xFF	; 255
     af2:	8b 81       	ldd	r24, Y+3	; 0x03
     af4:	9c 81       	ldd	r25, Y+4	; 0x04
     af6:	9e 5f       	subi	r25, 0xFE	; 254
     af8:	fc 01       	movw	r30, r24
     afa:	31 83       	std	Z+1, r19	; 0x01
     afc:	20 83       	st	Z, r18
     afe:	8b 81       	ldd	r24, Y+3	; 0x03
     b00:	9c 81       	ldd	r25, Y+4	; 0x04
     b02:	9e 5f       	subi	r25, 0xFE	; 254
     b04:	fc 01       	movw	r30, r24
     b06:	80 81       	ld	r24, Z
     b08:	91 81       	ldd	r25, Z+1	; 0x01
     b0a:	81 15       	cp	r24, r1
     b0c:	92 40       	sbci	r25, 0x02	; 2
     b0e:	30 f0       	brcs	.+12     	; 0xb1c <buff_get+0xdc>
     b10:	8b 81       	ldd	r24, Y+3	; 0x03
     b12:	9c 81       	ldd	r25, Y+4	; 0x04
     b14:	9e 5f       	subi	r25, 0xFE	; 254
     b16:	fc 01       	movw	r30, r24
     b18:	11 82       	std	Z+1, r1	; 0x01
     b1a:	10 82       	st	Z, r1
     b1c:	81 ec       	ldi	r24, 0xC1	; 193
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	21 ec       	ldi	r18, 0xC1	; 193
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	f9 01       	movw	r30, r18
     b26:	20 81       	ld	r18, Z
     b28:	20 64       	ori	r18, 0x40	; 64
     b2a:	fc 01       	movw	r30, r24
     b2c:	20 83       	st	Z, r18
     b2e:	81 ec       	ldi	r24, 0xC1	; 193
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	21 ec       	ldi	r18, 0xC1	; 193
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	f9 01       	movw	r30, r18
     b38:	20 81       	ld	r18, Z
     b3a:	20 68       	ori	r18, 0x80	; 128
     b3c:	fc 01       	movw	r30, r24
     b3e:	20 83       	st	Z, r18
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	0f 90       	pop	r0
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	08 95       	ret

00000b50 <uart_init>:
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	00 d0       	rcall	.+0      	; 0xb56 <uart_init+0x6>
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
     b5a:	87 e6       	ldi	r24, 0x67	; 103
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	9a 83       	std	Y+2, r25	; 0x02
     b60:	89 83       	std	Y+1, r24	; 0x01
     b62:	85 ec       	ldi	r24, 0xC5	; 197
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	29 81       	ldd	r18, Y+1	; 0x01
     b68:	3a 81       	ldd	r19, Y+2	; 0x02
     b6a:	23 2f       	mov	r18, r19
     b6c:	33 27       	eor	r19, r19
     b6e:	fc 01       	movw	r30, r24
     b70:	20 83       	st	Z, r18
     b72:	84 ec       	ldi	r24, 0xC4	; 196
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	29 81       	ldd	r18, Y+1	; 0x01
     b78:	fc 01       	movw	r30, r24
     b7a:	20 83       	st	Z, r18
     b7c:	81 ec       	ldi	r24, 0xC1	; 193
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	28 e1       	ldi	r18, 0x18	; 24
     b82:	fc 01       	movw	r30, r24
     b84:	20 83       	st	Z, r18
     b86:	82 ec       	ldi	r24, 0xC2	; 194
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	26 e0       	ldi	r18, 0x06	; 6
     b8c:	fc 01       	movw	r30, r24
     b8e:	20 83       	st	Z, r18
     b90:	00 00       	nop
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	08 95       	ret

00000b9c <uart_init_isr>:
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
     ba4:	d5 df       	rcall	.-86     	; 0xb50 <uart_init>
     ba6:	81 ec       	ldi	r24, 0xC1	; 193
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	21 ec       	ldi	r18, 0xC1	; 193
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	f9 01       	movw	r30, r18
     bb0:	20 81       	ld	r18, Z
     bb2:	20 64       	ori	r18, 0x40	; 64
     bb4:	fc 01       	movw	r30, r24
     bb6:	20 83       	st	Z, r18
     bb8:	81 ec       	ldi	r24, 0xC1	; 193
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	21 ec       	ldi	r18, 0xC1	; 193
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	f9 01       	movw	r30, r18
     bc2:	20 81       	ld	r18, Z
     bc4:	20 68       	ori	r18, 0x80	; 128
     bc6:	fc 01       	movw	r30, r24
     bc8:	20 83       	st	Z, r18
     bca:	00 00       	nop
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	08 95       	ret

00000bd2 <uart_send_isr>:
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	29 97       	sbiw	r28, 0x09	; 9
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	f8 94       	cli
     be0:	de bf       	out	0x3e, r29	; 62
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	cd bf       	out	0x3d, r28	; 61
     be6:	99 87       	std	Y+9, r25	; 0x09
     be8:	88 87       	std	Y+8, r24	; 0x08
     bea:	88 85       	ldd	r24, Y+8	; 0x08
     bec:	99 85       	ldd	r25, Y+9	; 0x09
     bee:	cb d0       	rcall	.+406    	; 0xd86 <strlen>
     bf0:	9e 83       	std	Y+6, r25	; 0x06
     bf2:	8d 83       	std	Y+5, r24	; 0x05
     bf4:	1a 82       	std	Y+2, r1	; 0x02
     bf6:	19 82       	std	Y+1, r1	; 0x01
     bf8:	1c 82       	std	Y+4, r1	; 0x04
     bfa:	1b 82       	std	Y+3, r1	; 0x03
     bfc:	1c c0       	rjmp	.+56     	; 0xc36 <uart_send_isr+0x64>
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	9c 81       	ldd	r25, Y+4	; 0x04
     c02:	28 85       	ldd	r18, Y+8	; 0x08
     c04:	39 85       	ldd	r19, Y+9	; 0x09
     c06:	82 0f       	add	r24, r18
     c08:	93 1f       	adc	r25, r19
     c0a:	fc 01       	movw	r30, r24
     c0c:	80 81       	ld	r24, Z
     c0e:	64 e3       	ldi	r22, 0x34	; 52
     c10:	71 e0       	ldi	r23, 0x01	; 1
     c12:	79 de       	rcall	.-782    	; 0x906 <buff_put>
     c14:	81 30       	cpi	r24, 0x01	; 1
     c16:	51 f4       	brne	.+20     	; 0xc2c <uart_send_isr+0x5a>
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	9c 81       	ldd	r25, Y+4	; 0x04
     c1c:	9c 01       	movw	r18, r24
     c1e:	2f 5f       	subi	r18, 0xFF	; 255
     c20:	3f 4f       	sbci	r19, 0xFF	; 255
     c22:	3c 83       	std	Y+4, r19	; 0x04
     c24:	2b 83       	std	Y+3, r18	; 0x03
     c26:	9a 83       	std	Y+2, r25	; 0x02
     c28:	89 83       	std	Y+1, r24	; 0x01
     c2a:	0c c0       	rjmp	.+24     	; 0xc44 <uart_send_isr+0x72>
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	9c 81       	ldd	r25, Y+4	; 0x04
     c30:	01 96       	adiw	r24, 0x01	; 1
     c32:	9c 83       	std	Y+4, r25	; 0x04
     c34:	8b 83       	std	Y+3, r24	; 0x03
     c36:	2b 81       	ldd	r18, Y+3	; 0x03
     c38:	3c 81       	ldd	r19, Y+4	; 0x04
     c3a:	8d 81       	ldd	r24, Y+5	; 0x05
     c3c:	9e 81       	ldd	r25, Y+6	; 0x06
     c3e:	28 17       	cp	r18, r24
     c40:	39 07       	cpc	r19, r25
     c42:	ec f2       	brlt	.-70     	; 0xbfe <uart_send_isr+0x2c>
     c44:	80 ec       	ldi	r24, 0xC0	; 192
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	fc 01       	movw	r30, r24
     c4a:	80 81       	ld	r24, Z
     c4c:	88 2f       	mov	r24, r24
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	80 72       	andi	r24, 0x20	; 32
     c52:	99 27       	eor	r25, r25
     c54:	89 2b       	or	r24, r25
     c56:	61 f0       	breq	.+24     	; 0xc70 <uart_send_isr+0x9e>
     c58:	ce 01       	movw	r24, r28
     c5a:	07 96       	adiw	r24, 0x07	; 7
     c5c:	64 e3       	ldi	r22, 0x34	; 52
     c5e:	71 e0       	ldi	r23, 0x01	; 1
     c60:	ef de       	rcall	.-546    	; 0xa40 <buff_get>
     c62:	88 23       	and	r24, r24
     c64:	29 f4       	brne	.+10     	; 0xc70 <uart_send_isr+0x9e>
     c66:	86 ec       	ldi	r24, 0xC6	; 198
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	2f 81       	ldd	r18, Y+7	; 0x07
     c6c:	fc 01       	movw	r30, r24
     c6e:	20 83       	st	Z, r18
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	9a 81       	ldd	r25, Y+2	; 0x02
     c74:	29 96       	adiw	r28, 0x09	; 9
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	f8 94       	cli
     c7a:	de bf       	out	0x3e, r29	; 62
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	cd bf       	out	0x3d, r28	; 61
     c80:	df 91       	pop	r29
     c82:	cf 91       	pop	r28
     c84:	08 95       	ret

00000c86 <__vector_22>:

/**
 ISR for USART Transmit Complete flag
 */
ISR(USART0_TX_vect){
     c86:	1f 92       	push	r1
     c88:	0f 92       	push	r0
     c8a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c8e:	0f 92       	push	r0
     c90:	11 24       	eor	r1, r1
     c92:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     c96:	0f 92       	push	r0
     c98:	2f 93       	push	r18
     c9a:	3f 93       	push	r19
     c9c:	4f 93       	push	r20
     c9e:	5f 93       	push	r21
     ca0:	6f 93       	push	r22
     ca2:	7f 93       	push	r23
     ca4:	8f 93       	push	r24
     ca6:	9f 93       	push	r25
     ca8:	af 93       	push	r26
     caa:	bf 93       	push	r27
     cac:	ef 93       	push	r30
     cae:	ff 93       	push	r31
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	1f 92       	push	r1
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
    unsigned char pByte;
    // Pull one byte from buffer and store it in pByte
    if (buff_get(&pByte, &bufferSend) == 0) {
     cba:	64 e3       	ldi	r22, 0x34	; 52
     cbc:	71 e0       	ldi	r23, 0x01	; 1
     cbe:	ce 01       	movw	r24, r28
     cc0:	01 96       	adiw	r24, 0x01	; 1
     cc2:	be de       	rcall	.-644    	; 0xa40 <buff_get>
     cc4:	88 23       	and	r24, r24
     cc6:	29 f4       	brne	.+10     	; 0xcd2 <__vector_22+0x4c>
        // Send byte
        UDR0 = pByte;
     cc8:	86 ec       	ldi	r24, 0xC6	; 198
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	29 81       	ldd	r18, Y+1	; 0x01
     cce:	fc 01       	movw	r30, r24
     cd0:	20 83       	st	Z, r18
    }
}
     cd2:	00 00       	nop
     cd4:	0f 90       	pop	r0
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	ff 91       	pop	r31
     cdc:	ef 91       	pop	r30
     cde:	bf 91       	pop	r27
     ce0:	af 91       	pop	r26
     ce2:	9f 91       	pop	r25
     ce4:	8f 91       	pop	r24
     ce6:	7f 91       	pop	r23
     ce8:	6f 91       	pop	r22
     cea:	5f 91       	pop	r21
     cec:	4f 91       	pop	r20
     cee:	3f 91       	pop	r19
     cf0:	2f 91       	pop	r18
     cf2:	0f 90       	pop	r0
     cf4:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     cf8:	0f 90       	pop	r0
     cfa:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     cfe:	0f 90       	pop	r0
     d00:	1f 90       	pop	r1
     d02:	18 95       	reti

00000d04 <__vector_20>:

ISR(USART0_RX_vect){
     d04:	1f 92       	push	r1
     d06:	0f 92       	push	r0
     d08:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d0c:	0f 92       	push	r0
     d0e:	11 24       	eor	r1, r1
     d10:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     d14:	0f 92       	push	r0
     d16:	2f 93       	push	r18
     d18:	3f 93       	push	r19
     d1a:	4f 93       	push	r20
     d1c:	5f 93       	push	r21
     d1e:	6f 93       	push	r22
     d20:	7f 93       	push	r23
     d22:	8f 93       	push	r24
     d24:	9f 93       	push	r25
     d26:	af 93       	push	r26
     d28:	bf 93       	push	r27
     d2a:	ef 93       	push	r30
     d2c:	ff 93       	push	r31
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
    // Put received byte to bufferRecv (will read but don't save the value if buffer overflows)
    buff_put(UDR0, &bufferRecv);
     d36:	86 ec       	ldi	r24, 0xC6	; 198
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	fc 01       	movw	r30, r24
     d3c:	80 81       	ld	r24, Z
     d3e:	68 e3       	ldi	r22, 0x38	; 56
     d40:	73 e0       	ldi	r23, 0x03	; 3
     d42:	e1 dd       	rcall	.-1086   	; 0x906 <buff_put>
}
     d44:	00 00       	nop
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	ff 91       	pop	r31
     d4c:	ef 91       	pop	r30
     d4e:	bf 91       	pop	r27
     d50:	af 91       	pop	r26
     d52:	9f 91       	pop	r25
     d54:	8f 91       	pop	r24
     d56:	7f 91       	pop	r23
     d58:	6f 91       	pop	r22
     d5a:	5f 91       	pop	r21
     d5c:	4f 91       	pop	r20
     d5e:	3f 91       	pop	r19
     d60:	2f 91       	pop	r18
     d62:	0f 90       	pop	r0
     d64:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     d68:	0f 90       	pop	r0
     d6a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d6e:	0f 90       	pop	r0
     d70:	1f 90       	pop	r1
     d72:	18 95       	reti

00000d74 <__tablejump2__>:
     d74:	ee 0f       	add	r30, r30
     d76:	ff 1f       	adc	r31, r31
     d78:	00 24       	eor	r0, r0
     d7a:	00 1c       	adc	r0, r0
     d7c:	0b be       	out	0x3b, r0	; 59
     d7e:	07 90       	elpm	r0, Z+
     d80:	f6 91       	elpm	r31, Z
     d82:	e0 2d       	mov	r30, r0
     d84:	09 94       	ijmp

00000d86 <strlen>:
     d86:	fc 01       	movw	r30, r24
     d88:	01 90       	ld	r0, Z+
     d8a:	00 20       	and	r0, r0
     d8c:	e9 f7       	brne	.-6      	; 0xd88 <strlen+0x2>
     d8e:	80 95       	com	r24
     d90:	90 95       	com	r25
     d92:	8e 0f       	add	r24, r30
     d94:	9f 1f       	adc	r25, r31
     d96:	08 95       	ret

00000d98 <sprintf>:
     d98:	0f 93       	push	r16
     d9a:	1f 93       	push	r17
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	2e 97       	sbiw	r28, 0x0e	; 14
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	f8 94       	cli
     daa:	de bf       	out	0x3e, r29	; 62
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	cd bf       	out	0x3d, r28	; 61
     db0:	0d 89       	ldd	r16, Y+21	; 0x15
     db2:	1e 89       	ldd	r17, Y+22	; 0x16
     db4:	86 e0       	ldi	r24, 0x06	; 6
     db6:	8c 83       	std	Y+4, r24	; 0x04
     db8:	1a 83       	std	Y+2, r17	; 0x02
     dba:	09 83       	std	Y+1, r16	; 0x01
     dbc:	8f ef       	ldi	r24, 0xFF	; 255
     dbe:	9f e7       	ldi	r25, 0x7F	; 127
     dc0:	9e 83       	std	Y+6, r25	; 0x06
     dc2:	8d 83       	std	Y+5, r24	; 0x05
     dc4:	ae 01       	movw	r20, r28
     dc6:	47 5e       	subi	r20, 0xE7	; 231
     dc8:	5f 4f       	sbci	r21, 0xFF	; 255
     dca:	6f 89       	ldd	r22, Y+23	; 0x17
     dcc:	78 8d       	ldd	r23, Y+24	; 0x18
     dce:	ce 01       	movw	r24, r28
     dd0:	01 96       	adiw	r24, 0x01	; 1
     dd2:	10 d0       	rcall	.+32     	; 0xdf4 <vfprintf>
     dd4:	ef 81       	ldd	r30, Y+7	; 0x07
     dd6:	f8 85       	ldd	r31, Y+8	; 0x08
     dd8:	e0 0f       	add	r30, r16
     dda:	f1 1f       	adc	r31, r17
     ddc:	10 82       	st	Z, r1
     dde:	2e 96       	adiw	r28, 0x0e	; 14
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	f8 94       	cli
     de4:	de bf       	out	0x3e, r29	; 62
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	cd bf       	out	0x3d, r28	; 61
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	1f 91       	pop	r17
     df0:	0f 91       	pop	r16
     df2:	08 95       	ret

00000df4 <vfprintf>:
     df4:	2f 92       	push	r2
     df6:	3f 92       	push	r3
     df8:	4f 92       	push	r4
     dfa:	5f 92       	push	r5
     dfc:	6f 92       	push	r6
     dfe:	7f 92       	push	r7
     e00:	8f 92       	push	r8
     e02:	9f 92       	push	r9
     e04:	af 92       	push	r10
     e06:	bf 92       	push	r11
     e08:	cf 92       	push	r12
     e0a:	df 92       	push	r13
     e0c:	ef 92       	push	r14
     e0e:	ff 92       	push	r15
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	2b 97       	sbiw	r28, 0x0b	; 11
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	f8 94       	cli
     e22:	de bf       	out	0x3e, r29	; 62
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	cd bf       	out	0x3d, r28	; 61
     e28:	6c 01       	movw	r12, r24
     e2a:	7b 01       	movw	r14, r22
     e2c:	8a 01       	movw	r16, r20
     e2e:	fc 01       	movw	r30, r24
     e30:	17 82       	std	Z+7, r1	; 0x07
     e32:	16 82       	std	Z+6, r1	; 0x06
     e34:	83 81       	ldd	r24, Z+3	; 0x03
     e36:	81 ff       	sbrs	r24, 1
     e38:	bf c1       	rjmp	.+894    	; 0x11b8 <vfprintf+0x3c4>
     e3a:	ce 01       	movw	r24, r28
     e3c:	01 96       	adiw	r24, 0x01	; 1
     e3e:	3c 01       	movw	r6, r24
     e40:	f6 01       	movw	r30, r12
     e42:	93 81       	ldd	r25, Z+3	; 0x03
     e44:	f7 01       	movw	r30, r14
     e46:	93 fd       	sbrc	r25, 3
     e48:	85 91       	lpm	r24, Z+
     e4a:	93 ff       	sbrs	r25, 3
     e4c:	81 91       	ld	r24, Z+
     e4e:	7f 01       	movw	r14, r30
     e50:	88 23       	and	r24, r24
     e52:	09 f4       	brne	.+2      	; 0xe56 <vfprintf+0x62>
     e54:	ad c1       	rjmp	.+858    	; 0x11b0 <vfprintf+0x3bc>
     e56:	85 32       	cpi	r24, 0x25	; 37
     e58:	39 f4       	brne	.+14     	; 0xe68 <vfprintf+0x74>
     e5a:	93 fd       	sbrc	r25, 3
     e5c:	85 91       	lpm	r24, Z+
     e5e:	93 ff       	sbrs	r25, 3
     e60:	81 91       	ld	r24, Z+
     e62:	7f 01       	movw	r14, r30
     e64:	85 32       	cpi	r24, 0x25	; 37
     e66:	21 f4       	brne	.+8      	; 0xe70 <vfprintf+0x7c>
     e68:	b6 01       	movw	r22, r12
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	d6 d1       	rcall	.+940    	; 0x121a <fputc>
     e6e:	e8 cf       	rjmp	.-48     	; 0xe40 <vfprintf+0x4c>
     e70:	91 2c       	mov	r9, r1
     e72:	21 2c       	mov	r2, r1
     e74:	31 2c       	mov	r3, r1
     e76:	ff e1       	ldi	r31, 0x1F	; 31
     e78:	f3 15       	cp	r31, r3
     e7a:	d8 f0       	brcs	.+54     	; 0xeb2 <vfprintf+0xbe>
     e7c:	8b 32       	cpi	r24, 0x2B	; 43
     e7e:	79 f0       	breq	.+30     	; 0xe9e <vfprintf+0xaa>
     e80:	38 f4       	brcc	.+14     	; 0xe90 <vfprintf+0x9c>
     e82:	80 32       	cpi	r24, 0x20	; 32
     e84:	79 f0       	breq	.+30     	; 0xea4 <vfprintf+0xb0>
     e86:	83 32       	cpi	r24, 0x23	; 35
     e88:	a1 f4       	brne	.+40     	; 0xeb2 <vfprintf+0xbe>
     e8a:	23 2d       	mov	r18, r3
     e8c:	20 61       	ori	r18, 0x10	; 16
     e8e:	1d c0       	rjmp	.+58     	; 0xeca <vfprintf+0xd6>
     e90:	8d 32       	cpi	r24, 0x2D	; 45
     e92:	61 f0       	breq	.+24     	; 0xeac <vfprintf+0xb8>
     e94:	80 33       	cpi	r24, 0x30	; 48
     e96:	69 f4       	brne	.+26     	; 0xeb2 <vfprintf+0xbe>
     e98:	23 2d       	mov	r18, r3
     e9a:	21 60       	ori	r18, 0x01	; 1
     e9c:	16 c0       	rjmp	.+44     	; 0xeca <vfprintf+0xd6>
     e9e:	83 2d       	mov	r24, r3
     ea0:	82 60       	ori	r24, 0x02	; 2
     ea2:	38 2e       	mov	r3, r24
     ea4:	e3 2d       	mov	r30, r3
     ea6:	e4 60       	ori	r30, 0x04	; 4
     ea8:	3e 2e       	mov	r3, r30
     eaa:	2a c0       	rjmp	.+84     	; 0xf00 <vfprintf+0x10c>
     eac:	f3 2d       	mov	r31, r3
     eae:	f8 60       	ori	r31, 0x08	; 8
     eb0:	1d c0       	rjmp	.+58     	; 0xeec <vfprintf+0xf8>
     eb2:	37 fc       	sbrc	r3, 7
     eb4:	2d c0       	rjmp	.+90     	; 0xf10 <vfprintf+0x11c>
     eb6:	20 ed       	ldi	r18, 0xD0	; 208
     eb8:	28 0f       	add	r18, r24
     eba:	2a 30       	cpi	r18, 0x0A	; 10
     ebc:	40 f0       	brcs	.+16     	; 0xece <vfprintf+0xda>
     ebe:	8e 32       	cpi	r24, 0x2E	; 46
     ec0:	b9 f4       	brne	.+46     	; 0xef0 <vfprintf+0xfc>
     ec2:	36 fc       	sbrc	r3, 6
     ec4:	75 c1       	rjmp	.+746    	; 0x11b0 <vfprintf+0x3bc>
     ec6:	23 2d       	mov	r18, r3
     ec8:	20 64       	ori	r18, 0x40	; 64
     eca:	32 2e       	mov	r3, r18
     ecc:	19 c0       	rjmp	.+50     	; 0xf00 <vfprintf+0x10c>
     ece:	36 fe       	sbrs	r3, 6
     ed0:	06 c0       	rjmp	.+12     	; 0xede <vfprintf+0xea>
     ed2:	8a e0       	ldi	r24, 0x0A	; 10
     ed4:	98 9e       	mul	r9, r24
     ed6:	20 0d       	add	r18, r0
     ed8:	11 24       	eor	r1, r1
     eda:	92 2e       	mov	r9, r18
     edc:	11 c0       	rjmp	.+34     	; 0xf00 <vfprintf+0x10c>
     ede:	ea e0       	ldi	r30, 0x0A	; 10
     ee0:	2e 9e       	mul	r2, r30
     ee2:	20 0d       	add	r18, r0
     ee4:	11 24       	eor	r1, r1
     ee6:	22 2e       	mov	r2, r18
     ee8:	f3 2d       	mov	r31, r3
     eea:	f0 62       	ori	r31, 0x20	; 32
     eec:	3f 2e       	mov	r3, r31
     eee:	08 c0       	rjmp	.+16     	; 0xf00 <vfprintf+0x10c>
     ef0:	8c 36       	cpi	r24, 0x6C	; 108
     ef2:	21 f4       	brne	.+8      	; 0xefc <vfprintf+0x108>
     ef4:	83 2d       	mov	r24, r3
     ef6:	80 68       	ori	r24, 0x80	; 128
     ef8:	38 2e       	mov	r3, r24
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <vfprintf+0x10c>
     efc:	88 36       	cpi	r24, 0x68	; 104
     efe:	41 f4       	brne	.+16     	; 0xf10 <vfprintf+0x11c>
     f00:	f7 01       	movw	r30, r14
     f02:	93 fd       	sbrc	r25, 3
     f04:	85 91       	lpm	r24, Z+
     f06:	93 ff       	sbrs	r25, 3
     f08:	81 91       	ld	r24, Z+
     f0a:	7f 01       	movw	r14, r30
     f0c:	81 11       	cpse	r24, r1
     f0e:	b3 cf       	rjmp	.-154    	; 0xe76 <vfprintf+0x82>
     f10:	98 2f       	mov	r25, r24
     f12:	9f 7d       	andi	r25, 0xDF	; 223
     f14:	95 54       	subi	r25, 0x45	; 69
     f16:	93 30       	cpi	r25, 0x03	; 3
     f18:	28 f4       	brcc	.+10     	; 0xf24 <vfprintf+0x130>
     f1a:	0c 5f       	subi	r16, 0xFC	; 252
     f1c:	1f 4f       	sbci	r17, 0xFF	; 255
     f1e:	9f e3       	ldi	r25, 0x3F	; 63
     f20:	99 83       	std	Y+1, r25	; 0x01
     f22:	0d c0       	rjmp	.+26     	; 0xf3e <vfprintf+0x14a>
     f24:	83 36       	cpi	r24, 0x63	; 99
     f26:	31 f0       	breq	.+12     	; 0xf34 <vfprintf+0x140>
     f28:	83 37       	cpi	r24, 0x73	; 115
     f2a:	71 f0       	breq	.+28     	; 0xf48 <vfprintf+0x154>
     f2c:	83 35       	cpi	r24, 0x53	; 83
     f2e:	09 f0       	breq	.+2      	; 0xf32 <vfprintf+0x13e>
     f30:	55 c0       	rjmp	.+170    	; 0xfdc <vfprintf+0x1e8>
     f32:	20 c0       	rjmp	.+64     	; 0xf74 <vfprintf+0x180>
     f34:	f8 01       	movw	r30, r16
     f36:	80 81       	ld	r24, Z
     f38:	89 83       	std	Y+1, r24	; 0x01
     f3a:	0e 5f       	subi	r16, 0xFE	; 254
     f3c:	1f 4f       	sbci	r17, 0xFF	; 255
     f3e:	88 24       	eor	r8, r8
     f40:	83 94       	inc	r8
     f42:	91 2c       	mov	r9, r1
     f44:	53 01       	movw	r10, r6
     f46:	12 c0       	rjmp	.+36     	; 0xf6c <vfprintf+0x178>
     f48:	28 01       	movw	r4, r16
     f4a:	f2 e0       	ldi	r31, 0x02	; 2
     f4c:	4f 0e       	add	r4, r31
     f4e:	51 1c       	adc	r5, r1
     f50:	f8 01       	movw	r30, r16
     f52:	a0 80       	ld	r10, Z
     f54:	b1 80       	ldd	r11, Z+1	; 0x01
     f56:	36 fe       	sbrs	r3, 6
     f58:	03 c0       	rjmp	.+6      	; 0xf60 <vfprintf+0x16c>
     f5a:	69 2d       	mov	r22, r9
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <vfprintf+0x170>
     f60:	6f ef       	ldi	r22, 0xFF	; 255
     f62:	7f ef       	ldi	r23, 0xFF	; 255
     f64:	c5 01       	movw	r24, r10
     f66:	4e d1       	rcall	.+668    	; 0x1204 <strnlen>
     f68:	4c 01       	movw	r8, r24
     f6a:	82 01       	movw	r16, r4
     f6c:	f3 2d       	mov	r31, r3
     f6e:	ff 77       	andi	r31, 0x7F	; 127
     f70:	3f 2e       	mov	r3, r31
     f72:	15 c0       	rjmp	.+42     	; 0xf9e <vfprintf+0x1aa>
     f74:	28 01       	movw	r4, r16
     f76:	22 e0       	ldi	r18, 0x02	; 2
     f78:	42 0e       	add	r4, r18
     f7a:	51 1c       	adc	r5, r1
     f7c:	f8 01       	movw	r30, r16
     f7e:	a0 80       	ld	r10, Z
     f80:	b1 80       	ldd	r11, Z+1	; 0x01
     f82:	36 fe       	sbrs	r3, 6
     f84:	03 c0       	rjmp	.+6      	; 0xf8c <vfprintf+0x198>
     f86:	69 2d       	mov	r22, r9
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <vfprintf+0x19c>
     f8c:	6f ef       	ldi	r22, 0xFF	; 255
     f8e:	7f ef       	ldi	r23, 0xFF	; 255
     f90:	c5 01       	movw	r24, r10
     f92:	2d d1       	rcall	.+602    	; 0x11ee <strnlen_P>
     f94:	4c 01       	movw	r8, r24
     f96:	f3 2d       	mov	r31, r3
     f98:	f0 68       	ori	r31, 0x80	; 128
     f9a:	3f 2e       	mov	r3, r31
     f9c:	82 01       	movw	r16, r4
     f9e:	33 fc       	sbrc	r3, 3
     fa0:	19 c0       	rjmp	.+50     	; 0xfd4 <vfprintf+0x1e0>
     fa2:	82 2d       	mov	r24, r2
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	88 16       	cp	r8, r24
     fa8:	99 06       	cpc	r9, r25
     faa:	a0 f4       	brcc	.+40     	; 0xfd4 <vfprintf+0x1e0>
     fac:	b6 01       	movw	r22, r12
     fae:	80 e2       	ldi	r24, 0x20	; 32
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	33 d1       	rcall	.+614    	; 0x121a <fputc>
     fb4:	2a 94       	dec	r2
     fb6:	f5 cf       	rjmp	.-22     	; 0xfa2 <vfprintf+0x1ae>
     fb8:	f5 01       	movw	r30, r10
     fba:	37 fc       	sbrc	r3, 7
     fbc:	85 91       	lpm	r24, Z+
     fbe:	37 fe       	sbrs	r3, 7
     fc0:	81 91       	ld	r24, Z+
     fc2:	5f 01       	movw	r10, r30
     fc4:	b6 01       	movw	r22, r12
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	28 d1       	rcall	.+592    	; 0x121a <fputc>
     fca:	21 10       	cpse	r2, r1
     fcc:	2a 94       	dec	r2
     fce:	21 e0       	ldi	r18, 0x01	; 1
     fd0:	82 1a       	sub	r8, r18
     fd2:	91 08       	sbc	r9, r1
     fd4:	81 14       	cp	r8, r1
     fd6:	91 04       	cpc	r9, r1
     fd8:	79 f7       	brne	.-34     	; 0xfb8 <vfprintf+0x1c4>
     fda:	e1 c0       	rjmp	.+450    	; 0x119e <vfprintf+0x3aa>
     fdc:	84 36       	cpi	r24, 0x64	; 100
     fde:	11 f0       	breq	.+4      	; 0xfe4 <vfprintf+0x1f0>
     fe0:	89 36       	cpi	r24, 0x69	; 105
     fe2:	39 f5       	brne	.+78     	; 0x1032 <vfprintf+0x23e>
     fe4:	f8 01       	movw	r30, r16
     fe6:	37 fe       	sbrs	r3, 7
     fe8:	07 c0       	rjmp	.+14     	; 0xff8 <vfprintf+0x204>
     fea:	60 81       	ld	r22, Z
     fec:	71 81       	ldd	r23, Z+1	; 0x01
     fee:	82 81       	ldd	r24, Z+2	; 0x02
     ff0:	93 81       	ldd	r25, Z+3	; 0x03
     ff2:	0c 5f       	subi	r16, 0xFC	; 252
     ff4:	1f 4f       	sbci	r17, 0xFF	; 255
     ff6:	08 c0       	rjmp	.+16     	; 0x1008 <vfprintf+0x214>
     ff8:	60 81       	ld	r22, Z
     ffa:	71 81       	ldd	r23, Z+1	; 0x01
     ffc:	07 2e       	mov	r0, r23
     ffe:	00 0c       	add	r0, r0
    1000:	88 0b       	sbc	r24, r24
    1002:	99 0b       	sbc	r25, r25
    1004:	0e 5f       	subi	r16, 0xFE	; 254
    1006:	1f 4f       	sbci	r17, 0xFF	; 255
    1008:	f3 2d       	mov	r31, r3
    100a:	ff 76       	andi	r31, 0x6F	; 111
    100c:	3f 2e       	mov	r3, r31
    100e:	97 ff       	sbrs	r25, 7
    1010:	09 c0       	rjmp	.+18     	; 0x1024 <vfprintf+0x230>
    1012:	90 95       	com	r25
    1014:	80 95       	com	r24
    1016:	70 95       	com	r23
    1018:	61 95       	neg	r22
    101a:	7f 4f       	sbci	r23, 0xFF	; 255
    101c:	8f 4f       	sbci	r24, 0xFF	; 255
    101e:	9f 4f       	sbci	r25, 0xFF	; 255
    1020:	f0 68       	ori	r31, 0x80	; 128
    1022:	3f 2e       	mov	r3, r31
    1024:	2a e0       	ldi	r18, 0x0A	; 10
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	a3 01       	movw	r20, r6
    102a:	33 d1       	rcall	.+614    	; 0x1292 <__ultoa_invert>
    102c:	88 2e       	mov	r8, r24
    102e:	86 18       	sub	r8, r6
    1030:	44 c0       	rjmp	.+136    	; 0x10ba <vfprintf+0x2c6>
    1032:	85 37       	cpi	r24, 0x75	; 117
    1034:	31 f4       	brne	.+12     	; 0x1042 <vfprintf+0x24e>
    1036:	23 2d       	mov	r18, r3
    1038:	2f 7e       	andi	r18, 0xEF	; 239
    103a:	b2 2e       	mov	r11, r18
    103c:	2a e0       	ldi	r18, 0x0A	; 10
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	25 c0       	rjmp	.+74     	; 0x108c <vfprintf+0x298>
    1042:	93 2d       	mov	r25, r3
    1044:	99 7f       	andi	r25, 0xF9	; 249
    1046:	b9 2e       	mov	r11, r25
    1048:	8f 36       	cpi	r24, 0x6F	; 111
    104a:	c1 f0       	breq	.+48     	; 0x107c <vfprintf+0x288>
    104c:	18 f4       	brcc	.+6      	; 0x1054 <vfprintf+0x260>
    104e:	88 35       	cpi	r24, 0x58	; 88
    1050:	79 f0       	breq	.+30     	; 0x1070 <vfprintf+0x27c>
    1052:	ae c0       	rjmp	.+348    	; 0x11b0 <vfprintf+0x3bc>
    1054:	80 37       	cpi	r24, 0x70	; 112
    1056:	19 f0       	breq	.+6      	; 0x105e <vfprintf+0x26a>
    1058:	88 37       	cpi	r24, 0x78	; 120
    105a:	21 f0       	breq	.+8      	; 0x1064 <vfprintf+0x270>
    105c:	a9 c0       	rjmp	.+338    	; 0x11b0 <vfprintf+0x3bc>
    105e:	e9 2f       	mov	r30, r25
    1060:	e0 61       	ori	r30, 0x10	; 16
    1062:	be 2e       	mov	r11, r30
    1064:	b4 fe       	sbrs	r11, 4
    1066:	0d c0       	rjmp	.+26     	; 0x1082 <vfprintf+0x28e>
    1068:	fb 2d       	mov	r31, r11
    106a:	f4 60       	ori	r31, 0x04	; 4
    106c:	bf 2e       	mov	r11, r31
    106e:	09 c0       	rjmp	.+18     	; 0x1082 <vfprintf+0x28e>
    1070:	34 fe       	sbrs	r3, 4
    1072:	0a c0       	rjmp	.+20     	; 0x1088 <vfprintf+0x294>
    1074:	29 2f       	mov	r18, r25
    1076:	26 60       	ori	r18, 0x06	; 6
    1078:	b2 2e       	mov	r11, r18
    107a:	06 c0       	rjmp	.+12     	; 0x1088 <vfprintf+0x294>
    107c:	28 e0       	ldi	r18, 0x08	; 8
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	05 c0       	rjmp	.+10     	; 0x108c <vfprintf+0x298>
    1082:	20 e1       	ldi	r18, 0x10	; 16
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	02 c0       	rjmp	.+4      	; 0x108c <vfprintf+0x298>
    1088:	20 e1       	ldi	r18, 0x10	; 16
    108a:	32 e0       	ldi	r19, 0x02	; 2
    108c:	f8 01       	movw	r30, r16
    108e:	b7 fe       	sbrs	r11, 7
    1090:	07 c0       	rjmp	.+14     	; 0x10a0 <vfprintf+0x2ac>
    1092:	60 81       	ld	r22, Z
    1094:	71 81       	ldd	r23, Z+1	; 0x01
    1096:	82 81       	ldd	r24, Z+2	; 0x02
    1098:	93 81       	ldd	r25, Z+3	; 0x03
    109a:	0c 5f       	subi	r16, 0xFC	; 252
    109c:	1f 4f       	sbci	r17, 0xFF	; 255
    109e:	06 c0       	rjmp	.+12     	; 0x10ac <vfprintf+0x2b8>
    10a0:	60 81       	ld	r22, Z
    10a2:	71 81       	ldd	r23, Z+1	; 0x01
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 5f       	subi	r16, 0xFE	; 254
    10aa:	1f 4f       	sbci	r17, 0xFF	; 255
    10ac:	a3 01       	movw	r20, r6
    10ae:	f1 d0       	rcall	.+482    	; 0x1292 <__ultoa_invert>
    10b0:	88 2e       	mov	r8, r24
    10b2:	86 18       	sub	r8, r6
    10b4:	fb 2d       	mov	r31, r11
    10b6:	ff 77       	andi	r31, 0x7F	; 127
    10b8:	3f 2e       	mov	r3, r31
    10ba:	36 fe       	sbrs	r3, 6
    10bc:	0d c0       	rjmp	.+26     	; 0x10d8 <vfprintf+0x2e4>
    10be:	23 2d       	mov	r18, r3
    10c0:	2e 7f       	andi	r18, 0xFE	; 254
    10c2:	a2 2e       	mov	r10, r18
    10c4:	89 14       	cp	r8, r9
    10c6:	58 f4       	brcc	.+22     	; 0x10de <vfprintf+0x2ea>
    10c8:	34 fe       	sbrs	r3, 4
    10ca:	0b c0       	rjmp	.+22     	; 0x10e2 <vfprintf+0x2ee>
    10cc:	32 fc       	sbrc	r3, 2
    10ce:	09 c0       	rjmp	.+18     	; 0x10e2 <vfprintf+0x2ee>
    10d0:	83 2d       	mov	r24, r3
    10d2:	8e 7e       	andi	r24, 0xEE	; 238
    10d4:	a8 2e       	mov	r10, r24
    10d6:	05 c0       	rjmp	.+10     	; 0x10e2 <vfprintf+0x2ee>
    10d8:	b8 2c       	mov	r11, r8
    10da:	a3 2c       	mov	r10, r3
    10dc:	03 c0       	rjmp	.+6      	; 0x10e4 <vfprintf+0x2f0>
    10de:	b8 2c       	mov	r11, r8
    10e0:	01 c0       	rjmp	.+2      	; 0x10e4 <vfprintf+0x2f0>
    10e2:	b9 2c       	mov	r11, r9
    10e4:	a4 fe       	sbrs	r10, 4
    10e6:	0f c0       	rjmp	.+30     	; 0x1106 <vfprintf+0x312>
    10e8:	fe 01       	movw	r30, r28
    10ea:	e8 0d       	add	r30, r8
    10ec:	f1 1d       	adc	r31, r1
    10ee:	80 81       	ld	r24, Z
    10f0:	80 33       	cpi	r24, 0x30	; 48
    10f2:	21 f4       	brne	.+8      	; 0x10fc <vfprintf+0x308>
    10f4:	9a 2d       	mov	r25, r10
    10f6:	99 7e       	andi	r25, 0xE9	; 233
    10f8:	a9 2e       	mov	r10, r25
    10fa:	09 c0       	rjmp	.+18     	; 0x110e <vfprintf+0x31a>
    10fc:	a2 fe       	sbrs	r10, 2
    10fe:	06 c0       	rjmp	.+12     	; 0x110c <vfprintf+0x318>
    1100:	b3 94       	inc	r11
    1102:	b3 94       	inc	r11
    1104:	04 c0       	rjmp	.+8      	; 0x110e <vfprintf+0x31a>
    1106:	8a 2d       	mov	r24, r10
    1108:	86 78       	andi	r24, 0x86	; 134
    110a:	09 f0       	breq	.+2      	; 0x110e <vfprintf+0x31a>
    110c:	b3 94       	inc	r11
    110e:	a3 fc       	sbrc	r10, 3
    1110:	10 c0       	rjmp	.+32     	; 0x1132 <vfprintf+0x33e>
    1112:	a0 fe       	sbrs	r10, 0
    1114:	06 c0       	rjmp	.+12     	; 0x1122 <vfprintf+0x32e>
    1116:	b2 14       	cp	r11, r2
    1118:	80 f4       	brcc	.+32     	; 0x113a <vfprintf+0x346>
    111a:	28 0c       	add	r2, r8
    111c:	92 2c       	mov	r9, r2
    111e:	9b 18       	sub	r9, r11
    1120:	0d c0       	rjmp	.+26     	; 0x113c <vfprintf+0x348>
    1122:	b2 14       	cp	r11, r2
    1124:	58 f4       	brcc	.+22     	; 0x113c <vfprintf+0x348>
    1126:	b6 01       	movw	r22, r12
    1128:	80 e2       	ldi	r24, 0x20	; 32
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	76 d0       	rcall	.+236    	; 0x121a <fputc>
    112e:	b3 94       	inc	r11
    1130:	f8 cf       	rjmp	.-16     	; 0x1122 <vfprintf+0x32e>
    1132:	b2 14       	cp	r11, r2
    1134:	18 f4       	brcc	.+6      	; 0x113c <vfprintf+0x348>
    1136:	2b 18       	sub	r2, r11
    1138:	02 c0       	rjmp	.+4      	; 0x113e <vfprintf+0x34a>
    113a:	98 2c       	mov	r9, r8
    113c:	21 2c       	mov	r2, r1
    113e:	a4 fe       	sbrs	r10, 4
    1140:	0f c0       	rjmp	.+30     	; 0x1160 <vfprintf+0x36c>
    1142:	b6 01       	movw	r22, r12
    1144:	80 e3       	ldi	r24, 0x30	; 48
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	68 d0       	rcall	.+208    	; 0x121a <fputc>
    114a:	a2 fe       	sbrs	r10, 2
    114c:	16 c0       	rjmp	.+44     	; 0x117a <vfprintf+0x386>
    114e:	a1 fc       	sbrc	r10, 1
    1150:	03 c0       	rjmp	.+6      	; 0x1158 <vfprintf+0x364>
    1152:	88 e7       	ldi	r24, 0x78	; 120
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	02 c0       	rjmp	.+4      	; 0x115c <vfprintf+0x368>
    1158:	88 e5       	ldi	r24, 0x58	; 88
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	b6 01       	movw	r22, r12
    115e:	0c c0       	rjmp	.+24     	; 0x1178 <vfprintf+0x384>
    1160:	8a 2d       	mov	r24, r10
    1162:	86 78       	andi	r24, 0x86	; 134
    1164:	51 f0       	breq	.+20     	; 0x117a <vfprintf+0x386>
    1166:	a1 fe       	sbrs	r10, 1
    1168:	02 c0       	rjmp	.+4      	; 0x116e <vfprintf+0x37a>
    116a:	8b e2       	ldi	r24, 0x2B	; 43
    116c:	01 c0       	rjmp	.+2      	; 0x1170 <vfprintf+0x37c>
    116e:	80 e2       	ldi	r24, 0x20	; 32
    1170:	a7 fc       	sbrc	r10, 7
    1172:	8d e2       	ldi	r24, 0x2D	; 45
    1174:	b6 01       	movw	r22, r12
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	50 d0       	rcall	.+160    	; 0x121a <fputc>
    117a:	89 14       	cp	r8, r9
    117c:	30 f4       	brcc	.+12     	; 0x118a <vfprintf+0x396>
    117e:	b6 01       	movw	r22, r12
    1180:	80 e3       	ldi	r24, 0x30	; 48
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	4a d0       	rcall	.+148    	; 0x121a <fputc>
    1186:	9a 94       	dec	r9
    1188:	f8 cf       	rjmp	.-16     	; 0x117a <vfprintf+0x386>
    118a:	8a 94       	dec	r8
    118c:	f3 01       	movw	r30, r6
    118e:	e8 0d       	add	r30, r8
    1190:	f1 1d       	adc	r31, r1
    1192:	80 81       	ld	r24, Z
    1194:	b6 01       	movw	r22, r12
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	40 d0       	rcall	.+128    	; 0x121a <fputc>
    119a:	81 10       	cpse	r8, r1
    119c:	f6 cf       	rjmp	.-20     	; 0x118a <vfprintf+0x396>
    119e:	22 20       	and	r2, r2
    11a0:	09 f4       	brne	.+2      	; 0x11a4 <vfprintf+0x3b0>
    11a2:	4e ce       	rjmp	.-868    	; 0xe40 <vfprintf+0x4c>
    11a4:	b6 01       	movw	r22, r12
    11a6:	80 e2       	ldi	r24, 0x20	; 32
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	37 d0       	rcall	.+110    	; 0x121a <fputc>
    11ac:	2a 94       	dec	r2
    11ae:	f7 cf       	rjmp	.-18     	; 0x119e <vfprintf+0x3aa>
    11b0:	f6 01       	movw	r30, r12
    11b2:	86 81       	ldd	r24, Z+6	; 0x06
    11b4:	97 81       	ldd	r25, Z+7	; 0x07
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <vfprintf+0x3c8>
    11b8:	8f ef       	ldi	r24, 0xFF	; 255
    11ba:	9f ef       	ldi	r25, 0xFF	; 255
    11bc:	2b 96       	adiw	r28, 0x0b	; 11
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	1f 91       	pop	r17
    11ce:	0f 91       	pop	r16
    11d0:	ff 90       	pop	r15
    11d2:	ef 90       	pop	r14
    11d4:	df 90       	pop	r13
    11d6:	cf 90       	pop	r12
    11d8:	bf 90       	pop	r11
    11da:	af 90       	pop	r10
    11dc:	9f 90       	pop	r9
    11de:	8f 90       	pop	r8
    11e0:	7f 90       	pop	r7
    11e2:	6f 90       	pop	r6
    11e4:	5f 90       	pop	r5
    11e6:	4f 90       	pop	r4
    11e8:	3f 90       	pop	r3
    11ea:	2f 90       	pop	r2
    11ec:	08 95       	ret

000011ee <strnlen_P>:
    11ee:	fc 01       	movw	r30, r24
    11f0:	05 90       	lpm	r0, Z+
    11f2:	61 50       	subi	r22, 0x01	; 1
    11f4:	70 40       	sbci	r23, 0x00	; 0
    11f6:	01 10       	cpse	r0, r1
    11f8:	d8 f7       	brcc	.-10     	; 0x11f0 <strnlen_P+0x2>
    11fa:	80 95       	com	r24
    11fc:	90 95       	com	r25
    11fe:	8e 0f       	add	r24, r30
    1200:	9f 1f       	adc	r25, r31
    1202:	08 95       	ret

00001204 <strnlen>:
    1204:	fc 01       	movw	r30, r24
    1206:	61 50       	subi	r22, 0x01	; 1
    1208:	70 40       	sbci	r23, 0x00	; 0
    120a:	01 90       	ld	r0, Z+
    120c:	01 10       	cpse	r0, r1
    120e:	d8 f7       	brcc	.-10     	; 0x1206 <strnlen+0x2>
    1210:	80 95       	com	r24
    1212:	90 95       	com	r25
    1214:	8e 0f       	add	r24, r30
    1216:	9f 1f       	adc	r25, r31
    1218:	08 95       	ret

0000121a <fputc>:
    121a:	0f 93       	push	r16
    121c:	1f 93       	push	r17
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	fb 01       	movw	r30, r22
    1224:	23 81       	ldd	r18, Z+3	; 0x03
    1226:	21 fd       	sbrc	r18, 1
    1228:	03 c0       	rjmp	.+6      	; 0x1230 <fputc+0x16>
    122a:	8f ef       	ldi	r24, 0xFF	; 255
    122c:	9f ef       	ldi	r25, 0xFF	; 255
    122e:	2c c0       	rjmp	.+88     	; 0x1288 <fputc+0x6e>
    1230:	22 ff       	sbrs	r18, 2
    1232:	16 c0       	rjmp	.+44     	; 0x1260 <fputc+0x46>
    1234:	46 81       	ldd	r20, Z+6	; 0x06
    1236:	57 81       	ldd	r21, Z+7	; 0x07
    1238:	24 81       	ldd	r18, Z+4	; 0x04
    123a:	35 81       	ldd	r19, Z+5	; 0x05
    123c:	42 17       	cp	r20, r18
    123e:	53 07       	cpc	r21, r19
    1240:	44 f4       	brge	.+16     	; 0x1252 <fputc+0x38>
    1242:	a0 81       	ld	r26, Z
    1244:	b1 81       	ldd	r27, Z+1	; 0x01
    1246:	9d 01       	movw	r18, r26
    1248:	2f 5f       	subi	r18, 0xFF	; 255
    124a:	3f 4f       	sbci	r19, 0xFF	; 255
    124c:	31 83       	std	Z+1, r19	; 0x01
    124e:	20 83       	st	Z, r18
    1250:	8c 93       	st	X, r24
    1252:	26 81       	ldd	r18, Z+6	; 0x06
    1254:	37 81       	ldd	r19, Z+7	; 0x07
    1256:	2f 5f       	subi	r18, 0xFF	; 255
    1258:	3f 4f       	sbci	r19, 0xFF	; 255
    125a:	37 83       	std	Z+7, r19	; 0x07
    125c:	26 83       	std	Z+6, r18	; 0x06
    125e:	14 c0       	rjmp	.+40     	; 0x1288 <fputc+0x6e>
    1260:	8b 01       	movw	r16, r22
    1262:	ec 01       	movw	r28, r24
    1264:	fb 01       	movw	r30, r22
    1266:	00 84       	ldd	r0, Z+8	; 0x08
    1268:	f1 85       	ldd	r31, Z+9	; 0x09
    126a:	e0 2d       	mov	r30, r0
    126c:	09 95       	icall
    126e:	89 2b       	or	r24, r25
    1270:	e1 f6       	brne	.-72     	; 0x122a <fputc+0x10>
    1272:	d8 01       	movw	r26, r16
    1274:	16 96       	adiw	r26, 0x06	; 6
    1276:	8d 91       	ld	r24, X+
    1278:	9c 91       	ld	r25, X
    127a:	17 97       	sbiw	r26, 0x07	; 7
    127c:	01 96       	adiw	r24, 0x01	; 1
    127e:	17 96       	adiw	r26, 0x07	; 7
    1280:	9c 93       	st	X, r25
    1282:	8e 93       	st	-X, r24
    1284:	16 97       	sbiw	r26, 0x06	; 6
    1286:	ce 01       	movw	r24, r28
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	1f 91       	pop	r17
    128e:	0f 91       	pop	r16
    1290:	08 95       	ret

00001292 <__ultoa_invert>:
    1292:	fa 01       	movw	r30, r20
    1294:	aa 27       	eor	r26, r26
    1296:	28 30       	cpi	r18, 0x08	; 8
    1298:	51 f1       	breq	.+84     	; 0x12ee <__ultoa_invert+0x5c>
    129a:	20 31       	cpi	r18, 0x10	; 16
    129c:	81 f1       	breq	.+96     	; 0x12fe <__ultoa_invert+0x6c>
    129e:	e8 94       	clt
    12a0:	6f 93       	push	r22
    12a2:	6e 7f       	andi	r22, 0xFE	; 254
    12a4:	6e 5f       	subi	r22, 0xFE	; 254
    12a6:	7f 4f       	sbci	r23, 0xFF	; 255
    12a8:	8f 4f       	sbci	r24, 0xFF	; 255
    12aa:	9f 4f       	sbci	r25, 0xFF	; 255
    12ac:	af 4f       	sbci	r26, 0xFF	; 255
    12ae:	b1 e0       	ldi	r27, 0x01	; 1
    12b0:	3e d0       	rcall	.+124    	; 0x132e <__ultoa_invert+0x9c>
    12b2:	b4 e0       	ldi	r27, 0x04	; 4
    12b4:	3c d0       	rcall	.+120    	; 0x132e <__ultoa_invert+0x9c>
    12b6:	67 0f       	add	r22, r23
    12b8:	78 1f       	adc	r23, r24
    12ba:	89 1f       	adc	r24, r25
    12bc:	9a 1f       	adc	r25, r26
    12be:	a1 1d       	adc	r26, r1
    12c0:	68 0f       	add	r22, r24
    12c2:	79 1f       	adc	r23, r25
    12c4:	8a 1f       	adc	r24, r26
    12c6:	91 1d       	adc	r25, r1
    12c8:	a1 1d       	adc	r26, r1
    12ca:	6a 0f       	add	r22, r26
    12cc:	71 1d       	adc	r23, r1
    12ce:	81 1d       	adc	r24, r1
    12d0:	91 1d       	adc	r25, r1
    12d2:	a1 1d       	adc	r26, r1
    12d4:	20 d0       	rcall	.+64     	; 0x1316 <__ultoa_invert+0x84>
    12d6:	09 f4       	brne	.+2      	; 0x12da <__ultoa_invert+0x48>
    12d8:	68 94       	set
    12da:	3f 91       	pop	r19
    12dc:	2a e0       	ldi	r18, 0x0A	; 10
    12de:	26 9f       	mul	r18, r22
    12e0:	11 24       	eor	r1, r1
    12e2:	30 19       	sub	r19, r0
    12e4:	30 5d       	subi	r19, 0xD0	; 208
    12e6:	31 93       	st	Z+, r19
    12e8:	de f6       	brtc	.-74     	; 0x12a0 <__ultoa_invert+0xe>
    12ea:	cf 01       	movw	r24, r30
    12ec:	08 95       	ret
    12ee:	46 2f       	mov	r20, r22
    12f0:	47 70       	andi	r20, 0x07	; 7
    12f2:	40 5d       	subi	r20, 0xD0	; 208
    12f4:	41 93       	st	Z+, r20
    12f6:	b3 e0       	ldi	r27, 0x03	; 3
    12f8:	0f d0       	rcall	.+30     	; 0x1318 <__ultoa_invert+0x86>
    12fa:	c9 f7       	brne	.-14     	; 0x12ee <__ultoa_invert+0x5c>
    12fc:	f6 cf       	rjmp	.-20     	; 0x12ea <__ultoa_invert+0x58>
    12fe:	46 2f       	mov	r20, r22
    1300:	4f 70       	andi	r20, 0x0F	; 15
    1302:	40 5d       	subi	r20, 0xD0	; 208
    1304:	4a 33       	cpi	r20, 0x3A	; 58
    1306:	18 f0       	brcs	.+6      	; 0x130e <__ultoa_invert+0x7c>
    1308:	49 5d       	subi	r20, 0xD9	; 217
    130a:	31 fd       	sbrc	r19, 1
    130c:	40 52       	subi	r20, 0x20	; 32
    130e:	41 93       	st	Z+, r20
    1310:	02 d0       	rcall	.+4      	; 0x1316 <__ultoa_invert+0x84>
    1312:	a9 f7       	brne	.-22     	; 0x12fe <__ultoa_invert+0x6c>
    1314:	ea cf       	rjmp	.-44     	; 0x12ea <__ultoa_invert+0x58>
    1316:	b4 e0       	ldi	r27, 0x04	; 4
    1318:	a6 95       	lsr	r26
    131a:	97 95       	ror	r25
    131c:	87 95       	ror	r24
    131e:	77 95       	ror	r23
    1320:	67 95       	ror	r22
    1322:	ba 95       	dec	r27
    1324:	c9 f7       	brne	.-14     	; 0x1318 <__ultoa_invert+0x86>
    1326:	00 97       	sbiw	r24, 0x00	; 0
    1328:	61 05       	cpc	r22, r1
    132a:	71 05       	cpc	r23, r1
    132c:	08 95       	ret
    132e:	9b 01       	movw	r18, r22
    1330:	ac 01       	movw	r20, r24
    1332:	0a 2e       	mov	r0, r26
    1334:	06 94       	lsr	r0
    1336:	57 95       	ror	r21
    1338:	47 95       	ror	r20
    133a:	37 95       	ror	r19
    133c:	27 95       	ror	r18
    133e:	ba 95       	dec	r27
    1340:	c9 f7       	brne	.-14     	; 0x1334 <__ultoa_invert+0xa2>
    1342:	62 0f       	add	r22, r18
    1344:	73 1f       	adc	r23, r19
    1346:	84 1f       	adc	r24, r20
    1348:	95 1f       	adc	r25, r21
    134a:	a0 1d       	adc	r26, r0
    134c:	08 95       	ret

0000134e <_exit>:
    134e:	f8 94       	cli

00001350 <__stop_program>:
    1350:	ff cf       	rjmp	.-2      	; 0x1350 <__stop_program>
