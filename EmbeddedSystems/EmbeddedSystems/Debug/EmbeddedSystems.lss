
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000119c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800100  00800100  00001210  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001210  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000166a  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b05  00000000  00000000  00002a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e31  00000000  00000000  0000357f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e4  00000000  00000000  000043b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006cf  00000000  00000000  00004894  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000922  00000000  00000000  00004f63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00005885  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7f c7       	rjmp	.+3838   	; 0xf40 <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e9       	ldi	r30, 0x9C	; 156
      a0:	f1 e1       	ldi	r31, 0x11	; 17
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 30       	cpi	r26, 0x00	; 0
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a0 e0       	ldi	r26, 0x00	; 0
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a2 31       	cpi	r26, 0x12	; 18
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	65 d1       	rcall	.+714    	; 0x38e <main>
      c4:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <Led_init>:
void Led7_On(void) {
    PORTB |= (1 << 1);
}
void Led7_Off(void) {
    PORTB &= ~(1 << 1);
}
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	1f 92       	push	r1
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
      d4:	89 83       	std	Y+1, r24	; 0x01
      d6:	84 e2       	ldi	r24, 0x24	; 36
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	2f ef       	ldi	r18, 0xFF	; 255
      dc:	fc 01       	movw	r30, r24
      de:	20 83       	st	Z, r18
      e0:	85 e2       	ldi	r24, 0x25	; 37
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	fc 01       	movw	r30, r24
      e6:	10 82       	st	Z, r1
      e8:	89 81       	ldd	r24, Y+1	; 0x01
      ea:	88 23       	and	r24, r24
      ec:	91 f0       	breq	.+36     	; 0x112 <Led_init+0x48>
      ee:	8a e2       	ldi	r24, 0x2A	; 42
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	2a e2       	ldi	r18, 0x2A	; 42
      f4:	30 e0       	ldi	r19, 0x00	; 0
      f6:	f9 01       	movw	r30, r18
      f8:	20 81       	ld	r18, Z
      fa:	2f 61       	ori	r18, 0x1F	; 31
      fc:	fc 01       	movw	r30, r24
      fe:	20 83       	st	Z, r18
     100:	8b e2       	ldi	r24, 0x2B	; 43
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	2b e2       	ldi	r18, 0x2B	; 43
     106:	30 e0       	ldi	r19, 0x00	; 0
     108:	f9 01       	movw	r30, r18
     10a:	20 81       	ld	r18, Z
     10c:	20 7e       	andi	r18, 0xE0	; 224
     10e:	fc 01       	movw	r30, r24
     110:	20 83       	st	Z, r18
     112:	00 00       	nop
     114:	0f 90       	pop	r0
     116:	df 91       	pop	r29
     118:	cf 91       	pop	r28
     11a:	08 95       	ret

0000011c <Led1_On>:
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
     120:	cd b7       	in	r28, 0x3d	; 61
     122:	de b7       	in	r29, 0x3e	; 62
     124:	85 e2       	ldi	r24, 0x25	; 37
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	25 e2       	ldi	r18, 0x25	; 37
     12a:	30 e0       	ldi	r19, 0x00	; 0
     12c:	f9 01       	movw	r30, r18
     12e:	20 81       	ld	r18, Z
     130:	20 68       	ori	r18, 0x80	; 128
     132:	fc 01       	movw	r30, r24
     134:	20 83       	st	Z, r18
     136:	00 00       	nop
     138:	df 91       	pop	r29
     13a:	cf 91       	pop	r28
     13c:	08 95       	ret

0000013e <Led1_Off>:
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	cd b7       	in	r28, 0x3d	; 61
     144:	de b7       	in	r29, 0x3e	; 62
     146:	85 e2       	ldi	r24, 0x25	; 37
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	25 e2       	ldi	r18, 0x25	; 37
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	f9 01       	movw	r30, r18
     150:	20 81       	ld	r18, Z
     152:	2f 77       	andi	r18, 0x7F	; 127
     154:	fc 01       	movw	r30, r24
     156:	20 83       	st	Z, r18
     158:	00 00       	nop
     15a:	df 91       	pop	r29
     15c:	cf 91       	pop	r28
     15e:	08 95       	ret

00000160 <Led2_On>:
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	cd b7       	in	r28, 0x3d	; 61
     166:	de b7       	in	r29, 0x3e	; 62
     168:	85 e2       	ldi	r24, 0x25	; 37
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	25 e2       	ldi	r18, 0x25	; 37
     16e:	30 e0       	ldi	r19, 0x00	; 0
     170:	f9 01       	movw	r30, r18
     172:	20 81       	ld	r18, Z
     174:	20 64       	ori	r18, 0x40	; 64
     176:	fc 01       	movw	r30, r24
     178:	20 83       	st	Z, r18
     17a:	00 00       	nop
     17c:	df 91       	pop	r29
     17e:	cf 91       	pop	r28
     180:	08 95       	ret

00000182 <Led2_Off>:
     182:	cf 93       	push	r28
     184:	df 93       	push	r29
     186:	cd b7       	in	r28, 0x3d	; 61
     188:	de b7       	in	r29, 0x3e	; 62
     18a:	85 e2       	ldi	r24, 0x25	; 37
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	25 e2       	ldi	r18, 0x25	; 37
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	f9 01       	movw	r30, r18
     194:	20 81       	ld	r18, Z
     196:	2f 7b       	andi	r18, 0xBF	; 191
     198:	fc 01       	movw	r30, r24
     19a:	20 83       	st	Z, r18
     19c:	00 00       	nop
     19e:	df 91       	pop	r29
     1a0:	cf 91       	pop	r28
     1a2:	08 95       	ret

000001a4 <Led3_On>:
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
     1a8:	cd b7       	in	r28, 0x3d	; 61
     1aa:	de b7       	in	r29, 0x3e	; 62
     1ac:	85 e2       	ldi	r24, 0x25	; 37
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	25 e2       	ldi	r18, 0x25	; 37
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	f9 01       	movw	r30, r18
     1b6:	20 81       	ld	r18, Z
     1b8:	20 62       	ori	r18, 0x20	; 32
     1ba:	fc 01       	movw	r30, r24
     1bc:	20 83       	st	Z, r18
     1be:	00 00       	nop
     1c0:	df 91       	pop	r29
     1c2:	cf 91       	pop	r28
     1c4:	08 95       	ret

000001c6 <Led3_Off>:
     1c6:	cf 93       	push	r28
     1c8:	df 93       	push	r29
     1ca:	cd b7       	in	r28, 0x3d	; 61
     1cc:	de b7       	in	r29, 0x3e	; 62
     1ce:	85 e2       	ldi	r24, 0x25	; 37
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	25 e2       	ldi	r18, 0x25	; 37
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	f9 01       	movw	r30, r18
     1d8:	20 81       	ld	r18, Z
     1da:	2f 7d       	andi	r18, 0xDF	; 223
     1dc:	fc 01       	movw	r30, r24
     1de:	20 83       	st	Z, r18
     1e0:	00 00       	nop
     1e2:	df 91       	pop	r29
     1e4:	cf 91       	pop	r28
     1e6:	08 95       	ret

000001e8 <Led4_On>:
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
     1f0:	85 e2       	ldi	r24, 0x25	; 37
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	25 e2       	ldi	r18, 0x25	; 37
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	f9 01       	movw	r30, r18
     1fa:	20 81       	ld	r18, Z
     1fc:	20 61       	ori	r18, 0x10	; 16
     1fe:	fc 01       	movw	r30, r24
     200:	20 83       	st	Z, r18
     202:	00 00       	nop
     204:	df 91       	pop	r29
     206:	cf 91       	pop	r28
     208:	08 95       	ret

0000020a <Led4_Off>:
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	85 e2       	ldi	r24, 0x25	; 37
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	25 e2       	ldi	r18, 0x25	; 37
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	f9 01       	movw	r30, r18
     21c:	20 81       	ld	r18, Z
     21e:	2f 7e       	andi	r18, 0xEF	; 239
     220:	fc 01       	movw	r30, r24
     222:	20 83       	st	Z, r18
     224:	00 00       	nop
     226:	df 91       	pop	r29
     228:	cf 91       	pop	r28
     22a:	08 95       	ret

0000022c <Led5_On>:
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	cd b7       	in	r28, 0x3d	; 61
     232:	de b7       	in	r29, 0x3e	; 62
     234:	85 e2       	ldi	r24, 0x25	; 37
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	25 e2       	ldi	r18, 0x25	; 37
     23a:	30 e0       	ldi	r19, 0x00	; 0
     23c:	f9 01       	movw	r30, r18
     23e:	20 81       	ld	r18, Z
     240:	28 60       	ori	r18, 0x08	; 8
     242:	fc 01       	movw	r30, r24
     244:	20 83       	st	Z, r18
     246:	00 00       	nop
     248:	df 91       	pop	r29
     24a:	cf 91       	pop	r28
     24c:	08 95       	ret

0000024e <Led8_On>:

/**
led8 - ioB0
*/
void Led8_On(void) {
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 0);
     256:	85 e2       	ldi	r24, 0x25	; 37
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	25 e2       	ldi	r18, 0x25	; 37
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	f9 01       	movw	r30, r18
     260:	20 81       	ld	r18, Z
     262:	21 60       	ori	r18, 0x01	; 1
     264:	fc 01       	movw	r30, r24
     266:	20 83       	st	Z, r18
}
     268:	00 00       	nop
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	08 95       	ret

00000270 <Taster_init>:
 ---------------------
 - DDR Reg has to be set to 0
 - PORT Reg has to be set to 1
 -> Pin is input with pull-up
 */
void Taster_init() {
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	cd b7       	in	r28, 0x3d	; 61
     276:	de b7       	in	r29, 0x3e	; 62
    
    // set to inputs
    DDRC &= ~(1 << 2);
     278:	87 e2       	ldi	r24, 0x27	; 39
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	27 e2       	ldi	r18, 0x27	; 39
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	f9 01       	movw	r30, r18
     282:	20 81       	ld	r18, Z
     284:	2b 7f       	andi	r18, 0xFB	; 251
     286:	fc 01       	movw	r30, r24
     288:	20 83       	st	Z, r18
    DDRD &= ~( (1 << 7) | (1 << 6) | (1 << 5) );
     28a:	8a e2       	ldi	r24, 0x2A	; 42
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	2a e2       	ldi	r18, 0x2A	; 42
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	f9 01       	movw	r30, r18
     294:	20 81       	ld	r18, Z
     296:	2f 71       	andi	r18, 0x1F	; 31
     298:	fc 01       	movw	r30, r24
     29a:	20 83       	st	Z, r18
    
    // enable pull-up
    PORTC |= (1 << 2);
     29c:	88 e2       	ldi	r24, 0x28	; 40
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	28 e2       	ldi	r18, 0x28	; 40
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	f9 01       	movw	r30, r18
     2a6:	20 81       	ld	r18, Z
     2a8:	24 60       	ori	r18, 0x04	; 4
     2aa:	fc 01       	movw	r30, r24
     2ac:	20 83       	st	Z, r18
    PORTD |= (1 << 7) | (1 << 6) | (1 << 5);
     2ae:	8b e2       	ldi	r24, 0x2B	; 43
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	2b e2       	ldi	r18, 0x2B	; 43
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	f9 01       	movw	r30, r18
     2b8:	20 81       	ld	r18, Z
     2ba:	20 6e       	ori	r18, 0xE0	; 224
     2bc:	fc 01       	movw	r30, r24
     2be:	20 83       	st	Z, r18
}
     2c0:	00 00       	nop
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	08 95       	ret

000002c8 <Taster1_get>:

/**
 Taster1 - ioD7
 */
uint8_t Taster1_get(void) {
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	00 d0       	rcall	.+0      	; 0x2ce <Taster1_get+0x6>
     2ce:	cd b7       	in	r28, 0x3d	; 61
     2d0:	de b7       	in	r29, 0x3e	; 62
    int state = PIND;
     2d2:	89 e2       	ldi	r24, 0x29	; 41
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	fc 01       	movw	r30, r24
     2d8:	80 81       	ld	r24, Z
     2da:	88 2f       	mov	r24, r24
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	9a 83       	std	Y+2, r25	; 0x02
     2e0:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<7)) == 0 ) {
     2e2:	89 81       	ldd	r24, Y+1	; 0x01
     2e4:	9a 81       	ldd	r25, Y+2	; 0x02
     2e6:	80 78       	andi	r24, 0x80	; 128
     2e8:	99 27       	eor	r25, r25
     2ea:	89 2b       	or	r24, r25
     2ec:	11 f4       	brne	.+4      	; 0x2f2 <Taster1_get+0x2a>
        return TASTER_RETURN_VALUE_LOW;
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <Taster1_get+0x2c>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
     2f2:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	08 95       	ret

000002fe <Taster2_get>:

/**
Taster2 - ioD6
*/
uint8_t Taster2_get(void) {
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	1f 92       	push	r1
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
    uint8_t state = PIND;
     308:	89 e2       	ldi	r24, 0x29	; 41
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	fc 01       	movw	r30, r24
     30e:	80 81       	ld	r24, Z
     310:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<6)) == 0 ) {
     312:	89 81       	ldd	r24, Y+1	; 0x01
     314:	88 2f       	mov	r24, r24
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	80 74       	andi	r24, 0x40	; 64
     31a:	99 27       	eor	r25, r25
     31c:	89 2b       	or	r24, r25
     31e:	11 f4       	brne	.+4      	; 0x324 <Taster2_get+0x26>
        return TASTER_RETURN_VALUE_LOW;
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	01 c0       	rjmp	.+2      	; 0x326 <Taster2_get+0x28>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
     324:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     326:	0f 90       	pop	r0
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	08 95       	ret

0000032e <Taster3_get>:

/**
Taster3 - ioD5
*/
uint8_t Taster3_get(void) {
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	1f 92       	push	r1
     334:	cd b7       	in	r28, 0x3d	; 61
     336:	de b7       	in	r29, 0x3e	; 62
    uint8_t state = PIND;
     338:	89 e2       	ldi	r24, 0x29	; 41
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	fc 01       	movw	r30, r24
     33e:	80 81       	ld	r24, Z
     340:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<5)) == 0 ) {
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	88 2f       	mov	r24, r24
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	80 72       	andi	r24, 0x20	; 32
     34a:	99 27       	eor	r25, r25
     34c:	89 2b       	or	r24, r25
     34e:	11 f4       	brne	.+4      	; 0x354 <Taster3_get+0x26>
        return TASTER_RETURN_VALUE_LOW;
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	01 c0       	rjmp	.+2      	; 0x356 <Taster3_get+0x28>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
     354:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     356:	0f 90       	pop	r0
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	08 95       	ret

0000035e <Taster4_get>:

/**
Taster4 - ioC2
*/
uint8_t Taster4_get(void) {
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	1f 92       	push	r1
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
    uint8_t state = PINC;
     368:	86 e2       	ldi	r24, 0x26	; 38
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	fc 01       	movw	r30, r24
     36e:	80 81       	ld	r24, Z
     370:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<2)) == 0 ) {
     372:	89 81       	ldd	r24, Y+1	; 0x01
     374:	88 2f       	mov	r24, r24
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	84 70       	andi	r24, 0x04	; 4
     37a:	99 27       	eor	r25, r25
     37c:	89 2b       	or	r24, r25
     37e:	11 f4       	brne	.+4      	; 0x384 <Taster4_get+0x26>
        return TASTER_RETURN_VALUE_LOW;
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	01 c0       	rjmp	.+2      	; 0x386 <Taster4_get+0x28>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
     384:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     386:	0f 90       	pop	r0
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	08 95       	ret

0000038e <main>:





int main(void) {
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	00 d0       	rcall	.+0      	; 0x394 <main+0x6>
     394:	00 d0       	rcall	.+0      	; 0x396 <main+0x8>
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
	
    Led_init(0);	// Don't set LEDs at PORTD
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	96 de       	rcall	.-724    	; 0xca <Led_init>
	Taster_init();
     39e:	68 df       	rcall	.-304    	; 0x270 <Taster_init>
    Timer_init(16); // Init timer with 16MHZ clock
     3a0:	80 e1       	ldi	r24, 0x10	; 16
     3a2:	23 d5       	rcall	.+2630   	; 0xdea <Timer_init>
     3a4:	78 94       	sei
	sei();
     3a6:	19 82       	std	Y+1, r1	; 0x01
	
    uint8_t state_testBoard = 0;
     3a8:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t last_time = 0;
     3aa:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t  toggle_asdf = 1;
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	8c 83       	std	Y+4, r24	; 0x04
			PORTB = 0x00;
		}*/
        
        
        //trafficLight();
        playground();
     3b0:	01 d0       	rcall	.+2      	; 0x3b4 <playground>
     3b2:	fe cf       	rjmp	.-4      	; 0x3b0 <main+0x22>

000003b4 <playground>:
    }
     3b4:	0f 93       	push	r16
- button1 pressed -> testTasterLed()
- button2 pressed -> testBoard()
- button3 pressed -> lauflicht()
- button4 pressed -> increment()
*/
void playground() {
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
     3c0:	c4 55       	subi	r28, 0x54	; 84
     3c2:	d1 09       	sbc	r29, r1
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	de bf       	out	0x3e, r29	; 62
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	cd bf       	out	0x3d, r28	; 61
    static int mode = 0;
    
    if (mode == 0) {    // mode selection
     3ce:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mode.1740>
     3d2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <mode.1740+0x1>
     3d6:	89 2b       	or	r24, r25
     3d8:	09 f0       	breq	.+2      	; 0x3dc <playground+0x28>
     3da:	16 c2       	rjmp	.+1068   	; 0x808 <__LOCK_REGION_LENGTH__+0x408>
        Led1_On();
     3dc:	9f de       	rcall	.-706    	; 0x11c <Led1_On>
        Led4_On();
     3de:	04 df       	rcall	.-504    	; 0x1e8 <Led4_On>
        Led5_On();
     3e0:	25 df       	rcall	.-438    	; 0x22c <Led5_On>
        Led8_On();
     3e2:	35 df       	rcall	.-406    	; 0x24e <Led8_On>
     3e4:	71 df       	rcall	.-286    	; 0x2c8 <Taster1_get>
        
        // test buttons
        if (Taster1_get()) {
     3e6:	89 2b       	or	r24, r25
     3e8:	09 f4       	brne	.+2      	; 0x3ec <playground+0x38>
     3ea:	7e c0       	rjmp	.+252    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	90 e0       	ldi	r25, 0x00	; 0
            mode = 1;
     3f0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <mode.1740+0x1>
     3f4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <mode.1740>
     3f8:	85 e2       	ldi	r24, 0x25	; 37
            PORTB = 0x00;
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	fc 01       	movw	r30, r24
     3fe:	10 82       	st	Z, r1
     400:	8d de       	rcall	.-742    	; 0x11c <Led1_On>
            Led1_On();
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	aa ef       	ldi	r26, 0xFA	; 250
     408:	b3 e4       	ldi	r27, 0x43	; 67
     40a:	8d 8b       	std	Y+21, r24	; 0x15
     40c:	9e 8b       	std	Y+22, r25	; 0x16
     40e:	af 8b       	std	Y+23, r26	; 0x17
     410:	b8 8f       	std	Y+24, r27	; 0x18
     412:	20 e0       	ldi	r18, 0x00	; 0
     414:	30 e0       	ldi	r19, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     416:	4a e7       	ldi	r20, 0x7A	; 122
     418:	55 e4       	ldi	r21, 0x45	; 69
     41a:	6d 89       	ldd	r22, Y+21	; 0x15
     41c:	7e 89       	ldd	r23, Y+22	; 0x16
     41e:	8f 89       	ldd	r24, Y+23	; 0x17
     420:	98 8d       	ldd	r25, Y+24	; 0x18
     422:	2f d6       	rcall	.+3166   	; 0x1082 <__mulsf3>
     424:	dc 01       	movw	r26, r24
     426:	cb 01       	movw	r24, r22
     428:	89 8f       	std	Y+25, r24	; 0x19
     42a:	9a 8f       	std	Y+26, r25	; 0x1a
     42c:	ab 8f       	std	Y+27, r26	; 0x1b
     42e:	bc 8f       	std	Y+28, r27	; 0x1c
     430:	20 e0       	ldi	r18, 0x00	; 0
     432:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
     434:	40 e8       	ldi	r20, 0x80	; 128
     436:	5f e3       	ldi	r21, 0x3F	; 63
     438:	69 8d       	ldd	r22, Y+25	; 0x19
     43a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     43c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     43e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     440:	9f d5       	rcall	.+2878   	; 0xf80 <__cmpsf2>
     442:	88 23       	and	r24, r24
     444:	2c f4       	brge	.+10     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
     44a:	9e 8f       	std	Y+30, r25	; 0x1e
     44c:	8d 8f       	std	Y+29, r24	; 0x1d
     44e:	3b c0       	rjmp	.+118    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	3f ef       	ldi	r19, 0xFF	; 255
	else if (__tmp > 65535)
     454:	4f e7       	ldi	r20, 0x7F	; 127
     456:	57 e4       	ldi	r21, 0x47	; 71
     458:	69 8d       	ldd	r22, Y+25	; 0x19
     45a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     45c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     45e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     460:	0c d6       	rcall	.+3096   	; 0x107a <__gesf2>
     462:	18 16       	cp	r1, r24
     464:	3c f5       	brge	.+78     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     466:	20 e0       	ldi	r18, 0x00	; 0
     468:	30 e0       	ldi	r19, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     46a:	40 e2       	ldi	r20, 0x20	; 32
     46c:	51 e4       	ldi	r21, 0x41	; 65
     46e:	6d 89       	ldd	r22, Y+21	; 0x15
     470:	7e 89       	ldd	r23, Y+22	; 0x16
     472:	8f 89       	ldd	r24, Y+23	; 0x17
     474:	98 8d       	ldd	r25, Y+24	; 0x18
     476:	05 d6       	rcall	.+3082   	; 0x1082 <__mulsf3>
     478:	dc 01       	movw	r26, r24
     47a:	cb 01       	movw	r24, r22
     47c:	bc 01       	movw	r22, r24
     47e:	cd 01       	movw	r24, r26
     480:	83 d5       	rcall	.+2822   	; 0xf88 <__fixunssfsi>
     482:	dc 01       	movw	r26, r24
     484:	cb 01       	movw	r24, r22
     486:	9e 8f       	std	Y+30, r25	; 0x1e
     488:	8d 8f       	std	Y+29, r24	; 0x1d
     48a:	0f c0       	rjmp	.+30     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     48c:	80 e9       	ldi	r24, 0x90	; 144
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	98 a3       	std	Y+32, r25	; 0x20
     492:	8f 8f       	std	Y+31, r24	; 0x1f
     494:	8f 8d       	ldd	r24, Y+31	; 0x1f
     496:	98 a1       	ldd	r25, Y+32	; 0x20
     498:	01 97       	sbiw	r24, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     49a:	f1 f7       	brne	.-4      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     49c:	98 a3       	std	Y+32, r25	; 0x20
     49e:	8f 8f       	std	Y+31, r24	; 0x1f
     4a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     4a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     4a4:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4a6:	9e 8f       	std	Y+30, r25	; 0x1e
     4a8:	8d 8f       	std	Y+29, r24	; 0x1d
     4aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
     4ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4ae:	89 2b       	or	r24, r25
     4b0:	69 f7       	brne	.-38     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     4b2:	13 c0       	rjmp	.+38     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4b4:	69 8d       	ldd	r22, Y+25	; 0x19
     4b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4bc:	65 d5       	rcall	.+2762   	; 0xf88 <__fixunssfsi>
     4be:	dc 01       	movw	r26, r24
     4c0:	cb 01       	movw	r24, r22
     4c2:	9e 8f       	std	Y+30, r25	; 0x1e
     4c4:	8d 8f       	std	Y+29, r24	; 0x1d
     4c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     4c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     4ca:	9a a3       	std	Y+34, r25	; 0x22
     4cc:	89 a3       	std	Y+33, r24	; 0x21
     4ce:	89 a1       	ldd	r24, Y+33	; 0x21
     4d0:	9a a1       	ldd	r25, Y+34	; 0x22
     4d2:	01 97       	sbiw	r24, 0x01	; 1
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4d6:	9a a3       	std	Y+34, r25	; 0x22
     4d8:	89 a3       	std	Y+33, r24	; 0x21
            _delay_ms(500);
            Led1_Off();
     4da:	31 de       	rcall	.-926    	; 0x13e <Led1_Off>
     4dc:	1d d5       	rcall	.+2618   	; 0xf18 <Timer_getTick>
            timeVarP = Timer_getTick();
     4de:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
     4e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
     4e6:	29 c3       	rjmp	.+1618   	; 0xb3a <__LOCK_REGION_LENGTH__+0x73a>
     4e8:	0a df       	rcall	.-492    	; 0x2fe <Taster2_get>
            default:
                mode = 0;
                break;
        }
    }
}
     4ea:	89 2b       	or	r24, r25
            PORTB = 0x00;
            Led1_On();
            _delay_ms(500);
            Led1_Off();
            timeVarP = Timer_getTick();
        } else if (Taster2_get()) {
     4ec:	09 f4       	brne	.+2      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4ee:	7e c0       	rjmp	.+252    	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
     4f0:	82 e0       	ldi	r24, 0x02	; 2
     4f2:	90 e0       	ldi	r25, 0x00	; 0
            mode = 2;
     4f4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <mode.1740+0x1>
     4f8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <mode.1740>
     4fc:	85 e2       	ldi	r24, 0x25	; 37
     4fe:	90 e0       	ldi	r25, 0x00	; 0
            PORTB = 0x00;
     500:	fc 01       	movw	r30, r24
     502:	10 82       	st	Z, r1
     504:	2d de       	rcall	.-934    	; 0x160 <Led2_On>
     506:	80 e0       	ldi	r24, 0x00	; 0
            Led2_On();
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	aa ef       	ldi	r26, 0xFA	; 250
     50c:	b3 e4       	ldi	r27, 0x43	; 67
     50e:	89 83       	std	Y+1, r24	; 0x01
     510:	9a 83       	std	Y+2, r25	; 0x02
     512:	ab 83       	std	Y+3, r26	; 0x03
     514:	bc 83       	std	Y+4, r27	; 0x04
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	30 e0       	ldi	r19, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     51a:	4a e7       	ldi	r20, 0x7A	; 122
     51c:	55 e4       	ldi	r21, 0x45	; 69
     51e:	69 81       	ldd	r22, Y+1	; 0x01
     520:	7a 81       	ldd	r23, Y+2	; 0x02
     522:	8b 81       	ldd	r24, Y+3	; 0x03
     524:	9c 81       	ldd	r25, Y+4	; 0x04
     526:	ad d5       	rcall	.+2906   	; 0x1082 <__mulsf3>
     528:	dc 01       	movw	r26, r24
     52a:	cb 01       	movw	r24, r22
     52c:	8b a3       	std	Y+35, r24	; 0x23
     52e:	9c a3       	std	Y+36, r25	; 0x24
     530:	ad a3       	std	Y+37, r26	; 0x25
     532:	be a3       	std	Y+38, r27	; 0x26
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
     538:	40 e8       	ldi	r20, 0x80	; 128
     53a:	5f e3       	ldi	r21, 0x3F	; 63
     53c:	6b a1       	ldd	r22, Y+35	; 0x23
     53e:	7c a1       	ldd	r23, Y+36	; 0x24
     540:	8d a1       	ldd	r24, Y+37	; 0x25
     542:	9e a1       	ldd	r25, Y+38	; 0x26
     544:	1d d5       	rcall	.+2618   	; 0xf80 <__cmpsf2>
     546:	88 23       	and	r24, r24
     548:	2c f4       	brge	.+10     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
     54e:	98 a7       	std	Y+40, r25	; 0x28
     550:	8f a3       	std	Y+39, r24	; 0x27
     552:	3b c0       	rjmp	.+118    	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	3f ef       	ldi	r19, 0xFF	; 255
	else if (__tmp > 65535)
     558:	4f e7       	ldi	r20, 0x7F	; 127
     55a:	57 e4       	ldi	r21, 0x47	; 71
     55c:	6b a1       	ldd	r22, Y+35	; 0x23
     55e:	7c a1       	ldd	r23, Y+36	; 0x24
     560:	8d a1       	ldd	r24, Y+37	; 0x25
     562:	9e a1       	ldd	r25, Y+38	; 0x26
     564:	8a d5       	rcall	.+2836   	; 0x107a <__gesf2>
     566:	18 16       	cp	r1, r24
     568:	3c f5       	brge	.+78     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
     56a:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	40 e2       	ldi	r20, 0x20	; 32
     570:	51 e4       	ldi	r21, 0x41	; 65
     572:	69 81       	ldd	r22, Y+1	; 0x01
     574:	7a 81       	ldd	r23, Y+2	; 0x02
     576:	8b 81       	ldd	r24, Y+3	; 0x03
     578:	9c 81       	ldd	r25, Y+4	; 0x04
     57a:	83 d5       	rcall	.+2822   	; 0x1082 <__mulsf3>
     57c:	dc 01       	movw	r26, r24
     57e:	cb 01       	movw	r24, r22
     580:	bc 01       	movw	r22, r24
     582:	cd 01       	movw	r24, r26
     584:	01 d5       	rcall	.+2562   	; 0xf88 <__fixunssfsi>
     586:	dc 01       	movw	r26, r24
     588:	cb 01       	movw	r24, r22
     58a:	98 a7       	std	Y+40, r25	; 0x28
     58c:	8f a3       	std	Y+39, r24	; 0x27
     58e:	0f c0       	rjmp	.+30     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
     590:	80 e9       	ldi	r24, 0x90	; 144
     592:	91 e0       	ldi	r25, 0x01	; 1
     594:	9a a7       	std	Y+42, r25	; 0x2a
     596:	89 a7       	std	Y+41, r24	; 0x29
     598:	89 a5       	ldd	r24, Y+41	; 0x29
     59a:	9a a5       	ldd	r25, Y+42	; 0x2a
     59c:	01 97       	sbiw	r24, 0x01	; 1
     59e:	f1 f7       	brne	.-4      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
     5a0:	9a a7       	std	Y+42, r25	; 0x2a
     5a2:	89 a7       	std	Y+41, r24	; 0x29
     5a4:	8f a1       	ldd	r24, Y+39	; 0x27
     5a6:	98 a5       	ldd	r25, Y+40	; 0x28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	98 a7       	std	Y+40, r25	; 0x28
     5ac:	8f a3       	std	Y+39, r24	; 0x27
     5ae:	8f a1       	ldd	r24, Y+39	; 0x27
     5b0:	98 a5       	ldd	r25, Y+40	; 0x28
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5b2:	89 2b       	or	r24, r25
     5b4:	69 f7       	brne	.-38     	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
     5b6:	13 c0       	rjmp	.+38     	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
     5b8:	6b a1       	ldd	r22, Y+35	; 0x23
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5ba:	7c a1       	ldd	r23, Y+36	; 0x24
     5bc:	8d a1       	ldd	r24, Y+37	; 0x25
     5be:	9e a1       	ldd	r25, Y+38	; 0x26
     5c0:	e3 d4       	rcall	.+2502   	; 0xf88 <__fixunssfsi>
     5c2:	dc 01       	movw	r26, r24
     5c4:	cb 01       	movw	r24, r22
     5c6:	98 a7       	std	Y+40, r25	; 0x28
     5c8:	8f a3       	std	Y+39, r24	; 0x27
     5ca:	8f a1       	ldd	r24, Y+39	; 0x27
     5cc:	98 a5       	ldd	r25, Y+40	; 0x28
     5ce:	9c a7       	std	Y+44, r25	; 0x2c
     5d0:	8b a7       	std	Y+43, r24	; 0x2b
     5d2:	8b a5       	ldd	r24, Y+43	; 0x2b
     5d4:	9c a5       	ldd	r25, Y+44	; 0x2c
     5d6:	01 97       	sbiw	r24, 0x01	; 1
     5d8:	f1 f7       	brne	.-4      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
     5da:	9c a7       	std	Y+44, r25	; 0x2c
     5dc:	8b a7       	std	Y+43, r24	; 0x2b
            _delay_ms(500);
            Led2_Off();
     5de:	d1 dd       	rcall	.-1118   	; 0x182 <Led2_Off>
     5e0:	9b d4       	rcall	.+2358   	; 0xf18 <Timer_getTick>
            timeVarP = Timer_getTick();
     5e2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
     5e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
     5ea:	a7 c2       	rjmp	.+1358   	; 0xb3a <__LOCK_REGION_LENGTH__+0x73a>
     5ec:	a0 de       	rcall	.-704    	; 0x32e <Taster3_get>
            default:
                mode = 0;
                break;
        }
    }
}
     5ee:	89 2b       	or	r24, r25
            PORTB = 0x00;
            Led2_On();
            _delay_ms(500);
            Led2_Off();
            timeVarP = Timer_getTick();
        } else if (Taster3_get()) {
     5f0:	09 f4       	brne	.+2      	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
     5f2:	7e c0       	rjmp	.+252    	; 0x6f0 <__LOCK_REGION_LENGTH__+0x2f0>
     5f4:	83 e0       	ldi	r24, 0x03	; 3
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <mode.1740+0x1>
            mode = 3;
     5fc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <mode.1740>
     600:	85 e2       	ldi	r24, 0x25	; 37
     602:	90 e0       	ldi	r25, 0x00	; 0
            PORTB = 0x00;
     604:	fc 01       	movw	r30, r24
     606:	10 82       	st	Z, r1
     608:	cd dd       	rcall	.-1126   	; 0x1a4 <Led3_On>
     60a:	80 e0       	ldi	r24, 0x00	; 0
            Led3_On();
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	aa ef       	ldi	r26, 0xFA	; 250
     610:	b3 e4       	ldi	r27, 0x43	; 67
     612:	8d 83       	std	Y+5, r24	; 0x05
     614:	9e 83       	std	Y+6, r25	; 0x06
     616:	af 83       	std	Y+7, r26	; 0x07
     618:	b8 87       	std	Y+8, r27	; 0x08
     61a:	20 e0       	ldi	r18, 0x00	; 0
     61c:	30 e0       	ldi	r19, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     61e:	4a e7       	ldi	r20, 0x7A	; 122
     620:	55 e4       	ldi	r21, 0x45	; 69
     622:	6d 81       	ldd	r22, Y+5	; 0x05
     624:	7e 81       	ldd	r23, Y+6	; 0x06
     626:	8f 81       	ldd	r24, Y+7	; 0x07
     628:	98 85       	ldd	r25, Y+8	; 0x08
     62a:	2b d5       	rcall	.+2646   	; 0x1082 <__mulsf3>
     62c:	dc 01       	movw	r26, r24
     62e:	cb 01       	movw	r24, r22
     630:	8d a7       	std	Y+45, r24	; 0x2d
     632:	9e a7       	std	Y+46, r25	; 0x2e
     634:	af a7       	std	Y+47, r26	; 0x2f
     636:	b8 ab       	std	Y+48, r27	; 0x30
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
     63c:	40 e8       	ldi	r20, 0x80	; 128
     63e:	5f e3       	ldi	r21, 0x3F	; 63
     640:	6d a5       	ldd	r22, Y+45	; 0x2d
     642:	7e a5       	ldd	r23, Y+46	; 0x2e
     644:	8f a5       	ldd	r24, Y+47	; 0x2f
     646:	98 a9       	ldd	r25, Y+48	; 0x30
     648:	9b d4       	rcall	.+2358   	; 0xf80 <__cmpsf2>
     64a:	88 23       	and	r24, r24
     64c:	2c f4       	brge	.+10     	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
     652:	9a ab       	std	Y+50, r25	; 0x32
     654:	89 ab       	std	Y+49, r24	; 0x31
     656:	3b c0       	rjmp	.+118    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
     658:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
     65a:	3f ef       	ldi	r19, 0xFF	; 255
     65c:	4f e7       	ldi	r20, 0x7F	; 127
     65e:	57 e4       	ldi	r21, 0x47	; 71
     660:	6d a5       	ldd	r22, Y+45	; 0x2d
     662:	7e a5       	ldd	r23, Y+46	; 0x2e
     664:	8f a5       	ldd	r24, Y+47	; 0x2f
     666:	98 a9       	ldd	r25, Y+48	; 0x30
     668:	08 d5       	rcall	.+2576   	; 0x107a <__gesf2>
     66a:	18 16       	cp	r1, r24
     66c:	3c f5       	brge	.+78     	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	30 e0       	ldi	r19, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     672:	40 e2       	ldi	r20, 0x20	; 32
     674:	51 e4       	ldi	r21, 0x41	; 65
     676:	6d 81       	ldd	r22, Y+5	; 0x05
     678:	7e 81       	ldd	r23, Y+6	; 0x06
     67a:	8f 81       	ldd	r24, Y+7	; 0x07
     67c:	98 85       	ldd	r25, Y+8	; 0x08
     67e:	01 d5       	rcall	.+2562   	; 0x1082 <__mulsf3>
     680:	dc 01       	movw	r26, r24
     682:	cb 01       	movw	r24, r22
     684:	bc 01       	movw	r22, r24
     686:	cd 01       	movw	r24, r26
     688:	7f d4       	rcall	.+2302   	; 0xf88 <__fixunssfsi>
     68a:	dc 01       	movw	r26, r24
     68c:	cb 01       	movw	r24, r22
     68e:	9a ab       	std	Y+50, r25	; 0x32
     690:	89 ab       	std	Y+49, r24	; 0x31
     692:	0f c0       	rjmp	.+30     	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
     694:	80 e9       	ldi	r24, 0x90	; 144
     696:	91 e0       	ldi	r25, 0x01	; 1
     698:	9c ab       	std	Y+52, r25	; 0x34
     69a:	8b ab       	std	Y+51, r24	; 0x33
     69c:	8b a9       	ldd	r24, Y+51	; 0x33
     69e:	9c a9       	ldd	r25, Y+52	; 0x34
     6a0:	01 97       	sbiw	r24, 0x01	; 1
     6a2:	f1 f7       	brne	.-4      	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
     6a4:	9c ab       	std	Y+52, r25	; 0x34
     6a6:	8b ab       	std	Y+51, r24	; 0x33
     6a8:	89 a9       	ldd	r24, Y+49	; 0x31
     6aa:	9a a9       	ldd	r25, Y+50	; 0x32
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6ac:	01 97       	sbiw	r24, 0x01	; 1
     6ae:	9a ab       	std	Y+50, r25	; 0x32
     6b0:	89 ab       	std	Y+49, r24	; 0x31
     6b2:	89 a9       	ldd	r24, Y+49	; 0x31
     6b4:	9a a9       	ldd	r25, Y+50	; 0x32
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6b6:	89 2b       	or	r24, r25
     6b8:	69 f7       	brne	.-38     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
     6ba:	13 c0       	rjmp	.+38     	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
     6bc:	6d a5       	ldd	r22, Y+45	; 0x2d
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6be:	7e a5       	ldd	r23, Y+46	; 0x2e
     6c0:	8f a5       	ldd	r24, Y+47	; 0x2f
     6c2:	98 a9       	ldd	r25, Y+48	; 0x30
     6c4:	61 d4       	rcall	.+2242   	; 0xf88 <__fixunssfsi>
     6c6:	dc 01       	movw	r26, r24
     6c8:	cb 01       	movw	r24, r22
     6ca:	9a ab       	std	Y+50, r25	; 0x32
     6cc:	89 ab       	std	Y+49, r24	; 0x31
     6ce:	89 a9       	ldd	r24, Y+49	; 0x31
     6d0:	9a a9       	ldd	r25, Y+50	; 0x32
     6d2:	9e ab       	std	Y+54, r25	; 0x36
     6d4:	8d ab       	std	Y+53, r24	; 0x35
     6d6:	8d a9       	ldd	r24, Y+53	; 0x35
     6d8:	9e a9       	ldd	r25, Y+54	; 0x36
     6da:	01 97       	sbiw	r24, 0x01	; 1
     6dc:	f1 f7       	brne	.-4      	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
     6de:	9e ab       	std	Y+54, r25	; 0x36
     6e0:	8d ab       	std	Y+53, r24	; 0x35
     6e2:	71 dd       	rcall	.-1310   	; 0x1c6 <Led3_Off>
            _delay_ms(500);
            Led3_Off();
     6e4:	19 d4       	rcall	.+2098   	; 0xf18 <Timer_getTick>
     6e6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
            timeVarP = Timer_getTick();
     6ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
     6ee:	25 c2       	rjmp	.+1098   	; 0xb3a <__LOCK_REGION_LENGTH__+0x73a>
     6f0:	36 de       	rcall	.-916    	; 0x35e <Taster4_get>
            default:
                mode = 0;
                break;
        }
    }
}
     6f2:	89 2b       	or	r24, r25
            PORTB = 0x00;
            Led3_On();
            _delay_ms(500);
            Led3_Off();
            timeVarP = Timer_getTick();
        } else if (Taster4_get()) {
     6f4:	09 f4       	brne	.+2      	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     6f6:	21 c2       	rjmp	.+1090   	; 0xb3a <__LOCK_REGION_LENGTH__+0x73a>
     6f8:	84 e0       	ldi	r24, 0x04	; 4
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <mode.1740+0x1>
            mode = 4;
     700:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <mode.1740>
     704:	85 e2       	ldi	r24, 0x25	; 37
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	fc 01       	movw	r30, r24
            PORTB = 0x00;
     70a:	10 82       	st	Z, r1
     70c:	6d dd       	rcall	.-1318   	; 0x1e8 <Led4_On>
     70e:	80 e0       	ldi	r24, 0x00	; 0
            Led4_On();
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	aa ef       	ldi	r26, 0xFA	; 250
     714:	b3 e4       	ldi	r27, 0x43	; 67
     716:	89 87       	std	Y+9, r24	; 0x09
     718:	9a 87       	std	Y+10, r25	; 0x0a
     71a:	ab 87       	std	Y+11, r26	; 0x0b
     71c:	bc 87       	std	Y+12, r27	; 0x0c
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	4a e7       	ldi	r20, 0x7A	; 122

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     724:	55 e4       	ldi	r21, 0x45	; 69
     726:	69 85       	ldd	r22, Y+9	; 0x09
     728:	7a 85       	ldd	r23, Y+10	; 0x0a
     72a:	8b 85       	ldd	r24, Y+11	; 0x0b
     72c:	9c 85       	ldd	r25, Y+12	; 0x0c
     72e:	a9 d4       	rcall	.+2386   	; 0x1082 <__mulsf3>
     730:	dc 01       	movw	r26, r24
     732:	cb 01       	movw	r24, r22
     734:	8f ab       	std	Y+55, r24	; 0x37
     736:	98 af       	std	Y+56, r25	; 0x38
     738:	a9 af       	std	Y+57, r26	; 0x39
     73a:	ba af       	std	Y+58, r27	; 0x3a
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
     740:	40 e8       	ldi	r20, 0x80	; 128
     742:	5f e3       	ldi	r21, 0x3F	; 63
     744:	6f a9       	ldd	r22, Y+55	; 0x37
     746:	78 ad       	ldd	r23, Y+56	; 0x38
     748:	89 ad       	ldd	r24, Y+57	; 0x39
     74a:	9a ad       	ldd	r25, Y+58	; 0x3a
     74c:	19 d4       	rcall	.+2098   	; 0xf80 <__cmpsf2>
     74e:	88 23       	and	r24, r24
     750:	2c f4       	brge	.+10     	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
     756:	9c af       	std	Y+60, r25	; 0x3c
     758:	8b af       	std	Y+59, r24	; 0x3b
     75a:	3b c0       	rjmp	.+118    	; 0x7d2 <__LOCK_REGION_LENGTH__+0x3d2>
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	3f ef       	ldi	r19, 0xFF	; 255
	else if (__tmp > 65535)
     760:	4f e7       	ldi	r20, 0x7F	; 127
     762:	57 e4       	ldi	r21, 0x47	; 71
     764:	6f a9       	ldd	r22, Y+55	; 0x37
     766:	78 ad       	ldd	r23, Y+56	; 0x38
     768:	89 ad       	ldd	r24, Y+57	; 0x39
     76a:	9a ad       	ldd	r25, Y+58	; 0x3a
     76c:	86 d4       	rcall	.+2316   	; 0x107a <__gesf2>
     76e:	18 16       	cp	r1, r24
     770:	3c f5       	brge	.+78     	; 0x7c0 <__LOCK_REGION_LENGTH__+0x3c0>
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	40 e2       	ldi	r20, 0x20	; 32
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     778:	51 e4       	ldi	r21, 0x41	; 65
     77a:	69 85       	ldd	r22, Y+9	; 0x09
     77c:	7a 85       	ldd	r23, Y+10	; 0x0a
     77e:	8b 85       	ldd	r24, Y+11	; 0x0b
     780:	9c 85       	ldd	r25, Y+12	; 0x0c
     782:	7f d4       	rcall	.+2302   	; 0x1082 <__mulsf3>
     784:	dc 01       	movw	r26, r24
     786:	cb 01       	movw	r24, r22
     788:	bc 01       	movw	r22, r24
     78a:	cd 01       	movw	r24, r26
     78c:	fd d3       	rcall	.+2042   	; 0xf88 <__fixunssfsi>
     78e:	dc 01       	movw	r26, r24
     790:	cb 01       	movw	r24, r22
     792:	9c af       	std	Y+60, r25	; 0x3c
     794:	8b af       	std	Y+59, r24	; 0x3b
     796:	0f c0       	rjmp	.+30     	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
     798:	80 e9       	ldi	r24, 0x90	; 144
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	9e af       	std	Y+62, r25	; 0x3e
     79e:	8d af       	std	Y+61, r24	; 0x3d
     7a0:	8d ad       	ldd	r24, Y+61	; 0x3d
     7a2:	9e ad       	ldd	r25, Y+62	; 0x3e
     7a4:	01 97       	sbiw	r24, 0x01	; 1
     7a6:	f1 f7       	brne	.-4      	; 0x7a4 <__LOCK_REGION_LENGTH__+0x3a4>
     7a8:	9e af       	std	Y+62, r25	; 0x3e
     7aa:	8d af       	std	Y+61, r24	; 0x3d
     7ac:	8b ad       	ldd	r24, Y+59	; 0x3b
     7ae:	9c ad       	ldd	r25, Y+60	; 0x3c
     7b0:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7b2:	9c af       	std	Y+60, r25	; 0x3c
     7b4:	8b af       	std	Y+59, r24	; 0x3b
     7b6:	8b ad       	ldd	r24, Y+59	; 0x3b
     7b8:	9c ad       	ldd	r25, Y+60	; 0x3c
     7ba:	89 2b       	or	r24, r25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7bc:	69 f7       	brne	.-38     	; 0x798 <__LOCK_REGION_LENGTH__+0x398>
     7be:	1d c0       	rjmp	.+58     	; 0x7fa <__LOCK_REGION_LENGTH__+0x3fa>
     7c0:	6f a9       	ldd	r22, Y+55	; 0x37
     7c2:	78 ad       	ldd	r23, Y+56	; 0x38
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7c4:	89 ad       	ldd	r24, Y+57	; 0x39
     7c6:	9a ad       	ldd	r25, Y+58	; 0x3a
     7c8:	df d3       	rcall	.+1982   	; 0xf88 <__fixunssfsi>
     7ca:	dc 01       	movw	r26, r24
     7cc:	cb 01       	movw	r24, r22
     7ce:	9c af       	std	Y+60, r25	; 0x3c
     7d0:	8b af       	std	Y+59, r24	; 0x3b
     7d2:	2b ad       	ldd	r18, Y+59	; 0x3b
     7d4:	3c ad       	ldd	r19, Y+60	; 0x3c
     7d6:	ce 01       	movw	r24, r28
     7d8:	cf 96       	adiw	r24, 0x3f	; 63
     7da:	fc 01       	movw	r30, r24
     7dc:	31 83       	std	Z+1, r19	; 0x01
     7de:	20 83       	st	Z, r18
     7e0:	ce 01       	movw	r24, r28
     7e2:	cf 96       	adiw	r24, 0x3f	; 63
     7e4:	fc 01       	movw	r30, r24
     7e6:	80 81       	ld	r24, Z
     7e8:	91 81       	ldd	r25, Z+1	; 0x01
     7ea:	01 97       	sbiw	r24, 0x01	; 1
     7ec:	f1 f7       	brne	.-4      	; 0x7ea <__LOCK_REGION_LENGTH__+0x3ea>
     7ee:	9e 01       	movw	r18, r28
     7f0:	21 5c       	subi	r18, 0xC1	; 193
     7f2:	3f 4f       	sbci	r19, 0xFF	; 255
     7f4:	f9 01       	movw	r30, r18
     7f6:	91 83       	std	Z+1, r25	; 0x01
     7f8:	80 83       	st	Z, r24
     7fa:	07 dd       	rcall	.-1522   	; 0x20a <Led4_Off>
     7fc:	8d d3       	rcall	.+1818   	; 0xf18 <Timer_getTick>
            _delay_ms(500);
            Led4_Off();
     7fe:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
            timeVarP = Timer_getTick();
     802:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
     806:	99 c1       	rjmp	.+818    	; 0xb3a <__LOCK_REGION_LENGTH__+0x73a>
     808:	5f dd       	rcall	.-1346   	; 0x2c8 <Taster1_get>
     80a:	89 2b       	or	r24, r25
     80c:	09 f4       	brne	.+2      	; 0x810 <__LOCK_REGION_LENGTH__+0x410>
            default:
                mode = 0;
                break;
        }
    }
}
     80e:	75 c1       	rjmp	.+746    	; 0xafa <__LOCK_REGION_LENGTH__+0x6fa>
        }
        
    } else {    // run
        
        // reset if button 1 and button 2 are pressed
        if (Taster1_get() && Taster2_get()) {
     810:	76 dd       	rcall	.-1300   	; 0x2fe <Taster2_get>
     812:	89 2b       	or	r24, r25
     814:	09 f4       	brne	.+2      	; 0x818 <__LOCK_REGION_LENGTH__+0x418>
     816:	71 c1       	rjmp	.+738    	; 0xafa <__LOCK_REGION_LENGTH__+0x6fa>
     818:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <mode.1740+0x1>
     81c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <mode.1740>
     820:	80 e0       	ldi	r24, 0x00	; 0
            mode = 0;
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	aa e7       	ldi	r26, 0x7A	; 122
     826:	b4 e4       	ldi	r27, 0x44	; 68
     828:	89 8b       	std	Y+17, r24	; 0x11
     82a:	9a 8b       	std	Y+18, r25	; 0x12
     82c:	ab 8b       	std	Y+19, r26	; 0x13
     82e:	bc 8b       	std	Y+20, r27	; 0x14
     830:	8e 01       	movw	r16, r28
     832:	05 5b       	subi	r16, 0xB5	; 181
     834:	1f 4f       	sbci	r17, 0xFF	; 255
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e0       	ldi	r19, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     83a:	4a e7       	ldi	r20, 0x7A	; 122
     83c:	55 e4       	ldi	r21, 0x45	; 69
     83e:	69 89       	ldd	r22, Y+17	; 0x11
     840:	7a 89       	ldd	r23, Y+18	; 0x12
     842:	8b 89       	ldd	r24, Y+19	; 0x13
     844:	9c 89       	ldd	r25, Y+20	; 0x14
     846:	1d d4       	rcall	.+2106   	; 0x1082 <__mulsf3>
     848:	dc 01       	movw	r26, r24
     84a:	cb 01       	movw	r24, r22
     84c:	f8 01       	movw	r30, r16
     84e:	80 83       	st	Z, r24
     850:	91 83       	std	Z+1, r25	; 0x01
     852:	a2 83       	std	Z+2, r26	; 0x02
     854:	b3 83       	std	Z+3, r27	; 0x03
     856:	ce 01       	movw	r24, r28
     858:	85 5b       	subi	r24, 0xB5	; 181
     85a:	9f 4f       	sbci	r25, 0xFF	; 255
     85c:	20 e0       	ldi	r18, 0x00	; 0
     85e:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
     860:	40 e8       	ldi	r20, 0x80	; 128
     862:	5f e3       	ldi	r21, 0x3F	; 63
     864:	fc 01       	movw	r30, r24
     866:	60 81       	ld	r22, Z
     868:	71 81       	ldd	r23, Z+1	; 0x01
     86a:	82 81       	ldd	r24, Z+2	; 0x02
     86c:	93 81       	ldd	r25, Z+3	; 0x03
     86e:	88 d3       	rcall	.+1808   	; 0xf80 <__cmpsf2>
     870:	88 23       	and	r24, r24
     872:	4c f4       	brge	.+18     	; 0x886 <__LOCK_REGION_LENGTH__+0x486>
     874:	ce 01       	movw	r24, r28
     876:	81 5b       	subi	r24, 0xB1	; 177
     878:	9f 4f       	sbci	r25, 0xFF	; 255
     87a:	21 e0       	ldi	r18, 0x01	; 1
		__ticks = 1;
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	fc 01       	movw	r30, r24
     880:	31 83       	std	Z+1, r19	; 0x01
     882:	20 83       	st	Z, r18
     884:	65 c0       	rjmp	.+202    	; 0x950 <__LOCK_REGION_LENGTH__+0x550>
     886:	ce 01       	movw	r24, r28
     888:	85 5b       	subi	r24, 0xB5	; 181
     88a:	9f 4f       	sbci	r25, 0xFF	; 255
     88c:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
     88e:	3f ef       	ldi	r19, 0xFF	; 255
     890:	4f e7       	ldi	r20, 0x7F	; 127
     892:	57 e4       	ldi	r21, 0x47	; 71
     894:	fc 01       	movw	r30, r24
     896:	60 81       	ld	r22, Z
     898:	71 81       	ldd	r23, Z+1	; 0x01
     89a:	82 81       	ldd	r24, Z+2	; 0x02
     89c:	93 81       	ldd	r25, Z+3	; 0x03
     89e:	ed d3       	rcall	.+2010   	; 0x107a <__gesf2>
     8a0:	18 16       	cp	r1, r24
     8a2:	0c f0       	brlt	.+2      	; 0x8a6 <__LOCK_REGION_LENGTH__+0x4a6>
     8a4:	44 c0       	rjmp	.+136    	; 0x92e <__LOCK_REGION_LENGTH__+0x52e>
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	40 e2       	ldi	r20, 0x20	; 32
     8ac:	51 e4       	ldi	r21, 0x41	; 65
     8ae:	69 89       	ldd	r22, Y+17	; 0x11
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8b0:	7a 89       	ldd	r23, Y+18	; 0x12
     8b2:	8b 89       	ldd	r24, Y+19	; 0x13
     8b4:	9c 89       	ldd	r25, Y+20	; 0x14
     8b6:	e5 d3       	rcall	.+1994   	; 0x1082 <__mulsf3>
     8b8:	dc 01       	movw	r26, r24
     8ba:	cb 01       	movw	r24, r22
     8bc:	8e 01       	movw	r16, r28
     8be:	01 5b       	subi	r16, 0xB1	; 177
     8c0:	1f 4f       	sbci	r17, 0xFF	; 255
     8c2:	bc 01       	movw	r22, r24
     8c4:	cd 01       	movw	r24, r26
     8c6:	60 d3       	rcall	.+1728   	; 0xf88 <__fixunssfsi>
     8c8:	dc 01       	movw	r26, r24
     8ca:	cb 01       	movw	r24, r22
     8cc:	f8 01       	movw	r30, r16
     8ce:	91 83       	std	Z+1, r25	; 0x01
     8d0:	80 83       	st	Z, r24
     8d2:	24 c0       	rjmp	.+72     	; 0x91c <__LOCK_REGION_LENGTH__+0x51c>
     8d4:	ce 01       	movw	r24, r28
     8d6:	8f 5a       	subi	r24, 0xAF	; 175
     8d8:	9f 4f       	sbci	r25, 0xFF	; 255
     8da:	20 e9       	ldi	r18, 0x90	; 144
     8dc:	31 e0       	ldi	r19, 0x01	; 1
     8de:	fc 01       	movw	r30, r24
     8e0:	31 83       	std	Z+1, r19	; 0x01
     8e2:	20 83       	st	Z, r18
     8e4:	ce 01       	movw	r24, r28
     8e6:	8f 5a       	subi	r24, 0xAF	; 175
     8e8:	9f 4f       	sbci	r25, 0xFF	; 255
     8ea:	fc 01       	movw	r30, r24
     8ec:	80 81       	ld	r24, Z
     8ee:	91 81       	ldd	r25, Z+1	; 0x01
     8f0:	01 97       	sbiw	r24, 0x01	; 1
     8f2:	f1 f7       	brne	.-4      	; 0x8f0 <__LOCK_REGION_LENGTH__+0x4f0>
     8f4:	9e 01       	movw	r18, r28
     8f6:	2f 5a       	subi	r18, 0xAF	; 175
     8f8:	3f 4f       	sbci	r19, 0xFF	; 255
     8fa:	f9 01       	movw	r30, r18
     8fc:	91 83       	std	Z+1, r25	; 0x01
     8fe:	80 83       	st	Z, r24
     900:	ce 01       	movw	r24, r28
     902:	81 5b       	subi	r24, 0xB1	; 177
     904:	9f 4f       	sbci	r25, 0xFF	; 255
     906:	9e 01       	movw	r18, r28
     908:	21 5b       	subi	r18, 0xB1	; 177
     90a:	3f 4f       	sbci	r19, 0xFF	; 255
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     90c:	f9 01       	movw	r30, r18
     90e:	20 81       	ld	r18, Z
     910:	31 81       	ldd	r19, Z+1	; 0x01
     912:	21 50       	subi	r18, 0x01	; 1
     914:	31 09       	sbc	r19, r1
     916:	fc 01       	movw	r30, r24
     918:	31 83       	std	Z+1, r19	; 0x01
     91a:	20 83       	st	Z, r18
     91c:	ce 01       	movw	r24, r28
     91e:	81 5b       	subi	r24, 0xB1	; 177
     920:	9f 4f       	sbci	r25, 0xFF	; 255
     922:	fc 01       	movw	r30, r24
     924:	80 81       	ld	r24, Z
     926:	91 81       	ldd	r25, Z+1	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     928:	89 2b       	or	r24, r25
     92a:	a1 f6       	brne	.-88     	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
     92c:	2b c0       	rjmp	.+86     	; 0x984 <__LOCK_REGION_LENGTH__+0x584>
     92e:	8e 01       	movw	r16, r28
     930:	01 5b       	subi	r16, 0xB1	; 177
     932:	1f 4f       	sbci	r17, 0xFF	; 255
     934:	ce 01       	movw	r24, r28
     936:	85 5b       	subi	r24, 0xB5	; 181
     938:	9f 4f       	sbci	r25, 0xFF	; 255
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     93a:	fc 01       	movw	r30, r24
     93c:	60 81       	ld	r22, Z
     93e:	71 81       	ldd	r23, Z+1	; 0x01
     940:	82 81       	ldd	r24, Z+2	; 0x02
     942:	93 81       	ldd	r25, Z+3	; 0x03
     944:	21 d3       	rcall	.+1602   	; 0xf88 <__fixunssfsi>
     946:	dc 01       	movw	r26, r24
     948:	cb 01       	movw	r24, r22
     94a:	f8 01       	movw	r30, r16
     94c:	91 83       	std	Z+1, r25	; 0x01
     94e:	80 83       	st	Z, r24
     950:	ce 01       	movw	r24, r28
     952:	8d 5a       	subi	r24, 0xAD	; 173
     954:	9f 4f       	sbci	r25, 0xFF	; 255
     956:	9e 01       	movw	r18, r28
     958:	21 5b       	subi	r18, 0xB1	; 177
     95a:	3f 4f       	sbci	r19, 0xFF	; 255
     95c:	f9 01       	movw	r30, r18
     95e:	20 81       	ld	r18, Z
     960:	31 81       	ldd	r19, Z+1	; 0x01
     962:	fc 01       	movw	r30, r24
     964:	31 83       	std	Z+1, r19	; 0x01
     966:	20 83       	st	Z, r18
     968:	ce 01       	movw	r24, r28
     96a:	8d 5a       	subi	r24, 0xAD	; 173
     96c:	9f 4f       	sbci	r25, 0xFF	; 255
     96e:	fc 01       	movw	r30, r24
     970:	80 81       	ld	r24, Z
     972:	91 81       	ldd	r25, Z+1	; 0x01
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	f1 f7       	brne	.-4      	; 0x974 <__LOCK_REGION_LENGTH__+0x574>
     978:	9e 01       	movw	r18, r28
     97a:	2d 5a       	subi	r18, 0xAD	; 173
     97c:	3f 4f       	sbci	r19, 0xFF	; 255
     97e:	f9 01       	movw	r30, r18
     980:	91 83       	std	Z+1, r25	; 0x01
     982:	80 83       	st	Z, r24
     984:	85 e2       	ldi	r24, 0x25	; 37
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	2f ef       	ldi	r18, 0xFF	; 255
     98a:	fc 01       	movw	r30, r24
     98c:	20 83       	st	Z, r18
            _delay_ms(1000);
            PORTB = 0xFF;
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	aa ef       	ldi	r26, 0xFA	; 250
     994:	b3 e4       	ldi	r27, 0x43	; 67
     996:	8d 87       	std	Y+13, r24	; 0x0d
     998:	9e 87       	std	Y+14, r25	; 0x0e
     99a:	af 87       	std	Y+15, r26	; 0x0f
     99c:	b8 8b       	std	Y+16, r27	; 0x10
     99e:	8e 01       	movw	r16, r28
     9a0:	0f 5b       	subi	r16, 0xBF	; 191
     9a2:	1f 4f       	sbci	r17, 0xFF	; 255
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	30 e0       	ldi	r19, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     9a8:	4a e7       	ldi	r20, 0x7A	; 122
     9aa:	55 e4       	ldi	r21, 0x45	; 69
     9ac:	6d 85       	ldd	r22, Y+13	; 0x0d
     9ae:	7e 85       	ldd	r23, Y+14	; 0x0e
     9b0:	8f 85       	ldd	r24, Y+15	; 0x0f
     9b2:	98 89       	ldd	r25, Y+16	; 0x10
     9b4:	66 d3       	rcall	.+1740   	; 0x1082 <__mulsf3>
     9b6:	dc 01       	movw	r26, r24
     9b8:	cb 01       	movw	r24, r22
     9ba:	f8 01       	movw	r30, r16
     9bc:	80 83       	st	Z, r24
     9be:	91 83       	std	Z+1, r25	; 0x01
     9c0:	a2 83       	std	Z+2, r26	; 0x02
     9c2:	b3 83       	std	Z+3, r27	; 0x03
     9c4:	ce 01       	movw	r24, r28
     9c6:	8f 5b       	subi	r24, 0xBF	; 191
     9c8:	9f 4f       	sbci	r25, 0xFF	; 255
     9ca:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	40 e8       	ldi	r20, 0x80	; 128
     9d0:	5f e3       	ldi	r21, 0x3F	; 63
     9d2:	fc 01       	movw	r30, r24
     9d4:	60 81       	ld	r22, Z
     9d6:	71 81       	ldd	r23, Z+1	; 0x01
     9d8:	82 81       	ldd	r24, Z+2	; 0x02
     9da:	93 81       	ldd	r25, Z+3	; 0x03
     9dc:	d1 d2       	rcall	.+1442   	; 0xf80 <__cmpsf2>
     9de:	88 23       	and	r24, r24
     9e0:	4c f4       	brge	.+18     	; 0x9f4 <__LOCK_REGION_LENGTH__+0x5f4>
     9e2:	ce 01       	movw	r24, r28
     9e4:	8b 5b       	subi	r24, 0xBB	; 187
     9e6:	9f 4f       	sbci	r25, 0xFF	; 255
     9e8:	21 e0       	ldi	r18, 0x01	; 1
		__ticks = 1;
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	fc 01       	movw	r30, r24
     9ee:	31 83       	std	Z+1, r19	; 0x01
     9f0:	20 83       	st	Z, r18
     9f2:	65 c0       	rjmp	.+202    	; 0xabe <__LOCK_REGION_LENGTH__+0x6be>
     9f4:	ce 01       	movw	r24, r28
     9f6:	8f 5b       	subi	r24, 0xBF	; 191
     9f8:	9f 4f       	sbci	r25, 0xFF	; 255
     9fa:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
     9fc:	3f ef       	ldi	r19, 0xFF	; 255
     9fe:	4f e7       	ldi	r20, 0x7F	; 127
     a00:	57 e4       	ldi	r21, 0x47	; 71
     a02:	fc 01       	movw	r30, r24
     a04:	60 81       	ld	r22, Z
     a06:	71 81       	ldd	r23, Z+1	; 0x01
     a08:	82 81       	ldd	r24, Z+2	; 0x02
     a0a:	93 81       	ldd	r25, Z+3	; 0x03
     a0c:	36 d3       	rcall	.+1644   	; 0x107a <__gesf2>
     a0e:	18 16       	cp	r1, r24
     a10:	0c f0       	brlt	.+2      	; 0xa14 <__LOCK_REGION_LENGTH__+0x614>
     a12:	44 c0       	rjmp	.+136    	; 0xa9c <__LOCK_REGION_LENGTH__+0x69c>
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	40 e2       	ldi	r20, 0x20	; 32
     a1a:	51 e4       	ldi	r21, 0x41	; 65
     a1c:	6d 85       	ldd	r22, Y+13	; 0x0d
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a1e:	7e 85       	ldd	r23, Y+14	; 0x0e
     a20:	8f 85       	ldd	r24, Y+15	; 0x0f
     a22:	98 89       	ldd	r25, Y+16	; 0x10
     a24:	2e d3       	rcall	.+1628   	; 0x1082 <__mulsf3>
     a26:	dc 01       	movw	r26, r24
     a28:	cb 01       	movw	r24, r22
     a2a:	8e 01       	movw	r16, r28
     a2c:	0b 5b       	subi	r16, 0xBB	; 187
     a2e:	1f 4f       	sbci	r17, 0xFF	; 255
     a30:	bc 01       	movw	r22, r24
     a32:	cd 01       	movw	r24, r26
     a34:	a9 d2       	rcall	.+1362   	; 0xf88 <__fixunssfsi>
     a36:	dc 01       	movw	r26, r24
     a38:	cb 01       	movw	r24, r22
     a3a:	f8 01       	movw	r30, r16
     a3c:	91 83       	std	Z+1, r25	; 0x01
     a3e:	80 83       	st	Z, r24
     a40:	24 c0       	rjmp	.+72     	; 0xa8a <__LOCK_REGION_LENGTH__+0x68a>
     a42:	ce 01       	movw	r24, r28
     a44:	89 5b       	subi	r24, 0xB9	; 185
     a46:	9f 4f       	sbci	r25, 0xFF	; 255
     a48:	20 e9       	ldi	r18, 0x90	; 144
     a4a:	31 e0       	ldi	r19, 0x01	; 1
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 83       	std	Z+1, r19	; 0x01
     a50:	20 83       	st	Z, r18
     a52:	ce 01       	movw	r24, r28
     a54:	89 5b       	subi	r24, 0xB9	; 185
     a56:	9f 4f       	sbci	r25, 0xFF	; 255
     a58:	fc 01       	movw	r30, r24
     a5a:	80 81       	ld	r24, Z
     a5c:	91 81       	ldd	r25, Z+1	; 0x01
     a5e:	01 97       	sbiw	r24, 0x01	; 1
     a60:	f1 f7       	brne	.-4      	; 0xa5e <__LOCK_REGION_LENGTH__+0x65e>
     a62:	9e 01       	movw	r18, r28
     a64:	29 5b       	subi	r18, 0xB9	; 185
     a66:	3f 4f       	sbci	r19, 0xFF	; 255
     a68:	f9 01       	movw	r30, r18
     a6a:	91 83       	std	Z+1, r25	; 0x01
     a6c:	80 83       	st	Z, r24
     a6e:	ce 01       	movw	r24, r28
     a70:	8b 5b       	subi	r24, 0xBB	; 187
     a72:	9f 4f       	sbci	r25, 0xFF	; 255
     a74:	9e 01       	movw	r18, r28
     a76:	2b 5b       	subi	r18, 0xBB	; 187
     a78:	3f 4f       	sbci	r19, 0xFF	; 255
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a7a:	f9 01       	movw	r30, r18
     a7c:	20 81       	ld	r18, Z
     a7e:	31 81       	ldd	r19, Z+1	; 0x01
     a80:	21 50       	subi	r18, 0x01	; 1
     a82:	31 09       	sbc	r19, r1
     a84:	fc 01       	movw	r30, r24
     a86:	31 83       	std	Z+1, r19	; 0x01
     a88:	20 83       	st	Z, r18
     a8a:	ce 01       	movw	r24, r28
     a8c:	8b 5b       	subi	r24, 0xBB	; 187
     a8e:	9f 4f       	sbci	r25, 0xFF	; 255
     a90:	fc 01       	movw	r30, r24
     a92:	80 81       	ld	r24, Z
     a94:	91 81       	ldd	r25, Z+1	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a96:	89 2b       	or	r24, r25
     a98:	a1 f6       	brne	.-88     	; 0xa42 <__LOCK_REGION_LENGTH__+0x642>
     a9a:	2b c0       	rjmp	.+86     	; 0xaf2 <__LOCK_REGION_LENGTH__+0x6f2>
     a9c:	8e 01       	movw	r16, r28
     a9e:	0b 5b       	subi	r16, 0xBB	; 187
     aa0:	1f 4f       	sbci	r17, 0xFF	; 255
     aa2:	ce 01       	movw	r24, r28
     aa4:	8f 5b       	subi	r24, 0xBF	; 191
     aa6:	9f 4f       	sbci	r25, 0xFF	; 255
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     aa8:	fc 01       	movw	r30, r24
     aaa:	60 81       	ld	r22, Z
     aac:	71 81       	ldd	r23, Z+1	; 0x01
     aae:	82 81       	ldd	r24, Z+2	; 0x02
     ab0:	93 81       	ldd	r25, Z+3	; 0x03
     ab2:	6a d2       	rcall	.+1236   	; 0xf88 <__fixunssfsi>
     ab4:	dc 01       	movw	r26, r24
     ab6:	cb 01       	movw	r24, r22
     ab8:	f8 01       	movw	r30, r16
     aba:	91 83       	std	Z+1, r25	; 0x01
     abc:	80 83       	st	Z, r24
     abe:	ce 01       	movw	r24, r28
     ac0:	87 5b       	subi	r24, 0xB7	; 183
     ac2:	9f 4f       	sbci	r25, 0xFF	; 255
     ac4:	9e 01       	movw	r18, r28
     ac6:	2b 5b       	subi	r18, 0xBB	; 187
     ac8:	3f 4f       	sbci	r19, 0xFF	; 255
     aca:	f9 01       	movw	r30, r18
     acc:	20 81       	ld	r18, Z
     ace:	31 81       	ldd	r19, Z+1	; 0x01
     ad0:	fc 01       	movw	r30, r24
     ad2:	31 83       	std	Z+1, r19	; 0x01
     ad4:	20 83       	st	Z, r18
     ad6:	ce 01       	movw	r24, r28
     ad8:	87 5b       	subi	r24, 0xB7	; 183
     ada:	9f 4f       	sbci	r25, 0xFF	; 255
     adc:	fc 01       	movw	r30, r24
     ade:	80 81       	ld	r24, Z
     ae0:	91 81       	ldd	r25, Z+1	; 0x01
     ae2:	01 97       	sbiw	r24, 0x01	; 1
     ae4:	f1 f7       	brne	.-4      	; 0xae2 <__LOCK_REGION_LENGTH__+0x6e2>
     ae6:	9e 01       	movw	r18, r28
     ae8:	27 5b       	subi	r18, 0xB7	; 183
     aea:	3f 4f       	sbci	r19, 0xFF	; 255
     aec:	f9 01       	movw	r30, r18
     aee:	91 83       	std	Z+1, r25	; 0x01
     af0:	80 83       	st	Z, r24
     af2:	85 e2       	ldi	r24, 0x25	; 37
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	fc 01       	movw	r30, r24
            _delay_ms(500);
            PORTB = 0x00;
     af8:	10 82       	st	Z, r1
     afa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mode.1740>
     afe:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <mode.1740+0x1>
        }
        
        // execute
        switch (mode) {
     b02:	82 30       	cpi	r24, 0x02	; 2
     b04:	91 05       	cpc	r25, r1
     b06:	71 f0       	breq	.+28     	; 0xb24 <__LOCK_REGION_LENGTH__+0x724>
     b08:	83 30       	cpi	r24, 0x03	; 3
     b0a:	91 05       	cpc	r25, r1
     b0c:	1c f4       	brge	.+6      	; 0xb14 <__LOCK_REGION_LENGTH__+0x714>
     b0e:	01 97       	sbiw	r24, 0x01	; 1
     b10:	39 f0       	breq	.+14     	; 0xb20 <__LOCK_REGION_LENGTH__+0x720>
     b12:	0e c0       	rjmp	.+28     	; 0xb30 <__LOCK_REGION_LENGTH__+0x730>
     b14:	83 30       	cpi	r24, 0x03	; 3
     b16:	91 05       	cpc	r25, r1
     b18:	39 f0       	breq	.+14     	; 0xb28 <__LOCK_REGION_LENGTH__+0x728>
     b1a:	04 97       	sbiw	r24, 0x04	; 4
     b1c:	39 f0       	breq	.+14     	; 0xb2c <__LOCK_REGION_LENGTH__+0x72c>
     b1e:	08 c0       	rjmp	.+16     	; 0xb30 <__LOCK_REGION_LENGTH__+0x730>
     b20:	44 d1       	rcall	.+648    	; 0xdaa <testTasterLed>
     b22:	0b c0       	rjmp	.+22     	; 0xb3a <__LOCK_REGION_LENGTH__+0x73a>
     b24:	0e d1       	rcall	.+540    	; 0xd42 <testBoard>
            case 1:
                testTasterLed();
     b26:	09 c0       	rjmp	.+18     	; 0xb3a <__LOCK_REGION_LENGTH__+0x73a>
     b28:	15 d0       	rcall	.+42     	; 0xb54 <lauflicht>
                break;
     b2a:	07 c0       	rjmp	.+14     	; 0xb3a <__LOCK_REGION_LENGTH__+0x73a>
            case 2:
                testBoard();
     b2c:	8d d0       	rcall	.+282    	; 0xc48 <increment>
     b2e:	05 c0       	rjmp	.+10     	; 0xb3a <__LOCK_REGION_LENGTH__+0x73a>
                break;
     b30:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <mode.1740+0x1>
            case 3:
                lauflicht();
     b34:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <mode.1740>
				break;
            case 4:
                increment();
     b38:	00 00       	nop
     b3a:	00 00       	nop
                break;
     b3c:	cc 5a       	subi	r28, 0xAC	; 172
            default:
                mode = 0;
     b3e:	df 4f       	sbci	r29, 0xFF	; 255
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
                break;
     b46:	0f be       	out	0x3f, r0	; 63
        }
    }
}
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	08 95       	ret

00000b54 <lauflicht>:
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	00 d0       	rcall	.+0      	; 0xb5a <lauflicht+0x6>
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
     b5e:	dc d1       	rcall	.+952    	; 0xf18 <Timer_getTick>
     b60:	9c 01       	movw	r18, r24
 
 Only one led is active at once
 */
void lauflicht() {
    
    if((Timer_getTick() - timeVarP) >= 1000){
     b62:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
     b66:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
     b6a:	a9 01       	movw	r20, r18
     b6c:	48 1b       	sub	r20, r24
     b6e:	59 0b       	sbc	r21, r25
     b70:	ca 01       	movw	r24, r20
     b72:	88 3e       	cpi	r24, 0xE8	; 232
     b74:	93 40       	sbci	r25, 0x03	; 3
     b76:	08 f4       	brcc	.+2      	; 0xb7a <lauflicht+0x26>
     b78:	61 c0       	rjmp	.+194    	; 0xc3c <lauflicht+0xe8>
        timeVarP = Timer_getTick();
     b7a:	ce d1       	rcall	.+924    	; 0xf18 <Timer_getTick>
     b7c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
     b80:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
     b84:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <direction.1785>
        
        
        static int laufCount = 0;
        static int direction = 0;   // 0=right, 1=left
        
        if (direction) {    // left
     b88:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <direction.1785+0x1>
     b8c:	89 2b       	or	r24, r25
     b8e:	f1 f0       	breq	.+60     	; 0xbcc <lauflicht+0x78>
     b90:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <laufCount.1784>
            if (laufCount <= 1) {
     b94:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <laufCount.1784+0x1>
     b98:	02 97       	sbiw	r24, 0x02	; 2
     b9a:	74 f4       	brge	.+28     	; 0xbb8 <lauflicht+0x64>
     b9c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <direction.1785+0x1>
                direction = 0;
     ba0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <direction.1785>
     ba4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <laufCount.1784>
                laufCount++;
     ba8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <laufCount.1784+0x1>
     bac:	01 96       	adiw	r24, 0x01	; 1
     bae:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <laufCount.1784+0x1>
     bb2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <laufCount.1784>
     bb6:	29 c0       	rjmp	.+82     	; 0xc0a <lauflicht+0xb6>
     bb8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <laufCount.1784>
            } else {
                laufCount--;
     bbc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <laufCount.1784+0x1>
     bc0:	01 97       	sbiw	r24, 0x01	; 1
     bc2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <laufCount.1784+0x1>
     bc6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <laufCount.1784>
     bca:	1f c0       	rjmp	.+62     	; 0xc0a <lauflicht+0xb6>
     bcc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <laufCount.1784>
            }
        }else { // right
            if (laufCount >= 8) {
     bd0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <laufCount.1784+0x1>
     bd4:	08 97       	sbiw	r24, 0x08	; 8
     bd6:	84 f0       	brlt	.+32     	; 0xbf8 <lauflicht+0xa4>
     bd8:	81 e0       	ldi	r24, 0x01	; 1
                direction = 1;
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <direction.1785+0x1>
     be0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <direction.1785>
     be4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <laufCount.1784>
                laufCount--;
     be8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <laufCount.1784+0x1>
     bec:	01 97       	sbiw	r24, 0x01	; 1
     bee:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <laufCount.1784+0x1>
     bf2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <laufCount.1784>
     bf6:	09 c0       	rjmp	.+18     	; 0xc0a <lauflicht+0xb6>
     bf8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <laufCount.1784>
            } else {
                laufCount++;
     bfc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <laufCount.1784+0x1>
     c00:	01 96       	adiw	r24, 0x01	; 1
     c02:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <laufCount.1784+0x1>
     c06:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <laufCount.1784>
     c0a:	81 e0       	ldi	r24, 0x01	; 1
            }
        }
        
        // create byte
        int ledByte = 1;
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	9a 83       	std	Y+2, r25	; 0x02
     c10:	89 83       	std	Y+1, r24	; 0x01
     c12:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <laufCount.1784>
        ledByte = ledByte << (laufCount - 1);
     c16:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <laufCount.1784+0x1>
     c1a:	9c 01       	movw	r18, r24
     c1c:	21 50       	subi	r18, 0x01	; 1
     c1e:	31 09       	sbc	r19, r1
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	9a 81       	ldd	r25, Y+2	; 0x02
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <lauflicht+0xd6>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	2a 95       	dec	r18
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <lauflicht+0xd2>
     c2e:	9a 83       	std	Y+2, r25	; 0x02
     c30:	89 83       	std	Y+1, r24	; 0x01
     c32:	85 e2       	ldi	r24, 0x25	; 37
        
        // set Port
        PORTB = ledByte;
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	29 81       	ldd	r18, Y+1	; 0x01
     c38:	fc 01       	movw	r30, r24
     c3a:	20 83       	st	Z, r18
     c3c:	00 00       	nop
    }
}
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	08 95       	ret

00000c48 <increment>:
     c48:	cf 93       	push	r28

/**
 Increment if button 1 is pressed, decrement if button 2 is pressed.
 Value of count will display with leds. if count is dez 5, 5 leds will turn on
 */
void increment() {
     c4a:	df 93       	push	r29
     c4c:	00 d0       	rcall	.+0      	; 0xc4e <increment+0x6>
     c4e:	00 d0       	rcall	.+0      	; 0xc50 <increment+0x8>
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
    static int count = 0;
    static int lockt1 = 0, lockt2 = 0;
    
    // If button is pressed and lock is released
    if (!lockt1 && Taster1_get()) {
     c54:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <lockt1.1791>
     c58:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <lockt1.1791+0x1>
     c5c:	89 2b       	or	r24, r25
     c5e:	c9 f4       	brne	.+50     	; 0xc92 <increment+0x4a>
     c60:	33 db       	rcall	.-2458   	; 0x2c8 <Taster1_get>
     c62:	89 2b       	or	r24, r25
     c64:	b1 f0       	breq	.+44     	; 0xc92 <increment+0x4a>
        //count to max 8
        if (count <= 8) {
     c66:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <count.1790>
     c6a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <count.1790+0x1>
     c6e:	09 97       	sbiw	r24, 0x09	; 9
     c70:	4c f4       	brge	.+18     	; 0xc84 <increment+0x3c>
            count++;
     c72:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <count.1790>
     c76:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <count.1790+0x1>
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <count.1790+0x1>
     c80:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <count.1790>
        }
        // lock
        lockt1 = 1;
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <lockt1.1791+0x1>
     c8c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <lockt1.1791>
     c90:	1f c0       	rjmp	.+62     	; 0xcd0 <increment+0x88>
    }else if (!lockt2 && Taster2_get()) {
     c92:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lockt2.1792>
     c96:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <lockt2.1792+0x1>
     c9a:	89 2b       	or	r24, r25
     c9c:	c9 f4       	brne	.+50     	; 0xcd0 <increment+0x88>
     c9e:	2f db       	rcall	.-2466   	; 0x2fe <Taster2_get>
     ca0:	89 2b       	or	r24, r25
     ca2:	b1 f0       	breq	.+44     	; 0xcd0 <increment+0x88>
        //count to min 0
        if (count > 0) {
     ca4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <count.1790>
     ca8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <count.1790+0x1>
     cac:	18 16       	cp	r1, r24
     cae:	19 06       	cpc	r1, r25
     cb0:	4c f4       	brge	.+18     	; 0xcc4 <increment+0x7c>
            count--;
     cb2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <count.1790>
     cb6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <count.1790+0x1>
     cba:	01 97       	sbiw	r24, 0x01	; 1
     cbc:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <count.1790+0x1>
     cc0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <count.1790>
        }
        // lock
        lockt2 = 1;
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <lockt2.1792+0x1>
     ccc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <lockt2.1792>
    }
    
    // if button is released, release lock
    if (!Taster1_get()) {
     cd0:	fb da       	rcall	.-2570   	; 0x2c8 <Taster1_get>
     cd2:	89 2b       	or	r24, r25
     cd4:	21 f4       	brne	.+8      	; 0xcde <increment+0x96>
        lockt1 = 0;
     cd6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <lockt1.1791+0x1>
     cda:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <lockt1.1791>
    }
    if (!Taster2_get()) {
     cde:	0f db       	rcall	.-2530   	; 0x2fe <Taster2_get>
     ce0:	89 2b       	or	r24, r25
     ce2:	21 f4       	brne	.+8      	; 0xcec <increment+0xa4>
        lockt2 = 0;
     ce4:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <lockt2.1792+0x1>
     ce8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <lockt2.1792>
    }
    
    // shift as many ones as count to byte
    int ledByte = 0;
     cec:	1a 82       	std	Y+2, r1	; 0x02
     cee:	19 82       	std	Y+1, r1	; 0x01
    for (int i = 0; i < count; i++) {
     cf0:	1c 82       	std	Y+4, r1	; 0x04
     cf2:	1b 82       	std	Y+3, r1	; 0x03
     cf4:	10 c0       	rjmp	.+32     	; 0xd16 <increment+0xce>
        ledByte = ledByte << 1;
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	9a 81       	ldd	r25, Y+2	; 0x02
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	9a 83       	std	Y+2, r25	; 0x02
     d00:	89 83       	std	Y+1, r24	; 0x01
        ledByte++;
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	9a 81       	ldd	r25, Y+2	; 0x02
     d06:	01 96       	adiw	r24, 0x01	; 1
     d08:	9a 83       	std	Y+2, r25	; 0x02
     d0a:	89 83       	std	Y+1, r24	; 0x01
        lockt2 = 0;
    }
    
    // shift as many ones as count to byte
    int ledByte = 0;
    for (int i = 0; i < count; i++) {
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	9c 81       	ldd	r25, Y+4	; 0x04
     d10:	01 96       	adiw	r24, 0x01	; 1
     d12:	9c 83       	std	Y+4, r25	; 0x04
     d14:	8b 83       	std	Y+3, r24	; 0x03
     d16:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <count.1790>
     d1a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <count.1790+0x1>
     d1e:	2b 81       	ldd	r18, Y+3	; 0x03
     d20:	3c 81       	ldd	r19, Y+4	; 0x04
     d22:	28 17       	cp	r18, r24
     d24:	39 07       	cpc	r19, r25
     d26:	3c f3       	brlt	.-50     	; 0xcf6 <increment+0xae>
        ledByte = ledByte << 1;
        ledByte++;
    }
    // set Port
    PORTB = ledByte;
     d28:	85 e2       	ldi	r24, 0x25	; 37
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	29 81       	ldd	r18, Y+1	; 0x01
     d2e:	fc 01       	movw	r30, r24
     d30:	20 83       	st	Z, r18
}
     d32:	00 00       	nop
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	08 95       	ret

00000d42 <testBoard>:

/**
 Switches PORTB on and off with a delay off 500 ms
 */
void testBoard() {
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
    static int state_testBoard = 0;
    
    if((Timer_getTick() - timeVarP) >= 500){
     d4a:	e6 d0       	rcall	.+460    	; 0xf18 <Timer_getTick>
     d4c:	9c 01       	movw	r18, r24
     d4e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
     d52:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
     d56:	a9 01       	movw	r20, r18
     d58:	48 1b       	sub	r20, r24
     d5a:	59 0b       	sbc	r21, r25
     d5c:	ca 01       	movw	r24, r20
     d5e:	84 3f       	cpi	r24, 0xF4	; 244
     d60:	91 40       	sbci	r25, 0x01	; 1
     d62:	f8 f0       	brcs	.+62     	; 0xda2 <testBoard+0x60>
        timeVarP = Timer_getTick();
     d64:	d9 d0       	rcall	.+434    	; 0xf18 <Timer_getTick>
     d66:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
     d6a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
     d6e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <state_testBoard.1804>
        
        if (state_testBoard) {
     d72:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <state_testBoard.1804+0x1>
     d76:	89 2b       	or	r24, r25
     d78:	49 f0       	breq	.+18     	; 0xd8c <testBoard+0x4a>
     d7a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <state_testBoard.1804+0x1>
            state_testBoard = 0;
     d7e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <state_testBoard.1804>
     d82:	85 e2       	ldi	r24, 0x25	; 37
            PORTB = 0x00;
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	fc 01       	movw	r30, r24
     d88:	10 82       	st	Z, r1
     d8a:	0b c0       	rjmp	.+22     	; 0xda2 <testBoard+0x60>
        }else {
            state_testBoard = 1;
            PORTB = 0xFF;
        }
    }
}
     d8c:	81 e0       	ldi	r24, 0x01	; 1
        
        if (state_testBoard) {
            state_testBoard = 0;
            PORTB = 0x00;
        }else {
            state_testBoard = 1;
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <state_testBoard.1804+0x1>
     d94:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <state_testBoard.1804>
     d98:	85 e2       	ldi	r24, 0x25	; 37
            PORTB = 0xFF;
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	2f ef       	ldi	r18, 0xFF	; 255
     d9e:	fc 01       	movw	r30, r24
     da0:	20 83       	st	Z, r18
     da2:	00 00       	nop
        }
    }
}
     da4:	df 91       	pop	r29
     da6:	cf 91       	pop	r28
     da8:	08 95       	ret

00000daa <testTasterLed>:
     daa:	cf 93       	push	r28

/**
 If button1 is pressed, led1 will turn on. If button2 is pressed, led2 will turn on and so on...
 */
void testTasterLed() {
     dac:	df 93       	push	r29
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
    if (Taster1_get()) {
     db2:	8a da       	rcall	.-2796   	; 0x2c8 <Taster1_get>
     db4:	89 2b       	or	r24, r25
     db6:	11 f0       	breq	.+4      	; 0xdbc <testTasterLed+0x12>
        Led1_On();
     db8:	b1 d9       	rcall	.-3230   	; 0x11c <Led1_On>
     dba:	01 c0       	rjmp	.+2      	; 0xdbe <testTasterLed+0x14>
    }else {
        Led1_Off();
     dbc:	c0 d9       	rcall	.-3200   	; 0x13e <Led1_Off>
     dbe:	9f da       	rcall	.-2754   	; 0x2fe <Taster2_get>
    }
    if (Taster2_get()) {
     dc0:	89 2b       	or	r24, r25
     dc2:	11 f0       	breq	.+4      	; 0xdc8 <testTasterLed+0x1e>
        Led2_On();
     dc4:	cd d9       	rcall	.-3174   	; 0x160 <Led2_On>
     dc6:	01 c0       	rjmp	.+2      	; 0xdca <testTasterLed+0x20>
    }else {
        Led2_Off();
     dc8:	dc d9       	rcall	.-3144   	; 0x182 <Led2_Off>
    }
    if (Taster3_get()) {
     dca:	b1 da       	rcall	.-2718   	; 0x32e <Taster3_get>
     dcc:	89 2b       	or	r24, r25
     dce:	11 f0       	breq	.+4      	; 0xdd4 <testTasterLed+0x2a>
        Led3_On();
     dd0:	e9 d9       	rcall	.-3118   	; 0x1a4 <Led3_On>
     dd2:	01 c0       	rjmp	.+2      	; 0xdd6 <testTasterLed+0x2c>
        }else {
        Led3_Off();
     dd4:	f8 d9       	rcall	.-3088   	; 0x1c6 <Led3_Off>
     dd6:	c3 da       	rcall	.-2682   	; 0x35e <Taster4_get>
    }
    if (Taster4_get()) {
     dd8:	89 2b       	or	r24, r25
     dda:	11 f0       	breq	.+4      	; 0xde0 <testTasterLed+0x36>
     ddc:	05 da       	rcall	.-3062   	; 0x1e8 <Led4_On>
     dde:	01 c0       	rjmp	.+2      	; 0xde2 <testTasterLed+0x38>
        Led4_On();
     de0:	14 da       	rcall	.-3032   	; 0x20a <Led4_Off>
     de2:	00 00       	nop
        }else {
        Led4_Off();
    }
}
     de4:	df 91       	pop	r29
        Led3_Off();
    }
    if (Taster4_get()) {
        Led4_On();
        }else {
        Led4_Off();
     de6:	cf 91       	pop	r28
     de8:	08 95       	ret

00000dea <Timer_init>:
    }
}
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	1f 92       	push	r1
     df0:	cd b7       	in	r28, 0x3d	; 61
    }
    
    TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
}
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	89 83       	std	Y+1, r24	; 0x01
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	88 2f       	mov	r24, r24
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	05 d0       	rcall	.+10     	; 0xe08 <Timer_init_withoutStruct>
     dfe:	00 00       	nop
     e00:	0f 90       	pop	r0
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	08 95       	ret

00000e08 <Timer_init_withoutStruct>:

void Timer_init_withoutStruct(uint8_t clockFreqMhz) {
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	1f 92       	push	r1
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
     e12:	89 83       	std	Y+1, r24	; 0x01
    // datasheet page 97
    // set mode to clear timer on compare (CTC)
    TCCR0B &= ~(1 << WGM02);
     e14:	85 e4       	ldi	r24, 0x45	; 69
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	25 e4       	ldi	r18, 0x45	; 69
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	f9 01       	movw	r30, r18
     e1e:	20 81       	ld	r18, Z
     e20:	27 7f       	andi	r18, 0xF7	; 247
     e22:	fc 01       	movw	r30, r24
     e24:	20 83       	st	Z, r18
    TCCR0A |= (1 << WGM01);
     e26:	84 e4       	ldi	r24, 0x44	; 68
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	24 e4       	ldi	r18, 0x44	; 68
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	f9 01       	movw	r30, r18
     e30:	20 81       	ld	r18, Z
     e32:	22 60       	ori	r18, 0x02	; 2
     e34:	fc 01       	movw	r30, r24
     e36:	20 83       	st	Z, r18
    TCCR0A &= ~(1 << WGM00);
     e38:	84 e4       	ldi	r24, 0x44	; 68
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	24 e4       	ldi	r18, 0x44	; 68
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	f9 01       	movw	r30, r18
     e42:	20 81       	ld	r18, Z
     e44:	2e 7f       	andi	r18, 0xFE	; 254
     e46:	fc 01       	movw	r30, r24
     e48:	20 83       	st	Z, r18
    
    
    switch (clockFreqMhz) {
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	88 2f       	mov	r24, r24
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	40 97       	sbiw	r24, 0x10	; 16
     e52:	09 f5       	brne	.+66     	; 0xe96 <Timer_init_withoutStruct+0x8e>
        case 16:
            // extern osc (16 MHZ)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = 249;   // dez 249; range 0 - 249 -> 250 cycles till interrupt
     e54:	87 e4       	ldi	r24, 0x47	; 71
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	29 ef       	ldi	r18, 0xF9	; 249
     e5a:	fc 01       	movw	r30, r24
     e5c:	20 83       	st	Z, r18
            
            // set prescaler to 1/64
            TCCR0B &= ~(1 << CS02);
     e5e:	85 e4       	ldi	r24, 0x45	; 69
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	25 e4       	ldi	r18, 0x45	; 69
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	f9 01       	movw	r30, r18
     e68:	20 81       	ld	r18, Z
     e6a:	2b 7f       	andi	r18, 0xFB	; 251
     e6c:	fc 01       	movw	r30, r24
     e6e:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
     e70:	85 e4       	ldi	r24, 0x45	; 69
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	25 e4       	ldi	r18, 0x45	; 69
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	f9 01       	movw	r30, r18
     e7a:	20 81       	ld	r18, Z
     e7c:	22 60       	ori	r18, 0x02	; 2
     e7e:	fc 01       	movw	r30, r24
     e80:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS00);
     e82:	85 e4       	ldi	r24, 0x45	; 69
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	25 e4       	ldi	r18, 0x45	; 69
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	f9 01       	movw	r30, r18
     e8c:	20 81       	ld	r18, Z
     e8e:	21 60       	ori	r18, 0x01	; 1
     e90:	fc 01       	movw	r30, r24
     e92:	20 83       	st	Z, r18
            break;
     e94:	21 c0       	rjmp	.+66     	; 0xed8 <Timer_init_withoutStruct+0xd0>
            
        default:
            // inter osc (8 MHZ divided by 8 -> 1 MHZ clock)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = 0x7C;   // dez 124; range 0 - 124 -> 125 cycles till interrupt
     e96:	87 e4       	ldi	r24, 0x47	; 71
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	2c e7       	ldi	r18, 0x7C	; 124
     e9c:	fc 01       	movw	r30, r24
     e9e:	20 83       	st	Z, r18
            
            // set prescaler to 1/8
            TCCR0B &= ~(1 << CS02);
     ea0:	85 e4       	ldi	r24, 0x45	; 69
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	25 e4       	ldi	r18, 0x45	; 69
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	f9 01       	movw	r30, r18
     eaa:	20 81       	ld	r18, Z
     eac:	2b 7f       	andi	r18, 0xFB	; 251
     eae:	fc 01       	movw	r30, r24
     eb0:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
     eb2:	85 e4       	ldi	r24, 0x45	; 69
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	25 e4       	ldi	r18, 0x45	; 69
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	f9 01       	movw	r30, r18
     ebc:	20 81       	ld	r18, Z
     ebe:	22 60       	ori	r18, 0x02	; 2
     ec0:	fc 01       	movw	r30, r24
     ec2:	20 83       	st	Z, r18
            TCCR0B &= ~(1 << CS00);
     ec4:	85 e4       	ldi	r24, 0x45	; 69
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	25 e4       	ldi	r18, 0x45	; 69
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	f9 01       	movw	r30, r18
     ece:	20 81       	ld	r18, Z
     ed0:	2e 7f       	andi	r18, 0xFE	; 254
     ed2:	fc 01       	movw	r30, r24
     ed4:	20 83       	st	Z, r18
            break;
     ed6:	00 00       	nop
    }
    
    TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
     ed8:	8e e6       	ldi	r24, 0x6E	; 110
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	2e e6       	ldi	r18, 0x6E	; 110
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	f9 01       	movw	r30, r18
     ee2:	20 81       	ld	r18, Z
     ee4:	2b 7f       	andi	r18, 0xFB	; 251
     ee6:	fc 01       	movw	r30, r24
     ee8:	20 83       	st	Z, r18
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
     eea:	8e e6       	ldi	r24, 0x6E	; 110
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	2e e6       	ldi	r18, 0x6E	; 110
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	f9 01       	movw	r30, r18
     ef4:	20 81       	ld	r18, Z
     ef6:	22 60       	ori	r18, 0x02	; 2
     ef8:	fc 01       	movw	r30, r24
     efa:	20 83       	st	Z, r18
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
     efc:	8e e6       	ldi	r24, 0x6E	; 110
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	2e e6       	ldi	r18, 0x6E	; 110
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	f9 01       	movw	r30, r18
     f06:	20 81       	ld	r18, Z
     f08:	2e 7f       	andi	r18, 0xFE	; 254
     f0a:	fc 01       	movw	r30, r24
     f0c:	20 83       	st	Z, r18
}
     f0e:	00 00       	nop
     f10:	0f 90       	pop	r0
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	08 95       	ret

00000f18 <Timer_getTick>:

uint16_t Timer_getTick() {
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <Timer_getTick+0x6>
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
    // disable global interrupt
    cli();
     f22:	f8 94       	cli
    
    // store timer_count in a temp int that can't get changed by ISR
    uint16_t temp_timer_count = timer_count;
     f24:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <timer_count>
     f28:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <timer_count+0x1>
     f2c:	9a 83       	std	Y+2, r25	; 0x02
     f2e:	89 83       	std	Y+1, r24	; 0x01
    
    // enable global interrupt
    sei();
     f30:	78 94       	sei

    return temp_timer_count;
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	9a 81       	ldd	r25, Y+2	; 0x02
}
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	08 95       	ret

00000f40 <__vector_16>:
 ( not used atm)
 Timer compare A interrput:
 - increase timer_count
 - if timer_count is at max of uint16, set it to 0
 */
ISR(TIMER0_COMPA_vect){
     f40:	1f 92       	push	r1
     f42:	0f 92       	push	r0
     f44:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     f48:	0f 92       	push	r0
     f4a:	11 24       	eor	r1, r1
     f4c:	8f 93       	push	r24
     f4e:	9f 93       	push	r25
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
    timer_count++;
     f58:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <timer_count>
     f5c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <timer_count+0x1>
     f60:	01 96       	adiw	r24, 0x01	; 1
     f62:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timer_count+0x1>
     f66:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timer_count>
}
     f6a:	00 00       	nop
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	9f 91       	pop	r25
     f72:	8f 91       	pop	r24
     f74:	0f 90       	pop	r0
     f76:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     f7a:	0f 90       	pop	r0
     f7c:	1f 90       	pop	r1
     f7e:	18 95       	reti

00000f80 <__cmpsf2>:
     f80:	2f d0       	rcall	.+94     	; 0xfe0 <__fp_cmp>
     f82:	08 f4       	brcc	.+2      	; 0xf86 <__cmpsf2+0x6>
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	08 95       	ret

00000f88 <__fixunssfsi>:
     f88:	57 d0       	rcall	.+174    	; 0x1038 <__fp_splitA>
     f8a:	88 f0       	brcs	.+34     	; 0xfae <__fixunssfsi+0x26>
     f8c:	9f 57       	subi	r25, 0x7F	; 127
     f8e:	90 f0       	brcs	.+36     	; 0xfb4 <__fixunssfsi+0x2c>
     f90:	b9 2f       	mov	r27, r25
     f92:	99 27       	eor	r25, r25
     f94:	b7 51       	subi	r27, 0x17	; 23
     f96:	a0 f0       	brcs	.+40     	; 0xfc0 <__fixunssfsi+0x38>
     f98:	d1 f0       	breq	.+52     	; 0xfce <__fixunssfsi+0x46>
     f9a:	66 0f       	add	r22, r22
     f9c:	77 1f       	adc	r23, r23
     f9e:	88 1f       	adc	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	1a f0       	brmi	.+6      	; 0xfaa <__fixunssfsi+0x22>
     fa4:	ba 95       	dec	r27
     fa6:	c9 f7       	brne	.-14     	; 0xf9a <__fixunssfsi+0x12>
     fa8:	12 c0       	rjmp	.+36     	; 0xfce <__fixunssfsi+0x46>
     faa:	b1 30       	cpi	r27, 0x01	; 1
     fac:	81 f0       	breq	.+32     	; 0xfce <__fixunssfsi+0x46>
     fae:	5e d0       	rcall	.+188    	; 0x106c <__fp_zero>
     fb0:	b1 e0       	ldi	r27, 0x01	; 1
     fb2:	08 95       	ret
     fb4:	5b c0       	rjmp	.+182    	; 0x106c <__fp_zero>
     fb6:	67 2f       	mov	r22, r23
     fb8:	78 2f       	mov	r23, r24
     fba:	88 27       	eor	r24, r24
     fbc:	b8 5f       	subi	r27, 0xF8	; 248
     fbe:	39 f0       	breq	.+14     	; 0xfce <__fixunssfsi+0x46>
     fc0:	b9 3f       	cpi	r27, 0xF9	; 249
     fc2:	cc f3       	brlt	.-14     	; 0xfb6 <__fixunssfsi+0x2e>
     fc4:	86 95       	lsr	r24
     fc6:	77 95       	ror	r23
     fc8:	67 95       	ror	r22
     fca:	b3 95       	inc	r27
     fcc:	d9 f7       	brne	.-10     	; 0xfc4 <__fixunssfsi+0x3c>
     fce:	3e f4       	brtc	.+14     	; 0xfde <__fixunssfsi+0x56>
     fd0:	90 95       	com	r25
     fd2:	80 95       	com	r24
     fd4:	70 95       	com	r23
     fd6:	61 95       	neg	r22
     fd8:	7f 4f       	sbci	r23, 0xFF	; 255
     fda:	8f 4f       	sbci	r24, 0xFF	; 255
     fdc:	9f 4f       	sbci	r25, 0xFF	; 255
     fde:	08 95       	ret

00000fe0 <__fp_cmp>:
     fe0:	99 0f       	add	r25, r25
     fe2:	00 08       	sbc	r0, r0
     fe4:	55 0f       	add	r21, r21
     fe6:	aa 0b       	sbc	r26, r26
     fe8:	e0 e8       	ldi	r30, 0x80	; 128
     fea:	fe ef       	ldi	r31, 0xFE	; 254
     fec:	16 16       	cp	r1, r22
     fee:	17 06       	cpc	r1, r23
     ff0:	e8 07       	cpc	r30, r24
     ff2:	f9 07       	cpc	r31, r25
     ff4:	c0 f0       	brcs	.+48     	; 0x1026 <__fp_cmp+0x46>
     ff6:	12 16       	cp	r1, r18
     ff8:	13 06       	cpc	r1, r19
     ffa:	e4 07       	cpc	r30, r20
     ffc:	f5 07       	cpc	r31, r21
     ffe:	98 f0       	brcs	.+38     	; 0x1026 <__fp_cmp+0x46>
    1000:	62 1b       	sub	r22, r18
    1002:	73 0b       	sbc	r23, r19
    1004:	84 0b       	sbc	r24, r20
    1006:	95 0b       	sbc	r25, r21
    1008:	39 f4       	brne	.+14     	; 0x1018 <__fp_cmp+0x38>
    100a:	0a 26       	eor	r0, r26
    100c:	61 f0       	breq	.+24     	; 0x1026 <__fp_cmp+0x46>
    100e:	23 2b       	or	r18, r19
    1010:	24 2b       	or	r18, r20
    1012:	25 2b       	or	r18, r21
    1014:	21 f4       	brne	.+8      	; 0x101e <__fp_cmp+0x3e>
    1016:	08 95       	ret
    1018:	0a 26       	eor	r0, r26
    101a:	09 f4       	brne	.+2      	; 0x101e <__fp_cmp+0x3e>
    101c:	a1 40       	sbci	r26, 0x01	; 1
    101e:	a6 95       	lsr	r26
    1020:	8f ef       	ldi	r24, 0xFF	; 255
    1022:	81 1d       	adc	r24, r1
    1024:	81 1d       	adc	r24, r1
    1026:	08 95       	ret

00001028 <__fp_split3>:
    1028:	57 fd       	sbrc	r21, 7
    102a:	90 58       	subi	r25, 0x80	; 128
    102c:	44 0f       	add	r20, r20
    102e:	55 1f       	adc	r21, r21
    1030:	59 f0       	breq	.+22     	; 0x1048 <__fp_splitA+0x10>
    1032:	5f 3f       	cpi	r21, 0xFF	; 255
    1034:	71 f0       	breq	.+28     	; 0x1052 <__fp_splitA+0x1a>
    1036:	47 95       	ror	r20

00001038 <__fp_splitA>:
    1038:	88 0f       	add	r24, r24
    103a:	97 fb       	bst	r25, 7
    103c:	99 1f       	adc	r25, r25
    103e:	61 f0       	breq	.+24     	; 0x1058 <__fp_splitA+0x20>
    1040:	9f 3f       	cpi	r25, 0xFF	; 255
    1042:	79 f0       	breq	.+30     	; 0x1062 <__fp_splitA+0x2a>
    1044:	87 95       	ror	r24
    1046:	08 95       	ret
    1048:	12 16       	cp	r1, r18
    104a:	13 06       	cpc	r1, r19
    104c:	14 06       	cpc	r1, r20
    104e:	55 1f       	adc	r21, r21
    1050:	f2 cf       	rjmp	.-28     	; 0x1036 <__fp_split3+0xe>
    1052:	46 95       	lsr	r20
    1054:	f1 df       	rcall	.-30     	; 0x1038 <__fp_splitA>
    1056:	08 c0       	rjmp	.+16     	; 0x1068 <__fp_splitA+0x30>
    1058:	16 16       	cp	r1, r22
    105a:	17 06       	cpc	r1, r23
    105c:	18 06       	cpc	r1, r24
    105e:	99 1f       	adc	r25, r25
    1060:	f1 cf       	rjmp	.-30     	; 0x1044 <__fp_splitA+0xc>
    1062:	86 95       	lsr	r24
    1064:	71 05       	cpc	r23, r1
    1066:	61 05       	cpc	r22, r1
    1068:	08 94       	sec
    106a:	08 95       	ret

0000106c <__fp_zero>:
    106c:	e8 94       	clt

0000106e <__fp_szero>:
    106e:	bb 27       	eor	r27, r27
    1070:	66 27       	eor	r22, r22
    1072:	77 27       	eor	r23, r23
    1074:	cb 01       	movw	r24, r22
    1076:	97 f9       	bld	r25, 7
    1078:	08 95       	ret

0000107a <__gesf2>:
    107a:	b2 df       	rcall	.-156    	; 0xfe0 <__fp_cmp>
    107c:	08 f4       	brcc	.+2      	; 0x1080 <__gesf2+0x6>
    107e:	8f ef       	ldi	r24, 0xFF	; 255
    1080:	08 95       	ret

00001082 <__mulsf3>:
    1082:	0b d0       	rcall	.+22     	; 0x109a <__mulsf3x>
    1084:	78 c0       	rjmp	.+240    	; 0x1176 <__fp_round>
    1086:	69 d0       	rcall	.+210    	; 0x115a <__fp_pscA>
    1088:	28 f0       	brcs	.+10     	; 0x1094 <__mulsf3+0x12>
    108a:	6e d0       	rcall	.+220    	; 0x1168 <__fp_pscB>
    108c:	18 f0       	brcs	.+6      	; 0x1094 <__mulsf3+0x12>
    108e:	95 23       	and	r25, r21
    1090:	09 f0       	breq	.+2      	; 0x1094 <__mulsf3+0x12>
    1092:	5a c0       	rjmp	.+180    	; 0x1148 <__fp_inf>
    1094:	5f c0       	rjmp	.+190    	; 0x1154 <__fp_nan>
    1096:	11 24       	eor	r1, r1
    1098:	ea cf       	rjmp	.-44     	; 0x106e <__fp_szero>

0000109a <__mulsf3x>:
    109a:	c6 df       	rcall	.-116    	; 0x1028 <__fp_split3>
    109c:	a0 f3       	brcs	.-24     	; 0x1086 <__mulsf3+0x4>

0000109e <__mulsf3_pse>:
    109e:	95 9f       	mul	r25, r21
    10a0:	d1 f3       	breq	.-12     	; 0x1096 <__mulsf3+0x14>
    10a2:	95 0f       	add	r25, r21
    10a4:	50 e0       	ldi	r21, 0x00	; 0
    10a6:	55 1f       	adc	r21, r21
    10a8:	62 9f       	mul	r22, r18
    10aa:	f0 01       	movw	r30, r0
    10ac:	72 9f       	mul	r23, r18
    10ae:	bb 27       	eor	r27, r27
    10b0:	f0 0d       	add	r31, r0
    10b2:	b1 1d       	adc	r27, r1
    10b4:	63 9f       	mul	r22, r19
    10b6:	aa 27       	eor	r26, r26
    10b8:	f0 0d       	add	r31, r0
    10ba:	b1 1d       	adc	r27, r1
    10bc:	aa 1f       	adc	r26, r26
    10be:	64 9f       	mul	r22, r20
    10c0:	66 27       	eor	r22, r22
    10c2:	b0 0d       	add	r27, r0
    10c4:	a1 1d       	adc	r26, r1
    10c6:	66 1f       	adc	r22, r22
    10c8:	82 9f       	mul	r24, r18
    10ca:	22 27       	eor	r18, r18
    10cc:	b0 0d       	add	r27, r0
    10ce:	a1 1d       	adc	r26, r1
    10d0:	62 1f       	adc	r22, r18
    10d2:	73 9f       	mul	r23, r19
    10d4:	b0 0d       	add	r27, r0
    10d6:	a1 1d       	adc	r26, r1
    10d8:	62 1f       	adc	r22, r18
    10da:	83 9f       	mul	r24, r19
    10dc:	a0 0d       	add	r26, r0
    10de:	61 1d       	adc	r22, r1
    10e0:	22 1f       	adc	r18, r18
    10e2:	74 9f       	mul	r23, r20
    10e4:	33 27       	eor	r19, r19
    10e6:	a0 0d       	add	r26, r0
    10e8:	61 1d       	adc	r22, r1
    10ea:	23 1f       	adc	r18, r19
    10ec:	84 9f       	mul	r24, r20
    10ee:	60 0d       	add	r22, r0
    10f0:	21 1d       	adc	r18, r1
    10f2:	82 2f       	mov	r24, r18
    10f4:	76 2f       	mov	r23, r22
    10f6:	6a 2f       	mov	r22, r26
    10f8:	11 24       	eor	r1, r1
    10fa:	9f 57       	subi	r25, 0x7F	; 127
    10fc:	50 40       	sbci	r21, 0x00	; 0
    10fe:	8a f0       	brmi	.+34     	; 0x1122 <__mulsf3_pse+0x84>
    1100:	e1 f0       	breq	.+56     	; 0x113a <__mulsf3_pse+0x9c>
    1102:	88 23       	and	r24, r24
    1104:	4a f0       	brmi	.+18     	; 0x1118 <__mulsf3_pse+0x7a>
    1106:	ee 0f       	add	r30, r30
    1108:	ff 1f       	adc	r31, r31
    110a:	bb 1f       	adc	r27, r27
    110c:	66 1f       	adc	r22, r22
    110e:	77 1f       	adc	r23, r23
    1110:	88 1f       	adc	r24, r24
    1112:	91 50       	subi	r25, 0x01	; 1
    1114:	50 40       	sbci	r21, 0x00	; 0
    1116:	a9 f7       	brne	.-22     	; 0x1102 <__mulsf3_pse+0x64>
    1118:	9e 3f       	cpi	r25, 0xFE	; 254
    111a:	51 05       	cpc	r21, r1
    111c:	70 f0       	brcs	.+28     	; 0x113a <__mulsf3_pse+0x9c>
    111e:	14 c0       	rjmp	.+40     	; 0x1148 <__fp_inf>
    1120:	a6 cf       	rjmp	.-180    	; 0x106e <__fp_szero>
    1122:	5f 3f       	cpi	r21, 0xFF	; 255
    1124:	ec f3       	brlt	.-6      	; 0x1120 <__mulsf3_pse+0x82>
    1126:	98 3e       	cpi	r25, 0xE8	; 232
    1128:	dc f3       	brlt	.-10     	; 0x1120 <__mulsf3_pse+0x82>
    112a:	86 95       	lsr	r24
    112c:	77 95       	ror	r23
    112e:	67 95       	ror	r22
    1130:	b7 95       	ror	r27
    1132:	f7 95       	ror	r31
    1134:	e7 95       	ror	r30
    1136:	9f 5f       	subi	r25, 0xFF	; 255
    1138:	c1 f7       	brne	.-16     	; 0x112a <__mulsf3_pse+0x8c>
    113a:	fe 2b       	or	r31, r30
    113c:	88 0f       	add	r24, r24
    113e:	91 1d       	adc	r25, r1
    1140:	96 95       	lsr	r25
    1142:	87 95       	ror	r24
    1144:	97 f9       	bld	r25, 7
    1146:	08 95       	ret

00001148 <__fp_inf>:
    1148:	97 f9       	bld	r25, 7
    114a:	9f 67       	ori	r25, 0x7F	; 127
    114c:	80 e8       	ldi	r24, 0x80	; 128
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	08 95       	ret

00001154 <__fp_nan>:
    1154:	9f ef       	ldi	r25, 0xFF	; 255
    1156:	80 ec       	ldi	r24, 0xC0	; 192
    1158:	08 95       	ret

0000115a <__fp_pscA>:
    115a:	00 24       	eor	r0, r0
    115c:	0a 94       	dec	r0
    115e:	16 16       	cp	r1, r22
    1160:	17 06       	cpc	r1, r23
    1162:	18 06       	cpc	r1, r24
    1164:	09 06       	cpc	r0, r25
    1166:	08 95       	ret

00001168 <__fp_pscB>:
    1168:	00 24       	eor	r0, r0
    116a:	0a 94       	dec	r0
    116c:	12 16       	cp	r1, r18
    116e:	13 06       	cpc	r1, r19
    1170:	14 06       	cpc	r1, r20
    1172:	05 06       	cpc	r0, r21
    1174:	08 95       	ret

00001176 <__fp_round>:
    1176:	09 2e       	mov	r0, r25
    1178:	03 94       	inc	r0
    117a:	00 0c       	add	r0, r0
    117c:	11 f4       	brne	.+4      	; 0x1182 <__fp_round+0xc>
    117e:	88 23       	and	r24, r24
    1180:	52 f0       	brmi	.+20     	; 0x1196 <__fp_round+0x20>
    1182:	bb 0f       	add	r27, r27
    1184:	40 f4       	brcc	.+16     	; 0x1196 <__fp_round+0x20>
    1186:	bf 2b       	or	r27, r31
    1188:	11 f4       	brne	.+4      	; 0x118e <__fp_round+0x18>
    118a:	60 ff       	sbrs	r22, 0
    118c:	04 c0       	rjmp	.+8      	; 0x1196 <__fp_round+0x20>
    118e:	6f 5f       	subi	r22, 0xFF	; 255
    1190:	7f 4f       	sbci	r23, 0xFF	; 255
    1192:	8f 4f       	sbci	r24, 0xFF	; 255
    1194:	9f 4f       	sbci	r25, 0xFF	; 255
    1196:	08 95       	ret

00001198 <_exit>:
    1198:	f8 94       	cli

0000119a <__stop_program>:
    119a:	ff cf       	rjmp	.-2      	; 0x119a <__stop_program>
