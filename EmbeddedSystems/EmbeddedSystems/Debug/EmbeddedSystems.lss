
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a29  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074a  00000000  00000000  00000d79  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000063d  00000000  00000000  000014c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000350  00000000  00000000  00001b00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047b  00000000  00000000  00001e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005c9  00000000  00000000  000022cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  00002894  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	41 c0       	rjmp	.+130    	; 0x88 <__bad_interrupt>
   6:	00 00       	nop
   8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
   a:	00 00       	nop
   c:	3d c0       	rjmp	.+122    	; 0x88 <__bad_interrupt>
   e:	00 00       	nop
  10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
  12:	00 00       	nop
  14:	39 c0       	rjmp	.+114    	; 0x88 <__bad_interrupt>
  16:	00 00       	nop
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
  1e:	00 00       	nop
  20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c0       	rjmp	.+98     	; 0x88 <__bad_interrupt>
  26:	00 00       	nop
  28:	2f c0       	rjmp	.+94     	; 0x88 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2d c0       	rjmp	.+90     	; 0x88 <__bad_interrupt>
  2e:	00 00       	nop
  30:	2b c0       	rjmp	.+86     	; 0x88 <__bad_interrupt>
  32:	00 00       	nop
  34:	29 c0       	rjmp	.+82     	; 0x88 <__bad_interrupt>
  36:	00 00       	nop
  38:	27 c0       	rjmp	.+78     	; 0x88 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	25 c0       	rjmp	.+74     	; 0x88 <__bad_interrupt>
  3e:	00 00       	nop
  40:	23 c0       	rjmp	.+70     	; 0x88 <__bad_interrupt>
  42:	00 00       	nop
  44:	21 c0       	rjmp	.+66     	; 0x88 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c0       	rjmp	.+62     	; 0x88 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1d c0       	rjmp	.+58     	; 0x88 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1b c0       	rjmp	.+54     	; 0x88 <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c0       	rjmp	.+50     	; 0x88 <__bad_interrupt>
  56:	00 00       	nop
  58:	17 c0       	rjmp	.+46     	; 0x88 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c0       	rjmp	.+42     	; 0x88 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c0       	rjmp	.+38     	; 0x88 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c0       	rjmp	.+34     	; 0x88 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	3f d0       	rcall	.+126    	; 0x104 <main>
  86:	70 c0       	rjmp	.+224    	; 0x168 <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <Led_init>:

#include "Led.h"

void Led_init(void) {
  8a:	cf 93       	push	r28
  8c:	df 93       	push	r29
  8e:	cd b7       	in	r28, 0x3d	; 61
  90:	de b7       	in	r29, 0x3e	; 62
    // Set PORTB to outputs
    DDRB = 0xFF;
  92:	84 e2       	ldi	r24, 0x24	; 36
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	fc 01       	movw	r30, r24
  9a:	20 83       	st	Z, r18
    PORTB = 0x00;
  9c:	85 e2       	ldi	r24, 0x25	; 37
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	fc 01       	movw	r30, r24
  a2:	10 82       	st	Z, r1
}
  a4:	00 00       	nop
  a6:	df 91       	pop	r29
  a8:	cf 91       	pop	r28
  aa:	08 95       	ret

000000ac <Taster_init>:
 ---------------------
 - DDR Reg has to be set to 0
 - PORT Reg has to be set to 1
 -> Pin is input with pull-up
 */
void Taster_init() {
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
    // set to inputs
    DDRC &= ~(1 << 2);
  b4:	87 e2       	ldi	r24, 0x27	; 39
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	27 e2       	ldi	r18, 0x27	; 39
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	f9 01       	movw	r30, r18
  be:	20 81       	ld	r18, Z
  c0:	2b 7f       	andi	r18, 0xFB	; 251
  c2:	fc 01       	movw	r30, r24
  c4:	20 83       	st	Z, r18
    DDRD &= ~( (1 << 7) | (1 << 6) | (1 << 5) );
  c6:	8a e2       	ldi	r24, 0x2A	; 42
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	2a e2       	ldi	r18, 0x2A	; 42
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	f9 01       	movw	r30, r18
  d0:	20 81       	ld	r18, Z
  d2:	2f 71       	andi	r18, 0x1F	; 31
  d4:	fc 01       	movw	r30, r24
  d6:	20 83       	st	Z, r18
    
    // enable pull-up
    PORTC |= (1 << 2);
  d8:	88 e2       	ldi	r24, 0x28	; 40
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	28 e2       	ldi	r18, 0x28	; 40
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	f9 01       	movw	r30, r18
  e2:	20 81       	ld	r18, Z
  e4:	24 60       	ori	r18, 0x04	; 4
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
    PORTD |= (1 << 7) | (1 << 6) | (1 << 5);
  ea:	8b e2       	ldi	r24, 0x2B	; 43
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	2b e2       	ldi	r18, 0x2B	; 43
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	f9 01       	movw	r30, r18
  f4:	20 81       	ld	r18, Z
  f6:	20 6e       	ori	r18, 0xE0	; 224
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18
}
  fc:	00 00       	nop
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <main>:
#include "gpio/Led.h"
#include "playground/Playground.h"
#include "timer/Timer.h"


int main(void) {
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	00 d0       	rcall	.+0      	; 0x10a <main+0x6>
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
	
    Led_init();
 10e:	bd df       	rcall	.-134    	; 0x8a <Led_init>
	Taster_init();
 110:	cd df       	rcall	.-102    	; 0xac <Taster_init>
    Timer_init();
 112:	08 d0       	rcall	.+16     	; 0x124 <Timer_init>
 114:	1a 82       	std	Y+2, r1	; 0x02
	
	volatile int x = 0;
 116:	19 82       	std	Y+1, r1	; 0x01
 118:	89 81       	ldd	r24, Y+1	; 0x01
	
    while (1) {
        //playground();
		x++;
 11a:	9a 81       	ldd	r25, Y+2	; 0x02
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	9a 83       	std	Y+2, r25	; 0x02
 120:	89 83       	std	Y+1, r24	; 0x01
 122:	fa cf       	rjmp	.-12     	; 0x118 <main+0x14>

00000124 <Timer_init>:
    }
 124:	cf 93       	push	r28

#include "Timer.h"

void Timer_init() {
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
    
    // set prescaler to 1
    TCCR0B &= ~( (1 << 2) | (1 << 1) );
    TCCR0B |= (1 << 0);*/
    
    TCCR0A = 0x00;
 12c:	84 e4       	ldi	r24, 0x44	; 68
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	fc 01       	movw	r30, r24
 132:	10 82       	st	Z, r1
    TCCR0B = 0x00;
 134:	85 e4       	ldi	r24, 0x45	; 69
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	fc 01       	movw	r30, r24
 13a:	10 82       	st	Z, r1
    TCCR0B |= (1 << 0);
 13c:	85 e4       	ldi	r24, 0x45	; 69
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	25 e4       	ldi	r18, 0x45	; 69
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	f9 01       	movw	r30, r18
 146:	20 81       	ld	r18, Z
 148:	21 60       	ori	r18, 0x01	; 1
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18
	
	// enable interrupt
	TIMSK0 |= (1 << 0);
 14e:	8e e6       	ldi	r24, 0x6E	; 110
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	2e e6       	ldi	r18, 0x6E	; 110
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	f9 01       	movw	r30, r18
 158:	20 81       	ld	r18, Z
 15a:	21 60       	ori	r18, 0x01	; 1
 15c:	fc 01       	movw	r30, r24
 15e:	20 83       	st	Z, r18
}
 160:	00 00       	nop
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
