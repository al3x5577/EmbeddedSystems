
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000125a  000012ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000125a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000632  0080010c  0080010c  000012fa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001703  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e02  00000000  00000000  00002ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000111f  00000000  00000000  00003aed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000838  00000000  00000000  00004c0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000811  00000000  00000000  00005444  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001079  00000000  00000000  00005c55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  00006cce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	e2 c3       	rjmp	.+1988   	; 0x7ea <__vector_9>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b4 c3       	rjmp	.+1896   	; 0x7aa <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	e6 c5       	rjmp	.+3020   	; 0xc1e <__vector_20>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c5       	rjmp	.+2886   	; 0xba0 <__vector_22>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	4e c0       	rjmp	.+156    	; 0xfe <__vector_24>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea e5       	ldi	r30, 0x5A	; 90
      a0:	f2 e1       	ldi	r31, 0x12	; 18
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 30       	cpi	r26, 0x0C	; 12
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	27 e0       	ldi	r18, 0x07	; 7
      b4:	ac e0       	ldi	r26, 0x0C	; 12
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ae 33       	cpi	r26, 0x3E	; 62
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	01 d2       	rcall	.+1026   	; 0x4c6 <main>
      c4:	0c 94 2b 09 	jmp	0x1256	; 0x1256 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <adc_init>:
    // Make average
    avg = avg / 8;
    
    // Return a 16 bit value
    return (avg & 0xffff);
}
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	cd b7       	in	r28, 0x3d	; 61
      d0:	de b7       	in	r29, 0x3e	; 62
      d2:	8a e7       	ldi	r24, 0x7A	; 122
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	2a e7       	ldi	r18, 0x7A	; 122
      d8:	30 e0       	ldi	r19, 0x00	; 0
      da:	f9 01       	movw	r30, r18
      dc:	20 81       	ld	r18, Z
      de:	27 60       	ori	r18, 0x07	; 7
      e0:	fc 01       	movw	r30, r24
      e2:	20 83       	st	Z, r18
      e4:	8a e7       	ldi	r24, 0x7A	; 122
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	2a e7       	ldi	r18, 0x7A	; 122
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	f9 01       	movw	r30, r18
      ee:	20 81       	ld	r18, Z
      f0:	28 6c       	ori	r18, 0xC8	; 200
      f2:	fc 01       	movw	r30, r24
      f4:	20 83       	st	Z, r18
      f6:	00 00       	nop
      f8:	df 91       	pop	r29
      fa:	cf 91       	pop	r28
      fc:	08 95       	ret

000000fe <__vector_24>:

ISR(ADC_vect){
      fe:	1f 92       	push	r1
     100:	0f 92       	push	r0
     102:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     106:	0f 92       	push	r0
     108:	11 24       	eor	r1, r1
     10a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     10e:	0f 92       	push	r0
     110:	2f 93       	push	r18
     112:	3f 93       	push	r19
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
     118:	ef 93       	push	r30
     11a:	ff 93       	push	r31
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
     120:	00 d0       	rcall	.+0      	; 0x122 <__vector_24+0x24>
     122:	cd b7       	in	r28, 0x3d	; 61
     124:	de b7       	in	r29, 0x3e	; 62
    // Pull data from AD conversion
    uint16_t res = ADC;
     126:	88 e7       	ldi	r24, 0x78	; 120
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	fc 01       	movw	r30, r24
     12c:	80 81       	ld	r24, Z
     12e:	91 81       	ldd	r25, Z+1	; 0x01
     130:	9a 83       	std	Y+2, r25	; 0x02
     132:	89 83       	std	Y+1, r24	; 0x01
#ifdef DEBUG_LEDS_ADC
    Led3_Off();
#endif
    
    // Switch between LM35 and Poti
    switch (ADMUX & (1 << MUX0)) {
     134:	8c e7       	ldi	r24, 0x7C	; 124
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	fc 01       	movw	r30, r24
     13a:	80 81       	ld	r24, Z
     13c:	88 2f       	mov	r24, r24
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	81 70       	andi	r24, 0x01	; 1
     142:	99 27       	eor	r25, r25
     144:	00 97       	sbiw	r24, 0x00	; 0
     146:	19 f0       	breq	.+6      	; 0x14e <__vector_24+0x50>
     148:	01 97       	sbiw	r24, 0x01	; 1
     14a:	b9 f1       	breq	.+110    	; 0x1ba <__vector_24+0xbc>
#endif
            }
            break;
            
        default:
            break;
     14c:	63 c0       	rjmp	.+198    	; 0x214 <__vector_24+0x116>
    
    // Switch between LM35 and Poti
    switch (ADMUX & (1 << MUX0)) {
        case 0: // LM35
            
            if (index_LM35 == 42) {
     14e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     152:	8a 32       	cpi	r24, 0x2A	; 42
     154:	19 f4       	brne	.+6      	; 0x15c <__vector_24+0x5e>
                // Trash first conversion
                index_LM35 = 0;
     156:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
                
#ifdef DEBUG_LEDS_ADC
                Led4_Off();
#endif
            }
            break;
     15a:	5c c0       	rjmp	.+184    	; 0x214 <__vector_24+0x116>
                // Trash first conversion
                index_LM35 = 0;
#ifdef DEBUG_LEDS_ADC
                Led4_On();
#endif
            }else if (index_LM35 >= 0 && index_LM35 <= 7) {
     15c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     160:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     164:	88 30       	cpi	r24, 0x08	; 8
     166:	98 f4       	brcc	.+38     	; 0x18e <__vector_24+0x90>
                // Store 8 AD conversions in the Array
                LM35_Array[index_LM35] = res;
     168:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     16c:	88 2f       	mov	r24, r24
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	88 0f       	add	r24, r24
     172:	99 1f       	adc	r25, r25
     174:	84 5f       	subi	r24, 0xF4	; 244
     176:	9e 4f       	sbci	r25, 0xFE	; 254
     178:	29 81       	ldd	r18, Y+1	; 0x01
     17a:	3a 81       	ldd	r19, Y+2	; 0x02
     17c:	fc 01       	movw	r30, r24
     17e:	31 83       	std	Z+1, r19	; 0x01
     180:	20 83       	st	Z, r18
                index_LM35++;
     182:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     186:	8f 5f       	subi	r24, 0xFF	; 255
     188:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
                
#ifdef DEBUG_LEDS_ADC
                Led4_Off();
#endif
            }
            break;
     18c:	43 c0       	rjmp	.+134    	; 0x214 <__vector_24+0x116>
                // Store 8 AD conversions in the Array
                LM35_Array[index_LM35] = res;
                index_LM35++;
            }else {
                // Switch to Poti
                ADMUX &= ~(30); // Set MUX1..4 to 0
     18e:	8c e7       	ldi	r24, 0x7C	; 124
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	2c e7       	ldi	r18, 0x7C	; 124
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	f9 01       	movw	r30, r18
     198:	20 81       	ld	r18, Z
     19a:	21 7e       	andi	r18, 0xE1	; 225
     19c:	fc 01       	movw	r30, r24
     19e:	20 83       	st	Z, r18
                ADMUX |= (1 << MUX0);
     1a0:	8c e7       	ldi	r24, 0x7C	; 124
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	2c e7       	ldi	r18, 0x7C	; 124
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	f9 01       	movw	r30, r18
     1aa:	20 81       	ld	r18, Z
     1ac:	21 60       	ori	r18, 0x01	; 1
     1ae:	fc 01       	movw	r30, r24
     1b0:	20 83       	st	Z, r18
                
                // Set index to default value, so that the first conversion will be trashed
                index_LM35 = 42;
     1b2:	8a e2       	ldi	r24, 0x2A	; 42
     1b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
                
#ifdef DEBUG_LEDS_ADC
                Led4_Off();
#endif
            }
            break;
     1b8:	2d c0       	rjmp	.+90     	; 0x214 <__vector_24+0x116>
            
        case 1: // Poti
            if (index_Poti == 42) { // Trash first conversion
     1ba:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
     1be:	8a 32       	cpi	r24, 0x2A	; 42
     1c0:	19 f4       	brne	.+6      	; 0x1c8 <__vector_24+0xca>
#ifdef DEBUG_LEDS_ADC
                Led5_On();
#endif
                index_Poti = 0;
     1c2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <index_Poti>
                
#ifdef DEBUG_LEDS_ADC
                Led5_Off();
#endif
            }
            break;
     1c6:	25 c0       	rjmp	.+74     	; 0x212 <__vector_24+0x114>
            if (index_Poti == 42) { // Trash first conversion
#ifdef DEBUG_LEDS_ADC
                Led5_On();
#endif
                index_Poti = 0;
            }else if (index_Poti >= 0 && index_Poti <= 7) {
     1c8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
     1cc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
     1d0:	88 30       	cpi	r24, 0x08	; 8
     1d2:	98 f4       	brcc	.+38     	; 0x1fa <__vector_24+0xfc>
                // Store 8 AD conversions in the Array
                Poti_Array[index_Poti] = res;
     1d4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
     1d8:	88 2f       	mov	r24, r24
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	88 0f       	add	r24, r24
     1de:	99 1f       	adc	r25, r25
     1e0:	84 5e       	subi	r24, 0xE4	; 228
     1e2:	9e 4f       	sbci	r25, 0xFE	; 254
     1e4:	29 81       	ldd	r18, Y+1	; 0x01
     1e6:	3a 81       	ldd	r19, Y+2	; 0x02
     1e8:	fc 01       	movw	r30, r24
     1ea:	31 83       	std	Z+1, r19	; 0x01
     1ec:	20 83       	st	Z, r18
                index_Poti++;
     1ee:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <index_Poti>
     1f2:	8f 5f       	subi	r24, 0xFF	; 255
     1f4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <index_Poti>
                
#ifdef DEBUG_LEDS_ADC
                Led5_Off();
#endif
            }
            break;
     1f8:	0c c0       	rjmp	.+24     	; 0x212 <__vector_24+0x114>
                // Store 8 AD conversions in the Array
                Poti_Array[index_Poti] = res;
                index_Poti++;
            }else {
                // Switch to LM35
                ADMUX &= ~(31); // Set MUX0..4 to 0
     1fa:	8c e7       	ldi	r24, 0x7C	; 124
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	2c e7       	ldi	r18, 0x7C	; 124
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	f9 01       	movw	r30, r18
     204:	20 81       	ld	r18, Z
     206:	20 7e       	andi	r18, 0xE0	; 224
     208:	fc 01       	movw	r30, r24
     20a:	20 83       	st	Z, r18
                
                // Set index to default value, so that the first conversion will be trashed
                index_Poti = 42;
     20c:	8a e2       	ldi	r24, 0x2A	; 42
     20e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <index_Poti>
                
#ifdef DEBUG_LEDS_ADC
                Led5_Off();
#endif
            }
            break;
     212:	00 00       	nop
#ifdef DEBUG_LEDS_ADC
    Led3_On();
#endif
    
    // Trigger next conversion
    ADCSRA |= (1 << ADSC) | (1 << ADIE);
     214:	8a e7       	ldi	r24, 0x7A	; 122
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	2a e7       	ldi	r18, 0x7A	; 122
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	f9 01       	movw	r30, r18
     21e:	20 81       	ld	r18, Z
     220:	28 64       	ori	r18, 0x48	; 72
     222:	fc 01       	movw	r30, r24
     224:	20 83       	st	Z, r18
}
     226:	00 00       	nop
     228:	0f 90       	pop	r0
     22a:	0f 90       	pop	r0
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
     230:	ff 91       	pop	r31
     232:	ef 91       	pop	r30
     234:	9f 91       	pop	r25
     236:	8f 91       	pop	r24
     238:	3f 91       	pop	r19
     23a:	2f 91       	pop	r18
     23c:	0f 90       	pop	r0
     23e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     242:	0f 90       	pop	r0
     244:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     248:	0f 90       	pop	r0
     24a:	1f 90       	pop	r1
     24c:	18 95       	reti

0000024e <encoder_isr>:
  cli();
  val = enc_delta;
  enc_delta = val & 3;
  sei();
  return val >> 2;
}
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	00 d0       	rcall	.+0      	; 0x254 <encoder_isr+0x6>
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
     258:	19 82       	std	Y+1, r1	; 0x01
     25a:	86 e2       	ldi	r24, 0x26	; 38
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	fc 01       	movw	r30, r24
     260:	80 81       	ld	r24, Z
     262:	88 2f       	mov	r24, r24
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	80 74       	andi	r24, 0x40	; 64
     268:	99 27       	eor	r25, r25
     26a:	89 2b       	or	r24, r25
     26c:	11 f0       	breq	.+4      	; 0x272 <encoder_isr+0x24>
     26e:	83 e0       	ldi	r24, 0x03	; 3
     270:	89 83       	std	Y+1, r24	; 0x01
     272:	86 e2       	ldi	r24, 0x26	; 38
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	fc 01       	movw	r30, r24
     278:	80 81       	ld	r24, Z
     27a:	88 23       	and	r24, r24
     27c:	24 f4       	brge	.+8      	; 0x286 <encoder_isr+0x38>
     27e:	99 81       	ldd	r25, Y+1	; 0x01
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	89 27       	eor	r24, r25
     284:	89 83       	std	Y+1, r24	; 0x01
     286:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <last>
     28a:	98 2f       	mov	r25, r24
     28c:	89 81       	ldd	r24, Y+1	; 0x01
     28e:	f9 2f       	mov	r31, r25
     290:	f8 1b       	sub	r31, r24
     292:	8f 2f       	mov	r24, r31
     294:	8a 83       	std	Y+2, r24	; 0x02
     296:	8a 81       	ldd	r24, Y+2	; 0x02
     298:	08 2e       	mov	r0, r24
     29a:	00 0c       	add	r0, r0
     29c:	99 0b       	sbc	r25, r25
     29e:	81 70       	andi	r24, 0x01	; 1
     2a0:	99 27       	eor	r25, r25
     2a2:	89 2b       	or	r24, r25
     2a4:	59 f0       	breq	.+22     	; 0x2bc <encoder_isr+0x6e>
     2a6:	89 81       	ldd	r24, Y+1	; 0x01
     2a8:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <last>
     2ac:	8a 81       	ldd	r24, Y+2	; 0x02
     2ae:	82 70       	andi	r24, 0x02	; 2
     2b0:	90 91 3b 07 	lds	r25, 0x073B	; 0x80073b <enc_delta>
     2b4:	89 0f       	add	r24, r25
     2b6:	81 50       	subi	r24, 0x01	; 1
     2b8:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <enc_delta>
     2bc:	00 00       	nop
     2be:	0f 90       	pop	r0
     2c0:	0f 90       	pop	r0
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	08 95       	ret

000002c8 <encode_init>:
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	1f 92       	push	r1
     2ce:	cd b7       	in	r28, 0x3d	; 61
     2d0:	de b7       	in	r29, 0x3e	; 62
     2d2:	67 e2       	ldi	r22, 0x27	; 39
     2d4:	71 e0       	ldi	r23, 0x01	; 1
     2d6:	80 e1       	ldi	r24, 0x10	; 16
     2d8:	a4 d1       	rcall	.+840    	; 0x622 <Timer2_init>
     2da:	19 82       	std	Y+1, r1	; 0x01
     2dc:	86 e2       	ldi	r24, 0x26	; 38
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	fc 01       	movw	r30, r24
     2e2:	80 81       	ld	r24, Z
     2e4:	88 2f       	mov	r24, r24
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	80 74       	andi	r24, 0x40	; 64
     2ea:	99 27       	eor	r25, r25
     2ec:	89 2b       	or	r24, r25
     2ee:	11 f0       	breq	.+4      	; 0x2f4 <encode_init+0x2c>
     2f0:	83 e0       	ldi	r24, 0x03	; 3
     2f2:	89 83       	std	Y+1, r24	; 0x01
     2f4:	86 e2       	ldi	r24, 0x26	; 38
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	fc 01       	movw	r30, r24
     2fa:	80 81       	ld	r24, Z
     2fc:	88 23       	and	r24, r24
     2fe:	24 f4       	brge	.+8      	; 0x308 <encode_init+0x40>
     300:	99 81       	ldd	r25, Y+1	; 0x01
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	89 27       	eor	r24, r25
     306:	89 83       	std	Y+1, r24	; 0x01
     308:	89 81       	ldd	r24, Y+1	; 0x01
     30a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <last>
     30e:	10 92 3b 07 	sts	0x073B, r1	; 0x80073b <enc_delta>
     312:	00 00       	nop
     314:	0f 90       	pop	r0
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	08 95       	ret

0000031c <encode_read2>:
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	1f 92       	push	r1
     322:	cd b7       	in	r28, 0x3d	; 61
     324:	de b7       	in	r29, 0x3e	; 62
     326:	f8 94       	cli
     328:	80 91 3b 07 	lds	r24, 0x073B	; 0x80073b <enc_delta>
     32c:	89 83       	std	Y+1, r24	; 0x01
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	81 70       	andi	r24, 0x01	; 1
     332:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <enc_delta>
     336:	78 94       	sei
     338:	89 81       	ldd	r24, Y+1	; 0x01
     33a:	85 95       	asr	r24
     33c:	0f 90       	pop	r0
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	08 95       	ret

00000344 <loop>:


int loop( void )
{
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
     348:	cd b7       	in	r28, 0x3d	; 61
     34a:	de b7       	in	r29, 0x3e	; 62
     34c:	a6 97       	sbiw	r28, 0x26	; 38
     34e:	0f b6       	in	r0, 0x3f	; 63
     350:	f8 94       	cli
     352:	de bf       	out	0x3e, r29	; 62
     354:	0f be       	out	0x3f, r0	; 63
     356:	cd bf       	out	0x3d, r28	; 61
  int32_t val = 0;
     358:	19 82       	std	Y+1, r1	; 0x01
     35a:	1a 82       	std	Y+2, r1	; 0x02
     35c:	1b 82       	std	Y+3, r1	; 0x03
     35e:	1c 82       	std	Y+4, r1	; 0x04

  encode_init();
     360:	b3 df       	rcall	.-154    	; 0x2c8 <encode_init>
  sei();

  for(;;){
    val += encode_read2();          // read a single step encoder
     362:	78 94       	sei
     364:	db df       	rcall	.-74     	; 0x31c <encode_read2>
     366:	08 2e       	mov	r0, r24
     368:	00 0c       	add	r0, r0
     36a:	99 0b       	sbc	r25, r25
     36c:	aa 0b       	sbc	r26, r26
     36e:	bb 0b       	sbc	r27, r27
     370:	29 81       	ldd	r18, Y+1	; 0x01
     372:	3a 81       	ldd	r19, Y+2	; 0x02
     374:	4b 81       	ldd	r20, Y+3	; 0x03
     376:	5c 81       	ldd	r21, Y+4	; 0x04
     378:	82 0f       	add	r24, r18
     37a:	93 1f       	adc	r25, r19
     37c:	a4 1f       	adc	r26, r20
     37e:	b5 1f       	adc	r27, r21
     380:	89 83       	std	Y+1, r24	; 0x01
     382:	9a 83       	std	Y+2, r25	; 0x02
     384:	ab 83       	std	Y+3, r26	; 0x03
     386:	bc 83       	std	Y+4, r27	; 0x04
      
      char str[30];
      sprintf(str, "val: %d\n", val);
     388:	8c 81       	ldd	r24, Y+4	; 0x04
     38a:	8f 93       	push	r24
     38c:	8b 81       	ldd	r24, Y+3	; 0x03
     38e:	8f 93       	push	r24
     390:	8a 81       	ldd	r24, Y+2	; 0x02
     392:	8f 93       	push	r24
     394:	89 81       	ldd	r24, Y+1	; 0x01
     396:	8f 93       	push	r24
     398:	82 e0       	ldi	r24, 0x02	; 2
     39a:	91 e0       	ldi	r25, 0x01	; 1
     39c:	89 2f       	mov	r24, r25
     39e:	8f 93       	push	r24
     3a0:	82 e0       	ldi	r24, 0x02	; 2
     3a2:	91 e0       	ldi	r25, 0x01	; 1
     3a4:	8f 93       	push	r24
     3a6:	ce 01       	movw	r24, r28
     3a8:	09 96       	adiw	r24, 0x09	; 9
     3aa:	29 2f       	mov	r18, r25
     3ac:	2f 93       	push	r18
     3ae:	8f 93       	push	r24
     3b0:	77 d4       	rcall	.+2286   	; 0xca0 <sprintf>
     3b2:	8d b7       	in	r24, 0x3d	; 61
     3b4:	9e b7       	in	r25, 0x3e	; 62
     3b6:	08 96       	adiw	r24, 0x08	; 8
     3b8:	0f b6       	in	r0, 0x3f	; 63
     3ba:	f8 94       	cli
     3bc:	de bf       	out	0x3e, r29	; 62
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	cd bf       	out	0x3d, r28	; 61
      uart_send(str);
     3c2:	ce 01       	movw	r24, r28
     3c4:	09 96       	adiw	r24, 0x09	; 9
     3c6:	ae d3       	rcall	.+1884   	; 0xb24 <uart_send>
     3c8:	1e 82       	std	Y+6, r1	; 0x06
      
    // shift as many ones as count to byte
    int ledByte = 0;
     3ca:	1d 82       	std	Y+5, r1	; 0x05
     3cc:	18 86       	std	Y+8, r1	; 0x08
    for (int i = 0; i < val; i++) {
     3ce:	1f 82       	std	Y+7, r1	; 0x07
     3d0:	10 c0       	rjmp	.+32     	; 0x3f2 <loop+0xae>
     3d2:	8d 81       	ldd	r24, Y+5	; 0x05
        ledByte = ledByte << 1;
     3d4:	9e 81       	ldd	r25, Y+6	; 0x06
     3d6:	88 0f       	add	r24, r24
     3d8:	99 1f       	adc	r25, r25
     3da:	9e 83       	std	Y+6, r25	; 0x06
     3dc:	8d 83       	std	Y+5, r24	; 0x05
     3de:	8d 81       	ldd	r24, Y+5	; 0x05
        ledByte++;
     3e0:	9e 81       	ldd	r25, Y+6	; 0x06
     3e2:	01 96       	adiw	r24, 0x01	; 1
     3e4:	9e 83       	std	Y+6, r25	; 0x06
     3e6:	8d 83       	std	Y+5, r24	; 0x05
     3e8:	8f 81       	ldd	r24, Y+7	; 0x07
      sprintf(str, "val: %d\n", val);
      uart_send(str);
      
    // shift as many ones as count to byte
    int ledByte = 0;
    for (int i = 0; i < val; i++) {
     3ea:	98 85       	ldd	r25, Y+8	; 0x08
     3ec:	01 96       	adiw	r24, 0x01	; 1
     3ee:	98 87       	std	Y+8, r25	; 0x08
     3f0:	8f 83       	std	Y+7, r24	; 0x07
     3f2:	8f 81       	ldd	r24, Y+7	; 0x07
     3f4:	98 85       	ldd	r25, Y+8	; 0x08
     3f6:	9c 01       	movw	r18, r24
     3f8:	99 0f       	add	r25, r25
     3fa:	44 0b       	sbc	r20, r20
     3fc:	55 0b       	sbc	r21, r21
     3fe:	89 81       	ldd	r24, Y+1	; 0x01
     400:	9a 81       	ldd	r25, Y+2	; 0x02
     402:	ab 81       	ldd	r26, Y+3	; 0x03
     404:	bc 81       	ldd	r27, Y+4	; 0x04
     406:	28 17       	cp	r18, r24
     408:	39 07       	cpc	r19, r25
     40a:	4a 07       	cpc	r20, r26
     40c:	5b 07       	cpc	r21, r27
     40e:	0c f3       	brlt	.-62     	; 0x3d2 <loop+0x8e>
     410:	85 e2       	ldi	r24, 0x25	; 37
        ledByte = ledByte << 1;
        ledByte++;
    }
    // set Port
    PORTB = ledByte;
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	2d 81       	ldd	r18, Y+5	; 0x05
     416:	fc 01       	movw	r30, r24
     418:	20 83       	st	Z, r18
     41a:	a4 cf       	rjmp	.-184    	; 0x364 <loop+0x20>

0000041c <Led_init>:

#include "Led.h"

void Led_init(uint8_t initD) {
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	1f 92       	push	r1
     422:	cd b7       	in	r28, 0x3d	; 61
     424:	de b7       	in	r29, 0x3e	; 62
     426:	89 83       	std	Y+1, r24	; 0x01
    // Set PORTB to outputs
    DDRB = 0xFF;
     428:	84 e2       	ldi	r24, 0x24	; 36
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	2f ef       	ldi	r18, 0xFF	; 255
     42e:	fc 01       	movw	r30, r24
     430:	20 83       	st	Z, r18
    PORTB = 0x00;
     432:	85 e2       	ldi	r24, 0x25	; 37
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	fc 01       	movw	r30, r24
     438:	10 82       	st	Z, r1
    
    if (initD) {
     43a:	89 81       	ldd	r24, Y+1	; 0x01
     43c:	88 23       	and	r24, r24
     43e:	91 f0       	breq	.+36     	; 0x464 <Led_init+0x48>
        // Set PORTD 0..4 to outputs
        DDRD |= ( (1 << 4) | (1 << 3) | (1 << 2) | (1 << 1) | (1 << 0));
     440:	8a e2       	ldi	r24, 0x2A	; 42
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	2a e2       	ldi	r18, 0x2A	; 42
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	f9 01       	movw	r30, r18
     44a:	20 81       	ld	r18, Z
     44c:	2f 61       	ori	r18, 0x1F	; 31
     44e:	fc 01       	movw	r30, r24
     450:	20 83       	st	Z, r18
        PORTD &= ~( (1 << 4) | (1 << 3) | (1 << 2) | (1 << 1) | (1 << 0));
     452:	8b e2       	ldi	r24, 0x2B	; 43
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	2b e2       	ldi	r18, 0x2B	; 43
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	f9 01       	movw	r30, r18
     45c:	20 81       	ld	r18, Z
     45e:	20 7e       	andi	r18, 0xE0	; 224
     460:	fc 01       	movw	r30, r24
     462:	20 83       	st	Z, r18
    }
}
     464:	00 00       	nop
     466:	0f 90       	pop	r0
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	08 95       	ret

0000046e <Taster_init>:
 ---------------------
 - DDR Reg has to be set to 0
 - PORT Reg has to be set to 1
 -> Pin is input with pull-up
 */
void Taster_init() {
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
    
    // set to inputs
    DDRC &= ~(1 << 2);
     476:	87 e2       	ldi	r24, 0x27	; 39
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	27 e2       	ldi	r18, 0x27	; 39
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	f9 01       	movw	r30, r18
     480:	20 81       	ld	r18, Z
     482:	2b 7f       	andi	r18, 0xFB	; 251
     484:	fc 01       	movw	r30, r24
     486:	20 83       	st	Z, r18
    DDRD &= ~( (1 << 7) | (1 << 6) | (1 << 5) );
     488:	8a e2       	ldi	r24, 0x2A	; 42
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	2a e2       	ldi	r18, 0x2A	; 42
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	f9 01       	movw	r30, r18
     492:	20 81       	ld	r18, Z
     494:	2f 71       	andi	r18, 0x1F	; 31
     496:	fc 01       	movw	r30, r24
     498:	20 83       	st	Z, r18
    
    // enable pull-up
    PORTC |= (1 << 2);
     49a:	88 e2       	ldi	r24, 0x28	; 40
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	28 e2       	ldi	r18, 0x28	; 40
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	f9 01       	movw	r30, r18
     4a4:	20 81       	ld	r18, Z
     4a6:	24 60       	ori	r18, 0x04	; 4
     4a8:	fc 01       	movw	r30, r24
     4aa:	20 83       	st	Z, r18
    PORTD |= (1 << 7) | (1 << 6) | (1 << 5);
     4ac:	8b e2       	ldi	r24, 0x2B	; 43
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	2b e2       	ldi	r18, 0x2B	; 43
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	f9 01       	movw	r30, r18
     4b6:	20 81       	ld	r18, Z
     4b8:	20 6e       	ori	r18, 0xE0	; 224
     4ba:	fc 01       	movw	r30, r24
     4bc:	20 83       	st	Z, r18
}
     4be:	00 00       	nop
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	08 95       	ret

000004c6 <main>:
#define CLK_F_MHZ 16

uint8_t iahsdfoads = 0;
uint16_t afdsfasdf = 0;

int main(void) {
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	cd b7       	in	r28, 0x3d	; 61
     4cc:	de b7       	in	r29, 0x3e	; 62
     4ce:	c9 57       	subi	r28, 0x79	; 121
     4d0:	d1 09       	sbc	r29, r1
     4d2:	0f b6       	in	r0, 0x3f	; 63
     4d4:	f8 94       	cli
     4d6:	de bf       	out	0x3e, r29	; 62
     4d8:	0f be       	out	0x3f, r0	; 63
     4da:	cd bf       	out	0x3d, r28	; 61
	
    cli();
     4dc:	f8 94       	cli
    Led_init(0);	// Don't set LEDs at PORTD
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	9d df       	rcall	.-198    	; 0x41c <Led_init>
	Taster_init();
     4e2:	c5 df       	rcall	.-118    	; 0x46e <Taster_init>
    Timer_init(CLK_F_MHZ); // Init timer with 16MHZ clock
     4e4:	80 e1       	ldi	r24, 0x10	; 16
	uart_init_isr();
     4e6:	30 d1       	rcall	.+608    	; 0x748 <Timer_init>
    adc_init();
     4e8:	02 d3       	rcall	.+1540   	; 0xaee <uart_init_isr>
     4ea:	ef dd       	rcall	.-1058   	; 0xca <adc_init>
    encode_init();
     4ec:	ed de       	rcall	.-550    	; 0x2c8 <encode_init>
     4ee:	78 94       	sei
	sei();
     4f0:	38 d1       	rcall	.+624    	; 0x762 <Timer_getTick>
    
    uint16_t timeVarMain = Timer_getTick();
     4f2:	9a 83       	std	Y+2, r25	; 0x02
     4f4:	89 83       	std	Y+1, r24	; 0x01
     4f6:	22 e3       	ldi	r18, 0x32	; 50
     4f8:	ce 01       	movw	r24, r28
    char data_s;
    char data[50] = {0};
     4fa:	07 96       	adiw	r24, 0x07	; 7
     4fc:	fc 01       	movw	r30, r24
     4fe:	32 2f       	mov	r19, r18
     500:	11 92       	st	Z+, r1
     502:	3a 95       	dec	r19
     504:	e9 f7       	brne	.-6      	; 0x500 <main+0x3a>
     506:	1c 82       	std	Y+4, r1	; 0x04
    int isafd = 0;
     508:	1b 82       	std	Y+3, r1	; 0x03
     50a:	1e 82       	std	Y+6, r1	; 0x06
	char str[65];
    uint16_t Poti = 0;
     50c:	1d 82       	std	Y+5, r1	; 0x05
     50e:	1a df       	rcall	.-460    	; 0x344 <loop>
	
    while (1) {
        loop();
     510:	fe cf       	rjmp	.-4      	; 0x50e <main+0x48>

00000512 <Timer_init_withoutStruct>:
     512:	cf 93       	push	r28
            }
        }*/
        
        //trafficLight(0);
        //playground();
    }
     514:	df 93       	push	r29
    TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
}

void Timer_init_withoutStruct(uint8_t clockFreqMhz) {
     516:	1f 92       	push	r1
     518:	cd b7       	in	r28, 0x3d	; 61
     51a:	de b7       	in	r29, 0x3e	; 62
     51c:	89 83       	std	Y+1, r24	; 0x01
    // datasheet page 97
    // set mode to clear timer on compare (CTC)
    TCCR0B &= ~(1 << WGM02);
     51e:	85 e4       	ldi	r24, 0x45	; 69
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	25 e4       	ldi	r18, 0x45	; 69
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	f9 01       	movw	r30, r18
     528:	20 81       	ld	r18, Z
     52a:	27 7f       	andi	r18, 0xF7	; 247
     52c:	fc 01       	movw	r30, r24
     52e:	20 83       	st	Z, r18
    TCCR0A |= (1 << WGM01);
     530:	84 e4       	ldi	r24, 0x44	; 68
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	24 e4       	ldi	r18, 0x44	; 68
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	f9 01       	movw	r30, r18
     53a:	20 81       	ld	r18, Z
     53c:	22 60       	ori	r18, 0x02	; 2
     53e:	fc 01       	movw	r30, r24
     540:	20 83       	st	Z, r18
    TCCR0A &= ~(1 << WGM00);
     542:	84 e4       	ldi	r24, 0x44	; 68
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	24 e4       	ldi	r18, 0x44	; 68
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	f9 01       	movw	r30, r18
     54c:	20 81       	ld	r18, Z
     54e:	2e 7f       	andi	r18, 0xFE	; 254
     550:	fc 01       	movw	r30, r24
     552:	20 83       	st	Z, r18
    
    
    switch (clockFreqMhz) {
     554:	89 81       	ldd	r24, Y+1	; 0x01
     556:	88 2f       	mov	r24, r24
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	40 97       	sbiw	r24, 0x10	; 16
     55c:	09 f5       	brne	.+66     	; 0x5a0 <Timer_init_withoutStruct+0x8e>
        case 16:
            // extern osc (16 MHZ)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = COMPA_VAL-1;   // dez 249; range 0 - 249 -> 250 cycles till interrupt
     55e:	87 e4       	ldi	r24, 0x47	; 71
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	29 ef       	ldi	r18, 0xF9	; 249
     564:	fc 01       	movw	r30, r24
     566:	20 83       	st	Z, r18
            
            // set prescaler to 1/64
            TCCR0B &= ~(1 << CS02);
     568:	85 e4       	ldi	r24, 0x45	; 69
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	25 e4       	ldi	r18, 0x45	; 69
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	f9 01       	movw	r30, r18
     572:	20 81       	ld	r18, Z
     574:	2b 7f       	andi	r18, 0xFB	; 251
     576:	fc 01       	movw	r30, r24
     578:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
     57a:	85 e4       	ldi	r24, 0x45	; 69
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	25 e4       	ldi	r18, 0x45	; 69
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	f9 01       	movw	r30, r18
     584:	20 81       	ld	r18, Z
     586:	22 60       	ori	r18, 0x02	; 2
     588:	fc 01       	movw	r30, r24
     58a:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS00);
     58c:	85 e4       	ldi	r24, 0x45	; 69
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	25 e4       	ldi	r18, 0x45	; 69
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	f9 01       	movw	r30, r18
     596:	20 81       	ld	r18, Z
     598:	21 60       	ori	r18, 0x01	; 1
     59a:	fc 01       	movw	r30, r24
     59c:	20 83       	st	Z, r18
            break;
     59e:	21 c0       	rjmp	.+66     	; 0x5e2 <Timer_init_withoutStruct+0xd0>
            
        default:
            // inter osc (8 MHZ divided by 8 -> 1 MHZ clock)
            
            // set OCR0A-reg (top value of timer)
            OCR0A = COMPA_VAL_8MHZ-1;   // dez 124; range 0 - 124 -> 125 cycles till interrupt
     5a0:	87 e4       	ldi	r24, 0x47	; 71
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	2c e7       	ldi	r18, 0x7C	; 124
     5a6:	fc 01       	movw	r30, r24
     5a8:	20 83       	st	Z, r18
            
            // set prescaler to 1/8
            TCCR0B &= ~(1 << CS02);
     5aa:	85 e4       	ldi	r24, 0x45	; 69
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	25 e4       	ldi	r18, 0x45	; 69
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	f9 01       	movw	r30, r18
     5b4:	20 81       	ld	r18, Z
     5b6:	2b 7f       	andi	r18, 0xFB	; 251
     5b8:	fc 01       	movw	r30, r24
     5ba:	20 83       	st	Z, r18
            TCCR0B |= (1 << CS01);
     5bc:	85 e4       	ldi	r24, 0x45	; 69
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	25 e4       	ldi	r18, 0x45	; 69
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	f9 01       	movw	r30, r18
     5c6:	20 81       	ld	r18, Z
     5c8:	22 60       	ori	r18, 0x02	; 2
     5ca:	fc 01       	movw	r30, r24
     5cc:	20 83       	st	Z, r18
            TCCR0B &= ~(1 << CS00);
     5ce:	85 e4       	ldi	r24, 0x45	; 69
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	25 e4       	ldi	r18, 0x45	; 69
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	f9 01       	movw	r30, r18
     5d8:	20 81       	ld	r18, Z
     5da:	2e 7f       	andi	r18, 0xFE	; 254
     5dc:	fc 01       	movw	r30, r24
     5de:	20 83       	st	Z, r18
            break;
     5e0:	00 00       	nop
    }
    
    TIMSK0 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
     5e2:	8e e6       	ldi	r24, 0x6E	; 110
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	2e e6       	ldi	r18, 0x6E	; 110
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	f9 01       	movw	r30, r18
     5ec:	20 81       	ld	r18, Z
     5ee:	2b 7f       	andi	r18, 0xFB	; 251
     5f0:	fc 01       	movw	r30, r24
     5f2:	20 83       	st	Z, r18
    TIMSK0 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
     5f4:	8e e6       	ldi	r24, 0x6E	; 110
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	2e e6       	ldi	r18, 0x6E	; 110
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	f9 01       	movw	r30, r18
     5fe:	20 81       	ld	r18, Z
     600:	22 60       	ori	r18, 0x02	; 2
     602:	fc 01       	movw	r30, r24
     604:	20 83       	st	Z, r18
    TIMSK0 &= ~(1 << TOIE0);    // disable timer overflow interrupt
     606:	8e e6       	ldi	r24, 0x6E	; 110
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	2e e6       	ldi	r18, 0x6E	; 110
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	f9 01       	movw	r30, r18
     610:	20 81       	ld	r18, Z
     612:	2e 7f       	andi	r18, 0xFE	; 254
     614:	fc 01       	movw	r30, r24
     616:	20 83       	st	Z, r18
}
     618:	00 00       	nop
     61a:	0f 90       	pop	r0
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	08 95       	ret

00000622 <Timer2_init>:

void Timer2_init(uint8_t clockFreqMhz, void (*f)(void)) {
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	00 d0       	rcall	.+0      	; 0x628 <Timer2_init+0x6>
     628:	1f 92       	push	r1
     62a:	cd b7       	in	r28, 0x3d	; 61
     62c:	de b7       	in	r29, 0x3e	; 62
     62e:	89 83       	std	Y+1, r24	; 0x01
     630:	7b 83       	std	Y+3, r23	; 0x03
     632:	6a 83       	std	Y+2, r22	; 0x02
    timer2_func = f;
     634:	8a 81       	ldd	r24, Y+2	; 0x02
     636:	9b 81       	ldd	r25, Y+3	; 0x03
     638:	90 93 3d 07 	sts	0x073D, r25	; 0x80073d <timer2_func+0x1>
     63c:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <timer2_func>
    // datasheet page 97
    // set mode to clear timer on compare (CTC)
    TCCR2B &= ~(1 << WGM02);
     640:	81 eb       	ldi	r24, 0xB1	; 177
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	21 eb       	ldi	r18, 0xB1	; 177
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	f9 01       	movw	r30, r18
     64a:	20 81       	ld	r18, Z
     64c:	27 7f       	andi	r18, 0xF7	; 247
     64e:	fc 01       	movw	r30, r24
     650:	20 83       	st	Z, r18
    TCCR2A |= (1 << WGM01);
     652:	80 eb       	ldi	r24, 0xB0	; 176
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	20 eb       	ldi	r18, 0xB0	; 176
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	f9 01       	movw	r30, r18
     65c:	20 81       	ld	r18, Z
     65e:	22 60       	ori	r18, 0x02	; 2
     660:	fc 01       	movw	r30, r24
     662:	20 83       	st	Z, r18
    TCCR2A &= ~(1 << WGM00);
     664:	80 eb       	ldi	r24, 0xB0	; 176
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	20 eb       	ldi	r18, 0xB0	; 176
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	f9 01       	movw	r30, r18
     66e:	20 81       	ld	r18, Z
     670:	2e 7f       	andi	r18, 0xFE	; 254
     672:	fc 01       	movw	r30, r24
     674:	20 83       	st	Z, r18
    
    
    switch (clockFreqMhz) {
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	88 2f       	mov	r24, r24
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	40 97       	sbiw	r24, 0x10	; 16
     67e:	09 f5       	brne	.+66     	; 0x6c2 <Timer2_init+0xa0>
        case 16:
            // extern osc (16 MHZ)
            
            // set OCR0A-reg (top value of timer)
            OCR2A = T2_COMPA_VAL-1;   // dez 249; range 0 - 249 -> 250 cycles till interrupt
     680:	83 eb       	ldi	r24, 0xB3	; 179
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	29 ef       	ldi	r18, 0xF9	; 249
     686:	fc 01       	movw	r30, r24
     688:	20 83       	st	Z, r18
            
            // set prescaler to 1/64
            TCCR2B &= ~(1 << CS02);
     68a:	81 eb       	ldi	r24, 0xB1	; 177
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	21 eb       	ldi	r18, 0xB1	; 177
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	f9 01       	movw	r30, r18
     694:	20 81       	ld	r18, Z
     696:	2b 7f       	andi	r18, 0xFB	; 251
     698:	fc 01       	movw	r30, r24
     69a:	20 83       	st	Z, r18
            TCCR2B |= (1 << CS01);
     69c:	81 eb       	ldi	r24, 0xB1	; 177
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	21 eb       	ldi	r18, 0xB1	; 177
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	f9 01       	movw	r30, r18
     6a6:	20 81       	ld	r18, Z
     6a8:	22 60       	ori	r18, 0x02	; 2
     6aa:	fc 01       	movw	r30, r24
     6ac:	20 83       	st	Z, r18
            TCCR2B |= (1 << CS00);
     6ae:	81 eb       	ldi	r24, 0xB1	; 177
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	21 eb       	ldi	r18, 0xB1	; 177
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	f9 01       	movw	r30, r18
     6b8:	20 81       	ld	r18, Z
     6ba:	21 60       	ori	r18, 0x01	; 1
     6bc:	fc 01       	movw	r30, r24
     6be:	20 83       	st	Z, r18
            break;
     6c0:	21 c0       	rjmp	.+66     	; 0x704 <Timer2_init+0xe2>
            
        default:
            // inter osc (8 MHZ divided by 8 -> 1 MHZ clock)
            
            // set OCR0A-reg (top value of timer)
            OCR2A = T2_COMPA_VAL_8MHZ-1;   // dez 124; range 0 - 124 -> 125 cycles till interrupt
     6c2:	83 eb       	ldi	r24, 0xB3	; 179
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	2c e7       	ldi	r18, 0x7C	; 124
     6c8:	fc 01       	movw	r30, r24
     6ca:	20 83       	st	Z, r18
            
            // set prescaler to 1/8
            TCCR2B &= ~(1 << CS02);
     6cc:	81 eb       	ldi	r24, 0xB1	; 177
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	21 eb       	ldi	r18, 0xB1	; 177
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	f9 01       	movw	r30, r18
     6d6:	20 81       	ld	r18, Z
     6d8:	2b 7f       	andi	r18, 0xFB	; 251
     6da:	fc 01       	movw	r30, r24
     6dc:	20 83       	st	Z, r18
            TCCR2B |= (1 << CS01);
     6de:	81 eb       	ldi	r24, 0xB1	; 177
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	21 eb       	ldi	r18, 0xB1	; 177
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	f9 01       	movw	r30, r18
     6e8:	20 81       	ld	r18, Z
     6ea:	22 60       	ori	r18, 0x02	; 2
     6ec:	fc 01       	movw	r30, r24
     6ee:	20 83       	st	Z, r18
            TCCR2B &= ~(1 << CS00);
     6f0:	81 eb       	ldi	r24, 0xB1	; 177
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	21 eb       	ldi	r18, 0xB1	; 177
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	f9 01       	movw	r30, r18
     6fa:	20 81       	ld	r18, Z
     6fc:	2e 7f       	andi	r18, 0xFE	; 254
     6fe:	fc 01       	movw	r30, r24
     700:	20 83       	st	Z, r18
            break;
     702:	00 00       	nop
    }
    
    TIMSK2 &= ~(1 << OCIE0B);   // disable Output Compare Match B Interrupt
     704:	80 e7       	ldi	r24, 0x70	; 112
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	20 e7       	ldi	r18, 0x70	; 112
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	f9 01       	movw	r30, r18
     70e:	20 81       	ld	r18, Z
     710:	2b 7f       	andi	r18, 0xFB	; 251
     712:	fc 01       	movw	r30, r24
     714:	20 83       	st	Z, r18
    TIMSK2 |= (1 << OCIE0A);    // enable Output Compare Match A Interrupt
     716:	80 e7       	ldi	r24, 0x70	; 112
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	20 e7       	ldi	r18, 0x70	; 112
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	f9 01       	movw	r30, r18
     720:	20 81       	ld	r18, Z
     722:	22 60       	ori	r18, 0x02	; 2
     724:	fc 01       	movw	r30, r24
     726:	20 83       	st	Z, r18
    TIMSK2 &= ~(1 << TOIE0);    // disable timer overflow interrupt
     728:	80 e7       	ldi	r24, 0x70	; 112
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	20 e7       	ldi	r18, 0x70	; 112
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	f9 01       	movw	r30, r18
     732:	20 81       	ld	r18, Z
     734:	2e 7f       	andi	r18, 0xFE	; 254
     736:	fc 01       	movw	r30, r24
     738:	20 83       	st	Z, r18
}
     73a:	00 00       	nop
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	08 95       	ret

00000748 <Timer_init>:

void Timer_init(uint8_t clockFreqMhz) {
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	1f 92       	push	r1
     74e:	cd b7       	in	r28, 0x3d	; 61
     750:	de b7       	in	r29, 0x3e	; 62
     752:	89 83       	std	Y+1, r24	; 0x01
    Timer_init_withoutStruct(clockFreqMhz);
     754:	89 81       	ldd	r24, Y+1	; 0x01
     756:	dd de       	rcall	.-582    	; 0x512 <Timer_init_withoutStruct>
}
     758:	00 00       	nop
     75a:	0f 90       	pop	r0
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	08 95       	ret

00000762 <Timer_getTick>:

uint16_t Timer_getTick() {
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	00 d0       	rcall	.+0      	; 0x768 <Timer_getTick+0x6>
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
    // disable Output Compare Match A Interrupt
    TIMSK0 &= ~(1 << OCIE0A);
     76c:	8e e6       	ldi	r24, 0x6E	; 110
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	2e e6       	ldi	r18, 0x6E	; 110
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	f9 01       	movw	r30, r18
     776:	20 81       	ld	r18, Z
     778:	2d 7f       	andi	r18, 0xFD	; 253
     77a:	fc 01       	movw	r30, r24
     77c:	20 83       	st	Z, r18
    
    // store timer_count in a temp int that can't get changed by ISR
    uint16_t temp_timer_count = timer_count;
     77e:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <timer_count>
     782:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <timer_count+0x1>
     786:	9a 83       	std	Y+2, r25	; 0x02
     788:	89 83       	std	Y+1, r24	; 0x01
    
    // enable Output Compare Match A Interrupt
    TIMSK0 |= (1 << OCIE0A);
     78a:	8e e6       	ldi	r24, 0x6E	; 110
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	2e e6       	ldi	r18, 0x6E	; 110
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	f9 01       	movw	r30, r18
     794:	20 81       	ld	r18, Z
     796:	22 60       	ori	r18, 0x02	; 2
     798:	fc 01       	movw	r30, r24
     79a:	20 83       	st	Z, r18

    return temp_timer_count;
     79c:	89 81       	ldd	r24, Y+1	; 0x01
     79e:	9a 81       	ldd	r25, Y+2	; 0x02
}
     7a0:	0f 90       	pop	r0
     7a2:	0f 90       	pop	r0
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	08 95       	ret

000007aa <__vector_16>:
/**
 Timer compare A interrput:
 - increase timer_count
 - if timer_count is at max of uint16, set it to 0
 */
ISR(TIMER0_COMPA_vect){
     7aa:	1f 92       	push	r1
     7ac:	0f 92       	push	r0
     7ae:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     7b2:	0f 92       	push	r0
     7b4:	11 24       	eor	r1, r1
     7b6:	8f 93       	push	r24
     7b8:	9f 93       	push	r25
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	cd b7       	in	r28, 0x3d	; 61
     7c0:	de b7       	in	r29, 0x3e	; 62
    timer_count++;
     7c2:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <timer_count>
     7c6:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <timer_count+0x1>
     7ca:	01 96       	adiw	r24, 0x01	; 1
     7cc:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <timer_count+0x1>
     7d0:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <timer_count>
}
     7d4:	00 00       	nop
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	9f 91       	pop	r25
     7dc:	8f 91       	pop	r24
     7de:	0f 90       	pop	r0
     7e0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     7e4:	0f 90       	pop	r0
     7e6:	1f 90       	pop	r1
     7e8:	18 95       	reti

000007ea <__vector_9>:

ISR(TIMER2_COMPA_vect){
     7ea:	1f 92       	push	r1
     7ec:	0f 92       	push	r0
     7ee:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     7f2:	0f 92       	push	r0
     7f4:	11 24       	eor	r1, r1
     7f6:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     7fa:	0f 92       	push	r0
     7fc:	2f 93       	push	r18
     7fe:	3f 93       	push	r19
     800:	4f 93       	push	r20
     802:	5f 93       	push	r21
     804:	6f 93       	push	r22
     806:	7f 93       	push	r23
     808:	8f 93       	push	r24
     80a:	9f 93       	push	r25
     80c:	af 93       	push	r26
     80e:	bf 93       	push	r27
     810:	ef 93       	push	r30
     812:	ff 93       	push	r31
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
    (*timer2_func)();
     81c:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <timer2_func>
     820:	90 91 3d 07 	lds	r25, 0x073D	; 0x80073d <timer2_func+0x1>
     824:	fc 01       	movw	r30, r24
     826:	09 95       	icall
}
     828:	00 00       	nop
     82a:	df 91       	pop	r29
     82c:	cf 91       	pop	r28
     82e:	ff 91       	pop	r31
     830:	ef 91       	pop	r30
     832:	bf 91       	pop	r27
     834:	af 91       	pop	r26
     836:	9f 91       	pop	r25
     838:	8f 91       	pop	r24
     83a:	7f 91       	pop	r23
     83c:	6f 91       	pop	r22
     83e:	5f 91       	pop	r21
     840:	4f 91       	pop	r20
     842:	3f 91       	pop	r19
     844:	2f 91       	pop	r18
     846:	0f 90       	pop	r0
     848:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     84c:	0f 90       	pop	r0
     84e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     852:	0f 90       	pop	r0
     854:	1f 90       	pop	r1
     856:	18 95       	reti

00000858 <buff_put>:
        // Return byte
        return pByte;
    }else {
        return 0;
    }
}
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	00 d0       	rcall	.+0      	; 0x85e <buff_put+0x6>
     85e:	1f 92       	push	r1
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
     864:	89 83       	std	Y+1, r24	; 0x01
     866:	7b 83       	std	Y+3, r23	; 0x03
     868:	6a 83       	std	Y+2, r22	; 0x02
     86a:	81 ec       	ldi	r24, 0xC1	; 193
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	21 ec       	ldi	r18, 0xC1	; 193
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	f9 01       	movw	r30, r18
     874:	20 81       	ld	r18, Z
     876:	2f 7b       	andi	r18, 0xBF	; 191
     878:	fc 01       	movw	r30, r24
     87a:	20 83       	st	Z, r18
     87c:	81 ec       	ldi	r24, 0xC1	; 193
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	21 ec       	ldi	r18, 0xC1	; 193
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	f9 01       	movw	r30, r18
     886:	20 81       	ld	r18, Z
     888:	2f 77       	andi	r18, 0x7F	; 127
     88a:	fc 01       	movw	r30, r24
     88c:	20 83       	st	Z, r18
     88e:	8a 81       	ldd	r24, Y+2	; 0x02
     890:	9b 81       	ldd	r25, Y+3	; 0x03
     892:	8e 5f       	subi	r24, 0xFE	; 254
     894:	9d 4f       	sbci	r25, 0xFD	; 253
     896:	fc 01       	movw	r30, r24
     898:	80 81       	ld	r24, Z
     89a:	91 81       	ldd	r25, Z+1	; 0x01
     89c:	9c 01       	movw	r18, r24
     89e:	2f 5f       	subi	r18, 0xFF	; 255
     8a0:	3f 4f       	sbci	r19, 0xFF	; 255
     8a2:	8a 81       	ldd	r24, Y+2	; 0x02
     8a4:	9b 81       	ldd	r25, Y+3	; 0x03
     8a6:	9e 5f       	subi	r25, 0xFE	; 254
     8a8:	fc 01       	movw	r30, r24
     8aa:	80 81       	ld	r24, Z
     8ac:	91 81       	ldd	r25, Z+1	; 0x01
     8ae:	28 17       	cp	r18, r24
     8b0:	39 07       	cpc	r19, r25
     8b2:	91 f0       	breq	.+36     	; 0x8d8 <buff_put+0x80>
     8b4:	8a 81       	ldd	r24, Y+2	; 0x02
     8b6:	9b 81       	ldd	r25, Y+3	; 0x03
     8b8:	9e 5f       	subi	r25, 0xFE	; 254
     8ba:	fc 01       	movw	r30, r24
     8bc:	80 81       	ld	r24, Z
     8be:	91 81       	ldd	r25, Z+1	; 0x01
     8c0:	89 2b       	or	r24, r25
     8c2:	f1 f4       	brne	.+60     	; 0x900 <buff_put+0xa8>
     8c4:	8a 81       	ldd	r24, Y+2	; 0x02
     8c6:	9b 81       	ldd	r25, Y+3	; 0x03
     8c8:	8e 5f       	subi	r24, 0xFE	; 254
     8ca:	9d 4f       	sbci	r25, 0xFD	; 253
     8cc:	fc 01       	movw	r30, r24
     8ce:	80 81       	ld	r24, Z
     8d0:	91 81       	ldd	r25, Z+1	; 0x01
     8d2:	8f 3f       	cpi	r24, 0xFF	; 255
     8d4:	91 40       	sbci	r25, 0x01	; 1
     8d6:	a1 f4       	brne	.+40     	; 0x900 <buff_put+0xa8>
     8d8:	81 ec       	ldi	r24, 0xC1	; 193
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	21 ec       	ldi	r18, 0xC1	; 193
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	f9 01       	movw	r30, r18
     8e2:	20 81       	ld	r18, Z
     8e4:	20 64       	ori	r18, 0x40	; 64
     8e6:	fc 01       	movw	r30, r24
     8e8:	20 83       	st	Z, r18
     8ea:	81 ec       	ldi	r24, 0xC1	; 193
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	21 ec       	ldi	r18, 0xC1	; 193
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	f9 01       	movw	r30, r18
     8f4:	20 81       	ld	r18, Z
     8f6:	20 68       	ori	r18, 0x80	; 128
     8f8:	fc 01       	movw	r30, r24
     8fa:	20 83       	st	Z, r18
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	43 c0       	rjmp	.+134    	; 0x986 <buff_put+0x12e>
     900:	8a 81       	ldd	r24, Y+2	; 0x02
     902:	9b 81       	ldd	r25, Y+3	; 0x03
     904:	8e 5f       	subi	r24, 0xFE	; 254
     906:	9d 4f       	sbci	r25, 0xFD	; 253
     908:	fc 01       	movw	r30, r24
     90a:	80 81       	ld	r24, Z
     90c:	91 81       	ldd	r25, Z+1	; 0x01
     90e:	2a 81       	ldd	r18, Y+2	; 0x02
     910:	3b 81       	ldd	r19, Y+3	; 0x03
     912:	82 0f       	add	r24, r18
     914:	93 1f       	adc	r25, r19
     916:	29 81       	ldd	r18, Y+1	; 0x01
     918:	fc 01       	movw	r30, r24
     91a:	20 83       	st	Z, r18
     91c:	8a 81       	ldd	r24, Y+2	; 0x02
     91e:	9b 81       	ldd	r25, Y+3	; 0x03
     920:	8e 5f       	subi	r24, 0xFE	; 254
     922:	9d 4f       	sbci	r25, 0xFD	; 253
     924:	fc 01       	movw	r30, r24
     926:	80 81       	ld	r24, Z
     928:	91 81       	ldd	r25, Z+1	; 0x01
     92a:	9c 01       	movw	r18, r24
     92c:	2f 5f       	subi	r18, 0xFF	; 255
     92e:	3f 4f       	sbci	r19, 0xFF	; 255
     930:	8a 81       	ldd	r24, Y+2	; 0x02
     932:	9b 81       	ldd	r25, Y+3	; 0x03
     934:	8e 5f       	subi	r24, 0xFE	; 254
     936:	9d 4f       	sbci	r25, 0xFD	; 253
     938:	fc 01       	movw	r30, r24
     93a:	31 83       	std	Z+1, r19	; 0x01
     93c:	20 83       	st	Z, r18
     93e:	8a 81       	ldd	r24, Y+2	; 0x02
     940:	9b 81       	ldd	r25, Y+3	; 0x03
     942:	8e 5f       	subi	r24, 0xFE	; 254
     944:	9d 4f       	sbci	r25, 0xFD	; 253
     946:	fc 01       	movw	r30, r24
     948:	80 81       	ld	r24, Z
     94a:	91 81       	ldd	r25, Z+1	; 0x01
     94c:	81 15       	cp	r24, r1
     94e:	92 40       	sbci	r25, 0x02	; 2
     950:	38 f0       	brcs	.+14     	; 0x960 <buff_put+0x108>
     952:	8a 81       	ldd	r24, Y+2	; 0x02
     954:	9b 81       	ldd	r25, Y+3	; 0x03
     956:	8e 5f       	subi	r24, 0xFE	; 254
     958:	9d 4f       	sbci	r25, 0xFD	; 253
     95a:	fc 01       	movw	r30, r24
     95c:	11 82       	std	Z+1, r1	; 0x01
     95e:	10 82       	st	Z, r1
     960:	81 ec       	ldi	r24, 0xC1	; 193
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	21 ec       	ldi	r18, 0xC1	; 193
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	f9 01       	movw	r30, r18
     96a:	20 81       	ld	r18, Z
     96c:	20 64       	ori	r18, 0x40	; 64
     96e:	fc 01       	movw	r30, r24
     970:	20 83       	st	Z, r18
     972:	81 ec       	ldi	r24, 0xC1	; 193
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	21 ec       	ldi	r18, 0xC1	; 193
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	f9 01       	movw	r30, r18
     97c:	20 81       	ld	r18, Z
     97e:	20 68       	ori	r18, 0x80	; 128
     980:	fc 01       	movw	r30, r24
     982:	20 83       	st	Z, r18
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	0f 90       	pop	r0
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	08 95       	ret

00000992 <buff_get>:
     992:	cf 93       	push	r28
     994:	df 93       	push	r29
     996:	00 d0       	rcall	.+0      	; 0x998 <buff_get+0x6>
     998:	00 d0       	rcall	.+0      	; 0x99a <buff_get+0x8>
     99a:	cd b7       	in	r28, 0x3d	; 61
     99c:	de b7       	in	r29, 0x3e	; 62
     99e:	9a 83       	std	Y+2, r25	; 0x02
     9a0:	89 83       	std	Y+1, r24	; 0x01
     9a2:	7c 83       	std	Y+4, r23	; 0x04
     9a4:	6b 83       	std	Y+3, r22	; 0x03
     9a6:	81 ec       	ldi	r24, 0xC1	; 193
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	21 ec       	ldi	r18, 0xC1	; 193
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	f9 01       	movw	r30, r18
     9b0:	20 81       	ld	r18, Z
     9b2:	2f 7b       	andi	r18, 0xBF	; 191
     9b4:	fc 01       	movw	r30, r24
     9b6:	20 83       	st	Z, r18
     9b8:	81 ec       	ldi	r24, 0xC1	; 193
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	21 ec       	ldi	r18, 0xC1	; 193
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	f9 01       	movw	r30, r18
     9c2:	20 81       	ld	r18, Z
     9c4:	2f 77       	andi	r18, 0x7F	; 127
     9c6:	fc 01       	movw	r30, r24
     9c8:	20 83       	st	Z, r18
     9ca:	8b 81       	ldd	r24, Y+3	; 0x03
     9cc:	9c 81       	ldd	r25, Y+4	; 0x04
     9ce:	9e 5f       	subi	r25, 0xFE	; 254
     9d0:	fc 01       	movw	r30, r24
     9d2:	20 81       	ld	r18, Z
     9d4:	31 81       	ldd	r19, Z+1	; 0x01
     9d6:	8b 81       	ldd	r24, Y+3	; 0x03
     9d8:	9c 81       	ldd	r25, Y+4	; 0x04
     9da:	8e 5f       	subi	r24, 0xFE	; 254
     9dc:	9d 4f       	sbci	r25, 0xFD	; 253
     9de:	fc 01       	movw	r30, r24
     9e0:	80 81       	ld	r24, Z
     9e2:	91 81       	ldd	r25, Z+1	; 0x01
     9e4:	28 17       	cp	r18, r24
     9e6:	39 07       	cpc	r19, r25
     9e8:	a1 f4       	brne	.+40     	; 0xa12 <buff_get+0x80>
     9ea:	81 ec       	ldi	r24, 0xC1	; 193
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	21 ec       	ldi	r18, 0xC1	; 193
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	f9 01       	movw	r30, r18
     9f4:	20 81       	ld	r18, Z
     9f6:	20 64       	ori	r18, 0x40	; 64
     9f8:	fc 01       	movw	r30, r24
     9fa:	20 83       	st	Z, r18
     9fc:	81 ec       	ldi	r24, 0xC1	; 193
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	21 ec       	ldi	r18, 0xC1	; 193
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	f9 01       	movw	r30, r18
     a06:	20 81       	ld	r18, Z
     a08:	20 68       	ori	r18, 0x80	; 128
     a0a:	fc 01       	movw	r30, r24
     a0c:	20 83       	st	Z, r18
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	41 c0       	rjmp	.+130    	; 0xa94 <buff_get+0x102>
     a12:	8b 81       	ldd	r24, Y+3	; 0x03
     a14:	9c 81       	ldd	r25, Y+4	; 0x04
     a16:	9e 5f       	subi	r25, 0xFE	; 254
     a18:	fc 01       	movw	r30, r24
     a1a:	80 81       	ld	r24, Z
     a1c:	91 81       	ldd	r25, Z+1	; 0x01
     a1e:	2b 81       	ldd	r18, Y+3	; 0x03
     a20:	3c 81       	ldd	r19, Y+4	; 0x04
     a22:	82 0f       	add	r24, r18
     a24:	93 1f       	adc	r25, r19
     a26:	fc 01       	movw	r30, r24
     a28:	20 81       	ld	r18, Z
     a2a:	89 81       	ldd	r24, Y+1	; 0x01
     a2c:	9a 81       	ldd	r25, Y+2	; 0x02
     a2e:	fc 01       	movw	r30, r24
     a30:	20 83       	st	Z, r18
     a32:	8b 81       	ldd	r24, Y+3	; 0x03
     a34:	9c 81       	ldd	r25, Y+4	; 0x04
     a36:	9e 5f       	subi	r25, 0xFE	; 254
     a38:	fc 01       	movw	r30, r24
     a3a:	80 81       	ld	r24, Z
     a3c:	91 81       	ldd	r25, Z+1	; 0x01
     a3e:	9c 01       	movw	r18, r24
     a40:	2f 5f       	subi	r18, 0xFF	; 255
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	8b 81       	ldd	r24, Y+3	; 0x03
     a46:	9c 81       	ldd	r25, Y+4	; 0x04
     a48:	9e 5f       	subi	r25, 0xFE	; 254
     a4a:	fc 01       	movw	r30, r24
     a4c:	31 83       	std	Z+1, r19	; 0x01
     a4e:	20 83       	st	Z, r18
     a50:	8b 81       	ldd	r24, Y+3	; 0x03
     a52:	9c 81       	ldd	r25, Y+4	; 0x04
     a54:	9e 5f       	subi	r25, 0xFE	; 254
     a56:	fc 01       	movw	r30, r24
     a58:	80 81       	ld	r24, Z
     a5a:	91 81       	ldd	r25, Z+1	; 0x01
     a5c:	81 15       	cp	r24, r1
     a5e:	92 40       	sbci	r25, 0x02	; 2
     a60:	30 f0       	brcs	.+12     	; 0xa6e <buff_get+0xdc>
     a62:	8b 81       	ldd	r24, Y+3	; 0x03
     a64:	9c 81       	ldd	r25, Y+4	; 0x04
     a66:	9e 5f       	subi	r25, 0xFE	; 254
     a68:	fc 01       	movw	r30, r24
     a6a:	11 82       	std	Z+1, r1	; 0x01
     a6c:	10 82       	st	Z, r1
     a6e:	81 ec       	ldi	r24, 0xC1	; 193
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	21 ec       	ldi	r18, 0xC1	; 193
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	f9 01       	movw	r30, r18
     a78:	20 81       	ld	r18, Z
     a7a:	20 64       	ori	r18, 0x40	; 64
     a7c:	fc 01       	movw	r30, r24
     a7e:	20 83       	st	Z, r18
     a80:	81 ec       	ldi	r24, 0xC1	; 193
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	21 ec       	ldi	r18, 0xC1	; 193
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	f9 01       	movw	r30, r18
     a8a:	20 81       	ld	r18, Z
     a8c:	20 68       	ori	r18, 0x80	; 128
     a8e:	fc 01       	movw	r30, r24
     a90:	20 83       	st	Z, r18
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	0f 90       	pop	r0
     a96:	0f 90       	pop	r0
     a98:	0f 90       	pop	r0
     a9a:	0f 90       	pop	r0
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	08 95       	ret

00000aa2 <uart_init>:
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	00 d0       	rcall	.+0      	; 0xaa8 <uart_init+0x6>
     aa8:	cd b7       	in	r28, 0x3d	; 61
     aaa:	de b7       	in	r29, 0x3e	; 62
     aac:	87 e6       	ldi	r24, 0x67	; 103
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	9a 83       	std	Y+2, r25	; 0x02
     ab2:	89 83       	std	Y+1, r24	; 0x01
     ab4:	85 ec       	ldi	r24, 0xC5	; 197
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	29 81       	ldd	r18, Y+1	; 0x01
     aba:	3a 81       	ldd	r19, Y+2	; 0x02
     abc:	23 2f       	mov	r18, r19
     abe:	33 27       	eor	r19, r19
     ac0:	fc 01       	movw	r30, r24
     ac2:	20 83       	st	Z, r18
     ac4:	84 ec       	ldi	r24, 0xC4	; 196
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	29 81       	ldd	r18, Y+1	; 0x01
     aca:	fc 01       	movw	r30, r24
     acc:	20 83       	st	Z, r18
     ace:	81 ec       	ldi	r24, 0xC1	; 193
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	28 e1       	ldi	r18, 0x18	; 24
     ad4:	fc 01       	movw	r30, r24
     ad6:	20 83       	st	Z, r18
     ad8:	82 ec       	ldi	r24, 0xC2	; 194
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	26 e0       	ldi	r18, 0x06	; 6
     ade:	fc 01       	movw	r30, r24
     ae0:	20 83       	st	Z, r18
     ae2:	00 00       	nop
     ae4:	0f 90       	pop	r0
     ae6:	0f 90       	pop	r0
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	08 95       	ret

00000aee <uart_init_isr>:
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	cd b7       	in	r28, 0x3d	; 61
     af4:	de b7       	in	r29, 0x3e	; 62
     af6:	d5 df       	rcall	.-86     	; 0xaa2 <uart_init>
     af8:	81 ec       	ldi	r24, 0xC1	; 193
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	21 ec       	ldi	r18, 0xC1	; 193
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	f9 01       	movw	r30, r18
     b02:	20 81       	ld	r18, Z
     b04:	20 64       	ori	r18, 0x40	; 64
     b06:	fc 01       	movw	r30, r24
     b08:	20 83       	st	Z, r18
     b0a:	81 ec       	ldi	r24, 0xC1	; 193
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	21 ec       	ldi	r18, 0xC1	; 193
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	f9 01       	movw	r30, r18
     b14:	20 81       	ld	r18, Z
     b16:	20 68       	ori	r18, 0x80	; 128
     b18:	fc 01       	movw	r30, r24
     b1a:	20 83       	st	Z, r18
     b1c:	00 00       	nop
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	08 95       	ret

00000b24 <uart_send>:
     b24:	cf 93       	push	r28
     b26:	df 93       	push	r29
     b28:	00 d0       	rcall	.+0      	; 0xb2a <uart_send+0x6>
     b2a:	00 d0       	rcall	.+0      	; 0xb2c <uart_send+0x8>
     b2c:	00 d0       	rcall	.+0      	; 0xb2e <uart_send+0xa>
     b2e:	cd b7       	in	r28, 0x3d	; 61
     b30:	de b7       	in	r29, 0x3e	; 62
     b32:	9e 83       	std	Y+6, r25	; 0x06
     b34:	8d 83       	std	Y+5, r24	; 0x05
     b36:	8d 81       	ldd	r24, Y+5	; 0x05
     b38:	9e 81       	ldd	r25, Y+6	; 0x06
     b3a:	a9 d0       	rcall	.+338    	; 0xc8e <strlen>
     b3c:	9c 83       	std	Y+4, r25	; 0x04
     b3e:	8b 83       	std	Y+3, r24	; 0x03
     b40:	1a 82       	std	Y+2, r1	; 0x02
     b42:	19 82       	std	Y+1, r1	; 0x01
     b44:	1c c0       	rjmp	.+56     	; 0xb7e <uart_send+0x5a>
     b46:	00 00       	nop
     b48:	80 ec       	ldi	r24, 0xC0	; 192
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	fc 01       	movw	r30, r24
     b4e:	80 81       	ld	r24, Z
     b50:	88 2f       	mov	r24, r24
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	80 72       	andi	r24, 0x20	; 32
     b56:	99 27       	eor	r25, r25
     b58:	89 2b       	or	r24, r25
     b5a:	b1 f3       	breq	.-20     	; 0xb48 <uart_send+0x24>
     b5c:	86 ec       	ldi	r24, 0xC6	; 198
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	29 81       	ldd	r18, Y+1	; 0x01
     b62:	3a 81       	ldd	r19, Y+2	; 0x02
     b64:	4d 81       	ldd	r20, Y+5	; 0x05
     b66:	5e 81       	ldd	r21, Y+6	; 0x06
     b68:	24 0f       	add	r18, r20
     b6a:	35 1f       	adc	r19, r21
     b6c:	f9 01       	movw	r30, r18
     b6e:	20 81       	ld	r18, Z
     b70:	fc 01       	movw	r30, r24
     b72:	20 83       	st	Z, r18
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	9a 81       	ldd	r25, Y+2	; 0x02
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	9a 83       	std	Y+2, r25	; 0x02
     b7c:	89 83       	std	Y+1, r24	; 0x01
     b7e:	29 81       	ldd	r18, Y+1	; 0x01
     b80:	3a 81       	ldd	r19, Y+2	; 0x02
     b82:	8b 81       	ldd	r24, Y+3	; 0x03
     b84:	9c 81       	ldd	r25, Y+4	; 0x04
     b86:	28 17       	cp	r18, r24
     b88:	39 07       	cpc	r19, r25
     b8a:	ec f2       	brlt	.-70     	; 0xb46 <uart_send+0x22>
     b8c:	00 00       	nop
     b8e:	26 96       	adiw	r28, 0x06	; 6
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	f8 94       	cli
     b94:	de bf       	out	0x3e, r29	; 62
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	cd bf       	out	0x3d, r28	; 61
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	08 95       	ret

00000ba0 <__vector_22>:

/**
 ISR for USART Transmit Complete flag
 */
ISR(USART0_TX_vect){
     ba0:	1f 92       	push	r1
     ba2:	0f 92       	push	r0
     ba4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     ba8:	0f 92       	push	r0
     baa:	11 24       	eor	r1, r1
     bac:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     bb0:	0f 92       	push	r0
     bb2:	2f 93       	push	r18
     bb4:	3f 93       	push	r19
     bb6:	4f 93       	push	r20
     bb8:	5f 93       	push	r21
     bba:	6f 93       	push	r22
     bbc:	7f 93       	push	r23
     bbe:	8f 93       	push	r24
     bc0:	9f 93       	push	r25
     bc2:	af 93       	push	r26
     bc4:	bf 93       	push	r27
     bc6:	ef 93       	push	r30
     bc8:	ff 93       	push	r31
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	1f 92       	push	r1
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
    unsigned char pByte;
    // Pull one byte from buffer and store it in pByte
    if (buff_get(&pByte, &bufferSend) == 0) {
     bd4:	6f e2       	ldi	r22, 0x2F	; 47
     bd6:	71 e0       	ldi	r23, 0x01	; 1
     bd8:	ce 01       	movw	r24, r28
     bda:	01 96       	adiw	r24, 0x01	; 1
     bdc:	da de       	rcall	.-588    	; 0x992 <buff_get>
     bde:	88 23       	and	r24, r24
     be0:	29 f4       	brne	.+10     	; 0xbec <__vector_22+0x4c>
        // Send byte
        UDR0 = pByte;
     be2:	86 ec       	ldi	r24, 0xC6	; 198
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	29 81       	ldd	r18, Y+1	; 0x01
     be8:	fc 01       	movw	r30, r24
     bea:	20 83       	st	Z, r18
    }
}
     bec:	00 00       	nop
     bee:	0f 90       	pop	r0
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	ff 91       	pop	r31
     bf6:	ef 91       	pop	r30
     bf8:	bf 91       	pop	r27
     bfa:	af 91       	pop	r26
     bfc:	9f 91       	pop	r25
     bfe:	8f 91       	pop	r24
     c00:	7f 91       	pop	r23
     c02:	6f 91       	pop	r22
     c04:	5f 91       	pop	r21
     c06:	4f 91       	pop	r20
     c08:	3f 91       	pop	r19
     c0a:	2f 91       	pop	r18
     c0c:	0f 90       	pop	r0
     c0e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     c12:	0f 90       	pop	r0
     c14:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c18:	0f 90       	pop	r0
     c1a:	1f 90       	pop	r1
     c1c:	18 95       	reti

00000c1e <__vector_20>:

ISR(USART0_RX_vect){
     c1e:	1f 92       	push	r1
     c20:	0f 92       	push	r0
     c22:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c26:	0f 92       	push	r0
     c28:	11 24       	eor	r1, r1
     c2a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     c2e:	0f 92       	push	r0
     c30:	2f 93       	push	r18
     c32:	3f 93       	push	r19
     c34:	4f 93       	push	r20
     c36:	5f 93       	push	r21
     c38:	6f 93       	push	r22
     c3a:	7f 93       	push	r23
     c3c:	8f 93       	push	r24
     c3e:	9f 93       	push	r25
     c40:	af 93       	push	r26
     c42:	bf 93       	push	r27
     c44:	ef 93       	push	r30
     c46:	ff 93       	push	r31
     c48:	cf 93       	push	r28
     c4a:	df 93       	push	r29
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62
    // Put received byte to bufferRecv (will read but don't save the value if buffer overflows)
    buff_put(UDR0, &bufferRecv);
     c50:	86 ec       	ldi	r24, 0xC6	; 198
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	fc 01       	movw	r30, r24
     c56:	80 81       	ld	r24, Z
     c58:	63 e3       	ldi	r22, 0x33	; 51
     c5a:	73 e0       	ldi	r23, 0x03	; 3
     c5c:	fd dd       	rcall	.-1030   	; 0x858 <buff_put>
}
     c5e:	00 00       	nop
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	ff 91       	pop	r31
     c66:	ef 91       	pop	r30
     c68:	bf 91       	pop	r27
     c6a:	af 91       	pop	r26
     c6c:	9f 91       	pop	r25
     c6e:	8f 91       	pop	r24
     c70:	7f 91       	pop	r23
     c72:	6f 91       	pop	r22
     c74:	5f 91       	pop	r21
     c76:	4f 91       	pop	r20
     c78:	3f 91       	pop	r19
     c7a:	2f 91       	pop	r18
     c7c:	0f 90       	pop	r0
     c7e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     c82:	0f 90       	pop	r0
     c84:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c88:	0f 90       	pop	r0
     c8a:	1f 90       	pop	r1
     c8c:	18 95       	reti

00000c8e <strlen>:
     c8e:	fc 01       	movw	r30, r24
     c90:	01 90       	ld	r0, Z+
     c92:	00 20       	and	r0, r0
     c94:	e9 f7       	brne	.-6      	; 0xc90 <strlen+0x2>
     c96:	80 95       	com	r24
     c98:	90 95       	com	r25
     c9a:	8e 0f       	add	r24, r30
     c9c:	9f 1f       	adc	r25, r31
     c9e:	08 95       	ret

00000ca0 <sprintf>:
     ca0:	0f 93       	push	r16
     ca2:	1f 93       	push	r17
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	2e 97       	sbiw	r28, 0x0e	; 14
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
     cb8:	0d 89       	ldd	r16, Y+21	; 0x15
     cba:	1e 89       	ldd	r17, Y+22	; 0x16
     cbc:	86 e0       	ldi	r24, 0x06	; 6
     cbe:	8c 83       	std	Y+4, r24	; 0x04
     cc0:	1a 83       	std	Y+2, r17	; 0x02
     cc2:	09 83       	std	Y+1, r16	; 0x01
     cc4:	8f ef       	ldi	r24, 0xFF	; 255
     cc6:	9f e7       	ldi	r25, 0x7F	; 127
     cc8:	9e 83       	std	Y+6, r25	; 0x06
     cca:	8d 83       	std	Y+5, r24	; 0x05
     ccc:	ae 01       	movw	r20, r28
     cce:	47 5e       	subi	r20, 0xE7	; 231
     cd0:	5f 4f       	sbci	r21, 0xFF	; 255
     cd2:	6f 89       	ldd	r22, Y+23	; 0x17
     cd4:	78 8d       	ldd	r23, Y+24	; 0x18
     cd6:	ce 01       	movw	r24, r28
     cd8:	01 96       	adiw	r24, 0x01	; 1
     cda:	10 d0       	rcall	.+32     	; 0xcfc <vfprintf>
     cdc:	ef 81       	ldd	r30, Y+7	; 0x07
     cde:	f8 85       	ldd	r31, Y+8	; 0x08
     ce0:	e0 0f       	add	r30, r16
     ce2:	f1 1f       	adc	r31, r17
     ce4:	10 82       	st	Z, r1
     ce6:	2e 96       	adiw	r28, 0x0e	; 14
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	f8 94       	cli
     cec:	de bf       	out	0x3e, r29	; 62
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	cd bf       	out	0x3d, r28	; 61
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
     cf6:	1f 91       	pop	r17
     cf8:	0f 91       	pop	r16
     cfa:	08 95       	ret

00000cfc <vfprintf>:
     cfc:	2f 92       	push	r2
     cfe:	3f 92       	push	r3
     d00:	4f 92       	push	r4
     d02:	5f 92       	push	r5
     d04:	6f 92       	push	r6
     d06:	7f 92       	push	r7
     d08:	8f 92       	push	r8
     d0a:	9f 92       	push	r9
     d0c:	af 92       	push	r10
     d0e:	bf 92       	push	r11
     d10:	cf 92       	push	r12
     d12:	df 92       	push	r13
     d14:	ef 92       	push	r14
     d16:	ff 92       	push	r15
     d18:	0f 93       	push	r16
     d1a:	1f 93       	push	r17
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	2b 97       	sbiw	r28, 0x0b	; 11
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	6c 01       	movw	r12, r24
     d32:	7b 01       	movw	r14, r22
     d34:	8a 01       	movw	r16, r20
     d36:	fc 01       	movw	r30, r24
     d38:	17 82       	std	Z+7, r1	; 0x07
     d3a:	16 82       	std	Z+6, r1	; 0x06
     d3c:	83 81       	ldd	r24, Z+3	; 0x03
     d3e:	81 ff       	sbrs	r24, 1
     d40:	bf c1       	rjmp	.+894    	; 0x10c0 <vfprintf+0x3c4>
     d42:	ce 01       	movw	r24, r28
     d44:	01 96       	adiw	r24, 0x01	; 1
     d46:	3c 01       	movw	r6, r24
     d48:	f6 01       	movw	r30, r12
     d4a:	93 81       	ldd	r25, Z+3	; 0x03
     d4c:	f7 01       	movw	r30, r14
     d4e:	93 fd       	sbrc	r25, 3
     d50:	85 91       	lpm	r24, Z+
     d52:	93 ff       	sbrs	r25, 3
     d54:	81 91       	ld	r24, Z+
     d56:	7f 01       	movw	r14, r30
     d58:	88 23       	and	r24, r24
     d5a:	09 f4       	brne	.+2      	; 0xd5e <vfprintf+0x62>
     d5c:	ad c1       	rjmp	.+858    	; 0x10b8 <vfprintf+0x3bc>
     d5e:	85 32       	cpi	r24, 0x25	; 37
     d60:	39 f4       	brne	.+14     	; 0xd70 <vfprintf+0x74>
     d62:	93 fd       	sbrc	r25, 3
     d64:	85 91       	lpm	r24, Z+
     d66:	93 ff       	sbrs	r25, 3
     d68:	81 91       	ld	r24, Z+
     d6a:	7f 01       	movw	r14, r30
     d6c:	85 32       	cpi	r24, 0x25	; 37
     d6e:	21 f4       	brne	.+8      	; 0xd78 <vfprintf+0x7c>
     d70:	b6 01       	movw	r22, r12
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	d6 d1       	rcall	.+940    	; 0x1122 <fputc>
     d76:	e8 cf       	rjmp	.-48     	; 0xd48 <vfprintf+0x4c>
     d78:	91 2c       	mov	r9, r1
     d7a:	21 2c       	mov	r2, r1
     d7c:	31 2c       	mov	r3, r1
     d7e:	ff e1       	ldi	r31, 0x1F	; 31
     d80:	f3 15       	cp	r31, r3
     d82:	d8 f0       	brcs	.+54     	; 0xdba <vfprintf+0xbe>
     d84:	8b 32       	cpi	r24, 0x2B	; 43
     d86:	79 f0       	breq	.+30     	; 0xda6 <vfprintf+0xaa>
     d88:	38 f4       	brcc	.+14     	; 0xd98 <vfprintf+0x9c>
     d8a:	80 32       	cpi	r24, 0x20	; 32
     d8c:	79 f0       	breq	.+30     	; 0xdac <vfprintf+0xb0>
     d8e:	83 32       	cpi	r24, 0x23	; 35
     d90:	a1 f4       	brne	.+40     	; 0xdba <vfprintf+0xbe>
     d92:	23 2d       	mov	r18, r3
     d94:	20 61       	ori	r18, 0x10	; 16
     d96:	1d c0       	rjmp	.+58     	; 0xdd2 <vfprintf+0xd6>
     d98:	8d 32       	cpi	r24, 0x2D	; 45
     d9a:	61 f0       	breq	.+24     	; 0xdb4 <vfprintf+0xb8>
     d9c:	80 33       	cpi	r24, 0x30	; 48
     d9e:	69 f4       	brne	.+26     	; 0xdba <vfprintf+0xbe>
     da0:	23 2d       	mov	r18, r3
     da2:	21 60       	ori	r18, 0x01	; 1
     da4:	16 c0       	rjmp	.+44     	; 0xdd2 <vfprintf+0xd6>
     da6:	83 2d       	mov	r24, r3
     da8:	82 60       	ori	r24, 0x02	; 2
     daa:	38 2e       	mov	r3, r24
     dac:	e3 2d       	mov	r30, r3
     dae:	e4 60       	ori	r30, 0x04	; 4
     db0:	3e 2e       	mov	r3, r30
     db2:	2a c0       	rjmp	.+84     	; 0xe08 <vfprintf+0x10c>
     db4:	f3 2d       	mov	r31, r3
     db6:	f8 60       	ori	r31, 0x08	; 8
     db8:	1d c0       	rjmp	.+58     	; 0xdf4 <vfprintf+0xf8>
     dba:	37 fc       	sbrc	r3, 7
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <vfprintf+0x11c>
     dbe:	20 ed       	ldi	r18, 0xD0	; 208
     dc0:	28 0f       	add	r18, r24
     dc2:	2a 30       	cpi	r18, 0x0A	; 10
     dc4:	40 f0       	brcs	.+16     	; 0xdd6 <vfprintf+0xda>
     dc6:	8e 32       	cpi	r24, 0x2E	; 46
     dc8:	b9 f4       	brne	.+46     	; 0xdf8 <vfprintf+0xfc>
     dca:	36 fc       	sbrc	r3, 6
     dcc:	75 c1       	rjmp	.+746    	; 0x10b8 <vfprintf+0x3bc>
     dce:	23 2d       	mov	r18, r3
     dd0:	20 64       	ori	r18, 0x40	; 64
     dd2:	32 2e       	mov	r3, r18
     dd4:	19 c0       	rjmp	.+50     	; 0xe08 <vfprintf+0x10c>
     dd6:	36 fe       	sbrs	r3, 6
     dd8:	06 c0       	rjmp	.+12     	; 0xde6 <vfprintf+0xea>
     dda:	8a e0       	ldi	r24, 0x0A	; 10
     ddc:	98 9e       	mul	r9, r24
     dde:	20 0d       	add	r18, r0
     de0:	11 24       	eor	r1, r1
     de2:	92 2e       	mov	r9, r18
     de4:	11 c0       	rjmp	.+34     	; 0xe08 <vfprintf+0x10c>
     de6:	ea e0       	ldi	r30, 0x0A	; 10
     de8:	2e 9e       	mul	r2, r30
     dea:	20 0d       	add	r18, r0
     dec:	11 24       	eor	r1, r1
     dee:	22 2e       	mov	r2, r18
     df0:	f3 2d       	mov	r31, r3
     df2:	f0 62       	ori	r31, 0x20	; 32
     df4:	3f 2e       	mov	r3, r31
     df6:	08 c0       	rjmp	.+16     	; 0xe08 <vfprintf+0x10c>
     df8:	8c 36       	cpi	r24, 0x6C	; 108
     dfa:	21 f4       	brne	.+8      	; 0xe04 <vfprintf+0x108>
     dfc:	83 2d       	mov	r24, r3
     dfe:	80 68       	ori	r24, 0x80	; 128
     e00:	38 2e       	mov	r3, r24
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <vfprintf+0x10c>
     e04:	88 36       	cpi	r24, 0x68	; 104
     e06:	41 f4       	brne	.+16     	; 0xe18 <vfprintf+0x11c>
     e08:	f7 01       	movw	r30, r14
     e0a:	93 fd       	sbrc	r25, 3
     e0c:	85 91       	lpm	r24, Z+
     e0e:	93 ff       	sbrs	r25, 3
     e10:	81 91       	ld	r24, Z+
     e12:	7f 01       	movw	r14, r30
     e14:	81 11       	cpse	r24, r1
     e16:	b3 cf       	rjmp	.-154    	; 0xd7e <vfprintf+0x82>
     e18:	98 2f       	mov	r25, r24
     e1a:	9f 7d       	andi	r25, 0xDF	; 223
     e1c:	95 54       	subi	r25, 0x45	; 69
     e1e:	93 30       	cpi	r25, 0x03	; 3
     e20:	28 f4       	brcc	.+10     	; 0xe2c <vfprintf+0x130>
     e22:	0c 5f       	subi	r16, 0xFC	; 252
     e24:	1f 4f       	sbci	r17, 0xFF	; 255
     e26:	9f e3       	ldi	r25, 0x3F	; 63
     e28:	99 83       	std	Y+1, r25	; 0x01
     e2a:	0d c0       	rjmp	.+26     	; 0xe46 <vfprintf+0x14a>
     e2c:	83 36       	cpi	r24, 0x63	; 99
     e2e:	31 f0       	breq	.+12     	; 0xe3c <vfprintf+0x140>
     e30:	83 37       	cpi	r24, 0x73	; 115
     e32:	71 f0       	breq	.+28     	; 0xe50 <vfprintf+0x154>
     e34:	83 35       	cpi	r24, 0x53	; 83
     e36:	09 f0       	breq	.+2      	; 0xe3a <vfprintf+0x13e>
     e38:	55 c0       	rjmp	.+170    	; 0xee4 <vfprintf+0x1e8>
     e3a:	20 c0       	rjmp	.+64     	; 0xe7c <vfprintf+0x180>
     e3c:	f8 01       	movw	r30, r16
     e3e:	80 81       	ld	r24, Z
     e40:	89 83       	std	Y+1, r24	; 0x01
     e42:	0e 5f       	subi	r16, 0xFE	; 254
     e44:	1f 4f       	sbci	r17, 0xFF	; 255
     e46:	88 24       	eor	r8, r8
     e48:	83 94       	inc	r8
     e4a:	91 2c       	mov	r9, r1
     e4c:	53 01       	movw	r10, r6
     e4e:	12 c0       	rjmp	.+36     	; 0xe74 <vfprintf+0x178>
     e50:	28 01       	movw	r4, r16
     e52:	f2 e0       	ldi	r31, 0x02	; 2
     e54:	4f 0e       	add	r4, r31
     e56:	51 1c       	adc	r5, r1
     e58:	f8 01       	movw	r30, r16
     e5a:	a0 80       	ld	r10, Z
     e5c:	b1 80       	ldd	r11, Z+1	; 0x01
     e5e:	36 fe       	sbrs	r3, 6
     e60:	03 c0       	rjmp	.+6      	; 0xe68 <vfprintf+0x16c>
     e62:	69 2d       	mov	r22, r9
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <vfprintf+0x170>
     e68:	6f ef       	ldi	r22, 0xFF	; 255
     e6a:	7f ef       	ldi	r23, 0xFF	; 255
     e6c:	c5 01       	movw	r24, r10
     e6e:	4e d1       	rcall	.+668    	; 0x110c <strnlen>
     e70:	4c 01       	movw	r8, r24
     e72:	82 01       	movw	r16, r4
     e74:	f3 2d       	mov	r31, r3
     e76:	ff 77       	andi	r31, 0x7F	; 127
     e78:	3f 2e       	mov	r3, r31
     e7a:	15 c0       	rjmp	.+42     	; 0xea6 <vfprintf+0x1aa>
     e7c:	28 01       	movw	r4, r16
     e7e:	22 e0       	ldi	r18, 0x02	; 2
     e80:	42 0e       	add	r4, r18
     e82:	51 1c       	adc	r5, r1
     e84:	f8 01       	movw	r30, r16
     e86:	a0 80       	ld	r10, Z
     e88:	b1 80       	ldd	r11, Z+1	; 0x01
     e8a:	36 fe       	sbrs	r3, 6
     e8c:	03 c0       	rjmp	.+6      	; 0xe94 <vfprintf+0x198>
     e8e:	69 2d       	mov	r22, r9
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <vfprintf+0x19c>
     e94:	6f ef       	ldi	r22, 0xFF	; 255
     e96:	7f ef       	ldi	r23, 0xFF	; 255
     e98:	c5 01       	movw	r24, r10
     e9a:	2d d1       	rcall	.+602    	; 0x10f6 <strnlen_P>
     e9c:	4c 01       	movw	r8, r24
     e9e:	f3 2d       	mov	r31, r3
     ea0:	f0 68       	ori	r31, 0x80	; 128
     ea2:	3f 2e       	mov	r3, r31
     ea4:	82 01       	movw	r16, r4
     ea6:	33 fc       	sbrc	r3, 3
     ea8:	19 c0       	rjmp	.+50     	; 0xedc <vfprintf+0x1e0>
     eaa:	82 2d       	mov	r24, r2
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	88 16       	cp	r8, r24
     eb0:	99 06       	cpc	r9, r25
     eb2:	a0 f4       	brcc	.+40     	; 0xedc <vfprintf+0x1e0>
     eb4:	b6 01       	movw	r22, r12
     eb6:	80 e2       	ldi	r24, 0x20	; 32
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	33 d1       	rcall	.+614    	; 0x1122 <fputc>
     ebc:	2a 94       	dec	r2
     ebe:	f5 cf       	rjmp	.-22     	; 0xeaa <vfprintf+0x1ae>
     ec0:	f5 01       	movw	r30, r10
     ec2:	37 fc       	sbrc	r3, 7
     ec4:	85 91       	lpm	r24, Z+
     ec6:	37 fe       	sbrs	r3, 7
     ec8:	81 91       	ld	r24, Z+
     eca:	5f 01       	movw	r10, r30
     ecc:	b6 01       	movw	r22, r12
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	28 d1       	rcall	.+592    	; 0x1122 <fputc>
     ed2:	21 10       	cpse	r2, r1
     ed4:	2a 94       	dec	r2
     ed6:	21 e0       	ldi	r18, 0x01	; 1
     ed8:	82 1a       	sub	r8, r18
     eda:	91 08       	sbc	r9, r1
     edc:	81 14       	cp	r8, r1
     ede:	91 04       	cpc	r9, r1
     ee0:	79 f7       	brne	.-34     	; 0xec0 <vfprintf+0x1c4>
     ee2:	e1 c0       	rjmp	.+450    	; 0x10a6 <vfprintf+0x3aa>
     ee4:	84 36       	cpi	r24, 0x64	; 100
     ee6:	11 f0       	breq	.+4      	; 0xeec <vfprintf+0x1f0>
     ee8:	89 36       	cpi	r24, 0x69	; 105
     eea:	39 f5       	brne	.+78     	; 0xf3a <vfprintf+0x23e>
     eec:	f8 01       	movw	r30, r16
     eee:	37 fe       	sbrs	r3, 7
     ef0:	07 c0       	rjmp	.+14     	; 0xf00 <vfprintf+0x204>
     ef2:	60 81       	ld	r22, Z
     ef4:	71 81       	ldd	r23, Z+1	; 0x01
     ef6:	82 81       	ldd	r24, Z+2	; 0x02
     ef8:	93 81       	ldd	r25, Z+3	; 0x03
     efa:	0c 5f       	subi	r16, 0xFC	; 252
     efc:	1f 4f       	sbci	r17, 0xFF	; 255
     efe:	08 c0       	rjmp	.+16     	; 0xf10 <vfprintf+0x214>
     f00:	60 81       	ld	r22, Z
     f02:	71 81       	ldd	r23, Z+1	; 0x01
     f04:	07 2e       	mov	r0, r23
     f06:	00 0c       	add	r0, r0
     f08:	88 0b       	sbc	r24, r24
     f0a:	99 0b       	sbc	r25, r25
     f0c:	0e 5f       	subi	r16, 0xFE	; 254
     f0e:	1f 4f       	sbci	r17, 0xFF	; 255
     f10:	f3 2d       	mov	r31, r3
     f12:	ff 76       	andi	r31, 0x6F	; 111
     f14:	3f 2e       	mov	r3, r31
     f16:	97 ff       	sbrs	r25, 7
     f18:	09 c0       	rjmp	.+18     	; 0xf2c <vfprintf+0x230>
     f1a:	90 95       	com	r25
     f1c:	80 95       	com	r24
     f1e:	70 95       	com	r23
     f20:	61 95       	neg	r22
     f22:	7f 4f       	sbci	r23, 0xFF	; 255
     f24:	8f 4f       	sbci	r24, 0xFF	; 255
     f26:	9f 4f       	sbci	r25, 0xFF	; 255
     f28:	f0 68       	ori	r31, 0x80	; 128
     f2a:	3f 2e       	mov	r3, r31
     f2c:	2a e0       	ldi	r18, 0x0A	; 10
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	a3 01       	movw	r20, r6
     f32:	33 d1       	rcall	.+614    	; 0x119a <__ultoa_invert>
     f34:	88 2e       	mov	r8, r24
     f36:	86 18       	sub	r8, r6
     f38:	44 c0       	rjmp	.+136    	; 0xfc2 <vfprintf+0x2c6>
     f3a:	85 37       	cpi	r24, 0x75	; 117
     f3c:	31 f4       	brne	.+12     	; 0xf4a <vfprintf+0x24e>
     f3e:	23 2d       	mov	r18, r3
     f40:	2f 7e       	andi	r18, 0xEF	; 239
     f42:	b2 2e       	mov	r11, r18
     f44:	2a e0       	ldi	r18, 0x0A	; 10
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	25 c0       	rjmp	.+74     	; 0xf94 <vfprintf+0x298>
     f4a:	93 2d       	mov	r25, r3
     f4c:	99 7f       	andi	r25, 0xF9	; 249
     f4e:	b9 2e       	mov	r11, r25
     f50:	8f 36       	cpi	r24, 0x6F	; 111
     f52:	c1 f0       	breq	.+48     	; 0xf84 <vfprintf+0x288>
     f54:	18 f4       	brcc	.+6      	; 0xf5c <vfprintf+0x260>
     f56:	88 35       	cpi	r24, 0x58	; 88
     f58:	79 f0       	breq	.+30     	; 0xf78 <vfprintf+0x27c>
     f5a:	ae c0       	rjmp	.+348    	; 0x10b8 <vfprintf+0x3bc>
     f5c:	80 37       	cpi	r24, 0x70	; 112
     f5e:	19 f0       	breq	.+6      	; 0xf66 <vfprintf+0x26a>
     f60:	88 37       	cpi	r24, 0x78	; 120
     f62:	21 f0       	breq	.+8      	; 0xf6c <vfprintf+0x270>
     f64:	a9 c0       	rjmp	.+338    	; 0x10b8 <vfprintf+0x3bc>
     f66:	e9 2f       	mov	r30, r25
     f68:	e0 61       	ori	r30, 0x10	; 16
     f6a:	be 2e       	mov	r11, r30
     f6c:	b4 fe       	sbrs	r11, 4
     f6e:	0d c0       	rjmp	.+26     	; 0xf8a <vfprintf+0x28e>
     f70:	fb 2d       	mov	r31, r11
     f72:	f4 60       	ori	r31, 0x04	; 4
     f74:	bf 2e       	mov	r11, r31
     f76:	09 c0       	rjmp	.+18     	; 0xf8a <vfprintf+0x28e>
     f78:	34 fe       	sbrs	r3, 4
     f7a:	0a c0       	rjmp	.+20     	; 0xf90 <vfprintf+0x294>
     f7c:	29 2f       	mov	r18, r25
     f7e:	26 60       	ori	r18, 0x06	; 6
     f80:	b2 2e       	mov	r11, r18
     f82:	06 c0       	rjmp	.+12     	; 0xf90 <vfprintf+0x294>
     f84:	28 e0       	ldi	r18, 0x08	; 8
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	05 c0       	rjmp	.+10     	; 0xf94 <vfprintf+0x298>
     f8a:	20 e1       	ldi	r18, 0x10	; 16
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <vfprintf+0x298>
     f90:	20 e1       	ldi	r18, 0x10	; 16
     f92:	32 e0       	ldi	r19, 0x02	; 2
     f94:	f8 01       	movw	r30, r16
     f96:	b7 fe       	sbrs	r11, 7
     f98:	07 c0       	rjmp	.+14     	; 0xfa8 <vfprintf+0x2ac>
     f9a:	60 81       	ld	r22, Z
     f9c:	71 81       	ldd	r23, Z+1	; 0x01
     f9e:	82 81       	ldd	r24, Z+2	; 0x02
     fa0:	93 81       	ldd	r25, Z+3	; 0x03
     fa2:	0c 5f       	subi	r16, 0xFC	; 252
     fa4:	1f 4f       	sbci	r17, 0xFF	; 255
     fa6:	06 c0       	rjmp	.+12     	; 0xfb4 <vfprintf+0x2b8>
     fa8:	60 81       	ld	r22, Z
     faa:	71 81       	ldd	r23, Z+1	; 0x01
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	0e 5f       	subi	r16, 0xFE	; 254
     fb2:	1f 4f       	sbci	r17, 0xFF	; 255
     fb4:	a3 01       	movw	r20, r6
     fb6:	f1 d0       	rcall	.+482    	; 0x119a <__ultoa_invert>
     fb8:	88 2e       	mov	r8, r24
     fba:	86 18       	sub	r8, r6
     fbc:	fb 2d       	mov	r31, r11
     fbe:	ff 77       	andi	r31, 0x7F	; 127
     fc0:	3f 2e       	mov	r3, r31
     fc2:	36 fe       	sbrs	r3, 6
     fc4:	0d c0       	rjmp	.+26     	; 0xfe0 <vfprintf+0x2e4>
     fc6:	23 2d       	mov	r18, r3
     fc8:	2e 7f       	andi	r18, 0xFE	; 254
     fca:	a2 2e       	mov	r10, r18
     fcc:	89 14       	cp	r8, r9
     fce:	58 f4       	brcc	.+22     	; 0xfe6 <vfprintf+0x2ea>
     fd0:	34 fe       	sbrs	r3, 4
     fd2:	0b c0       	rjmp	.+22     	; 0xfea <vfprintf+0x2ee>
     fd4:	32 fc       	sbrc	r3, 2
     fd6:	09 c0       	rjmp	.+18     	; 0xfea <vfprintf+0x2ee>
     fd8:	83 2d       	mov	r24, r3
     fda:	8e 7e       	andi	r24, 0xEE	; 238
     fdc:	a8 2e       	mov	r10, r24
     fde:	05 c0       	rjmp	.+10     	; 0xfea <vfprintf+0x2ee>
     fe0:	b8 2c       	mov	r11, r8
     fe2:	a3 2c       	mov	r10, r3
     fe4:	03 c0       	rjmp	.+6      	; 0xfec <vfprintf+0x2f0>
     fe6:	b8 2c       	mov	r11, r8
     fe8:	01 c0       	rjmp	.+2      	; 0xfec <vfprintf+0x2f0>
     fea:	b9 2c       	mov	r11, r9
     fec:	a4 fe       	sbrs	r10, 4
     fee:	0f c0       	rjmp	.+30     	; 0x100e <vfprintf+0x312>
     ff0:	fe 01       	movw	r30, r28
     ff2:	e8 0d       	add	r30, r8
     ff4:	f1 1d       	adc	r31, r1
     ff6:	80 81       	ld	r24, Z
     ff8:	80 33       	cpi	r24, 0x30	; 48
     ffa:	21 f4       	brne	.+8      	; 0x1004 <vfprintf+0x308>
     ffc:	9a 2d       	mov	r25, r10
     ffe:	99 7e       	andi	r25, 0xE9	; 233
    1000:	a9 2e       	mov	r10, r25
    1002:	09 c0       	rjmp	.+18     	; 0x1016 <vfprintf+0x31a>
    1004:	a2 fe       	sbrs	r10, 2
    1006:	06 c0       	rjmp	.+12     	; 0x1014 <vfprintf+0x318>
    1008:	b3 94       	inc	r11
    100a:	b3 94       	inc	r11
    100c:	04 c0       	rjmp	.+8      	; 0x1016 <vfprintf+0x31a>
    100e:	8a 2d       	mov	r24, r10
    1010:	86 78       	andi	r24, 0x86	; 134
    1012:	09 f0       	breq	.+2      	; 0x1016 <vfprintf+0x31a>
    1014:	b3 94       	inc	r11
    1016:	a3 fc       	sbrc	r10, 3
    1018:	10 c0       	rjmp	.+32     	; 0x103a <vfprintf+0x33e>
    101a:	a0 fe       	sbrs	r10, 0
    101c:	06 c0       	rjmp	.+12     	; 0x102a <vfprintf+0x32e>
    101e:	b2 14       	cp	r11, r2
    1020:	80 f4       	brcc	.+32     	; 0x1042 <vfprintf+0x346>
    1022:	28 0c       	add	r2, r8
    1024:	92 2c       	mov	r9, r2
    1026:	9b 18       	sub	r9, r11
    1028:	0d c0       	rjmp	.+26     	; 0x1044 <vfprintf+0x348>
    102a:	b2 14       	cp	r11, r2
    102c:	58 f4       	brcc	.+22     	; 0x1044 <vfprintf+0x348>
    102e:	b6 01       	movw	r22, r12
    1030:	80 e2       	ldi	r24, 0x20	; 32
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	76 d0       	rcall	.+236    	; 0x1122 <fputc>
    1036:	b3 94       	inc	r11
    1038:	f8 cf       	rjmp	.-16     	; 0x102a <vfprintf+0x32e>
    103a:	b2 14       	cp	r11, r2
    103c:	18 f4       	brcc	.+6      	; 0x1044 <vfprintf+0x348>
    103e:	2b 18       	sub	r2, r11
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <vfprintf+0x34a>
    1042:	98 2c       	mov	r9, r8
    1044:	21 2c       	mov	r2, r1
    1046:	a4 fe       	sbrs	r10, 4
    1048:	0f c0       	rjmp	.+30     	; 0x1068 <vfprintf+0x36c>
    104a:	b6 01       	movw	r22, r12
    104c:	80 e3       	ldi	r24, 0x30	; 48
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	68 d0       	rcall	.+208    	; 0x1122 <fputc>
    1052:	a2 fe       	sbrs	r10, 2
    1054:	16 c0       	rjmp	.+44     	; 0x1082 <vfprintf+0x386>
    1056:	a1 fc       	sbrc	r10, 1
    1058:	03 c0       	rjmp	.+6      	; 0x1060 <vfprintf+0x364>
    105a:	88 e7       	ldi	r24, 0x78	; 120
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <vfprintf+0x368>
    1060:	88 e5       	ldi	r24, 0x58	; 88
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	b6 01       	movw	r22, r12
    1066:	0c c0       	rjmp	.+24     	; 0x1080 <vfprintf+0x384>
    1068:	8a 2d       	mov	r24, r10
    106a:	86 78       	andi	r24, 0x86	; 134
    106c:	51 f0       	breq	.+20     	; 0x1082 <vfprintf+0x386>
    106e:	a1 fe       	sbrs	r10, 1
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <vfprintf+0x37a>
    1072:	8b e2       	ldi	r24, 0x2B	; 43
    1074:	01 c0       	rjmp	.+2      	; 0x1078 <vfprintf+0x37c>
    1076:	80 e2       	ldi	r24, 0x20	; 32
    1078:	a7 fc       	sbrc	r10, 7
    107a:	8d e2       	ldi	r24, 0x2D	; 45
    107c:	b6 01       	movw	r22, r12
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	50 d0       	rcall	.+160    	; 0x1122 <fputc>
    1082:	89 14       	cp	r8, r9
    1084:	30 f4       	brcc	.+12     	; 0x1092 <vfprintf+0x396>
    1086:	b6 01       	movw	r22, r12
    1088:	80 e3       	ldi	r24, 0x30	; 48
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	4a d0       	rcall	.+148    	; 0x1122 <fputc>
    108e:	9a 94       	dec	r9
    1090:	f8 cf       	rjmp	.-16     	; 0x1082 <vfprintf+0x386>
    1092:	8a 94       	dec	r8
    1094:	f3 01       	movw	r30, r6
    1096:	e8 0d       	add	r30, r8
    1098:	f1 1d       	adc	r31, r1
    109a:	80 81       	ld	r24, Z
    109c:	b6 01       	movw	r22, r12
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	40 d0       	rcall	.+128    	; 0x1122 <fputc>
    10a2:	81 10       	cpse	r8, r1
    10a4:	f6 cf       	rjmp	.-20     	; 0x1092 <vfprintf+0x396>
    10a6:	22 20       	and	r2, r2
    10a8:	09 f4       	brne	.+2      	; 0x10ac <vfprintf+0x3b0>
    10aa:	4e ce       	rjmp	.-868    	; 0xd48 <vfprintf+0x4c>
    10ac:	b6 01       	movw	r22, r12
    10ae:	80 e2       	ldi	r24, 0x20	; 32
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	37 d0       	rcall	.+110    	; 0x1122 <fputc>
    10b4:	2a 94       	dec	r2
    10b6:	f7 cf       	rjmp	.-18     	; 0x10a6 <vfprintf+0x3aa>
    10b8:	f6 01       	movw	r30, r12
    10ba:	86 81       	ldd	r24, Z+6	; 0x06
    10bc:	97 81       	ldd	r25, Z+7	; 0x07
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <vfprintf+0x3c8>
    10c0:	8f ef       	ldi	r24, 0xFF	; 255
    10c2:	9f ef       	ldi	r25, 0xFF	; 255
    10c4:	2b 96       	adiw	r28, 0x0b	; 11
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	cd bf       	out	0x3d, r28	; 61
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	ff 90       	pop	r15
    10da:	ef 90       	pop	r14
    10dc:	df 90       	pop	r13
    10de:	cf 90       	pop	r12
    10e0:	bf 90       	pop	r11
    10e2:	af 90       	pop	r10
    10e4:	9f 90       	pop	r9
    10e6:	8f 90       	pop	r8
    10e8:	7f 90       	pop	r7
    10ea:	6f 90       	pop	r6
    10ec:	5f 90       	pop	r5
    10ee:	4f 90       	pop	r4
    10f0:	3f 90       	pop	r3
    10f2:	2f 90       	pop	r2
    10f4:	08 95       	ret

000010f6 <strnlen_P>:
    10f6:	fc 01       	movw	r30, r24
    10f8:	05 90       	lpm	r0, Z+
    10fa:	61 50       	subi	r22, 0x01	; 1
    10fc:	70 40       	sbci	r23, 0x00	; 0
    10fe:	01 10       	cpse	r0, r1
    1100:	d8 f7       	brcc	.-10     	; 0x10f8 <strnlen_P+0x2>
    1102:	80 95       	com	r24
    1104:	90 95       	com	r25
    1106:	8e 0f       	add	r24, r30
    1108:	9f 1f       	adc	r25, r31
    110a:	08 95       	ret

0000110c <strnlen>:
    110c:	fc 01       	movw	r30, r24
    110e:	61 50       	subi	r22, 0x01	; 1
    1110:	70 40       	sbci	r23, 0x00	; 0
    1112:	01 90       	ld	r0, Z+
    1114:	01 10       	cpse	r0, r1
    1116:	d8 f7       	brcc	.-10     	; 0x110e <strnlen+0x2>
    1118:	80 95       	com	r24
    111a:	90 95       	com	r25
    111c:	8e 0f       	add	r24, r30
    111e:	9f 1f       	adc	r25, r31
    1120:	08 95       	ret

00001122 <fputc>:
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	fb 01       	movw	r30, r22
    112c:	23 81       	ldd	r18, Z+3	; 0x03
    112e:	21 fd       	sbrc	r18, 1
    1130:	03 c0       	rjmp	.+6      	; 0x1138 <fputc+0x16>
    1132:	8f ef       	ldi	r24, 0xFF	; 255
    1134:	9f ef       	ldi	r25, 0xFF	; 255
    1136:	2c c0       	rjmp	.+88     	; 0x1190 <fputc+0x6e>
    1138:	22 ff       	sbrs	r18, 2
    113a:	16 c0       	rjmp	.+44     	; 0x1168 <fputc+0x46>
    113c:	46 81       	ldd	r20, Z+6	; 0x06
    113e:	57 81       	ldd	r21, Z+7	; 0x07
    1140:	24 81       	ldd	r18, Z+4	; 0x04
    1142:	35 81       	ldd	r19, Z+5	; 0x05
    1144:	42 17       	cp	r20, r18
    1146:	53 07       	cpc	r21, r19
    1148:	44 f4       	brge	.+16     	; 0x115a <fputc+0x38>
    114a:	a0 81       	ld	r26, Z
    114c:	b1 81       	ldd	r27, Z+1	; 0x01
    114e:	9d 01       	movw	r18, r26
    1150:	2f 5f       	subi	r18, 0xFF	; 255
    1152:	3f 4f       	sbci	r19, 0xFF	; 255
    1154:	31 83       	std	Z+1, r19	; 0x01
    1156:	20 83       	st	Z, r18
    1158:	8c 93       	st	X, r24
    115a:	26 81       	ldd	r18, Z+6	; 0x06
    115c:	37 81       	ldd	r19, Z+7	; 0x07
    115e:	2f 5f       	subi	r18, 0xFF	; 255
    1160:	3f 4f       	sbci	r19, 0xFF	; 255
    1162:	37 83       	std	Z+7, r19	; 0x07
    1164:	26 83       	std	Z+6, r18	; 0x06
    1166:	14 c0       	rjmp	.+40     	; 0x1190 <fputc+0x6e>
    1168:	8b 01       	movw	r16, r22
    116a:	ec 01       	movw	r28, r24
    116c:	fb 01       	movw	r30, r22
    116e:	00 84       	ldd	r0, Z+8	; 0x08
    1170:	f1 85       	ldd	r31, Z+9	; 0x09
    1172:	e0 2d       	mov	r30, r0
    1174:	09 95       	icall
    1176:	89 2b       	or	r24, r25
    1178:	e1 f6       	brne	.-72     	; 0x1132 <fputc+0x10>
    117a:	d8 01       	movw	r26, r16
    117c:	16 96       	adiw	r26, 0x06	; 6
    117e:	8d 91       	ld	r24, X+
    1180:	9c 91       	ld	r25, X
    1182:	17 97       	sbiw	r26, 0x07	; 7
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	17 96       	adiw	r26, 0x07	; 7
    1188:	9c 93       	st	X, r25
    118a:	8e 93       	st	-X, r24
    118c:	16 97       	sbiw	r26, 0x06	; 6
    118e:	ce 01       	movw	r24, r28
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	1f 91       	pop	r17
    1196:	0f 91       	pop	r16
    1198:	08 95       	ret

0000119a <__ultoa_invert>:
    119a:	fa 01       	movw	r30, r20
    119c:	aa 27       	eor	r26, r26
    119e:	28 30       	cpi	r18, 0x08	; 8
    11a0:	51 f1       	breq	.+84     	; 0x11f6 <__ultoa_invert+0x5c>
    11a2:	20 31       	cpi	r18, 0x10	; 16
    11a4:	81 f1       	breq	.+96     	; 0x1206 <__ultoa_invert+0x6c>
    11a6:	e8 94       	clt
    11a8:	6f 93       	push	r22
    11aa:	6e 7f       	andi	r22, 0xFE	; 254
    11ac:	6e 5f       	subi	r22, 0xFE	; 254
    11ae:	7f 4f       	sbci	r23, 0xFF	; 255
    11b0:	8f 4f       	sbci	r24, 0xFF	; 255
    11b2:	9f 4f       	sbci	r25, 0xFF	; 255
    11b4:	af 4f       	sbci	r26, 0xFF	; 255
    11b6:	b1 e0       	ldi	r27, 0x01	; 1
    11b8:	3e d0       	rcall	.+124    	; 0x1236 <__ultoa_invert+0x9c>
    11ba:	b4 e0       	ldi	r27, 0x04	; 4
    11bc:	3c d0       	rcall	.+120    	; 0x1236 <__ultoa_invert+0x9c>
    11be:	67 0f       	add	r22, r23
    11c0:	78 1f       	adc	r23, r24
    11c2:	89 1f       	adc	r24, r25
    11c4:	9a 1f       	adc	r25, r26
    11c6:	a1 1d       	adc	r26, r1
    11c8:	68 0f       	add	r22, r24
    11ca:	79 1f       	adc	r23, r25
    11cc:	8a 1f       	adc	r24, r26
    11ce:	91 1d       	adc	r25, r1
    11d0:	a1 1d       	adc	r26, r1
    11d2:	6a 0f       	add	r22, r26
    11d4:	71 1d       	adc	r23, r1
    11d6:	81 1d       	adc	r24, r1
    11d8:	91 1d       	adc	r25, r1
    11da:	a1 1d       	adc	r26, r1
    11dc:	20 d0       	rcall	.+64     	; 0x121e <__ultoa_invert+0x84>
    11de:	09 f4       	brne	.+2      	; 0x11e2 <__ultoa_invert+0x48>
    11e0:	68 94       	set
    11e2:	3f 91       	pop	r19
    11e4:	2a e0       	ldi	r18, 0x0A	; 10
    11e6:	26 9f       	mul	r18, r22
    11e8:	11 24       	eor	r1, r1
    11ea:	30 19       	sub	r19, r0
    11ec:	30 5d       	subi	r19, 0xD0	; 208
    11ee:	31 93       	st	Z+, r19
    11f0:	de f6       	brtc	.-74     	; 0x11a8 <__ultoa_invert+0xe>
    11f2:	cf 01       	movw	r24, r30
    11f4:	08 95       	ret
    11f6:	46 2f       	mov	r20, r22
    11f8:	47 70       	andi	r20, 0x07	; 7
    11fa:	40 5d       	subi	r20, 0xD0	; 208
    11fc:	41 93       	st	Z+, r20
    11fe:	b3 e0       	ldi	r27, 0x03	; 3
    1200:	0f d0       	rcall	.+30     	; 0x1220 <__ultoa_invert+0x86>
    1202:	c9 f7       	brne	.-14     	; 0x11f6 <__ultoa_invert+0x5c>
    1204:	f6 cf       	rjmp	.-20     	; 0x11f2 <__ultoa_invert+0x58>
    1206:	46 2f       	mov	r20, r22
    1208:	4f 70       	andi	r20, 0x0F	; 15
    120a:	40 5d       	subi	r20, 0xD0	; 208
    120c:	4a 33       	cpi	r20, 0x3A	; 58
    120e:	18 f0       	brcs	.+6      	; 0x1216 <__ultoa_invert+0x7c>
    1210:	49 5d       	subi	r20, 0xD9	; 217
    1212:	31 fd       	sbrc	r19, 1
    1214:	40 52       	subi	r20, 0x20	; 32
    1216:	41 93       	st	Z+, r20
    1218:	02 d0       	rcall	.+4      	; 0x121e <__ultoa_invert+0x84>
    121a:	a9 f7       	brne	.-22     	; 0x1206 <__ultoa_invert+0x6c>
    121c:	ea cf       	rjmp	.-44     	; 0x11f2 <__ultoa_invert+0x58>
    121e:	b4 e0       	ldi	r27, 0x04	; 4
    1220:	a6 95       	lsr	r26
    1222:	97 95       	ror	r25
    1224:	87 95       	ror	r24
    1226:	77 95       	ror	r23
    1228:	67 95       	ror	r22
    122a:	ba 95       	dec	r27
    122c:	c9 f7       	brne	.-14     	; 0x1220 <__ultoa_invert+0x86>
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	61 05       	cpc	r22, r1
    1232:	71 05       	cpc	r23, r1
    1234:	08 95       	ret
    1236:	9b 01       	movw	r18, r22
    1238:	ac 01       	movw	r20, r24
    123a:	0a 2e       	mov	r0, r26
    123c:	06 94       	lsr	r0
    123e:	57 95       	ror	r21
    1240:	47 95       	ror	r20
    1242:	37 95       	ror	r19
    1244:	27 95       	ror	r18
    1246:	ba 95       	dec	r27
    1248:	c9 f7       	brne	.-14     	; 0x123c <__ultoa_invert+0xa2>
    124a:	62 0f       	add	r22, r18
    124c:	73 1f       	adc	r23, r19
    124e:	84 1f       	adc	r24, r20
    1250:	95 1f       	adc	r25, r21
    1252:	a0 1d       	adc	r26, r0
    1254:	08 95       	ret

00001256 <_exit>:
    1256:	f8 94       	cli

00001258 <__stop_program>:
    1258:	ff cf       	rjmp	.-2      	; 0x1258 <__stop_program>
