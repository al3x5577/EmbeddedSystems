
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000013c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001352  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  000013c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016c5  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b31  00000000  00000000  00002c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eb2  00000000  00000000  000037be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e4  00000000  00000000  00004670  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b9  00000000  00000000  00004b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000913  00000000  00000000  0000520d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  00005b20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <__vector_16>
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 e5       	ldi	r30, 0x52	; 82
      a0:	f3 e1       	ldi	r31, 0x13	; 19
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 30       	cpi	r26, 0x00	; 0
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a0 e0       	ldi	r26, 0x00	; 0
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 31       	cpi	r26, 0x10	; 16
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	65 d1       	rcall	.+714    	; 0x38e <main>
      c4:	0c 94 a7 09 	jmp	0x134e	; 0x134e <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <Led_init>:
void Led7_On(void) {
    PORTB |= (1 << 1);
}
void Led7_Off(void) {
    PORTB &= ~(1 << 1);
}
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	1f 92       	push	r1
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
      d4:	89 83       	std	Y+1, r24	; 0x01
      d6:	84 e2       	ldi	r24, 0x24	; 36
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	2f ef       	ldi	r18, 0xFF	; 255
      dc:	fc 01       	movw	r30, r24
      de:	20 83       	st	Z, r18
      e0:	85 e2       	ldi	r24, 0x25	; 37
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	fc 01       	movw	r30, r24
      e6:	10 82       	st	Z, r1
      e8:	89 81       	ldd	r24, Y+1	; 0x01
      ea:	88 23       	and	r24, r24
      ec:	91 f0       	breq	.+36     	; 0x112 <Led_init+0x48>
      ee:	8a e2       	ldi	r24, 0x2A	; 42
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	2a e2       	ldi	r18, 0x2A	; 42
      f4:	30 e0       	ldi	r19, 0x00	; 0
      f6:	f9 01       	movw	r30, r18
      f8:	20 81       	ld	r18, Z
      fa:	2f 61       	ori	r18, 0x1F	; 31
      fc:	fc 01       	movw	r30, r24
      fe:	20 83       	st	Z, r18
     100:	8b e2       	ldi	r24, 0x2B	; 43
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	2b e2       	ldi	r18, 0x2B	; 43
     106:	30 e0       	ldi	r19, 0x00	; 0
     108:	f9 01       	movw	r30, r18
     10a:	20 81       	ld	r18, Z
     10c:	20 7e       	andi	r18, 0xE0	; 224
     10e:	fc 01       	movw	r30, r24
     110:	20 83       	st	Z, r18
     112:	00 00       	nop
     114:	0f 90       	pop	r0
     116:	df 91       	pop	r29
     118:	cf 91       	pop	r28
     11a:	08 95       	ret

0000011c <Led1_On>:
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
     120:	cd b7       	in	r28, 0x3d	; 61
     122:	de b7       	in	r29, 0x3e	; 62
     124:	85 e2       	ldi	r24, 0x25	; 37
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	25 e2       	ldi	r18, 0x25	; 37
     12a:	30 e0       	ldi	r19, 0x00	; 0
     12c:	f9 01       	movw	r30, r18
     12e:	20 81       	ld	r18, Z
     130:	20 68       	ori	r18, 0x80	; 128
     132:	fc 01       	movw	r30, r24
     134:	20 83       	st	Z, r18
     136:	00 00       	nop
     138:	df 91       	pop	r29
     13a:	cf 91       	pop	r28
     13c:	08 95       	ret

0000013e <Led1_Off>:
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	cd b7       	in	r28, 0x3d	; 61
     144:	de b7       	in	r29, 0x3e	; 62
     146:	85 e2       	ldi	r24, 0x25	; 37
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	25 e2       	ldi	r18, 0x25	; 37
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	f9 01       	movw	r30, r18
     150:	20 81       	ld	r18, Z
     152:	2f 77       	andi	r18, 0x7F	; 127
     154:	fc 01       	movw	r30, r24
     156:	20 83       	st	Z, r18
     158:	00 00       	nop
     15a:	df 91       	pop	r29
     15c:	cf 91       	pop	r28
     15e:	08 95       	ret

00000160 <Led2_On>:
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	cd b7       	in	r28, 0x3d	; 61
     166:	de b7       	in	r29, 0x3e	; 62
     168:	85 e2       	ldi	r24, 0x25	; 37
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	25 e2       	ldi	r18, 0x25	; 37
     16e:	30 e0       	ldi	r19, 0x00	; 0
     170:	f9 01       	movw	r30, r18
     172:	20 81       	ld	r18, Z
     174:	20 64       	ori	r18, 0x40	; 64
     176:	fc 01       	movw	r30, r24
     178:	20 83       	st	Z, r18
     17a:	00 00       	nop
     17c:	df 91       	pop	r29
     17e:	cf 91       	pop	r28
     180:	08 95       	ret

00000182 <Led2_Off>:
     182:	cf 93       	push	r28
     184:	df 93       	push	r29
     186:	cd b7       	in	r28, 0x3d	; 61
     188:	de b7       	in	r29, 0x3e	; 62
     18a:	85 e2       	ldi	r24, 0x25	; 37
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	25 e2       	ldi	r18, 0x25	; 37
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	f9 01       	movw	r30, r18
     194:	20 81       	ld	r18, Z
     196:	2f 7b       	andi	r18, 0xBF	; 191
     198:	fc 01       	movw	r30, r24
     19a:	20 83       	st	Z, r18
     19c:	00 00       	nop
     19e:	df 91       	pop	r29
     1a0:	cf 91       	pop	r28
     1a2:	08 95       	ret

000001a4 <Led3_On>:
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
     1a8:	cd b7       	in	r28, 0x3d	; 61
     1aa:	de b7       	in	r29, 0x3e	; 62
     1ac:	85 e2       	ldi	r24, 0x25	; 37
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	25 e2       	ldi	r18, 0x25	; 37
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	f9 01       	movw	r30, r18
     1b6:	20 81       	ld	r18, Z
     1b8:	20 62       	ori	r18, 0x20	; 32
     1ba:	fc 01       	movw	r30, r24
     1bc:	20 83       	st	Z, r18
     1be:	00 00       	nop
     1c0:	df 91       	pop	r29
     1c2:	cf 91       	pop	r28
     1c4:	08 95       	ret

000001c6 <Led3_Off>:
     1c6:	cf 93       	push	r28
     1c8:	df 93       	push	r29
     1ca:	cd b7       	in	r28, 0x3d	; 61
     1cc:	de b7       	in	r29, 0x3e	; 62
     1ce:	85 e2       	ldi	r24, 0x25	; 37
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	25 e2       	ldi	r18, 0x25	; 37
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	f9 01       	movw	r30, r18
     1d8:	20 81       	ld	r18, Z
     1da:	2f 7d       	andi	r18, 0xDF	; 223
     1dc:	fc 01       	movw	r30, r24
     1de:	20 83       	st	Z, r18
     1e0:	00 00       	nop
     1e2:	df 91       	pop	r29
     1e4:	cf 91       	pop	r28
     1e6:	08 95       	ret

000001e8 <Led4_On>:
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
     1f0:	85 e2       	ldi	r24, 0x25	; 37
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	25 e2       	ldi	r18, 0x25	; 37
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	f9 01       	movw	r30, r18
     1fa:	20 81       	ld	r18, Z
     1fc:	20 61       	ori	r18, 0x10	; 16
     1fe:	fc 01       	movw	r30, r24
     200:	20 83       	st	Z, r18
     202:	00 00       	nop
     204:	df 91       	pop	r29
     206:	cf 91       	pop	r28
     208:	08 95       	ret

0000020a <Led4_Off>:
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	85 e2       	ldi	r24, 0x25	; 37
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	25 e2       	ldi	r18, 0x25	; 37
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	f9 01       	movw	r30, r18
     21c:	20 81       	ld	r18, Z
     21e:	2f 7e       	andi	r18, 0xEF	; 239
     220:	fc 01       	movw	r30, r24
     222:	20 83       	st	Z, r18
     224:	00 00       	nop
     226:	df 91       	pop	r29
     228:	cf 91       	pop	r28
     22a:	08 95       	ret

0000022c <Led5_On>:
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	cd b7       	in	r28, 0x3d	; 61
     232:	de b7       	in	r29, 0x3e	; 62
     234:	85 e2       	ldi	r24, 0x25	; 37
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	25 e2       	ldi	r18, 0x25	; 37
     23a:	30 e0       	ldi	r19, 0x00	; 0
     23c:	f9 01       	movw	r30, r18
     23e:	20 81       	ld	r18, Z
     240:	28 60       	ori	r18, 0x08	; 8
     242:	fc 01       	movw	r30, r24
     244:	20 83       	st	Z, r18
     246:	00 00       	nop
     248:	df 91       	pop	r29
     24a:	cf 91       	pop	r28
     24c:	08 95       	ret

0000024e <Led8_On>:

/**
led8 - ioB0
*/
void Led8_On(void) {
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 0);
     256:	85 e2       	ldi	r24, 0x25	; 37
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	25 e2       	ldi	r18, 0x25	; 37
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	f9 01       	movw	r30, r18
     260:	20 81       	ld	r18, Z
     262:	21 60       	ori	r18, 0x01	; 1
     264:	fc 01       	movw	r30, r24
     266:	20 83       	st	Z, r18
}
     268:	00 00       	nop
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	08 95       	ret

00000270 <Taster_init>:
 ---------------------
 - DDR Reg has to be set to 0
 - PORT Reg has to be set to 1
 -> Pin is input with pull-up
 */
void Taster_init() {
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	cd b7       	in	r28, 0x3d	; 61
     276:	de b7       	in	r29, 0x3e	; 62
    // set to inputs
    DDRC &= ~(1 << 2);
     278:	87 e2       	ldi	r24, 0x27	; 39
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	27 e2       	ldi	r18, 0x27	; 39
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	f9 01       	movw	r30, r18
     282:	20 81       	ld	r18, Z
     284:	2b 7f       	andi	r18, 0xFB	; 251
     286:	fc 01       	movw	r30, r24
     288:	20 83       	st	Z, r18
    DDRD &= ~( (1 << 7) | (1 << 6) | (1 << 5) );
     28a:	8a e2       	ldi	r24, 0x2A	; 42
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	2a e2       	ldi	r18, 0x2A	; 42
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	f9 01       	movw	r30, r18
     294:	20 81       	ld	r18, Z
     296:	2f 71       	andi	r18, 0x1F	; 31
     298:	fc 01       	movw	r30, r24
     29a:	20 83       	st	Z, r18
    
    // enable pull-up
    PORTC |= (1 << 2);
     29c:	88 e2       	ldi	r24, 0x28	; 40
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	28 e2       	ldi	r18, 0x28	; 40
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	f9 01       	movw	r30, r18
     2a6:	20 81       	ld	r18, Z
     2a8:	24 60       	ori	r18, 0x04	; 4
     2aa:	fc 01       	movw	r30, r24
     2ac:	20 83       	st	Z, r18
    PORTD |= (1 << 7) | (1 << 6) | (1 << 5);
     2ae:	8b e2       	ldi	r24, 0x2B	; 43
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	2b e2       	ldi	r18, 0x2B	; 43
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	f9 01       	movw	r30, r18
     2b8:	20 81       	ld	r18, Z
     2ba:	20 6e       	ori	r18, 0xE0	; 224
     2bc:	fc 01       	movw	r30, r24
     2be:	20 83       	st	Z, r18
}
     2c0:	00 00       	nop
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	08 95       	ret

000002c8 <Taster1_get>:

/**
 Taster1 - ioD7
 */
uint8_t Taster1_get(void) {
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	00 d0       	rcall	.+0      	; 0x2ce <Taster1_get+0x6>
     2ce:	cd b7       	in	r28, 0x3d	; 61
     2d0:	de b7       	in	r29, 0x3e	; 62
    int state = PIND;
     2d2:	89 e2       	ldi	r24, 0x29	; 41
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	fc 01       	movw	r30, r24
     2d8:	80 81       	ld	r24, Z
     2da:	88 2f       	mov	r24, r24
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	9a 83       	std	Y+2, r25	; 0x02
     2e0:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<7)) == 0 ) {
     2e2:	89 81       	ldd	r24, Y+1	; 0x01
     2e4:	9a 81       	ldd	r25, Y+2	; 0x02
     2e6:	80 78       	andi	r24, 0x80	; 128
     2e8:	99 27       	eor	r25, r25
     2ea:	89 2b       	or	r24, r25
     2ec:	11 f4       	brne	.+4      	; 0x2f2 <Taster1_get+0x2a>
        return TASTER_RETURN_VALUE_LOW;
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <Taster1_get+0x2c>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
     2f2:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	08 95       	ret

000002fe <Taster2_get>:

/**
Taster2 - ioD6
*/
uint8_t Taster2_get(void) {
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	1f 92       	push	r1
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
    uint8_t state = PIND;
     308:	89 e2       	ldi	r24, 0x29	; 41
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	fc 01       	movw	r30, r24
     30e:	80 81       	ld	r24, Z
     310:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<6)) == 0 ) {
     312:	89 81       	ldd	r24, Y+1	; 0x01
     314:	88 2f       	mov	r24, r24
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	80 74       	andi	r24, 0x40	; 64
     31a:	99 27       	eor	r25, r25
     31c:	89 2b       	or	r24, r25
     31e:	11 f4       	brne	.+4      	; 0x324 <Taster2_get+0x26>
        return TASTER_RETURN_VALUE_LOW;
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	01 c0       	rjmp	.+2      	; 0x326 <Taster2_get+0x28>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
     324:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     326:	0f 90       	pop	r0
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	08 95       	ret

0000032e <Taster3_get>:

/**
Taster3 - ioD5
*/
uint8_t Taster3_get(void) {
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	1f 92       	push	r1
     334:	cd b7       	in	r28, 0x3d	; 61
     336:	de b7       	in	r29, 0x3e	; 62
    uint8_t state = PIND;
     338:	89 e2       	ldi	r24, 0x29	; 41
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	fc 01       	movw	r30, r24
     33e:	80 81       	ld	r24, Z
     340:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<5)) == 0 ) {
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	88 2f       	mov	r24, r24
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	80 72       	andi	r24, 0x20	; 32
     34a:	99 27       	eor	r25, r25
     34c:	89 2b       	or	r24, r25
     34e:	11 f4       	brne	.+4      	; 0x354 <Taster3_get+0x26>
        return TASTER_RETURN_VALUE_LOW;
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	01 c0       	rjmp	.+2      	; 0x356 <Taster3_get+0x28>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
     354:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     356:	0f 90       	pop	r0
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	08 95       	ret

0000035e <Taster4_get>:

/**
Taster4 - ioC2
*/
uint8_t Taster4_get(void) {
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	1f 92       	push	r1
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
    uint8_t state = PINC;
     368:	86 e2       	ldi	r24, 0x26	; 38
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	fc 01       	movw	r30, r24
     36e:	80 81       	ld	r24, Z
     370:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<2)) == 0 ) {
     372:	89 81       	ldd	r24, Y+1	; 0x01
     374:	88 2f       	mov	r24, r24
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	84 70       	andi	r24, 0x04	; 4
     37a:	99 27       	eor	r25, r25
     37c:	89 2b       	or	r24, r25
     37e:	11 f4       	brne	.+4      	; 0x384 <Taster4_get+0x26>
        return TASTER_RETURN_VALUE_LOW;
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	01 c0       	rjmp	.+2      	; 0x386 <Taster4_get+0x28>
    } else {
        return TASTER_RETURN_VALUE_HIGH;
     384:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     386:	0f 90       	pop	r0
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	08 95       	ret

0000038e <main>:





int main(void) {
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	00 d0       	rcall	.+0      	; 0x394 <main+0x6>
     394:	00 d0       	rcall	.+0      	; 0x396 <main+0x8>
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
	
    Led_init(0);	// Don't set LEDs at PORTD
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	96 de       	rcall	.-724    	; 0xca <Led_init>
	Taster_init();
     39e:	68 df       	rcall	.-304    	; 0x270 <Taster_init>
    Timer_init();
     3a0:	43 d6       	rcall	.+3206   	; 0x1028 <Timer_init>
     3a2:	78 94       	sei
	sei();
     3a4:	19 82       	std	Y+1, r1	; 0x01
	
    uint8_t state_testBoard = 0;
     3a6:	1b 82       	std	Y+3, r1	; 0x03
    uint16_t last_time = 0;
     3a8:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t  toggle_asdf = 1;
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	8c 83       	std	Y+4, r24	; 0x04
			PORTB = 0x00;
		}*/
        
        
        //trafficLight();
        playground();
     3ae:	01 d0       	rcall	.+2      	; 0x3b2 <playground>
     3b0:	fe cf       	rjmp	.-4      	; 0x3ae <main+0x20>

000003b2 <playground>:
    }
     3b2:	0f 93       	push	r16
- button1 pressed -> testTasterLed()
- button2 pressed -> testBoard()
- button3 pressed -> lauflicht()
- button4 pressed -> increment()
*/
void playground() {
     3b4:	1f 93       	push	r17
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	cd b7       	in	r28, 0x3d	; 61
     3bc:	de b7       	in	r29, 0x3e	; 62
     3be:	c4 55       	subi	r28, 0x54	; 84
     3c0:	d1 09       	sbc	r29, r1
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	de bf       	out	0x3e, r29	; 62
     3c8:	0f be       	out	0x3f, r0	; 63
     3ca:	cd bf       	out	0x3d, r28	; 61
    static int mode = 0;
    
    if (mode == 0) {    // mode selection
     3cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     3d0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     3d4:	89 2b       	or	r24, r25
     3d6:	09 f0       	breq	.+2      	; 0x3da <playground+0x28>
     3d8:	02 c2       	rjmp	.+1028   	; 0x7de <__LOCK_REGION_LENGTH__+0x3de>
        Led1_On();
     3da:	a0 de       	rcall	.-704    	; 0x11c <Led1_On>
        Led4_On();
     3dc:	05 df       	rcall	.-502    	; 0x1e8 <Led4_On>
        Led5_On();
     3de:	26 df       	rcall	.-436    	; 0x22c <Led5_On>
        Led8_On();
     3e0:	36 df       	rcall	.-404    	; 0x24e <Led8_On>
     3e2:	72 df       	rcall	.-284    	; 0x2c8 <Taster1_get>
        
        // test buttons
        if (Taster1_get()) {
     3e4:	89 2b       	or	r24, r25
     3e6:	09 f4       	brne	.+2      	; 0x3ea <playground+0x38>
     3e8:	79 c0       	rjmp	.+242    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	90 e0       	ldi	r25, 0x00	; 0
            mode = 1;
     3ee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     3f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     3f6:	85 e2       	ldi	r24, 0x25	; 37
            PORTB = 0x00;
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	fc 01       	movw	r30, r24
     3fc:	10 82       	st	Z, r1
     3fe:	8e de       	rcall	.-740    	; 0x11c <Led1_On>
            Led1_On();
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	aa ef       	ldi	r26, 0xFA	; 250
     406:	b3 e4       	ldi	r27, 0x43	; 67
     408:	8d 8b       	std	Y+21, r24	; 0x15
     40a:	9e 8b       	std	Y+22, r25	; 0x16
     40c:	af 8b       	std	Y+23, r26	; 0x17
     40e:	b8 8f       	std	Y+24, r27	; 0x18
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	30 e0       	ldi	r19, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     414:	4a e7       	ldi	r20, 0x7A	; 122
     416:	53 e4       	ldi	r21, 0x43	; 67
     418:	6d 89       	ldd	r22, Y+21	; 0x15
     41a:	7e 89       	ldd	r23, Y+22	; 0x16
     41c:	8f 89       	ldd	r24, Y+23	; 0x17
     41e:	98 8d       	ldd	r25, Y+24	; 0x18
     420:	0b d7       	rcall	.+3606   	; 0x1238 <__mulsf3>
     422:	dc 01       	movw	r26, r24
     424:	cb 01       	movw	r24, r22
     426:	89 8f       	std	Y+25, r24	; 0x19
     428:	9a 8f       	std	Y+26, r25	; 0x1a
     42a:	ab 8f       	std	Y+27, r26	; 0x1b
     42c:	bc 8f       	std	Y+28, r27	; 0x1c
     42e:	20 e0       	ldi	r18, 0x00	; 0
     430:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
     432:	40 e8       	ldi	r20, 0x80	; 128
     434:	5f e3       	ldi	r21, 0x3F	; 63
     436:	69 8d       	ldd	r22, Y+25	; 0x19
     438:	7a 8d       	ldd	r23, Y+26	; 0x1a
     43a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     43c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     43e:	7b d6       	rcall	.+3318   	; 0x1136 <__cmpsf2>
     440:	88 23       	and	r24, r24
     442:	2c f4       	brge	.+10     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
     448:	9e 8f       	std	Y+30, r25	; 0x1e
     44a:	8d 8f       	std	Y+29, r24	; 0x1d
     44c:	3b c0       	rjmp	.+118    	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
     44e:	20 e0       	ldi	r18, 0x00	; 0
     450:	3f ef       	ldi	r19, 0xFF	; 255
	else if (__tmp > 65535)
     452:	4f e7       	ldi	r20, 0x7F	; 127
     454:	57 e4       	ldi	r21, 0x47	; 71
     456:	69 8d       	ldd	r22, Y+25	; 0x19
     458:	7a 8d       	ldd	r23, Y+26	; 0x1a
     45a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     45c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     45e:	e8 d6       	rcall	.+3536   	; 0x1230 <__gesf2>
     460:	18 16       	cp	r1, r24
     462:	3c f5       	brge	.+78     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	30 e0       	ldi	r19, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     468:	40 e2       	ldi	r20, 0x20	; 32
     46a:	51 e4       	ldi	r21, 0x41	; 65
     46c:	6d 89       	ldd	r22, Y+21	; 0x15
     46e:	7e 89       	ldd	r23, Y+22	; 0x16
     470:	8f 89       	ldd	r24, Y+23	; 0x17
     472:	98 8d       	ldd	r25, Y+24	; 0x18
     474:	e1 d6       	rcall	.+3522   	; 0x1238 <__mulsf3>
     476:	dc 01       	movw	r26, r24
     478:	cb 01       	movw	r24, r22
     47a:	bc 01       	movw	r22, r24
     47c:	cd 01       	movw	r24, r26
     47e:	5f d6       	rcall	.+3262   	; 0x113e <__fixunssfsi>
     480:	dc 01       	movw	r26, r24
     482:	cb 01       	movw	r24, r22
     484:	9e 8f       	std	Y+30, r25	; 0x1e
     486:	8d 8f       	std	Y+29, r24	; 0x1d
     488:	0f c0       	rjmp	.+30     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     48a:	89 e1       	ldi	r24, 0x19	; 25
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	98 a3       	std	Y+32, r25	; 0x20
     490:	8f 8f       	std	Y+31, r24	; 0x1f
     492:	8f 8d       	ldd	r24, Y+31	; 0x1f
     494:	98 a1       	ldd	r25, Y+32	; 0x20
     496:	01 97       	sbiw	r24, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     498:	f1 f7       	brne	.-4      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     49a:	98 a3       	std	Y+32, r25	; 0x20
     49c:	8f 8f       	std	Y+31, r24	; 0x1f
     49e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     4a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     4a2:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4a4:	9e 8f       	std	Y+30, r25	; 0x1e
     4a6:	8d 8f       	std	Y+29, r24	; 0x1d
     4a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     4aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4ac:	89 2b       	or	r24, r25
     4ae:	69 f7       	brne	.-38     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     4b0:	13 c0       	rjmp	.+38     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     4b2:	69 8d       	ldd	r22, Y+25	; 0x19
     4b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4ba:	41 d6       	rcall	.+3202   	; 0x113e <__fixunssfsi>
     4bc:	dc 01       	movw	r26, r24
     4be:	cb 01       	movw	r24, r22
     4c0:	9e 8f       	std	Y+30, r25	; 0x1e
     4c2:	8d 8f       	std	Y+29, r24	; 0x1d
     4c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     4c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     4c8:	9a a3       	std	Y+34, r25	; 0x22
     4ca:	89 a3       	std	Y+33, r24	; 0x21
     4cc:	89 a1       	ldd	r24, Y+33	; 0x21
     4ce:	9a a1       	ldd	r25, Y+34	; 0x22
     4d0:	01 97       	sbiw	r24, 0x01	; 1
     4d2:	f1 f7       	brne	.-4      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4d4:	9a a3       	std	Y+34, r25	; 0x22
     4d6:	89 a3       	std	Y+33, r24	; 0x21
     4d8:	32 de       	rcall	.-924    	; 0x13e <Led1_Off>
            _delay_ms(500);
            Led1_Off();
     4da:	19 c3       	rjmp	.+1586   	; 0xb0e <__LOCK_REGION_LENGTH__+0x70e>
     4dc:	10 df       	rcall	.-480    	; 0x2fe <Taster2_get>
            default:
                mode = 0;
                break;
        }
    }
}
     4de:	89 2b       	or	r24, r25
            mode = 1;
            PORTB = 0x00;
            Led1_On();
            _delay_ms(500);
            Led1_Off();
        } else if (Taster2_get()) {
     4e0:	09 f4       	brne	.+2      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4e2:	79 c0       	rjmp	.+242    	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
     4e4:	82 e0       	ldi	r24, 0x02	; 2
     4e6:	90 e0       	ldi	r25, 0x00	; 0
            mode = 2;
     4e8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     4ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     4f0:	85 e2       	ldi	r24, 0x25	; 37
     4f2:	90 e0       	ldi	r25, 0x00	; 0
            PORTB = 0x00;
     4f4:	fc 01       	movw	r30, r24
     4f6:	10 82       	st	Z, r1
     4f8:	33 de       	rcall	.-922    	; 0x160 <Led2_On>
     4fa:	80 e0       	ldi	r24, 0x00	; 0
            Led2_On();
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	aa ef       	ldi	r26, 0xFA	; 250
     500:	b3 e4       	ldi	r27, 0x43	; 67
     502:	89 83       	std	Y+1, r24	; 0x01
     504:	9a 83       	std	Y+2, r25	; 0x02
     506:	ab 83       	std	Y+3, r26	; 0x03
     508:	bc 83       	std	Y+4, r27	; 0x04
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e0       	ldi	r19, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     50e:	4a e7       	ldi	r20, 0x7A	; 122
     510:	53 e4       	ldi	r21, 0x43	; 67
     512:	69 81       	ldd	r22, Y+1	; 0x01
     514:	7a 81       	ldd	r23, Y+2	; 0x02
     516:	8b 81       	ldd	r24, Y+3	; 0x03
     518:	9c 81       	ldd	r25, Y+4	; 0x04
     51a:	8e d6       	rcall	.+3356   	; 0x1238 <__mulsf3>
     51c:	dc 01       	movw	r26, r24
     51e:	cb 01       	movw	r24, r22
     520:	8b a3       	std	Y+35, r24	; 0x23
     522:	9c a3       	std	Y+36, r25	; 0x24
     524:	ad a3       	std	Y+37, r26	; 0x25
     526:	be a3       	std	Y+38, r27	; 0x26
     528:	20 e0       	ldi	r18, 0x00	; 0
     52a:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
     52c:	40 e8       	ldi	r20, 0x80	; 128
     52e:	5f e3       	ldi	r21, 0x3F	; 63
     530:	6b a1       	ldd	r22, Y+35	; 0x23
     532:	7c a1       	ldd	r23, Y+36	; 0x24
     534:	8d a1       	ldd	r24, Y+37	; 0x25
     536:	9e a1       	ldd	r25, Y+38	; 0x26
     538:	fe d5       	rcall	.+3068   	; 0x1136 <__cmpsf2>
     53a:	88 23       	and	r24, r24
     53c:	2c f4       	brge	.+10     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
     542:	98 a7       	std	Y+40, r25	; 0x28
     544:	8f a3       	std	Y+39, r24	; 0x27
     546:	3b c0       	rjmp	.+118    	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	3f ef       	ldi	r19, 0xFF	; 255
	else if (__tmp > 65535)
     54c:	4f e7       	ldi	r20, 0x7F	; 127
     54e:	57 e4       	ldi	r21, 0x47	; 71
     550:	6b a1       	ldd	r22, Y+35	; 0x23
     552:	7c a1       	ldd	r23, Y+36	; 0x24
     554:	8d a1       	ldd	r24, Y+37	; 0x25
     556:	9e a1       	ldd	r25, Y+38	; 0x26
     558:	6b d6       	rcall	.+3286   	; 0x1230 <__gesf2>
     55a:	18 16       	cp	r1, r24
     55c:	3c f5       	brge	.+78     	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
     55e:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	40 e2       	ldi	r20, 0x20	; 32
     564:	51 e4       	ldi	r21, 0x41	; 65
     566:	69 81       	ldd	r22, Y+1	; 0x01
     568:	7a 81       	ldd	r23, Y+2	; 0x02
     56a:	8b 81       	ldd	r24, Y+3	; 0x03
     56c:	9c 81       	ldd	r25, Y+4	; 0x04
     56e:	64 d6       	rcall	.+3272   	; 0x1238 <__mulsf3>
     570:	dc 01       	movw	r26, r24
     572:	cb 01       	movw	r24, r22
     574:	bc 01       	movw	r22, r24
     576:	cd 01       	movw	r24, r26
     578:	e2 d5       	rcall	.+3012   	; 0x113e <__fixunssfsi>
     57a:	dc 01       	movw	r26, r24
     57c:	cb 01       	movw	r24, r22
     57e:	98 a7       	std	Y+40, r25	; 0x28
     580:	8f a3       	std	Y+39, r24	; 0x27
     582:	0f c0       	rjmp	.+30     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     584:	89 e1       	ldi	r24, 0x19	; 25
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	9a a7       	std	Y+42, r25	; 0x2a
     58a:	89 a7       	std	Y+41, r24	; 0x29
     58c:	89 a5       	ldd	r24, Y+41	; 0x29
     58e:	9a a5       	ldd	r25, Y+42	; 0x2a
     590:	01 97       	sbiw	r24, 0x01	; 1
     592:	f1 f7       	brne	.-4      	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
     594:	9a a7       	std	Y+42, r25	; 0x2a
     596:	89 a7       	std	Y+41, r24	; 0x29
     598:	8f a1       	ldd	r24, Y+39	; 0x27
     59a:	98 a5       	ldd	r25, Y+40	; 0x28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     59c:	01 97       	sbiw	r24, 0x01	; 1
     59e:	98 a7       	std	Y+40, r25	; 0x28
     5a0:	8f a3       	std	Y+39, r24	; 0x27
     5a2:	8f a1       	ldd	r24, Y+39	; 0x27
     5a4:	98 a5       	ldd	r25, Y+40	; 0x28
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5a6:	89 2b       	or	r24, r25
     5a8:	69 f7       	brne	.-38     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
     5aa:	13 c0       	rjmp	.+38     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
     5ac:	6b a1       	ldd	r22, Y+35	; 0x23
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5ae:	7c a1       	ldd	r23, Y+36	; 0x24
     5b0:	8d a1       	ldd	r24, Y+37	; 0x25
     5b2:	9e a1       	ldd	r25, Y+38	; 0x26
     5b4:	c4 d5       	rcall	.+2952   	; 0x113e <__fixunssfsi>
     5b6:	dc 01       	movw	r26, r24
     5b8:	cb 01       	movw	r24, r22
     5ba:	98 a7       	std	Y+40, r25	; 0x28
     5bc:	8f a3       	std	Y+39, r24	; 0x27
     5be:	8f a1       	ldd	r24, Y+39	; 0x27
     5c0:	98 a5       	ldd	r25, Y+40	; 0x28
     5c2:	9c a7       	std	Y+44, r25	; 0x2c
     5c4:	8b a7       	std	Y+43, r24	; 0x2b
     5c6:	8b a5       	ldd	r24, Y+43	; 0x2b
     5c8:	9c a5       	ldd	r25, Y+44	; 0x2c
     5ca:	01 97       	sbiw	r24, 0x01	; 1
     5cc:	f1 f7       	brne	.-4      	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
     5ce:	9c a7       	std	Y+44, r25	; 0x2c
     5d0:	8b a7       	std	Y+43, r24	; 0x2b
            _delay_ms(500);
            Led2_Off();
     5d2:	d7 dd       	rcall	.-1106   	; 0x182 <Led2_Off>
     5d4:	9c c2       	rjmp	.+1336   	; 0xb0e <__LOCK_REGION_LENGTH__+0x70e>
            default:
                mode = 0;
                break;
        }
    }
}
     5d6:	ab de       	rcall	.-682    	; 0x32e <Taster3_get>
            mode = 2;
            PORTB = 0x00;
            Led2_On();
            _delay_ms(500);
            Led2_Off();
        } else if (Taster3_get()) {
     5d8:	89 2b       	or	r24, r25
     5da:	09 f4       	brne	.+2      	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
     5dc:	79 c0       	rjmp	.+242    	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
     5de:	83 e0       	ldi	r24, 0x03	; 3
     5e0:	90 e0       	ldi	r25, 0x00	; 0
            mode = 3;
     5e2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     5e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     5ea:	85 e2       	ldi	r24, 0x25	; 37
            PORTB = 0x00;
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	fc 01       	movw	r30, r24
     5f0:	10 82       	st	Z, r1
     5f2:	d8 dd       	rcall	.-1104   	; 0x1a4 <Led3_On>
            Led3_On();
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	aa ef       	ldi	r26, 0xFA	; 250
     5fa:	b3 e4       	ldi	r27, 0x43	; 67
     5fc:	8d 83       	std	Y+5, r24	; 0x05
     5fe:	9e 83       	std	Y+6, r25	; 0x06
     600:	af 83       	std	Y+7, r26	; 0x07
     602:	b8 87       	std	Y+8, r27	; 0x08
     604:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	4a e7       	ldi	r20, 0x7A	; 122
     60a:	53 e4       	ldi	r21, 0x43	; 67
     60c:	6d 81       	ldd	r22, Y+5	; 0x05
     60e:	7e 81       	ldd	r23, Y+6	; 0x06
     610:	8f 81       	ldd	r24, Y+7	; 0x07
     612:	98 85       	ldd	r25, Y+8	; 0x08
     614:	11 d6       	rcall	.+3106   	; 0x1238 <__mulsf3>
     616:	dc 01       	movw	r26, r24
     618:	cb 01       	movw	r24, r22
     61a:	8d a7       	std	Y+45, r24	; 0x2d
     61c:	9e a7       	std	Y+46, r25	; 0x2e
     61e:	af a7       	std	Y+47, r26	; 0x2f
     620:	b8 ab       	std	Y+48, r27	; 0x30
     622:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	40 e8       	ldi	r20, 0x80	; 128
     628:	5f e3       	ldi	r21, 0x3F	; 63
     62a:	6d a5       	ldd	r22, Y+45	; 0x2d
     62c:	7e a5       	ldd	r23, Y+46	; 0x2e
     62e:	8f a5       	ldd	r24, Y+47	; 0x2f
     630:	98 a9       	ldd	r25, Y+48	; 0x30
     632:	81 d5       	rcall	.+2818   	; 0x1136 <__cmpsf2>
     634:	88 23       	and	r24, r24
     636:	2c f4       	brge	.+10     	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
     638:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	9a ab       	std	Y+50, r25	; 0x32
     63e:	89 ab       	std	Y+49, r24	; 0x31
     640:	3b c0       	rjmp	.+118    	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
	else if (__tmp > 65535)
     642:	20 e0       	ldi	r18, 0x00	; 0
     644:	3f ef       	ldi	r19, 0xFF	; 255
     646:	4f e7       	ldi	r20, 0x7F	; 127
     648:	57 e4       	ldi	r21, 0x47	; 71
     64a:	6d a5       	ldd	r22, Y+45	; 0x2d
     64c:	7e a5       	ldd	r23, Y+46	; 0x2e
     64e:	8f a5       	ldd	r24, Y+47	; 0x2f
     650:	98 a9       	ldd	r25, Y+48	; 0x30
     652:	ee d5       	rcall	.+3036   	; 0x1230 <__gesf2>
     654:	18 16       	cp	r1, r24
     656:	3c f5       	brge	.+78     	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
     658:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	40 e2       	ldi	r20, 0x20	; 32
     65e:	51 e4       	ldi	r21, 0x41	; 65
     660:	6d 81       	ldd	r22, Y+5	; 0x05
     662:	7e 81       	ldd	r23, Y+6	; 0x06
     664:	8f 81       	ldd	r24, Y+7	; 0x07
     666:	98 85       	ldd	r25, Y+8	; 0x08
     668:	e7 d5       	rcall	.+3022   	; 0x1238 <__mulsf3>
     66a:	dc 01       	movw	r26, r24
     66c:	cb 01       	movw	r24, r22
     66e:	bc 01       	movw	r22, r24
     670:	cd 01       	movw	r24, r26
     672:	65 d5       	rcall	.+2762   	; 0x113e <__fixunssfsi>
     674:	dc 01       	movw	r26, r24
     676:	cb 01       	movw	r24, r22
     678:	9a ab       	std	Y+50, r25	; 0x32
     67a:	89 ab       	std	Y+49, r24	; 0x31
     67c:	0f c0       	rjmp	.+30     	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
     67e:	89 e1       	ldi	r24, 0x19	; 25
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	9c ab       	std	Y+52, r25	; 0x34
     684:	8b ab       	std	Y+51, r24	; 0x33
     686:	8b a9       	ldd	r24, Y+51	; 0x33
     688:	9c a9       	ldd	r25, Y+52	; 0x34
     68a:	01 97       	sbiw	r24, 0x01	; 1
     68c:	f1 f7       	brne	.-4      	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
     68e:	9c ab       	std	Y+52, r25	; 0x34
     690:	8b ab       	std	Y+51, r24	; 0x33
     692:	89 a9       	ldd	r24, Y+49	; 0x31
     694:	9a a9       	ldd	r25, Y+50	; 0x32
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     696:	01 97       	sbiw	r24, 0x01	; 1
     698:	9a ab       	std	Y+50, r25	; 0x32
     69a:	89 ab       	std	Y+49, r24	; 0x31
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     69c:	89 a9       	ldd	r24, Y+49	; 0x31
     69e:	9a a9       	ldd	r25, Y+50	; 0x32
     6a0:	89 2b       	or	r24, r25
     6a2:	69 f7       	brne	.-38     	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
     6a4:	13 c0       	rjmp	.+38     	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6a6:	6d a5       	ldd	r22, Y+45	; 0x2d
     6a8:	7e a5       	ldd	r23, Y+46	; 0x2e
     6aa:	8f a5       	ldd	r24, Y+47	; 0x2f
     6ac:	98 a9       	ldd	r25, Y+48	; 0x30
     6ae:	47 d5       	rcall	.+2702   	; 0x113e <__fixunssfsi>
     6b0:	dc 01       	movw	r26, r24
     6b2:	cb 01       	movw	r24, r22
     6b4:	9a ab       	std	Y+50, r25	; 0x32
     6b6:	89 ab       	std	Y+49, r24	; 0x31
     6b8:	89 a9       	ldd	r24, Y+49	; 0x31
     6ba:	9a a9       	ldd	r25, Y+50	; 0x32
     6bc:	9e ab       	std	Y+54, r25	; 0x36
     6be:	8d ab       	std	Y+53, r24	; 0x35
     6c0:	8d a9       	ldd	r24, Y+53	; 0x35
     6c2:	9e a9       	ldd	r25, Y+54	; 0x36
     6c4:	01 97       	sbiw	r24, 0x01	; 1
     6c6:	f1 f7       	brne	.-4      	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
     6c8:	9e ab       	std	Y+54, r25	; 0x36
     6ca:	8d ab       	std	Y+53, r24	; 0x35
            _delay_ms(500);
            Led3_Off();
     6cc:	7c dd       	rcall	.-1288   	; 0x1c6 <Led3_Off>
     6ce:	1f c2       	rjmp	.+1086   	; 0xb0e <__LOCK_REGION_LENGTH__+0x70e>
            default:
                mode = 0;
                break;
        }
    }
}
     6d0:	46 de       	rcall	.-884    	; 0x35e <Taster4_get>
            mode = 3;
            PORTB = 0x00;
            Led3_On();
            _delay_ms(500);
            Led3_Off();
        } else if (Taster4_get()) {
     6d2:	89 2b       	or	r24, r25
     6d4:	09 f4       	brne	.+2      	; 0x6d8 <__LOCK_REGION_LENGTH__+0x2d8>
     6d6:	1b c2       	rjmp	.+1078   	; 0xb0e <__LOCK_REGION_LENGTH__+0x70e>
     6d8:	84 e0       	ldi	r24, 0x04	; 4
            mode = 4;
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     6e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     6e4:	85 e2       	ldi	r24, 0x25	; 37
            PORTB = 0x00;
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	fc 01       	movw	r30, r24
     6ea:	10 82       	st	Z, r1
     6ec:	7d dd       	rcall	.-1286   	; 0x1e8 <Led4_On>
            Led4_On();
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	aa ef       	ldi	r26, 0xFA	; 250
     6f4:	b3 e4       	ldi	r27, 0x43	; 67
     6f6:	89 87       	std	Y+9, r24	; 0x09
     6f8:	9a 87       	std	Y+10, r25	; 0x0a
     6fa:	ab 87       	std	Y+11, r26	; 0x0b
     6fc:	bc 87       	std	Y+12, r27	; 0x0c
     6fe:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	4a e7       	ldi	r20, 0x7A	; 122
     704:	53 e4       	ldi	r21, 0x43	; 67
     706:	69 85       	ldd	r22, Y+9	; 0x09
     708:	7a 85       	ldd	r23, Y+10	; 0x0a
     70a:	8b 85       	ldd	r24, Y+11	; 0x0b
     70c:	9c 85       	ldd	r25, Y+12	; 0x0c
     70e:	94 d5       	rcall	.+2856   	; 0x1238 <__mulsf3>
     710:	dc 01       	movw	r26, r24
     712:	cb 01       	movw	r24, r22
     714:	8f ab       	std	Y+55, r24	; 0x37
     716:	98 af       	std	Y+56, r25	; 0x38
     718:	a9 af       	std	Y+57, r26	; 0x39
     71a:	ba af       	std	Y+58, r27	; 0x3a
     71c:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	40 e8       	ldi	r20, 0x80	; 128
     722:	5f e3       	ldi	r21, 0x3F	; 63
     724:	6f a9       	ldd	r22, Y+55	; 0x37
     726:	78 ad       	ldd	r23, Y+56	; 0x38
     728:	89 ad       	ldd	r24, Y+57	; 0x39
     72a:	9a ad       	ldd	r25, Y+58	; 0x3a
     72c:	04 d5       	rcall	.+2568   	; 0x1136 <__cmpsf2>
     72e:	88 23       	and	r24, r24
     730:	2c f4       	brge	.+10     	; 0x73c <__LOCK_REGION_LENGTH__+0x33c>
		__ticks = 1;
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	9c af       	std	Y+60, r25	; 0x3c
     738:	8b af       	std	Y+59, r24	; 0x3b
     73a:	3b c0       	rjmp	.+118    	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
	else if (__tmp > 65535)
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	3f ef       	ldi	r19, 0xFF	; 255
     740:	4f e7       	ldi	r20, 0x7F	; 127
     742:	57 e4       	ldi	r21, 0x47	; 71
     744:	6f a9       	ldd	r22, Y+55	; 0x37
     746:	78 ad       	ldd	r23, Y+56	; 0x38
     748:	89 ad       	ldd	r24, Y+57	; 0x39
     74a:	9a ad       	ldd	r25, Y+58	; 0x3a
     74c:	71 d5       	rcall	.+2786   	; 0x1230 <__gesf2>
     74e:	18 16       	cp	r1, r24
     750:	3c f5       	brge	.+78     	; 0x7a0 <__LOCK_REGION_LENGTH__+0x3a0>
     752:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	40 e2       	ldi	r20, 0x20	; 32
     758:	51 e4       	ldi	r21, 0x41	; 65
     75a:	69 85       	ldd	r22, Y+9	; 0x09
     75c:	7a 85       	ldd	r23, Y+10	; 0x0a
     75e:	8b 85       	ldd	r24, Y+11	; 0x0b
     760:	9c 85       	ldd	r25, Y+12	; 0x0c
     762:	6a d5       	rcall	.+2772   	; 0x1238 <__mulsf3>
     764:	dc 01       	movw	r26, r24
     766:	cb 01       	movw	r24, r22
     768:	bc 01       	movw	r22, r24
     76a:	cd 01       	movw	r24, r26
     76c:	e8 d4       	rcall	.+2512   	; 0x113e <__fixunssfsi>
     76e:	dc 01       	movw	r26, r24
     770:	cb 01       	movw	r24, r22
     772:	9c af       	std	Y+60, r25	; 0x3c
     774:	8b af       	std	Y+59, r24	; 0x3b
     776:	0f c0       	rjmp	.+30     	; 0x796 <__LOCK_REGION_LENGTH__+0x396>
     778:	89 e1       	ldi	r24, 0x19	; 25
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	9e af       	std	Y+62, r25	; 0x3e
     77e:	8d af       	std	Y+61, r24	; 0x3d
     780:	8d ad       	ldd	r24, Y+61	; 0x3d
     782:	9e ad       	ldd	r25, Y+62	; 0x3e
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	f1 f7       	brne	.-4      	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
     788:	9e af       	std	Y+62, r25	; 0x3e
     78a:	8d af       	std	Y+61, r24	; 0x3d
     78c:	8b ad       	ldd	r24, Y+59	; 0x3b
     78e:	9c ad       	ldd	r25, Y+60	; 0x3c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     790:	01 97       	sbiw	r24, 0x01	; 1
     792:	9c af       	std	Y+60, r25	; 0x3c
     794:	8b af       	std	Y+59, r24	; 0x3b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     796:	8b ad       	ldd	r24, Y+59	; 0x3b
     798:	9c ad       	ldd	r25, Y+60	; 0x3c
     79a:	89 2b       	or	r24, r25
     79c:	69 f7       	brne	.-38     	; 0x778 <__LOCK_REGION_LENGTH__+0x378>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     79e:	1d c0       	rjmp	.+58     	; 0x7da <__LOCK_REGION_LENGTH__+0x3da>
     7a0:	6f a9       	ldd	r22, Y+55	; 0x37
     7a2:	78 ad       	ldd	r23, Y+56	; 0x38
     7a4:	89 ad       	ldd	r24, Y+57	; 0x39
     7a6:	9a ad       	ldd	r25, Y+58	; 0x3a
     7a8:	ca d4       	rcall	.+2452   	; 0x113e <__fixunssfsi>
     7aa:	dc 01       	movw	r26, r24
     7ac:	cb 01       	movw	r24, r22
     7ae:	9c af       	std	Y+60, r25	; 0x3c
     7b0:	8b af       	std	Y+59, r24	; 0x3b
     7b2:	2b ad       	ldd	r18, Y+59	; 0x3b
     7b4:	3c ad       	ldd	r19, Y+60	; 0x3c
     7b6:	ce 01       	movw	r24, r28
     7b8:	cf 96       	adiw	r24, 0x3f	; 63
     7ba:	fc 01       	movw	r30, r24
     7bc:	31 83       	std	Z+1, r19	; 0x01
     7be:	20 83       	st	Z, r18
     7c0:	ce 01       	movw	r24, r28
     7c2:	cf 96       	adiw	r24, 0x3f	; 63
     7c4:	fc 01       	movw	r30, r24
     7c6:	80 81       	ld	r24, Z
     7c8:	91 81       	ldd	r25, Z+1	; 0x01
     7ca:	01 97       	sbiw	r24, 0x01	; 1
     7cc:	f1 f7       	brne	.-4      	; 0x7ca <__LOCK_REGION_LENGTH__+0x3ca>
     7ce:	9e 01       	movw	r18, r28
     7d0:	21 5c       	subi	r18, 0xC1	; 193
     7d2:	3f 4f       	sbci	r19, 0xFF	; 255
     7d4:	f9 01       	movw	r30, r18
     7d6:	91 83       	std	Z+1, r25	; 0x01
            _delay_ms(500);
            Led4_Off();
     7d8:	80 83       	st	Z, r24
     7da:	17 dd       	rcall	.-1490   	; 0x20a <Led4_Off>
            default:
                mode = 0;
                break;
        }
    }
}
     7dc:	98 c1       	rjmp	.+816    	; 0xb0e <__LOCK_REGION_LENGTH__+0x70e>
        }
        
    } else {    // run
        
        // reset if button 1 and button 2 are pressed
        if (Taster1_get() && Taster2_get()) {
     7de:	74 dd       	rcall	.-1304   	; 0x2c8 <Taster1_get>
     7e0:	89 2b       	or	r24, r25
     7e2:	09 f4       	brne	.+2      	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
     7e4:	75 c1       	rjmp	.+746    	; 0xad0 <__LOCK_REGION_LENGTH__+0x6d0>
     7e6:	8b dd       	rcall	.-1258   	; 0x2fe <Taster2_get>
     7e8:	89 2b       	or	r24, r25
     7ea:	09 f4       	brne	.+2      	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
     7ec:	71 c1       	rjmp	.+738    	; 0xad0 <__LOCK_REGION_LENGTH__+0x6d0>
     7ee:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
            mode = 0;
     7f2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	aa e7       	ldi	r26, 0x7A	; 122
     7fc:	b4 e4       	ldi	r27, 0x44	; 68
     7fe:	89 8b       	std	Y+17, r24	; 0x11
     800:	9a 8b       	std	Y+18, r25	; 0x12
     802:	ab 8b       	std	Y+19, r26	; 0x13
     804:	bc 8b       	std	Y+20, r27	; 0x14
     806:	8e 01       	movw	r16, r28

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     808:	05 5b       	subi	r16, 0xB5	; 181
     80a:	1f 4f       	sbci	r17, 0xFF	; 255
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	4a e7       	ldi	r20, 0x7A	; 122
     812:	53 e4       	ldi	r21, 0x43	; 67
     814:	69 89       	ldd	r22, Y+17	; 0x11
     816:	7a 89       	ldd	r23, Y+18	; 0x12
     818:	8b 89       	ldd	r24, Y+19	; 0x13
     81a:	9c 89       	ldd	r25, Y+20	; 0x14
     81c:	0d d5       	rcall	.+2586   	; 0x1238 <__mulsf3>
     81e:	dc 01       	movw	r26, r24
     820:	cb 01       	movw	r24, r22
     822:	f8 01       	movw	r30, r16
     824:	80 83       	st	Z, r24
     826:	91 83       	std	Z+1, r25	; 0x01
     828:	a2 83       	std	Z+2, r26	; 0x02
     82a:	b3 83       	std	Z+3, r27	; 0x03
     82c:	ce 01       	movw	r24, r28
	if (__tmp < 1.0)
     82e:	85 5b       	subi	r24, 0xB5	; 181
     830:	9f 4f       	sbci	r25, 0xFF	; 255
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	40 e8       	ldi	r20, 0x80	; 128
     838:	5f e3       	ldi	r21, 0x3F	; 63
     83a:	fc 01       	movw	r30, r24
     83c:	60 81       	ld	r22, Z
     83e:	71 81       	ldd	r23, Z+1	; 0x01
     840:	82 81       	ldd	r24, Z+2	; 0x02
     842:	93 81       	ldd	r25, Z+3	; 0x03
     844:	78 d4       	rcall	.+2288   	; 0x1136 <__cmpsf2>
     846:	88 23       	and	r24, r24
     848:	4c f4       	brge	.+18     	; 0x85c <__LOCK_REGION_LENGTH__+0x45c>
		__ticks = 1;
     84a:	ce 01       	movw	r24, r28
     84c:	81 5b       	subi	r24, 0xB1	; 177
     84e:	9f 4f       	sbci	r25, 0xFF	; 255
     850:	21 e0       	ldi	r18, 0x01	; 1
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	fc 01       	movw	r30, r24
     856:	31 83       	std	Z+1, r19	; 0x01
     858:	20 83       	st	Z, r18
     85a:	65 c0       	rjmp	.+202    	; 0x926 <__LOCK_REGION_LENGTH__+0x526>
	else if (__tmp > 65535)
     85c:	ce 01       	movw	r24, r28
     85e:	85 5b       	subi	r24, 0xB5	; 181
     860:	9f 4f       	sbci	r25, 0xFF	; 255
     862:	20 e0       	ldi	r18, 0x00	; 0
     864:	3f ef       	ldi	r19, 0xFF	; 255
     866:	4f e7       	ldi	r20, 0x7F	; 127
     868:	57 e4       	ldi	r21, 0x47	; 71
     86a:	fc 01       	movw	r30, r24
     86c:	60 81       	ld	r22, Z
     86e:	71 81       	ldd	r23, Z+1	; 0x01
     870:	82 81       	ldd	r24, Z+2	; 0x02
     872:	93 81       	ldd	r25, Z+3	; 0x03
     874:	dd d4       	rcall	.+2490   	; 0x1230 <__gesf2>
     876:	18 16       	cp	r1, r24
     878:	0c f0       	brlt	.+2      	; 0x87c <__LOCK_REGION_LENGTH__+0x47c>
     87a:	44 c0       	rjmp	.+136    	; 0x904 <__LOCK_REGION_LENGTH__+0x504>
     87c:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	40 e2       	ldi	r20, 0x20	; 32
     882:	51 e4       	ldi	r21, 0x41	; 65
     884:	69 89       	ldd	r22, Y+17	; 0x11
     886:	7a 89       	ldd	r23, Y+18	; 0x12
     888:	8b 89       	ldd	r24, Y+19	; 0x13
     88a:	9c 89       	ldd	r25, Y+20	; 0x14
     88c:	d5 d4       	rcall	.+2474   	; 0x1238 <__mulsf3>
     88e:	dc 01       	movw	r26, r24
     890:	cb 01       	movw	r24, r22
     892:	8e 01       	movw	r16, r28
     894:	01 5b       	subi	r16, 0xB1	; 177
     896:	1f 4f       	sbci	r17, 0xFF	; 255
     898:	bc 01       	movw	r22, r24
     89a:	cd 01       	movw	r24, r26
     89c:	50 d4       	rcall	.+2208   	; 0x113e <__fixunssfsi>
     89e:	dc 01       	movw	r26, r24
     8a0:	cb 01       	movw	r24, r22
     8a2:	f8 01       	movw	r30, r16
     8a4:	91 83       	std	Z+1, r25	; 0x01
     8a6:	80 83       	st	Z, r24
     8a8:	24 c0       	rjmp	.+72     	; 0x8f2 <__LOCK_REGION_LENGTH__+0x4f2>
     8aa:	ce 01       	movw	r24, r28
     8ac:	8f 5a       	subi	r24, 0xAF	; 175
     8ae:	9f 4f       	sbci	r25, 0xFF	; 255
     8b0:	29 e1       	ldi	r18, 0x19	; 25
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	fc 01       	movw	r30, r24
     8b6:	31 83       	std	Z+1, r19	; 0x01
     8b8:	20 83       	st	Z, r18
     8ba:	ce 01       	movw	r24, r28
     8bc:	8f 5a       	subi	r24, 0xAF	; 175
     8be:	9f 4f       	sbci	r25, 0xFF	; 255
     8c0:	fc 01       	movw	r30, r24
     8c2:	80 81       	ld	r24, Z
     8c4:	91 81       	ldd	r25, Z+1	; 0x01
     8c6:	01 97       	sbiw	r24, 0x01	; 1
     8c8:	f1 f7       	brne	.-4      	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
     8ca:	9e 01       	movw	r18, r28
     8cc:	2f 5a       	subi	r18, 0xAF	; 175
     8ce:	3f 4f       	sbci	r19, 0xFF	; 255
     8d0:	f9 01       	movw	r30, r18
     8d2:	91 83       	std	Z+1, r25	; 0x01
     8d4:	80 83       	st	Z, r24
     8d6:	ce 01       	movw	r24, r28
     8d8:	81 5b       	subi	r24, 0xB1	; 177
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8da:	9f 4f       	sbci	r25, 0xFF	; 255
     8dc:	9e 01       	movw	r18, r28
     8de:	21 5b       	subi	r18, 0xB1	; 177
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	f9 01       	movw	r30, r18
     8e4:	20 81       	ld	r18, Z
     8e6:	31 81       	ldd	r19, Z+1	; 0x01
     8e8:	21 50       	subi	r18, 0x01	; 1
     8ea:	31 09       	sbc	r19, r1
     8ec:	fc 01       	movw	r30, r24
     8ee:	31 83       	std	Z+1, r19	; 0x01
     8f0:	20 83       	st	Z, r18
     8f2:	ce 01       	movw	r24, r28
     8f4:	81 5b       	subi	r24, 0xB1	; 177
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8f6:	9f 4f       	sbci	r25, 0xFF	; 255
     8f8:	fc 01       	movw	r30, r24
     8fa:	80 81       	ld	r24, Z
     8fc:	91 81       	ldd	r25, Z+1	; 0x01
     8fe:	89 2b       	or	r24, r25
     900:	a1 f6       	brne	.-88     	; 0x8aa <__LOCK_REGION_LENGTH__+0x4aa>
     902:	2b c0       	rjmp	.+86     	; 0x95a <__LOCK_REGION_LENGTH__+0x55a>
     904:	8e 01       	movw	r16, r28
     906:	01 5b       	subi	r16, 0xB1	; 177
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     908:	1f 4f       	sbci	r17, 0xFF	; 255
     90a:	ce 01       	movw	r24, r28
     90c:	85 5b       	subi	r24, 0xB5	; 181
     90e:	9f 4f       	sbci	r25, 0xFF	; 255
     910:	fc 01       	movw	r30, r24
     912:	60 81       	ld	r22, Z
     914:	71 81       	ldd	r23, Z+1	; 0x01
     916:	82 81       	ldd	r24, Z+2	; 0x02
     918:	93 81       	ldd	r25, Z+3	; 0x03
     91a:	11 d4       	rcall	.+2082   	; 0x113e <__fixunssfsi>
     91c:	dc 01       	movw	r26, r24
     91e:	cb 01       	movw	r24, r22
     920:	f8 01       	movw	r30, r16
     922:	91 83       	std	Z+1, r25	; 0x01
     924:	80 83       	st	Z, r24
     926:	ce 01       	movw	r24, r28
     928:	8d 5a       	subi	r24, 0xAD	; 173
     92a:	9f 4f       	sbci	r25, 0xFF	; 255
     92c:	9e 01       	movw	r18, r28
     92e:	21 5b       	subi	r18, 0xB1	; 177
     930:	3f 4f       	sbci	r19, 0xFF	; 255
     932:	f9 01       	movw	r30, r18
     934:	20 81       	ld	r18, Z
     936:	31 81       	ldd	r19, Z+1	; 0x01
     938:	fc 01       	movw	r30, r24
     93a:	31 83       	std	Z+1, r19	; 0x01
     93c:	20 83       	st	Z, r18
     93e:	ce 01       	movw	r24, r28
     940:	8d 5a       	subi	r24, 0xAD	; 173
     942:	9f 4f       	sbci	r25, 0xFF	; 255
     944:	fc 01       	movw	r30, r24
     946:	80 81       	ld	r24, Z
     948:	91 81       	ldd	r25, Z+1	; 0x01
     94a:	01 97       	sbiw	r24, 0x01	; 1
     94c:	f1 f7       	brne	.-4      	; 0x94a <__LOCK_REGION_LENGTH__+0x54a>
     94e:	9e 01       	movw	r18, r28
     950:	2d 5a       	subi	r18, 0xAD	; 173
     952:	3f 4f       	sbci	r19, 0xFF	; 255
     954:	f9 01       	movw	r30, r18
     956:	91 83       	std	Z+1, r25	; 0x01
     958:	80 83       	st	Z, r24
     95a:	85 e2       	ldi	r24, 0x25	; 37
            _delay_ms(1000);
            PORTB = 0xFF;
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	2f ef       	ldi	r18, 0xFF	; 255
     960:	fc 01       	movw	r30, r24
     962:	20 83       	st	Z, r18
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	aa ef       	ldi	r26, 0xFA	; 250
     96a:	b3 e4       	ldi	r27, 0x43	; 67
     96c:	8d 87       	std	Y+13, r24	; 0x0d
     96e:	9e 87       	std	Y+14, r25	; 0x0e
     970:	af 87       	std	Y+15, r26	; 0x0f
     972:	b8 8b       	std	Y+16, r27	; 0x10
     974:	8e 01       	movw	r16, r28

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     976:	0f 5b       	subi	r16, 0xBF	; 191
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	4a e7       	ldi	r20, 0x7A	; 122
     980:	53 e4       	ldi	r21, 0x43	; 67
     982:	6d 85       	ldd	r22, Y+13	; 0x0d
     984:	7e 85       	ldd	r23, Y+14	; 0x0e
     986:	8f 85       	ldd	r24, Y+15	; 0x0f
     988:	98 89       	ldd	r25, Y+16	; 0x10
     98a:	56 d4       	rcall	.+2220   	; 0x1238 <__mulsf3>
     98c:	dc 01       	movw	r26, r24
     98e:	cb 01       	movw	r24, r22
     990:	f8 01       	movw	r30, r16
     992:	80 83       	st	Z, r24
     994:	91 83       	std	Z+1, r25	; 0x01
     996:	a2 83       	std	Z+2, r26	; 0x02
     998:	b3 83       	std	Z+3, r27	; 0x03
     99a:	ce 01       	movw	r24, r28
	if (__tmp < 1.0)
     99c:	8f 5b       	subi	r24, 0xBF	; 191
     99e:	9f 4f       	sbci	r25, 0xFF	; 255
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	40 e8       	ldi	r20, 0x80	; 128
     9a6:	5f e3       	ldi	r21, 0x3F	; 63
     9a8:	fc 01       	movw	r30, r24
     9aa:	60 81       	ld	r22, Z
     9ac:	71 81       	ldd	r23, Z+1	; 0x01
     9ae:	82 81       	ldd	r24, Z+2	; 0x02
     9b0:	93 81       	ldd	r25, Z+3	; 0x03
     9b2:	c1 d3       	rcall	.+1922   	; 0x1136 <__cmpsf2>
     9b4:	88 23       	and	r24, r24
     9b6:	4c f4       	brge	.+18     	; 0x9ca <__LOCK_REGION_LENGTH__+0x5ca>
     9b8:	ce 01       	movw	r24, r28
		__ticks = 1;
     9ba:	8b 5b       	subi	r24, 0xBB	; 187
     9bc:	9f 4f       	sbci	r25, 0xFF	; 255
     9be:	21 e0       	ldi	r18, 0x01	; 1
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	fc 01       	movw	r30, r24
     9c4:	31 83       	std	Z+1, r19	; 0x01
     9c6:	20 83       	st	Z, r18
     9c8:	65 c0       	rjmp	.+202    	; 0xa94 <__LOCK_REGION_LENGTH__+0x694>
     9ca:	ce 01       	movw	r24, r28
	else if (__tmp > 65535)
     9cc:	8f 5b       	subi	r24, 0xBF	; 191
     9ce:	9f 4f       	sbci	r25, 0xFF	; 255
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	3f ef       	ldi	r19, 0xFF	; 255
     9d4:	4f e7       	ldi	r20, 0x7F	; 127
     9d6:	57 e4       	ldi	r21, 0x47	; 71
     9d8:	fc 01       	movw	r30, r24
     9da:	60 81       	ld	r22, Z
     9dc:	71 81       	ldd	r23, Z+1	; 0x01
     9de:	82 81       	ldd	r24, Z+2	; 0x02
     9e0:	93 81       	ldd	r25, Z+3	; 0x03
     9e2:	26 d4       	rcall	.+2124   	; 0x1230 <__gesf2>
     9e4:	18 16       	cp	r1, r24
     9e6:	0c f0       	brlt	.+2      	; 0x9ea <__LOCK_REGION_LENGTH__+0x5ea>
     9e8:	44 c0       	rjmp	.+136    	; 0xa72 <__LOCK_REGION_LENGTH__+0x672>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9ee:	40 e2       	ldi	r20, 0x20	; 32
     9f0:	51 e4       	ldi	r21, 0x41	; 65
     9f2:	6d 85       	ldd	r22, Y+13	; 0x0d
     9f4:	7e 85       	ldd	r23, Y+14	; 0x0e
     9f6:	8f 85       	ldd	r24, Y+15	; 0x0f
     9f8:	98 89       	ldd	r25, Y+16	; 0x10
     9fa:	1e d4       	rcall	.+2108   	; 0x1238 <__mulsf3>
     9fc:	dc 01       	movw	r26, r24
     9fe:	cb 01       	movw	r24, r22
     a00:	8e 01       	movw	r16, r28
     a02:	0b 5b       	subi	r16, 0xBB	; 187
     a04:	1f 4f       	sbci	r17, 0xFF	; 255
     a06:	bc 01       	movw	r22, r24
     a08:	cd 01       	movw	r24, r26
     a0a:	99 d3       	rcall	.+1842   	; 0x113e <__fixunssfsi>
     a0c:	dc 01       	movw	r26, r24
     a0e:	cb 01       	movw	r24, r22
     a10:	f8 01       	movw	r30, r16
     a12:	91 83       	std	Z+1, r25	; 0x01
     a14:	80 83       	st	Z, r24
     a16:	24 c0       	rjmp	.+72     	; 0xa60 <__LOCK_REGION_LENGTH__+0x660>
     a18:	ce 01       	movw	r24, r28
     a1a:	89 5b       	subi	r24, 0xB9	; 185
     a1c:	9f 4f       	sbci	r25, 0xFF	; 255
     a1e:	29 e1       	ldi	r18, 0x19	; 25
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	fc 01       	movw	r30, r24
     a24:	31 83       	std	Z+1, r19	; 0x01
     a26:	20 83       	st	Z, r18
     a28:	ce 01       	movw	r24, r28
     a2a:	89 5b       	subi	r24, 0xB9	; 185
     a2c:	9f 4f       	sbci	r25, 0xFF	; 255
     a2e:	fc 01       	movw	r30, r24
     a30:	80 81       	ld	r24, Z
     a32:	91 81       	ldd	r25, Z+1	; 0x01
     a34:	01 97       	sbiw	r24, 0x01	; 1
     a36:	f1 f7       	brne	.-4      	; 0xa34 <__LOCK_REGION_LENGTH__+0x634>
     a38:	9e 01       	movw	r18, r28
     a3a:	29 5b       	subi	r18, 0xB9	; 185
     a3c:	3f 4f       	sbci	r19, 0xFF	; 255
     a3e:	f9 01       	movw	r30, r18
     a40:	91 83       	std	Z+1, r25	; 0x01
     a42:	80 83       	st	Z, r24
     a44:	ce 01       	movw	r24, r28
     a46:	8b 5b       	subi	r24, 0xBB	; 187
     a48:	9f 4f       	sbci	r25, 0xFF	; 255
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a4a:	9e 01       	movw	r18, r28
     a4c:	2b 5b       	subi	r18, 0xBB	; 187
     a4e:	3f 4f       	sbci	r19, 0xFF	; 255
     a50:	f9 01       	movw	r30, r18
     a52:	20 81       	ld	r18, Z
     a54:	31 81       	ldd	r19, Z+1	; 0x01
     a56:	21 50       	subi	r18, 0x01	; 1
     a58:	31 09       	sbc	r19, r1
     a5a:	fc 01       	movw	r30, r24
     a5c:	31 83       	std	Z+1, r19	; 0x01
     a5e:	20 83       	st	Z, r18
     a60:	ce 01       	movw	r24, r28
     a62:	8b 5b       	subi	r24, 0xBB	; 187
     a64:	9f 4f       	sbci	r25, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a66:	fc 01       	movw	r30, r24
     a68:	80 81       	ld	r24, Z
     a6a:	91 81       	ldd	r25, Z+1	; 0x01
     a6c:	89 2b       	or	r24, r25
     a6e:	a1 f6       	brne	.-88     	; 0xa18 <__LOCK_REGION_LENGTH__+0x618>
     a70:	2b c0       	rjmp	.+86     	; 0xac8 <__LOCK_REGION_LENGTH__+0x6c8>
     a72:	8e 01       	movw	r16, r28
     a74:	0b 5b       	subi	r16, 0xBB	; 187
     a76:	1f 4f       	sbci	r17, 0xFF	; 255
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a78:	ce 01       	movw	r24, r28
     a7a:	8f 5b       	subi	r24, 0xBF	; 191
     a7c:	9f 4f       	sbci	r25, 0xFF	; 255
     a7e:	fc 01       	movw	r30, r24
     a80:	60 81       	ld	r22, Z
     a82:	71 81       	ldd	r23, Z+1	; 0x01
     a84:	82 81       	ldd	r24, Z+2	; 0x02
     a86:	93 81       	ldd	r25, Z+3	; 0x03
     a88:	5a d3       	rcall	.+1716   	; 0x113e <__fixunssfsi>
     a8a:	dc 01       	movw	r26, r24
     a8c:	cb 01       	movw	r24, r22
     a8e:	f8 01       	movw	r30, r16
     a90:	91 83       	std	Z+1, r25	; 0x01
     a92:	80 83       	st	Z, r24
     a94:	ce 01       	movw	r24, r28
     a96:	87 5b       	subi	r24, 0xB7	; 183
     a98:	9f 4f       	sbci	r25, 0xFF	; 255
     a9a:	9e 01       	movw	r18, r28
     a9c:	2b 5b       	subi	r18, 0xBB	; 187
     a9e:	3f 4f       	sbci	r19, 0xFF	; 255
     aa0:	f9 01       	movw	r30, r18
     aa2:	20 81       	ld	r18, Z
     aa4:	31 81       	ldd	r19, Z+1	; 0x01
     aa6:	fc 01       	movw	r30, r24
     aa8:	31 83       	std	Z+1, r19	; 0x01
     aaa:	20 83       	st	Z, r18
     aac:	ce 01       	movw	r24, r28
     aae:	87 5b       	subi	r24, 0xB7	; 183
     ab0:	9f 4f       	sbci	r25, 0xFF	; 255
     ab2:	fc 01       	movw	r30, r24
     ab4:	80 81       	ld	r24, Z
     ab6:	91 81       	ldd	r25, Z+1	; 0x01
     ab8:	01 97       	sbiw	r24, 0x01	; 1
     aba:	f1 f7       	brne	.-4      	; 0xab8 <__LOCK_REGION_LENGTH__+0x6b8>
     abc:	9e 01       	movw	r18, r28
     abe:	27 5b       	subi	r18, 0xB7	; 183
     ac0:	3f 4f       	sbci	r19, 0xFF	; 255
     ac2:	f9 01       	movw	r30, r18
     ac4:	91 83       	std	Z+1, r25	; 0x01
     ac6:	80 83       	st	Z, r24
            _delay_ms(500);
            PORTB = 0x00;
     ac8:	85 e2       	ldi	r24, 0x25	; 37
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	fc 01       	movw	r30, r24
     ace:	10 82       	st	Z, r1
        }
        
        // execute
        switch (mode) {
     ad0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     ad4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     ad8:	82 30       	cpi	r24, 0x02	; 2
     ada:	91 05       	cpc	r25, r1
     adc:	71 f0       	breq	.+28     	; 0xafa <__LOCK_REGION_LENGTH__+0x6fa>
     ade:	83 30       	cpi	r24, 0x03	; 3
     ae0:	91 05       	cpc	r25, r1
     ae2:	1c f4       	brge	.+6      	; 0xaea <__LOCK_REGION_LENGTH__+0x6ea>
     ae4:	01 97       	sbiw	r24, 0x01	; 1
     ae6:	39 f0       	breq	.+14     	; 0xaf6 <__LOCK_REGION_LENGTH__+0x6f6>
     ae8:	0d c0       	rjmp	.+26     	; 0xb04 <__LOCK_REGION_LENGTH__+0x704>
     aea:	83 30       	cpi	r24, 0x03	; 3
     aec:	91 05       	cpc	r25, r1
     aee:	39 f0       	breq	.+14     	; 0xafe <__LOCK_REGION_LENGTH__+0x6fe>
     af0:	04 97       	sbiw	r24, 0x04	; 4
     af2:	31 f0       	breq	.+12     	; 0xb00 <__LOCK_REGION_LENGTH__+0x700>
     af4:	07 c0       	rjmp	.+14     	; 0xb04 <__LOCK_REGION_LENGTH__+0x704>
            case 1:
                testTasterLed();
     af6:	78 d2       	rcall	.+1264   	; 0xfe8 <testTasterLed>
     af8:	0a c0       	rjmp	.+20     	; 0xb0e <__LOCK_REGION_LENGTH__+0x70e>
                break;
     afa:	6f d1       	rcall	.+734    	; 0xdda <testBoard>
            case 2:
                testBoard();
     afc:	08 c0       	rjmp	.+16     	; 0xb0e <__LOCK_REGION_LENGTH__+0x70e>
     afe:	14 d0       	rcall	.+40     	; 0xb28 <lauflicht>
                break;
     b00:	ef d0       	rcall	.+478    	; 0xce0 <increment>
            case 3:
                lauflicht();
     b02:	05 c0       	rjmp	.+10     	; 0xb0e <__LOCK_REGION_LENGTH__+0x70e>
     b04:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
            case 4:
                increment();
     b08:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
                break;
            default:
                mode = 0;
     b0c:	00 00       	nop
     b0e:	00 00       	nop
     b10:	cc 5a       	subi	r28, 0xAC	; 172
     b12:	df 4f       	sbci	r29, 0xFF	; 255
                break;
     b14:	0f b6       	in	r0, 0x3f	; 63
        }
    }
}
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	08 95       	ret

00000b28 <lauflicht>:
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
 Starting at Led0, the Led next to the current led will turn on at the same time the current led turns off.
 If last led is reached, the direction will change
 
 Only one led is active at once
 */
void lauflicht() {
     b30:	60 97       	sbiw	r28, 0x10	; 16
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
    static int laufCount = 0;
    static int direction = 0;   // 0=right, 1=left
    
    if (direction) {    // left
     b3c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <direction.1779>
     b40:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <direction.1779+0x1>
     b44:	89 2b       	or	r24, r25
     b46:	f1 f0       	breq	.+60     	; 0xb84 <lauflicht+0x5c>
        if (laufCount <= 1) {
     b48:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <laufCount.1778>
     b4c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <laufCount.1778+0x1>
     b50:	02 97       	sbiw	r24, 0x02	; 2
     b52:	74 f4       	brge	.+28     	; 0xb70 <lauflicht+0x48>
            direction = 0;
     b54:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <direction.1779+0x1>
     b58:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <direction.1779>
            laufCount++;
     b5c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <laufCount.1778>
     b60:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <laufCount.1778+0x1>
     b64:	01 96       	adiw	r24, 0x01	; 1
     b66:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <laufCount.1778+0x1>
     b6a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <laufCount.1778>
     b6e:	29 c0       	rjmp	.+82     	; 0xbc2 <lauflicht+0x9a>
        } else {
            laufCount--;
     b70:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <laufCount.1778>
     b74:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <laufCount.1778+0x1>
     b78:	01 97       	sbiw	r24, 0x01	; 1
     b7a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <laufCount.1778+0x1>
     b7e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <laufCount.1778>
     b82:	1f c0       	rjmp	.+62     	; 0xbc2 <lauflicht+0x9a>
        }
    }else { // right
        if (laufCount >= 8) {
     b84:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <laufCount.1778>
     b88:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <laufCount.1778+0x1>
     b8c:	08 97       	sbiw	r24, 0x08	; 8
     b8e:	84 f0       	brlt	.+32     	; 0xbb0 <lauflicht+0x88>
            direction = 1;
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <direction.1779+0x1>
     b98:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <direction.1779>
            laufCount--;
     b9c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <laufCount.1778>
     ba0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <laufCount.1778+0x1>
     ba4:	01 97       	sbiw	r24, 0x01	; 1
     ba6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <laufCount.1778+0x1>
     baa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <laufCount.1778>
     bae:	09 c0       	rjmp	.+18     	; 0xbc2 <lauflicht+0x9a>
        } else {
            laufCount++;
     bb0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <laufCount.1778>
     bb4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <laufCount.1778+0x1>
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <laufCount.1778+0x1>
     bbe:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <laufCount.1778>
        }
    }
    
    // create byte
    int ledByte = 1;
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	9a 83       	std	Y+2, r25	; 0x02
     bc8:	89 83       	std	Y+1, r24	; 0x01
    ledByte = ledByte << (laufCount - 1);
     bca:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <laufCount.1778>
     bce:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <laufCount.1778+0x1>
     bd2:	9c 01       	movw	r18, r24
     bd4:	21 50       	subi	r18, 0x01	; 1
     bd6:	31 09       	sbc	r19, r1
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
     bda:	9a 81       	ldd	r25, Y+2	; 0x02
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <lauflicht+0xba>
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	2a 95       	dec	r18
     be4:	e2 f7       	brpl	.-8      	; 0xbde <lauflicht+0xb6>
     be6:	9a 83       	std	Y+2, r25	; 0x02
     be8:	89 83       	std	Y+1, r24	; 0x01
    
    // set Port
    PORTB = ledByte;
     bea:	85 e2       	ldi	r24, 0x25	; 37
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	29 81       	ldd	r18, Y+1	; 0x01
     bf0:	fc 01       	movw	r30, r24
     bf2:	20 83       	st	Z, r18
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	a8 e4       	ldi	r26, 0x48	; 72
     bfa:	b3 e4       	ldi	r27, 0x43	; 67
     bfc:	8b 83       	std	Y+3, r24	; 0x03
     bfe:	9c 83       	std	Y+4, r25	; 0x04
     c00:	ad 83       	std	Y+5, r26	; 0x05
     c02:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	4a e7       	ldi	r20, 0x7A	; 122
     c0a:	53 e4       	ldi	r21, 0x43	; 67
     c0c:	6b 81       	ldd	r22, Y+3	; 0x03
     c0e:	7c 81       	ldd	r23, Y+4	; 0x04
     c10:	8d 81       	ldd	r24, Y+5	; 0x05
     c12:	9e 81       	ldd	r25, Y+6	; 0x06
     c14:	11 d3       	rcall	.+1570   	; 0x1238 <__mulsf3>
     c16:	dc 01       	movw	r26, r24
     c18:	cb 01       	movw	r24, r22
     c1a:	8f 83       	std	Y+7, r24	; 0x07
     c1c:	98 87       	std	Y+8, r25	; 0x08
     c1e:	a9 87       	std	Y+9, r26	; 0x09
     c20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	40 e8       	ldi	r20, 0x80	; 128
     c28:	5f e3       	ldi	r21, 0x3F	; 63
     c2a:	6f 81       	ldd	r22, Y+7	; 0x07
     c2c:	78 85       	ldd	r23, Y+8	; 0x08
     c2e:	89 85       	ldd	r24, Y+9	; 0x09
     c30:	9a 85       	ldd	r25, Y+10	; 0x0a
     c32:	81 d2       	rcall	.+1282   	; 0x1136 <__cmpsf2>
     c34:	88 23       	and	r24, r24
     c36:	2c f4       	brge	.+10     	; 0xc42 <lauflicht+0x11a>
		__ticks = 1;
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	9c 87       	std	Y+12, r25	; 0x0c
     c3e:	8b 87       	std	Y+11, r24	; 0x0b
     c40:	3b c0       	rjmp	.+118    	; 0xcb8 <lauflicht+0x190>
	else if (__tmp > 65535)
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	3f ef       	ldi	r19, 0xFF	; 255
     c46:	4f e7       	ldi	r20, 0x7F	; 127
     c48:	57 e4       	ldi	r21, 0x47	; 71
     c4a:	6f 81       	ldd	r22, Y+7	; 0x07
     c4c:	78 85       	ldd	r23, Y+8	; 0x08
     c4e:	89 85       	ldd	r24, Y+9	; 0x09
     c50:	9a 85       	ldd	r25, Y+10	; 0x0a
     c52:	ee d2       	rcall	.+1500   	; 0x1230 <__gesf2>
     c54:	18 16       	cp	r1, r24
     c56:	3c f5       	brge	.+78     	; 0xca6 <lauflicht+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	40 e2       	ldi	r20, 0x20	; 32
     c5e:	51 e4       	ldi	r21, 0x41	; 65
     c60:	6b 81       	ldd	r22, Y+3	; 0x03
     c62:	7c 81       	ldd	r23, Y+4	; 0x04
     c64:	8d 81       	ldd	r24, Y+5	; 0x05
     c66:	9e 81       	ldd	r25, Y+6	; 0x06
     c68:	e7 d2       	rcall	.+1486   	; 0x1238 <__mulsf3>
     c6a:	dc 01       	movw	r26, r24
     c6c:	cb 01       	movw	r24, r22
     c6e:	bc 01       	movw	r22, r24
     c70:	cd 01       	movw	r24, r26
     c72:	65 d2       	rcall	.+1226   	; 0x113e <__fixunssfsi>
     c74:	dc 01       	movw	r26, r24
     c76:	cb 01       	movw	r24, r22
     c78:	9c 87       	std	Y+12, r25	; 0x0c
     c7a:	8b 87       	std	Y+11, r24	; 0x0b
     c7c:	0f c0       	rjmp	.+30     	; 0xc9c <lauflicht+0x174>
     c7e:	89 e1       	ldi	r24, 0x19	; 25
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	9e 87       	std	Y+14, r25	; 0x0e
     c84:	8d 87       	std	Y+13, r24	; 0x0d
     c86:	8d 85       	ldd	r24, Y+13	; 0x0d
     c88:	9e 85       	ldd	r25, Y+14	; 0x0e
     c8a:	01 97       	sbiw	r24, 0x01	; 1
     c8c:	f1 f7       	brne	.-4      	; 0xc8a <lauflicht+0x162>
     c8e:	9e 87       	std	Y+14, r25	; 0x0e
     c90:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c92:	8b 85       	ldd	r24, Y+11	; 0x0b
     c94:	9c 85       	ldd	r25, Y+12	; 0x0c
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	9c 87       	std	Y+12, r25	; 0x0c
     c9a:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c9c:	8b 85       	ldd	r24, Y+11	; 0x0b
     c9e:	9c 85       	ldd	r25, Y+12	; 0x0c
     ca0:	89 2b       	or	r24, r25
     ca2:	69 f7       	brne	.-38     	; 0xc7e <lauflicht+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ca4:	13 c0       	rjmp	.+38     	; 0xccc <lauflicht+0x1a4>
     ca6:	6f 81       	ldd	r22, Y+7	; 0x07
     ca8:	78 85       	ldd	r23, Y+8	; 0x08
     caa:	89 85       	ldd	r24, Y+9	; 0x09
     cac:	9a 85       	ldd	r25, Y+10	; 0x0a
     cae:	47 d2       	rcall	.+1166   	; 0x113e <__fixunssfsi>
     cb0:	dc 01       	movw	r26, r24
     cb2:	cb 01       	movw	r24, r22
     cb4:	9c 87       	std	Y+12, r25	; 0x0c
     cb6:	8b 87       	std	Y+11, r24	; 0x0b
     cb8:	8b 85       	ldd	r24, Y+11	; 0x0b
     cba:	9c 85       	ldd	r25, Y+12	; 0x0c
     cbc:	98 8b       	std	Y+16, r25	; 0x10
     cbe:	8f 87       	std	Y+15, r24	; 0x0f
     cc0:	8f 85       	ldd	r24, Y+15	; 0x0f
     cc2:	98 89       	ldd	r25, Y+16	; 0x10
     cc4:	01 97       	sbiw	r24, 0x01	; 1
     cc6:	f1 f7       	brne	.-4      	; 0xcc4 <lauflicht+0x19c>
     cc8:	98 8b       	std	Y+16, r25	; 0x10
     cca:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(200);
}
     ccc:	00 00       	nop
     cce:	60 96       	adiw	r28, 0x10	; 16
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	08 95       	ret

00000ce0 <increment>:

/**
 Increment if button 1 is pressed, decrement if button 2 is pressed.
 Value of count will display with leds. if count is dez 5, 5 leds will turn on
 */
void increment() {
     ce0:	cf 93       	push	r28
     ce2:	df 93       	push	r29
     ce4:	00 d0       	rcall	.+0      	; 0xce6 <increment+0x6>
     ce6:	00 d0       	rcall	.+0      	; 0xce8 <increment+0x8>
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
    static int count = 0;
    static int lockt1 = 0, lockt2 = 0;
    
    // If button is pressed and lock is released
    if (!lockt1 && Taster1_get()) {
     cec:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lockt1.1784>
     cf0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <lockt1.1784+0x1>
     cf4:	89 2b       	or	r24, r25
     cf6:	c9 f4       	brne	.+50     	; 0xd2a <increment+0x4a>
     cf8:	e7 da       	rcall	.-2610   	; 0x2c8 <Taster1_get>
     cfa:	89 2b       	or	r24, r25
     cfc:	b1 f0       	breq	.+44     	; 0xd2a <increment+0x4a>
        //count to max 8
        if (count <= 8) {
     cfe:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count.1783>
     d02:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count.1783+0x1>
     d06:	09 97       	sbiw	r24, 0x09	; 9
     d08:	4c f4       	brge	.+18     	; 0xd1c <increment+0x3c>
            count++;
     d0a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count.1783>
     d0e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count.1783+0x1>
     d12:	01 96       	adiw	r24, 0x01	; 1
     d14:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <count.1783+0x1>
     d18:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <count.1783>
        }
        // lock
        lockt1 = 1;
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <lockt1.1784+0x1>
     d24:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <lockt1.1784>
     d28:	1f c0       	rjmp	.+62     	; 0xd68 <increment+0x88>
    }else if (!lockt2 && Taster2_get()) {
     d2a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lockt2.1785>
     d2e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lockt2.1785+0x1>
     d32:	89 2b       	or	r24, r25
     d34:	c9 f4       	brne	.+50     	; 0xd68 <increment+0x88>
     d36:	e3 da       	rcall	.-2618   	; 0x2fe <Taster2_get>
     d38:	89 2b       	or	r24, r25
     d3a:	b1 f0       	breq	.+44     	; 0xd68 <increment+0x88>
        //count to min 0
        if (count > 0) {
     d3c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count.1783>
     d40:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count.1783+0x1>
     d44:	18 16       	cp	r1, r24
     d46:	19 06       	cpc	r1, r25
     d48:	4c f4       	brge	.+18     	; 0xd5c <increment+0x7c>
            count--;
     d4a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count.1783>
     d4e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count.1783+0x1>
     d52:	01 97       	sbiw	r24, 0x01	; 1
     d54:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <count.1783+0x1>
     d58:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <count.1783>
        }
        // lock
        lockt2 = 1;
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <lockt2.1785+0x1>
     d64:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lockt2.1785>
    }
    
    // if button is released, release lock
    if (!Taster1_get()) {
     d68:	af da       	rcall	.-2722   	; 0x2c8 <Taster1_get>
     d6a:	89 2b       	or	r24, r25
     d6c:	21 f4       	brne	.+8      	; 0xd76 <increment+0x96>
        lockt1 = 0;
     d6e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <lockt1.1784+0x1>
     d72:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <lockt1.1784>
    }
    if (!Taster2_get()) {
     d76:	c3 da       	rcall	.-2682   	; 0x2fe <Taster2_get>
     d78:	89 2b       	or	r24, r25
     d7a:	21 f4       	brne	.+8      	; 0xd84 <increment+0xa4>
        lockt2 = 0;
     d7c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lockt2.1785+0x1>
     d80:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lockt2.1785>
    }
    
    // shift as many ones as count to byte
    int ledByte = 0;
     d84:	1a 82       	std	Y+2, r1	; 0x02
     d86:	19 82       	std	Y+1, r1	; 0x01
    for (int i = 0; i < count; i++) {
     d88:	1c 82       	std	Y+4, r1	; 0x04
     d8a:	1b 82       	std	Y+3, r1	; 0x03
     d8c:	10 c0       	rjmp	.+32     	; 0xdae <increment+0xce>
        ledByte = ledByte << 1;
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	9a 81       	ldd	r25, Y+2	; 0x02
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	9a 83       	std	Y+2, r25	; 0x02
     d98:	89 83       	std	Y+1, r24	; 0x01
        ledByte++;
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	9a 81       	ldd	r25, Y+2	; 0x02
     d9e:	01 96       	adiw	r24, 0x01	; 1
     da0:	9a 83       	std	Y+2, r25	; 0x02
     da2:	89 83       	std	Y+1, r24	; 0x01
        lockt2 = 0;
    }
    
    // shift as many ones as count to byte
    int ledByte = 0;
    for (int i = 0; i < count; i++) {
     da4:	8b 81       	ldd	r24, Y+3	; 0x03
     da6:	9c 81       	ldd	r25, Y+4	; 0x04
     da8:	01 96       	adiw	r24, 0x01	; 1
     daa:	9c 83       	std	Y+4, r25	; 0x04
     dac:	8b 83       	std	Y+3, r24	; 0x03
     dae:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count.1783>
     db2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count.1783+0x1>
     db6:	2b 81       	ldd	r18, Y+3	; 0x03
     db8:	3c 81       	ldd	r19, Y+4	; 0x04
     dba:	28 17       	cp	r18, r24
     dbc:	39 07       	cpc	r19, r25
     dbe:	3c f3       	brlt	.-50     	; 0xd8e <increment+0xae>
        ledByte = ledByte << 1;
        ledByte++;
    }
    // set Port
    PORTB = ledByte;
     dc0:	85 e2       	ldi	r24, 0x25	; 37
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	29 81       	ldd	r18, Y+1	; 0x01
     dc6:	fc 01       	movw	r30, r24
     dc8:	20 83       	st	Z, r18
}
     dca:	00 00       	nop
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	08 95       	ret

00000dda <testBoard>:

/**
 Switches PORTB on and off with a delay off 500 ms
 */
void testBoard() {
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
     de2:	6c 97       	sbiw	r28, 0x1c	; 28
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	f8 94       	cli
     de8:	de bf       	out	0x3e, r29	; 62
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	cd bf       	out	0x3d, r28	; 61
    static int state_testBoard = 0;
    if (state_testBoard) {
     dee:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <state_testBoard.1797>
     df2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <state_testBoard.1797+0x1>
     df6:	89 2b       	or	r24, r25
     df8:	09 f4       	brne	.+2      	; 0xdfc <testBoard+0x22>
     dfa:	75 c0       	rjmp	.+234    	; 0xee6 <testBoard+0x10c>
		state_testBoard = 0;
     dfc:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <state_testBoard.1797+0x1>
     e00:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <state_testBoard.1797>
        PORTB = 0x00;
     e04:	85 e2       	ldi	r24, 0x25	; 37
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	fc 01       	movw	r30, r24
     e0a:	10 82       	st	Z, r1
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	aa ef       	ldi	r26, 0xFA	; 250
     e12:	b3 e4       	ldi	r27, 0x43	; 67
     e14:	8d 83       	std	Y+5, r24	; 0x05
     e16:	9e 83       	std	Y+6, r25	; 0x06
     e18:	af 83       	std	Y+7, r26	; 0x07
     e1a:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	4a e7       	ldi	r20, 0x7A	; 122
     e22:	53 e4       	ldi	r21, 0x43	; 67
     e24:	6d 81       	ldd	r22, Y+5	; 0x05
     e26:	7e 81       	ldd	r23, Y+6	; 0x06
     e28:	8f 81       	ldd	r24, Y+7	; 0x07
     e2a:	98 85       	ldd	r25, Y+8	; 0x08
     e2c:	05 d2       	rcall	.+1034   	; 0x1238 <__mulsf3>
     e2e:	dc 01       	movw	r26, r24
     e30:	cb 01       	movw	r24, r22
     e32:	89 87       	std	Y+9, r24	; 0x09
     e34:	9a 87       	std	Y+10, r25	; 0x0a
     e36:	ab 87       	std	Y+11, r26	; 0x0b
     e38:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	40 e8       	ldi	r20, 0x80	; 128
     e40:	5f e3       	ldi	r21, 0x3F	; 63
     e42:	69 85       	ldd	r22, Y+9	; 0x09
     e44:	7a 85       	ldd	r23, Y+10	; 0x0a
     e46:	8b 85       	ldd	r24, Y+11	; 0x0b
     e48:	9c 85       	ldd	r25, Y+12	; 0x0c
     e4a:	75 d1       	rcall	.+746    	; 0x1136 <__cmpsf2>
     e4c:	88 23       	and	r24, r24
     e4e:	2c f4       	brge	.+10     	; 0xe5a <testBoard+0x80>
		__ticks = 1;
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	9e 87       	std	Y+14, r25	; 0x0e
     e56:	8d 87       	std	Y+13, r24	; 0x0d
     e58:	3b c0       	rjmp	.+118    	; 0xed0 <testBoard+0xf6>
	else if (__tmp > 65535)
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	3f ef       	ldi	r19, 0xFF	; 255
     e5e:	4f e7       	ldi	r20, 0x7F	; 127
     e60:	57 e4       	ldi	r21, 0x47	; 71
     e62:	69 85       	ldd	r22, Y+9	; 0x09
     e64:	7a 85       	ldd	r23, Y+10	; 0x0a
     e66:	8b 85       	ldd	r24, Y+11	; 0x0b
     e68:	9c 85       	ldd	r25, Y+12	; 0x0c
     e6a:	e2 d1       	rcall	.+964    	; 0x1230 <__gesf2>
     e6c:	18 16       	cp	r1, r24
     e6e:	3c f5       	brge	.+78     	; 0xebe <testBoard+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	40 e2       	ldi	r20, 0x20	; 32
     e76:	51 e4       	ldi	r21, 0x41	; 65
     e78:	6d 81       	ldd	r22, Y+5	; 0x05
     e7a:	7e 81       	ldd	r23, Y+6	; 0x06
     e7c:	8f 81       	ldd	r24, Y+7	; 0x07
     e7e:	98 85       	ldd	r25, Y+8	; 0x08
     e80:	db d1       	rcall	.+950    	; 0x1238 <__mulsf3>
     e82:	dc 01       	movw	r26, r24
     e84:	cb 01       	movw	r24, r22
     e86:	bc 01       	movw	r22, r24
     e88:	cd 01       	movw	r24, r26
     e8a:	59 d1       	rcall	.+690    	; 0x113e <__fixunssfsi>
     e8c:	dc 01       	movw	r26, r24
     e8e:	cb 01       	movw	r24, r22
     e90:	9e 87       	std	Y+14, r25	; 0x0e
     e92:	8d 87       	std	Y+13, r24	; 0x0d
     e94:	0f c0       	rjmp	.+30     	; 0xeb4 <testBoard+0xda>
     e96:	89 e1       	ldi	r24, 0x19	; 25
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	98 8b       	std	Y+16, r25	; 0x10
     e9c:	8f 87       	std	Y+15, r24	; 0x0f
     e9e:	8f 85       	ldd	r24, Y+15	; 0x0f
     ea0:	98 89       	ldd	r25, Y+16	; 0x10
     ea2:	01 97       	sbiw	r24, 0x01	; 1
     ea4:	f1 f7       	brne	.-4      	; 0xea2 <testBoard+0xc8>
     ea6:	98 8b       	std	Y+16, r25	; 0x10
     ea8:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eaa:	8d 85       	ldd	r24, Y+13	; 0x0d
     eac:	9e 85       	ldd	r25, Y+14	; 0x0e
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	9e 87       	std	Y+14, r25	; 0x0e
     eb2:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb4:	8d 85       	ldd	r24, Y+13	; 0x0d
     eb6:	9e 85       	ldd	r25, Y+14	; 0x0e
     eb8:	89 2b       	or	r24, r25
     eba:	69 f7       	brne	.-38     	; 0xe96 <testBoard+0xbc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ebc:	8b c0       	rjmp	.+278    	; 0xfd4 <testBoard+0x1fa>
     ebe:	69 85       	ldd	r22, Y+9	; 0x09
     ec0:	7a 85       	ldd	r23, Y+10	; 0x0a
     ec2:	8b 85       	ldd	r24, Y+11	; 0x0b
     ec4:	9c 85       	ldd	r25, Y+12	; 0x0c
     ec6:	3b d1       	rcall	.+630    	; 0x113e <__fixunssfsi>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	9e 87       	std	Y+14, r25	; 0x0e
     ece:	8d 87       	std	Y+13, r24	; 0x0d
     ed0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ed2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed4:	9a 8b       	std	Y+18, r25	; 0x12
     ed6:	89 8b       	std	Y+17, r24	; 0x11
     ed8:	89 89       	ldd	r24, Y+17	; 0x11
     eda:	9a 89       	ldd	r25, Y+18	; 0x12
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	f1 f7       	brne	.-4      	; 0xedc <testBoard+0x102>
     ee0:	9a 8b       	std	Y+18, r25	; 0x12
     ee2:	89 8b       	std	Y+17, r24	; 0x11
    }else {
		state_testBoard = 1;
        PORTB = 0xFF;
        _delay_ms(500);
    }
}
     ee4:	77 c0       	rjmp	.+238    	; 0xfd4 <testBoard+0x1fa>
    if (state_testBoard) {
		state_testBoard = 0;
        PORTB = 0x00;
        _delay_ms(500);
    }else {
		state_testBoard = 1;
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <state_testBoard.1797+0x1>
     eee:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state_testBoard.1797>
        PORTB = 0xFF;
     ef2:	85 e2       	ldi	r24, 0x25	; 37
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	2f ef       	ldi	r18, 0xFF	; 255
     ef8:	fc 01       	movw	r30, r24
     efa:	20 83       	st	Z, r18
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	aa ef       	ldi	r26, 0xFA	; 250
     f02:	b3 e4       	ldi	r27, 0x43	; 67
     f04:	89 83       	std	Y+1, r24	; 0x01
     f06:	9a 83       	std	Y+2, r25	; 0x02
     f08:	ab 83       	std	Y+3, r26	; 0x03
     f0a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	4a e7       	ldi	r20, 0x7A	; 122
     f12:	53 e4       	ldi	r21, 0x43	; 67
     f14:	69 81       	ldd	r22, Y+1	; 0x01
     f16:	7a 81       	ldd	r23, Y+2	; 0x02
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	9c 81       	ldd	r25, Y+4	; 0x04
     f1c:	8d d1       	rcall	.+794    	; 0x1238 <__mulsf3>
     f1e:	dc 01       	movw	r26, r24
     f20:	cb 01       	movw	r24, r22
     f22:	8b 8b       	std	Y+19, r24	; 0x13
     f24:	9c 8b       	std	Y+20, r25	; 0x14
     f26:	ad 8b       	std	Y+21, r26	; 0x15
     f28:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	40 e8       	ldi	r20, 0x80	; 128
     f30:	5f e3       	ldi	r21, 0x3F	; 63
     f32:	6b 89       	ldd	r22, Y+19	; 0x13
     f34:	7c 89       	ldd	r23, Y+20	; 0x14
     f36:	8d 89       	ldd	r24, Y+21	; 0x15
     f38:	9e 89       	ldd	r25, Y+22	; 0x16
     f3a:	fd d0       	rcall	.+506    	; 0x1136 <__cmpsf2>
     f3c:	88 23       	and	r24, r24
     f3e:	2c f4       	brge	.+10     	; 0xf4a <testBoard+0x170>
		__ticks = 1;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	98 8f       	std	Y+24, r25	; 0x18
     f46:	8f 8b       	std	Y+23, r24	; 0x17
     f48:	3b c0       	rjmp	.+118    	; 0xfc0 <testBoard+0x1e6>
	else if (__tmp > 65535)
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	3f ef       	ldi	r19, 0xFF	; 255
     f4e:	4f e7       	ldi	r20, 0x7F	; 127
     f50:	57 e4       	ldi	r21, 0x47	; 71
     f52:	6b 89       	ldd	r22, Y+19	; 0x13
     f54:	7c 89       	ldd	r23, Y+20	; 0x14
     f56:	8d 89       	ldd	r24, Y+21	; 0x15
     f58:	9e 89       	ldd	r25, Y+22	; 0x16
     f5a:	6a d1       	rcall	.+724    	; 0x1230 <__gesf2>
     f5c:	18 16       	cp	r1, r24
     f5e:	3c f5       	brge	.+78     	; 0xfae <testBoard+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	40 e2       	ldi	r20, 0x20	; 32
     f66:	51 e4       	ldi	r21, 0x41	; 65
     f68:	69 81       	ldd	r22, Y+1	; 0x01
     f6a:	7a 81       	ldd	r23, Y+2	; 0x02
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	9c 81       	ldd	r25, Y+4	; 0x04
     f70:	63 d1       	rcall	.+710    	; 0x1238 <__mulsf3>
     f72:	dc 01       	movw	r26, r24
     f74:	cb 01       	movw	r24, r22
     f76:	bc 01       	movw	r22, r24
     f78:	cd 01       	movw	r24, r26
     f7a:	e1 d0       	rcall	.+450    	; 0x113e <__fixunssfsi>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	98 8f       	std	Y+24, r25	; 0x18
     f82:	8f 8b       	std	Y+23, r24	; 0x17
     f84:	0f c0       	rjmp	.+30     	; 0xfa4 <testBoard+0x1ca>
     f86:	89 e1       	ldi	r24, 0x19	; 25
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	9a 8f       	std	Y+26, r25	; 0x1a
     f8c:	89 8f       	std	Y+25, r24	; 0x19
     f8e:	89 8d       	ldd	r24, Y+25	; 0x19
     f90:	9a 8d       	ldd	r25, Y+26	; 0x1a
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	f1 f7       	brne	.-4      	; 0xf92 <testBoard+0x1b8>
     f96:	9a 8f       	std	Y+26, r25	; 0x1a
     f98:	89 8f       	std	Y+25, r24	; 0x19
     f9a:	8f 89       	ldd	r24, Y+23	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f9c:	98 8d       	ldd	r25, Y+24	; 0x18
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	98 8f       	std	Y+24, r25	; 0x18
     fa2:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa4:	8f 89       	ldd	r24, Y+23	; 0x17
     fa6:	98 8d       	ldd	r25, Y+24	; 0x18
     fa8:	89 2b       	or	r24, r25
     faa:	69 f7       	brne	.-38     	; 0xf86 <testBoard+0x1ac>
        _delay_ms(500);
    }
}
     fac:	13 c0       	rjmp	.+38     	; 0xfd4 <testBoard+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fae:	6b 89       	ldd	r22, Y+19	; 0x13
     fb0:	7c 89       	ldd	r23, Y+20	; 0x14
     fb2:	8d 89       	ldd	r24, Y+21	; 0x15
     fb4:	9e 89       	ldd	r25, Y+22	; 0x16
     fb6:	c3 d0       	rcall	.+390    	; 0x113e <__fixunssfsi>
     fb8:	dc 01       	movw	r26, r24
     fba:	cb 01       	movw	r24, r22
     fbc:	98 8f       	std	Y+24, r25	; 0x18
     fbe:	8f 8b       	std	Y+23, r24	; 0x17
     fc0:	8f 89       	ldd	r24, Y+23	; 0x17
     fc2:	98 8d       	ldd	r25, Y+24	; 0x18
     fc4:	9c 8f       	std	Y+28, r25	; 0x1c
     fc6:	8b 8f       	std	Y+27, r24	; 0x1b
     fc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fca:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fcc:	01 97       	sbiw	r24, 0x01	; 1
     fce:	f1 f7       	brne	.-4      	; 0xfcc <testBoard+0x1f2>
     fd0:	9c 8f       	std	Y+28, r25	; 0x1c
     fd2:	8b 8f       	std	Y+27, r24	; 0x1b
     fd4:	00 00       	nop
     fd6:	6c 96       	adiw	r28, 0x1c	; 28
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	de bf       	out	0x3e, r29	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	cd bf       	out	0x3d, r28	; 61
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	08 95       	ret

00000fe8 <testTasterLed>:
     fe8:	cf 93       	push	r28

/**
 If button1 is pressed, led1 will turn on. If button2 is pressed, led2 will turn on and so on...
 */
void testTasterLed() {
     fea:	df 93       	push	r29
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
    if (Taster1_get()) {
     ff0:	6b d9       	rcall	.-3370   	; 0x2c8 <Taster1_get>
     ff2:	89 2b       	or	r24, r25
     ff4:	11 f0       	breq	.+4      	; 0xffa <testTasterLed+0x12>
        Led1_On();
     ff6:	92 d8       	rcall	.-3804   	; 0x11c <Led1_On>
     ff8:	01 c0       	rjmp	.+2      	; 0xffc <testTasterLed+0x14>
    }else {
        Led1_Off();
     ffa:	a1 d8       	rcall	.-3774   	; 0x13e <Led1_Off>
     ffc:	80 d9       	rcall	.-3328   	; 0x2fe <Taster2_get>
    }
    if (Taster2_get()) {
     ffe:	89 2b       	or	r24, r25
    1000:	11 f0       	breq	.+4      	; 0x1006 <testTasterLed+0x1e>
        Led2_On();
    1002:	ae d8       	rcall	.-3748   	; 0x160 <Led2_On>
    1004:	01 c0       	rjmp	.+2      	; 0x1008 <testTasterLed+0x20>
    }else {
        Led2_Off();
    1006:	bd d8       	rcall	.-3718   	; 0x182 <Led2_Off>
    }
    if (Taster3_get()) {
    1008:	92 d9       	rcall	.-3292   	; 0x32e <Taster3_get>
    100a:	89 2b       	or	r24, r25
    100c:	11 f0       	breq	.+4      	; 0x1012 <testTasterLed+0x2a>
        Led3_On();
    100e:	ca d8       	rcall	.-3692   	; 0x1a4 <Led3_On>
    1010:	01 c0       	rjmp	.+2      	; 0x1014 <testTasterLed+0x2c>
        }else {
        Led3_Off();
    1012:	d9 d8       	rcall	.-3662   	; 0x1c6 <Led3_Off>
    1014:	a4 d9       	rcall	.-3256   	; 0x35e <Taster4_get>
    }
    if (Taster4_get()) {
    1016:	89 2b       	or	r24, r25
    1018:	11 f0       	breq	.+4      	; 0x101e <testTasterLed+0x36>
    101a:	e6 d8       	rcall	.-3636   	; 0x1e8 <Led4_On>
    101c:	01 c0       	rjmp	.+2      	; 0x1020 <testTasterLed+0x38>
        Led4_On();
    101e:	f5 d8       	rcall	.-3606   	; 0x20a <Led4_Off>
    1020:	00 00       	nop
        }else {
        Led4_Off();
    }
}
    1022:	df 91       	pop	r29
        Led3_Off();
    }
    if (Taster4_get()) {
        Led4_On();
        }else {
        Led4_Off();
    1024:	cf 91       	pop	r28
    1026:	08 95       	ret

00001028 <Timer_init>:
    }
}
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    
    // enable global interrupt
    sei();

    return temp_timer_count;
}
    1030:	04 d0       	rcall	.+8      	; 0x103a <Timer_init_withoutStruct>
    1032:	00 00       	nop
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	08 95       	ret

0000103a <Timer_init_withoutStruct>:
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	85 e4       	ldi	r24, 0x45	; 69
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	25 e4       	ldi	r18, 0x45	; 69
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	f9 01       	movw	r30, r18
    104c:	20 81       	ld	r18, Z
    104e:	27 7f       	andi	r18, 0xF7	; 247
    1050:	fc 01       	movw	r30, r24
    1052:	20 83       	st	Z, r18
    1054:	84 e4       	ldi	r24, 0x44	; 68
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	24 e4       	ldi	r18, 0x44	; 68
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	f9 01       	movw	r30, r18
    105e:	20 81       	ld	r18, Z
    1060:	22 60       	ori	r18, 0x02	; 2
    1062:	fc 01       	movw	r30, r24
    1064:	20 83       	st	Z, r18
    1066:	84 e4       	ldi	r24, 0x44	; 68
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	24 e4       	ldi	r18, 0x44	; 68
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	f9 01       	movw	r30, r18
    1070:	20 81       	ld	r18, Z
    1072:	2e 7f       	andi	r18, 0xFE	; 254
    1074:	fc 01       	movw	r30, r24
    1076:	20 83       	st	Z, r18
    1078:	87 e4       	ldi	r24, 0x47	; 71
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	2c e7       	ldi	r18, 0x7C	; 124
    107e:	fc 01       	movw	r30, r24
    1080:	20 83       	st	Z, r18
    1082:	85 e4       	ldi	r24, 0x45	; 69
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	25 e4       	ldi	r18, 0x45	; 69
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	f9 01       	movw	r30, r18
    108c:	20 81       	ld	r18, Z
    108e:	2b 7f       	andi	r18, 0xFB	; 251
    1090:	fc 01       	movw	r30, r24
    1092:	20 83       	st	Z, r18
    1094:	85 e4       	ldi	r24, 0x45	; 69
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	25 e4       	ldi	r18, 0x45	; 69
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	f9 01       	movw	r30, r18
    109e:	20 81       	ld	r18, Z
    10a0:	22 60       	ori	r18, 0x02	; 2
    10a2:	fc 01       	movw	r30, r24
    10a4:	20 83       	st	Z, r18
    10a6:	85 e4       	ldi	r24, 0x45	; 69
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	25 e4       	ldi	r18, 0x45	; 69
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	f9 01       	movw	r30, r18
    10b0:	20 81       	ld	r18, Z
    10b2:	2e 7f       	andi	r18, 0xFE	; 254
    10b4:	fc 01       	movw	r30, r24
    10b6:	20 83       	st	Z, r18
    10b8:	8e e6       	ldi	r24, 0x6E	; 110
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	2e e6       	ldi	r18, 0x6E	; 110
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	f9 01       	movw	r30, r18
    10c2:	20 81       	ld	r18, Z
    10c4:	2b 7f       	andi	r18, 0xFB	; 251
    10c6:	fc 01       	movw	r30, r24
    10c8:	20 83       	st	Z, r18
    10ca:	8e e6       	ldi	r24, 0x6E	; 110
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	2e e6       	ldi	r18, 0x6E	; 110
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	f9 01       	movw	r30, r18
    10d4:	20 81       	ld	r18, Z
    10d6:	22 60       	ori	r18, 0x02	; 2
    10d8:	fc 01       	movw	r30, r24
    10da:	20 83       	st	Z, r18
    10dc:	8e e6       	ldi	r24, 0x6E	; 110
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	2e e6       	ldi	r18, 0x6E	; 110
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	f9 01       	movw	r30, r18
    10e6:	20 81       	ld	r18, Z
    10e8:	2e 7f       	andi	r18, 0xFE	; 254
    10ea:	fc 01       	movw	r30, r24
    10ec:	20 83       	st	Z, r18
    10ee:	00 00       	nop
    10f0:	df 91       	pop	r29
    10f2:	cf 91       	pop	r28
    10f4:	08 95       	ret

000010f6 <__vector_16>:
 ( not used atm)
 Timer compare A interrput:
 - increase timer_count
 - if timer_count is at max of uint16, set it to 0
 */
ISR(TIMER0_COMPA_vect){
    10f6:	1f 92       	push	r1
    10f8:	0f 92       	push	r0
    10fa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    10fe:	0f 92       	push	r0
    1100:	11 24       	eor	r1, r1
    1102:	8f 93       	push	r24
    1104:	9f 93       	push	r25
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    timer_count++;
    110e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <timer_count>
    1112:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <timer_count+0x1>
    1116:	01 96       	adiw	r24, 0x01	; 1
    1118:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timer_count+0x1>
    111c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timer_count>
}
    1120:	00 00       	nop
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	9f 91       	pop	r25
    1128:	8f 91       	pop	r24
    112a:	0f 90       	pop	r0
    112c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1130:	0f 90       	pop	r0
    1132:	1f 90       	pop	r1
    1134:	18 95       	reti

00001136 <__cmpsf2>:
    1136:	2f d0       	rcall	.+94     	; 0x1196 <__fp_cmp>
    1138:	08 f4       	brcc	.+2      	; 0x113c <__cmpsf2+0x6>
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	08 95       	ret

0000113e <__fixunssfsi>:
    113e:	57 d0       	rcall	.+174    	; 0x11ee <__fp_splitA>
    1140:	88 f0       	brcs	.+34     	; 0x1164 <__fixunssfsi+0x26>
    1142:	9f 57       	subi	r25, 0x7F	; 127
    1144:	90 f0       	brcs	.+36     	; 0x116a <__fixunssfsi+0x2c>
    1146:	b9 2f       	mov	r27, r25
    1148:	99 27       	eor	r25, r25
    114a:	b7 51       	subi	r27, 0x17	; 23
    114c:	a0 f0       	brcs	.+40     	; 0x1176 <__fixunssfsi+0x38>
    114e:	d1 f0       	breq	.+52     	; 0x1184 <__fixunssfsi+0x46>
    1150:	66 0f       	add	r22, r22
    1152:	77 1f       	adc	r23, r23
    1154:	88 1f       	adc	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	1a f0       	brmi	.+6      	; 0x1160 <__fixunssfsi+0x22>
    115a:	ba 95       	dec	r27
    115c:	c9 f7       	brne	.-14     	; 0x1150 <__fixunssfsi+0x12>
    115e:	12 c0       	rjmp	.+36     	; 0x1184 <__fixunssfsi+0x46>
    1160:	b1 30       	cpi	r27, 0x01	; 1
    1162:	81 f0       	breq	.+32     	; 0x1184 <__fixunssfsi+0x46>
    1164:	5e d0       	rcall	.+188    	; 0x1222 <__fp_zero>
    1166:	b1 e0       	ldi	r27, 0x01	; 1
    1168:	08 95       	ret
    116a:	5b c0       	rjmp	.+182    	; 0x1222 <__fp_zero>
    116c:	67 2f       	mov	r22, r23
    116e:	78 2f       	mov	r23, r24
    1170:	88 27       	eor	r24, r24
    1172:	b8 5f       	subi	r27, 0xF8	; 248
    1174:	39 f0       	breq	.+14     	; 0x1184 <__fixunssfsi+0x46>
    1176:	b9 3f       	cpi	r27, 0xF9	; 249
    1178:	cc f3       	brlt	.-14     	; 0x116c <__fixunssfsi+0x2e>
    117a:	86 95       	lsr	r24
    117c:	77 95       	ror	r23
    117e:	67 95       	ror	r22
    1180:	b3 95       	inc	r27
    1182:	d9 f7       	brne	.-10     	; 0x117a <__fixunssfsi+0x3c>
    1184:	3e f4       	brtc	.+14     	; 0x1194 <__fixunssfsi+0x56>
    1186:	90 95       	com	r25
    1188:	80 95       	com	r24
    118a:	70 95       	com	r23
    118c:	61 95       	neg	r22
    118e:	7f 4f       	sbci	r23, 0xFF	; 255
    1190:	8f 4f       	sbci	r24, 0xFF	; 255
    1192:	9f 4f       	sbci	r25, 0xFF	; 255
    1194:	08 95       	ret

00001196 <__fp_cmp>:
    1196:	99 0f       	add	r25, r25
    1198:	00 08       	sbc	r0, r0
    119a:	55 0f       	add	r21, r21
    119c:	aa 0b       	sbc	r26, r26
    119e:	e0 e8       	ldi	r30, 0x80	; 128
    11a0:	fe ef       	ldi	r31, 0xFE	; 254
    11a2:	16 16       	cp	r1, r22
    11a4:	17 06       	cpc	r1, r23
    11a6:	e8 07       	cpc	r30, r24
    11a8:	f9 07       	cpc	r31, r25
    11aa:	c0 f0       	brcs	.+48     	; 0x11dc <__fp_cmp+0x46>
    11ac:	12 16       	cp	r1, r18
    11ae:	13 06       	cpc	r1, r19
    11b0:	e4 07       	cpc	r30, r20
    11b2:	f5 07       	cpc	r31, r21
    11b4:	98 f0       	brcs	.+38     	; 0x11dc <__fp_cmp+0x46>
    11b6:	62 1b       	sub	r22, r18
    11b8:	73 0b       	sbc	r23, r19
    11ba:	84 0b       	sbc	r24, r20
    11bc:	95 0b       	sbc	r25, r21
    11be:	39 f4       	brne	.+14     	; 0x11ce <__fp_cmp+0x38>
    11c0:	0a 26       	eor	r0, r26
    11c2:	61 f0       	breq	.+24     	; 0x11dc <__fp_cmp+0x46>
    11c4:	23 2b       	or	r18, r19
    11c6:	24 2b       	or	r18, r20
    11c8:	25 2b       	or	r18, r21
    11ca:	21 f4       	brne	.+8      	; 0x11d4 <__fp_cmp+0x3e>
    11cc:	08 95       	ret
    11ce:	0a 26       	eor	r0, r26
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <__fp_cmp+0x3e>
    11d2:	a1 40       	sbci	r26, 0x01	; 1
    11d4:	a6 95       	lsr	r26
    11d6:	8f ef       	ldi	r24, 0xFF	; 255
    11d8:	81 1d       	adc	r24, r1
    11da:	81 1d       	adc	r24, r1
    11dc:	08 95       	ret

000011de <__fp_split3>:
    11de:	57 fd       	sbrc	r21, 7
    11e0:	90 58       	subi	r25, 0x80	; 128
    11e2:	44 0f       	add	r20, r20
    11e4:	55 1f       	adc	r21, r21
    11e6:	59 f0       	breq	.+22     	; 0x11fe <__fp_splitA+0x10>
    11e8:	5f 3f       	cpi	r21, 0xFF	; 255
    11ea:	71 f0       	breq	.+28     	; 0x1208 <__fp_splitA+0x1a>
    11ec:	47 95       	ror	r20

000011ee <__fp_splitA>:
    11ee:	88 0f       	add	r24, r24
    11f0:	97 fb       	bst	r25, 7
    11f2:	99 1f       	adc	r25, r25
    11f4:	61 f0       	breq	.+24     	; 0x120e <__fp_splitA+0x20>
    11f6:	9f 3f       	cpi	r25, 0xFF	; 255
    11f8:	79 f0       	breq	.+30     	; 0x1218 <__fp_splitA+0x2a>
    11fa:	87 95       	ror	r24
    11fc:	08 95       	ret
    11fe:	12 16       	cp	r1, r18
    1200:	13 06       	cpc	r1, r19
    1202:	14 06       	cpc	r1, r20
    1204:	55 1f       	adc	r21, r21
    1206:	f2 cf       	rjmp	.-28     	; 0x11ec <__fp_split3+0xe>
    1208:	46 95       	lsr	r20
    120a:	f1 df       	rcall	.-30     	; 0x11ee <__fp_splitA>
    120c:	08 c0       	rjmp	.+16     	; 0x121e <__fp_splitA+0x30>
    120e:	16 16       	cp	r1, r22
    1210:	17 06       	cpc	r1, r23
    1212:	18 06       	cpc	r1, r24
    1214:	99 1f       	adc	r25, r25
    1216:	f1 cf       	rjmp	.-30     	; 0x11fa <__fp_splitA+0xc>
    1218:	86 95       	lsr	r24
    121a:	71 05       	cpc	r23, r1
    121c:	61 05       	cpc	r22, r1
    121e:	08 94       	sec
    1220:	08 95       	ret

00001222 <__fp_zero>:
    1222:	e8 94       	clt

00001224 <__fp_szero>:
    1224:	bb 27       	eor	r27, r27
    1226:	66 27       	eor	r22, r22
    1228:	77 27       	eor	r23, r23
    122a:	cb 01       	movw	r24, r22
    122c:	97 f9       	bld	r25, 7
    122e:	08 95       	ret

00001230 <__gesf2>:
    1230:	b2 df       	rcall	.-156    	; 0x1196 <__fp_cmp>
    1232:	08 f4       	brcc	.+2      	; 0x1236 <__gesf2+0x6>
    1234:	8f ef       	ldi	r24, 0xFF	; 255
    1236:	08 95       	ret

00001238 <__mulsf3>:
    1238:	0b d0       	rcall	.+22     	; 0x1250 <__mulsf3x>
    123a:	78 c0       	rjmp	.+240    	; 0x132c <__fp_round>
    123c:	69 d0       	rcall	.+210    	; 0x1310 <__fp_pscA>
    123e:	28 f0       	brcs	.+10     	; 0x124a <__mulsf3+0x12>
    1240:	6e d0       	rcall	.+220    	; 0x131e <__fp_pscB>
    1242:	18 f0       	brcs	.+6      	; 0x124a <__mulsf3+0x12>
    1244:	95 23       	and	r25, r21
    1246:	09 f0       	breq	.+2      	; 0x124a <__mulsf3+0x12>
    1248:	5a c0       	rjmp	.+180    	; 0x12fe <__fp_inf>
    124a:	5f c0       	rjmp	.+190    	; 0x130a <__fp_nan>
    124c:	11 24       	eor	r1, r1
    124e:	ea cf       	rjmp	.-44     	; 0x1224 <__fp_szero>

00001250 <__mulsf3x>:
    1250:	c6 df       	rcall	.-116    	; 0x11de <__fp_split3>
    1252:	a0 f3       	brcs	.-24     	; 0x123c <__mulsf3+0x4>

00001254 <__mulsf3_pse>:
    1254:	95 9f       	mul	r25, r21
    1256:	d1 f3       	breq	.-12     	; 0x124c <__mulsf3+0x14>
    1258:	95 0f       	add	r25, r21
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	55 1f       	adc	r21, r21
    125e:	62 9f       	mul	r22, r18
    1260:	f0 01       	movw	r30, r0
    1262:	72 9f       	mul	r23, r18
    1264:	bb 27       	eor	r27, r27
    1266:	f0 0d       	add	r31, r0
    1268:	b1 1d       	adc	r27, r1
    126a:	63 9f       	mul	r22, r19
    126c:	aa 27       	eor	r26, r26
    126e:	f0 0d       	add	r31, r0
    1270:	b1 1d       	adc	r27, r1
    1272:	aa 1f       	adc	r26, r26
    1274:	64 9f       	mul	r22, r20
    1276:	66 27       	eor	r22, r22
    1278:	b0 0d       	add	r27, r0
    127a:	a1 1d       	adc	r26, r1
    127c:	66 1f       	adc	r22, r22
    127e:	82 9f       	mul	r24, r18
    1280:	22 27       	eor	r18, r18
    1282:	b0 0d       	add	r27, r0
    1284:	a1 1d       	adc	r26, r1
    1286:	62 1f       	adc	r22, r18
    1288:	73 9f       	mul	r23, r19
    128a:	b0 0d       	add	r27, r0
    128c:	a1 1d       	adc	r26, r1
    128e:	62 1f       	adc	r22, r18
    1290:	83 9f       	mul	r24, r19
    1292:	a0 0d       	add	r26, r0
    1294:	61 1d       	adc	r22, r1
    1296:	22 1f       	adc	r18, r18
    1298:	74 9f       	mul	r23, r20
    129a:	33 27       	eor	r19, r19
    129c:	a0 0d       	add	r26, r0
    129e:	61 1d       	adc	r22, r1
    12a0:	23 1f       	adc	r18, r19
    12a2:	84 9f       	mul	r24, r20
    12a4:	60 0d       	add	r22, r0
    12a6:	21 1d       	adc	r18, r1
    12a8:	82 2f       	mov	r24, r18
    12aa:	76 2f       	mov	r23, r22
    12ac:	6a 2f       	mov	r22, r26
    12ae:	11 24       	eor	r1, r1
    12b0:	9f 57       	subi	r25, 0x7F	; 127
    12b2:	50 40       	sbci	r21, 0x00	; 0
    12b4:	8a f0       	brmi	.+34     	; 0x12d8 <__mulsf3_pse+0x84>
    12b6:	e1 f0       	breq	.+56     	; 0x12f0 <__mulsf3_pse+0x9c>
    12b8:	88 23       	and	r24, r24
    12ba:	4a f0       	brmi	.+18     	; 0x12ce <__mulsf3_pse+0x7a>
    12bc:	ee 0f       	add	r30, r30
    12be:	ff 1f       	adc	r31, r31
    12c0:	bb 1f       	adc	r27, r27
    12c2:	66 1f       	adc	r22, r22
    12c4:	77 1f       	adc	r23, r23
    12c6:	88 1f       	adc	r24, r24
    12c8:	91 50       	subi	r25, 0x01	; 1
    12ca:	50 40       	sbci	r21, 0x00	; 0
    12cc:	a9 f7       	brne	.-22     	; 0x12b8 <__mulsf3_pse+0x64>
    12ce:	9e 3f       	cpi	r25, 0xFE	; 254
    12d0:	51 05       	cpc	r21, r1
    12d2:	70 f0       	brcs	.+28     	; 0x12f0 <__mulsf3_pse+0x9c>
    12d4:	14 c0       	rjmp	.+40     	; 0x12fe <__fp_inf>
    12d6:	a6 cf       	rjmp	.-180    	; 0x1224 <__fp_szero>
    12d8:	5f 3f       	cpi	r21, 0xFF	; 255
    12da:	ec f3       	brlt	.-6      	; 0x12d6 <__mulsf3_pse+0x82>
    12dc:	98 3e       	cpi	r25, 0xE8	; 232
    12de:	dc f3       	brlt	.-10     	; 0x12d6 <__mulsf3_pse+0x82>
    12e0:	86 95       	lsr	r24
    12e2:	77 95       	ror	r23
    12e4:	67 95       	ror	r22
    12e6:	b7 95       	ror	r27
    12e8:	f7 95       	ror	r31
    12ea:	e7 95       	ror	r30
    12ec:	9f 5f       	subi	r25, 0xFF	; 255
    12ee:	c1 f7       	brne	.-16     	; 0x12e0 <__mulsf3_pse+0x8c>
    12f0:	fe 2b       	or	r31, r30
    12f2:	88 0f       	add	r24, r24
    12f4:	91 1d       	adc	r25, r1
    12f6:	96 95       	lsr	r25
    12f8:	87 95       	ror	r24
    12fa:	97 f9       	bld	r25, 7
    12fc:	08 95       	ret

000012fe <__fp_inf>:
    12fe:	97 f9       	bld	r25, 7
    1300:	9f 67       	ori	r25, 0x7F	; 127
    1302:	80 e8       	ldi	r24, 0x80	; 128
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	08 95       	ret

0000130a <__fp_nan>:
    130a:	9f ef       	ldi	r25, 0xFF	; 255
    130c:	80 ec       	ldi	r24, 0xC0	; 192
    130e:	08 95       	ret

00001310 <__fp_pscA>:
    1310:	00 24       	eor	r0, r0
    1312:	0a 94       	dec	r0
    1314:	16 16       	cp	r1, r22
    1316:	17 06       	cpc	r1, r23
    1318:	18 06       	cpc	r1, r24
    131a:	09 06       	cpc	r0, r25
    131c:	08 95       	ret

0000131e <__fp_pscB>:
    131e:	00 24       	eor	r0, r0
    1320:	0a 94       	dec	r0
    1322:	12 16       	cp	r1, r18
    1324:	13 06       	cpc	r1, r19
    1326:	14 06       	cpc	r1, r20
    1328:	05 06       	cpc	r0, r21
    132a:	08 95       	ret

0000132c <__fp_round>:
    132c:	09 2e       	mov	r0, r25
    132e:	03 94       	inc	r0
    1330:	00 0c       	add	r0, r0
    1332:	11 f4       	brne	.+4      	; 0x1338 <__fp_round+0xc>
    1334:	88 23       	and	r24, r24
    1336:	52 f0       	brmi	.+20     	; 0x134c <__fp_round+0x20>
    1338:	bb 0f       	add	r27, r27
    133a:	40 f4       	brcc	.+16     	; 0x134c <__fp_round+0x20>
    133c:	bf 2b       	or	r27, r31
    133e:	11 f4       	brne	.+4      	; 0x1344 <__fp_round+0x18>
    1340:	60 ff       	sbrs	r22, 0
    1342:	04 c0       	rjmp	.+8      	; 0x134c <__fp_round+0x20>
    1344:	6f 5f       	subi	r22, 0xFF	; 255
    1346:	7f 4f       	sbci	r23, 0xFF	; 255
    1348:	8f 4f       	sbci	r24, 0xFF	; 255
    134a:	9f 4f       	sbci	r25, 0xFF	; 255
    134c:	08 95       	ret

0000134e <_exit>:
    134e:	f8 94       	cli

00001350 <__stop_program>:
    1350:	ff cf       	rjmp	.-2      	; 0x1350 <__stop_program>
