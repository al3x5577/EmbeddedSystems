
EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000991  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e1  00000000  00000000  00000e35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000059c  00000000  00000000  00001516  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000031c  00000000  00000000  00001ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045f  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000581  00000000  00000000  0000222f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  000027b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	14 d1       	rcall	.+552    	; 0x29e <main>
  76:	32 c1       	rjmp	.+612    	; 0x2dc <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <Led_init>:

#include "Led.h"

void Led_init(void) {
  7a:	cf 93       	push	r28
  7c:	df 93       	push	r29
  7e:	cd b7       	in	r28, 0x3d	; 61
  80:	de b7       	in	r29, 0x3e	; 62
    // Set PORTB to outputs
    DDRB = 0xFF;
  82:	84 e2       	ldi	r24, 0x24	; 36
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	2f ef       	ldi	r18, 0xFF	; 255
  88:	fc 01       	movw	r30, r24
  8a:	20 83       	st	Z, r18
}
  8c:	00 00       	nop
  8e:	df 91       	pop	r29
  90:	cf 91       	pop	r28
  92:	08 95       	ret

00000094 <Led1_On>:


/**
 led1 - ioB7
 */
void Led1_On(void) {
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 7);
  9c:	85 e2       	ldi	r24, 0x25	; 37
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	25 e2       	ldi	r18, 0x25	; 37
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	f9 01       	movw	r30, r18
  a6:	20 81       	ld	r18, Z
  a8:	20 68       	ori	r18, 0x80	; 128
  aa:	fc 01       	movw	r30, r24
  ac:	20 83       	st	Z, r18
}
  ae:	00 00       	nop
  b0:	df 91       	pop	r29
  b2:	cf 91       	pop	r28
  b4:	08 95       	ret

000000b6 <Led1_Off>:
void Led1_Off(void) {
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 7);
  be:	85 e2       	ldi	r24, 0x25	; 37
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	25 e2       	ldi	r18, 0x25	; 37
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	f9 01       	movw	r30, r18
  c8:	20 81       	ld	r18, Z
  ca:	2f 77       	andi	r18, 0x7F	; 127
  cc:	fc 01       	movw	r30, r24
  ce:	20 83       	st	Z, r18
}
  d0:	00 00       	nop
  d2:	df 91       	pop	r29
  d4:	cf 91       	pop	r28
  d6:	08 95       	ret

000000d8 <Led2_On>:

/**
led2 - ioB6
*/
void Led2_On(void) {
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 6);
  e0:	85 e2       	ldi	r24, 0x25	; 37
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	25 e2       	ldi	r18, 0x25	; 37
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	f9 01       	movw	r30, r18
  ea:	20 81       	ld	r18, Z
  ec:	20 64       	ori	r18, 0x40	; 64
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
}
  f2:	00 00       	nop
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <Led2_Off>:
void Led2_Off(void) {
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 6);
 102:	85 e2       	ldi	r24, 0x25	; 37
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	25 e2       	ldi	r18, 0x25	; 37
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	f9 01       	movw	r30, r18
 10c:	20 81       	ld	r18, Z
 10e:	2f 7b       	andi	r18, 0xBF	; 191
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18
}
 114:	00 00       	nop
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <Led3_On>:

/**
led3 - ioB5
*/
void Led3_On(void) {
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 5);
 124:	85 e2       	ldi	r24, 0x25	; 37
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	25 e2       	ldi	r18, 0x25	; 37
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	f9 01       	movw	r30, r18
 12e:	20 81       	ld	r18, Z
 130:	20 62       	ori	r18, 0x20	; 32
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
}
 136:	00 00       	nop
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <Led3_Off>:
void Led3_Off(void) {
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 5);
 146:	85 e2       	ldi	r24, 0x25	; 37
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	25 e2       	ldi	r18, 0x25	; 37
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	f9 01       	movw	r30, r18
 150:	20 81       	ld	r18, Z
 152:	2f 7d       	andi	r18, 0xDF	; 223
 154:	fc 01       	movw	r30, r24
 156:	20 83       	st	Z, r18
}
 158:	00 00       	nop
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <Led4_On>:

/**
led4 - ioB4
*/
void Led4_On(void) {
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
    PORTB |= (1 << 4);
 168:	85 e2       	ldi	r24, 0x25	; 37
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	25 e2       	ldi	r18, 0x25	; 37
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	f9 01       	movw	r30, r18
 172:	20 81       	ld	r18, Z
 174:	20 61       	ori	r18, 0x10	; 16
 176:	fc 01       	movw	r30, r24
 178:	20 83       	st	Z, r18
}
 17a:	00 00       	nop
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <Led4_Off>:
void Led4_Off(void) {
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	cd b7       	in	r28, 0x3d	; 61
 188:	de b7       	in	r29, 0x3e	; 62
    PORTB &= ~(1 << 4);
 18a:	85 e2       	ldi	r24, 0x25	; 37
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	25 e2       	ldi	r18, 0x25	; 37
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	f9 01       	movw	r30, r18
 194:	20 81       	ld	r18, Z
 196:	2f 7e       	andi	r18, 0xEF	; 239
 198:	fc 01       	movw	r30, r24
 19a:	20 83       	st	Z, r18
}
 19c:	00 00       	nop
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <Taster_init>:
 t1 - ioD7
 t2 - ioD6
 t3 - ioD5
 t4 - ioC2
 */
void Taster_init() {
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
    DDRC |= (1 << 2);
 1ac:	87 e2       	ldi	r24, 0x27	; 39
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	27 e2       	ldi	r18, 0x27	; 39
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	f9 01       	movw	r30, r18
 1b6:	20 81       	ld	r18, Z
 1b8:	24 60       	ori	r18, 0x04	; 4
 1ba:	fc 01       	movw	r30, r24
 1bc:	20 83       	st	Z, r18
    DDRD |= (1 << 7) | (1 << 6) | (1 << 5);
 1be:	8a e2       	ldi	r24, 0x2A	; 42
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	2a e2       	ldi	r18, 0x2A	; 42
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	f9 01       	movw	r30, r18
 1c8:	20 81       	ld	r18, Z
 1ca:	20 6e       	ori	r18, 0xE0	; 224
 1cc:	fc 01       	movw	r30, r24
 1ce:	20 83       	st	Z, r18
}
 1d0:	00 00       	nop
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <Taster1_get>:

/**
 Taster1 - ioD7
 */
uint8_t Taster1_get(void) {
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	00 d0       	rcall	.+0      	; 0x1de <Taster1_get+0x6>
 1de:	cd b7       	in	r28, 0x3d	; 61
 1e0:	de b7       	in	r29, 0x3e	; 62
    int state = PIND;
 1e2:	89 e2       	ldi	r24, 0x29	; 41
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	fc 01       	movw	r30, r24
 1e8:	80 81       	ld	r24, Z
 1ea:	88 2f       	mov	r24, r24
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	9a 83       	std	Y+2, r25	; 0x02
 1f0:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<7)) == 0 ) {
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	9a 81       	ldd	r25, Y+2	; 0x02
 1f6:	80 78       	andi	r24, 0x80	; 128
 1f8:	99 27       	eor	r25, r25
 1fa:	89 2b       	or	r24, r25
 1fc:	11 f4       	brne	.+4      	; 0x202 <Taster1_get+0x2a>
        return RETURN_VALUE_LOW;
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	01 c0       	rjmp	.+2      	; 0x204 <Taster1_get+0x2c>
    } else {
        return RETURN_VALUE_HIGH;
 202:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 204:	0f 90       	pop	r0
 206:	0f 90       	pop	r0
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <Taster2_get>:

/**
Taster1 - ioD6
*/
uint8_t Taster2_get(void) {
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	1f 92       	push	r1
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
    uint8_t state = PIND;
 218:	89 e2       	ldi	r24, 0x29	; 41
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	fc 01       	movw	r30, r24
 21e:	80 81       	ld	r24, Z
 220:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<6)) == 0 ) {
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	88 2f       	mov	r24, r24
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	80 74       	andi	r24, 0x40	; 64
 22a:	99 27       	eor	r25, r25
 22c:	89 2b       	or	r24, r25
 22e:	11 f4       	brne	.+4      	; 0x234 <Taster2_get+0x26>
        return RETURN_VALUE_LOW;
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	01 c0       	rjmp	.+2      	; 0x236 <Taster2_get+0x28>
    } else {
        return RETURN_VALUE_HIGH;
 234:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 236:	0f 90       	pop	r0
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <Taster3_get>:

/**
Taster1 - ioD5
*/
uint8_t Taster3_get(void) {
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	1f 92       	push	r1
 244:	cd b7       	in	r28, 0x3d	; 61
 246:	de b7       	in	r29, 0x3e	; 62
    uint8_t state = PIND;
 248:	89 e2       	ldi	r24, 0x29	; 41
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	fc 01       	movw	r30, r24
 24e:	80 81       	ld	r24, Z
 250:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<5)) == 0 ) {
 252:	89 81       	ldd	r24, Y+1	; 0x01
 254:	88 2f       	mov	r24, r24
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	80 72       	andi	r24, 0x20	; 32
 25a:	99 27       	eor	r25, r25
 25c:	89 2b       	or	r24, r25
 25e:	11 f4       	brne	.+4      	; 0x264 <Taster3_get+0x26>
        return RETURN_VALUE_LOW;
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	01 c0       	rjmp	.+2      	; 0x266 <Taster3_get+0x28>
    } else {
        return RETURN_VALUE_HIGH;
 264:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 266:	0f 90       	pop	r0
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <Taster4_get>:

/**
Taster1 - ioC2
*/
uint8_t Taster4_get(void) {
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	1f 92       	push	r1
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
    uint8_t state = PINC;
 278:	86 e2       	ldi	r24, 0x26	; 38
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	fc 01       	movw	r30, r24
 27e:	80 81       	ld	r24, Z
 280:	89 83       	std	Y+1, r24	; 0x01
    if ( (state & (1<<2)) == 0 ) {
 282:	89 81       	ldd	r24, Y+1	; 0x01
 284:	88 2f       	mov	r24, r24
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	84 70       	andi	r24, 0x04	; 4
 28a:	99 27       	eor	r25, r25
 28c:	89 2b       	or	r24, r25
 28e:	11 f4       	brne	.+4      	; 0x294 <Taster4_get+0x26>
        return RETURN_VALUE_LOW;
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	01 c0       	rjmp	.+2      	; 0x296 <Taster4_get+0x28>
    } else {
        return RETURN_VALUE_HIGH;
 294:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 296:	0f 90       	pop	r0
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <main>:

#include "gpio/Taster.h"
#include "gpio/Led.h"


int main(void) {
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
	
    Taster_init();
 2a6:	7e df       	rcall	.-260    	; 0x1a4 <Taster_init>
    Led_init();
 2a8:	e8 de       	rcall	.-560    	; 0x7a <Led_init>
	
    while (1) {
        if (Taster1_get()) {
 2aa:	96 df       	rcall	.-212    	; 0x1d8 <Taster1_get>
 2ac:	88 23       	and	r24, r24
 2ae:	11 f0       	breq	.+4      	; 0x2b4 <main+0x16>
            Led1_On();
 2b0:	f1 de       	rcall	.-542    	; 0x94 <Led1_On>
 2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <main+0x18>
        }else {
			Led1_Off();
 2b4:	00 df       	rcall	.-512    	; 0xb6 <Led1_Off>
		}
        if (Taster2_get()) {
 2b6:	ab df       	rcall	.-170    	; 0x20e <Taster2_get>
 2b8:	88 23       	and	r24, r24
	        Led2_On();
 2ba:	11 f0       	breq	.+4      	; 0x2c0 <main+0x22>
 2bc:	0d df       	rcall	.-486    	; 0xd8 <Led2_On>
	    }else {
	        Led2_Off();
 2be:	01 c0       	rjmp	.+2      	; 0x2c2 <main+0x24>
        }
        if (Taster3_get()) {
 2c0:	1c df       	rcall	.-456    	; 0xfa <Led2_Off>
 2c2:	bd df       	rcall	.-134    	; 0x23e <Taster3_get>
 2c4:	88 23       	and	r24, r24
	        Led3_On();
 2c6:	11 f0       	breq	.+4      	; 0x2cc <main+0x2e>
 2c8:	29 df       	rcall	.-430    	; 0x11c <Led3_On>
 2ca:	01 c0       	rjmp	.+2      	; 0x2ce <main+0x30>
	        }else {
	        Led3_Off();
 2cc:	38 df       	rcall	.-400    	; 0x13e <Led3_Off>
 2ce:	cf df       	rcall	.-98     	; 0x26e <Taster4_get>
        }
		if (Taster4_get()) {
 2d0:	88 23       	and	r24, r24
 2d2:	11 f0       	breq	.+4      	; 0x2d8 <main+0x3a>
 2d4:	45 df       	rcall	.-374    	; 0x160 <Led4_On>
 2d6:	e9 cf       	rjmp	.-46     	; 0x2aa <main+0xc>
			Led4_On();
 2d8:	54 df       	rcall	.-344    	; 0x182 <Led4_Off>
 2da:	e7 cf       	rjmp	.-50     	; 0x2aa <main+0xc>

000002dc <_exit>:
 2dc:	f8 94       	cli

000002de <__stop_program>:
			}else {
			Led4_Off();
 2de:	ff cf       	rjmp	.-2      	; 0x2de <__stop_program>
